{"version":3,"sources":["../node_modules/three-js/index.js","../node_modules/three-js/three.js","../node_modules/webpack/buildin/amd-define.js","../node_modules/webpack/buildin/amd-options.js","../node_modules/three-js/addons/AdaptiveToneMappingPass.js","../node_modules/three-js/addons/BasicShader.js","../node_modules/three-js/addons/BleachBypassShader.js","../node_modules/three-js/addons/BlendShader.js","../node_modules/three-js/addons/BloomPass.js","../node_modules/three-js/addons/BokehPass.js","../node_modules/three-js/addons/BokehShader.js","../node_modules/three-js/addons/BokehShader2.js","../node_modules/three-js/addons/BrightnessContrastShader.js","../node_modules/three-js/addons/CanvasRenderer.js","../node_modules/three-js/addons/ColorCorrectionShader.js","../node_modules/three-js/addons/ColorifyShader.js","../node_modules/three-js/addons/ConvolutionShader.js","../node_modules/three-js/addons/CopyShader.js","../node_modules/three-js/addons/DDSLoader.js","../node_modules/three-js/addons/DOFMipMapShader.js","../node_modules/three-js/addons/DigitalGlitch.js","../node_modules/three-js/addons/DotScreenPass.js","../node_modules/three-js/addons/DotScreenShader.js","../node_modules/three-js/addons/EdgeShader.js","../node_modules/three-js/addons/EdgeShader2.js","../node_modules/three-js/addons/EffectComposer.js","../node_modules/three-js/addons/FXAAShader.js","../node_modules/three-js/addons/FilmPass.js","../node_modules/three-js/addons/FilmShader.js","../node_modules/three-js/addons/FocusShader.js","../node_modules/three-js/addons/FresnelShader.js","../node_modules/three-js/addons/GammaCorrectionShader.js","../node_modules/three-js/addons/GlitchPass.js","../node_modules/three-js/addons/HorizontalBlurShader.js","../node_modules/three-js/addons/HorizontalTiltShiftShader.js","../node_modules/three-js/addons/HueSaturationShader.js","../node_modules/three-js/addons/JSONLoader.js","../node_modules/three-js/addons/KaleidoShader.js","../node_modules/three-js/addons/LuminosityShader.js","../node_modules/three-js/addons/MTLLoader.js","../node_modules/three-js/addons/MarchingCubes.js","../node_modules/three-js/addons/MaskPass.js","../node_modules/three-js/addons/MirrorShader.js","../node_modules/three-js/addons/NormalMapShader.js","../node_modules/three-js/addons/OBJLoader.js","../node_modules/three-js/addons/OceanShaders.js","../node_modules/three-js/addons/OrbitControls.js","../node_modules/three-js/addons/ParallaxShader.js","../node_modules/three-js/addons/Projector.js","../node_modules/three-js/addons/RGBShiftShader.js","../node_modules/three-js/addons/RenderPass.js","../node_modules/three-js/addons/SSAOShader.js","../node_modules/three-js/addons/SVGLoader.js","../node_modules/three-js/addons/SavePass.js","../node_modules/three-js/addons/SepiaShader.js","../node_modules/three-js/addons/ShaderPass.js","../node_modules/three-js/addons/TechnicolorShader.js","../node_modules/three-js/addons/TexturePass.js","../node_modules/three-js/addons/ToneMapShader.js","../node_modules/three-js/addons/TriangleBlurShader.js","../node_modules/three-js/addons/UnpackDepthRGBAShader.js","../node_modules/three-js/addons/VerticalBlurShader.js","../node_modules/three-js/addons/VerticalTiltShiftShader.js","../node_modules/three-js/addons/VignetteShader.js"],"names":["self","THREE","__webpack_require__","module","exports","addons","Array","addonIndex","length","addon","Function","Error","__WEBPACK_AMD_DEFINE_RESULT__","REVISION","undefined","Number","EPSILON","Math","pow","sign","x","prototype","name","Object","defineProperty","get","this","toString","match","assign","target","TypeError","output","index","arguments","source","nextKey","hasOwnProperty","call","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","r","g","b","set","setRGB","constructor","value","copy","setHex","setStyle","setScalar","scalar","hex","floor","setHSL","hue2rgb","p","q","t","h","s","l","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","console","warn","m","exec","color","components","min","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","max","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","sub","multiply","multiplyScalar","lerp","alpha","equals","c","fromArray","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","y","z","w","_x","_y","_z","_w","onChangeCallback","quaternion","setFromEuler","euler","update","Euler","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","axis","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","v1","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","v","lengthSq","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","distanceToManhattan","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","d","qx","qy","qz","qw","ix","iy","iz","iw","project","matrix","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","vector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","start","end","line","distanceSq","distance","at","result","closestPointToPointParameter","startP","startEnd","point","clampToLine","startEnd2","closestPointToPoint","Box2","Infinity","setFromPoints","points","makeEmpty","i","il","expandByPoint","setFromCenterAndSize","halfSize","box","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","object","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","position","stride","InterleavedBufferAttribute","data","intersectsSphere","closestPoint","sphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","j","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","n","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","scale","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","near","far","makePerspective","fov","aspect","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","segCenter","segDir","diff","v0","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p1","p2","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","m1","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","split","uuid","rnd","random","join","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","radians","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","values","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","create","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","Date","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","test","layers","ascSort","_intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","intersectObject","sort","intersectObjects","objects","isArray","Object3D","Object3DIdCount","parent","DefaultUp","rotation","enumerable","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","q1","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","isRootObject","geometries","materials","textures","images","metadata","version","generator","JSON","stringify","material","extractFromCache","cache","key","parse","child","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","face","jl","computeBoundingBox","obj","fromBufferGeometry","positions","normals","uvs","uv","uvs2","uv2","tempNormals","tempUVs","tempUVs2","addFace","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","parameters","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","o","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","keys","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","apply","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingByName","_bindingsByRootAndName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByRoot","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","lastIndex","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","arraySlice","from","to","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","toLowerCase","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","bind","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","bone","searchSkeleton","subTreeNode","searchNodeSubtree","childNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","context","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","filter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","window","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","renderer","scene","generateMipmaps","texture","activeCubeFace","render","setRenderTarget","zoom","view","updateProjectionMatrix","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","cx","cy","zoomW","zoomH","scaleW","scaleH","focus","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","skew","StereoCamera","cameraL","cameraR","eyeRight","eyeLeft","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","DirectionalLight","shadow","DirectionalLightShadow","light","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","textureLoader","materialLoader","TextureLoader","MaterialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","emissiveMap","mapEmissiveRepeat","mapEmissiveOffset","mapEmissiveWrap","mapEmissiveAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","metalnessMap","mapMetalnessRepeat","mapMetalnessOffset","mapMetalnessWrap","mapMetalnessAnisotropy","roughnessMap","mapRoughnessRepeat","mapRoughnessOffset","mapRoughnessWrap","mapRoughnessAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","cached","itemStart","setTimeout","itemEnd","request","XMLHttpRequest","overrideMimeType","open","response","status","itemError","responseType","withCredentials","send","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","document","createElementNS","onload","URL","revokeObjectURL","src","blob","createObjectURL","JSONLoader","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","concat","morphAnimationClips","parseAnimations","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","flipY","getGeometry","getMaterial","Scene","SkinnedMesh","Group","levels","level","addLevel","isJPEG","search","CubeTextureLoader","urls","CubeTexture","loaded","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","clearCoat","clearCoatRoughness","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","unpackAlignment","canvas","toDataURL","getContext","drawImage","getDataURL","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","inverseMatrix","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","checkBufferGeometryIntersection","intersection","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","offsetMatrix","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","matrixPosition","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","background","overrideMaterial","autoUpdate","Fog","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","WebGLRenderer","_canvas","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","opaqueObjects","opaqueObjectsLastIndex","transparentObjects","transparentObjectsLastIndex","sprites","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphTargets","maxMorphNormals","_gl","_this","_currentProgram","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentScissor","_currentScissorTest","_currentViewport","_usedTextureUnits","_clearColor","_clearAlpha","_width","_height","_pixelRatio","_scissor","_scissorTest","_viewport","_frustum","_clipping","WebGLClipping","_clippingEnabled","_localClippingEnabled","_sphere","_projScreenMatrix","_vector3","_lights","ambient","directional","spot","hemi","shadows","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","onContextLost","WebGLExtensions","capabilities","WebGLCapabilities","state","WebGLState","paramThreeToGL","WebGLProperties","WebGLTextures","WebGLObjects","programCache","WebGLPrograms","lightCache","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","backgroundCamera","backgroundCamera2","backgroundPlaneMesh","PlaneBufferGeometry","backgroundBoxShader","backgroundBoxMesh","BoxBufferGeometry","getTargetPixelRatio","glClearColor","clearColor","setDefaultGLState","init","scissor","viewport","resetGLState","shadowMap","WebGLShadowMap","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","preventDefault","onMaterialDispose","releaseMaterialProgramReference","delete","deallocateMaterial","programInfo","program","releaseProgram","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","renderItem","isSphereViewable","numPlanes","negRad","renderObjects","renderList","ImmediateRenderObject","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","materialProperties","useCache","setState","numClippingPlanes","lightsHash","getParameters","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","getAttributes","numSupportedMorphTargets","numSupportedMorphNormals","uniform","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","initMaterial","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","refreshUniformsFog","uvScaleMap","WebGLRenderTarget","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","clientHeight","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsStandard","refreshUniformsPhysical","upload","dynUniforms","evalDynamic","extension","REPEAT","CLAMP_TO_EDGE","MIRRORED_REPEAT","NEAREST","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","DEPTH_COMPONENT","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","getContextAttributes","forceContextLoss","loseContext","getMaxAnisotropy","getPrecision","getPixelRatio","setPixelRatio","setSize","getSize","updateStyle","setViewport","setScissor","setScissorTest","boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","initAttributes","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","startIndex","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","projectObject","isObjectViewable","groupMaterial","beginShadows","lightShadowsLength","setupShadows","ll","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","setupLights","endShadows","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","allocTextureUnit","textureUnit","maxTextures","setTexture2D","warned","slot","setTexture","setTextureCube","setTextureCubeDynamic","getCurrentRenderTarget","__webglFramebuffer","setupRenderTarget","framebuffer","isCube","renderTargetProperties","scissorTest","bindFramebuffer","FRAMEBUFFER","textureProperties","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_POSITIVE_X","__webglTexture","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","depthBuffer","stencilBuffer","depthTexture","drawArraysInstancedANGLE","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","maxAnisotropy","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_MAX_ANISOTROPY_EXT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","deleteAttribute","deleteAttributes","property","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","updateAttribute","attributeProperties","usage","STATIC_DRAW","bufferSubData","updateBuffer","checkEdge","edges","list","TypeArray","WebGLProgram","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","getTexelEncodingFunction","getToneMappingFunction","toneMappingName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","flatShading","generateExtensions","customDefines","generateDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","getProgramParameter","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","nClipPlanes","nVertexUniforms","allocateBones","currentRenderTarget","envMapMode","pl","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lines","addLineNumbers","_renderer","_state","_lightShadows","_shadowMapSize","_maxShadowMapSize","_lookTarget","_lightPositionWorld","_renderList","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","useMorphing","useSkinning","depthMaterial","distanceMaterial","USE_SHADOWMAP","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","faceCount","BLEND","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","createTexture","bindTexture","texParameteri","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","texImage2D","emptyTextures","TEXTURE_2D","TEXTURE_CUBE_MAP","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","getCompressedTextureFormats","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","activeTexture","webglSlot","TEXTURE0","webglType","webglTexture","boundTexture","compressedTexImage2D","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","_infoMemory","_isWebGL2","WebGL2RenderingContext","clampToMaxSize","maxSize","filterFallback","onTextureDispose","__image__webglTextureCube","deleteTexture","__webglInit","deallocateTexture","onRenderTargetDispose","deleteFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","__version","complete","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","textureNeedsPowerOfTwo","HTMLImageElement","HTMLCanvasElement","makePowerOfTwo","isPowerOfTwoImage","glFormat","glType","setTextureParameters","mipmap","internalFormat","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","generateMipmap","uploadTexture","textureType","TEXTURE_WRAP_S","TEXTURE_WRAP_T","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","setupFrameBufferTexture","attachment","textureTarget","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","webglDepthTexture","setupDepthTexture","createRenderbuffer","isCompressed","isDataTexture","cubeImage","isTargetPowerOfTwo","createFramebuffer","emptyTexture","emptyCubeTexture","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","setValueT6a","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","next","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","spritePosition","spriteRotation","spriteScale","uvOffset","uvScale","fogType","fillStyle","fillRect","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","cCROSSap","bCROSScp","vertIndices","nv","triangulateShape","holes","removeDupEndPts","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","seg1Pt","seg2Pt","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","forEach","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","shape","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","indepHoles","intersectsHoleEdge","ihIdx","chkHole","hIdx","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","minShapeIndex","counter","h2","removeHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","__arcLengthDivisions","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","segmentLength","lens","cacheLengths","sums","resolution","EllipseCurve","SplineCurve","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPath","glyph","glyphs","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","ShapePath","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","String","ret","createPaths","shapes","toShapes","Path","currentPoint","fromPoints","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","firstPoint","lastPoint","subPaths","currentPath","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","point0","point1","point2","point3","twoPi","deltaAngle","samePoints","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","CubeGeometry","vertexCount","calculateVertexCount","indexCount","calculateIndexCount","vertexBufferOffset","uvBufferOffset","indexBufferOffset","numberOfVertices","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","tanTheta","indexRow","i3","generateTorso","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","thresholdDot","edge","sortFunction","vert1","vert2","face1","face2","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","amount","bevelThickness","bevelSize","bevelSegments","bevelEnabled","curveSegments","steps","extrudePath","extrudeByPath","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","reverse","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","smallest","tz","mat","MAX_VALUE","initialNormal3","PolyhedronGeometry","that","prepare","centroid","subdivide","azimuth","inclination","make","azi","correctUV","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","pointMap","addLine","addPoint","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","__webpack_amd_options__","AdaptiveToneMappingPass","adaptive","needsInit","luminanceRT","previousLuminanceRT","currentLuminanceRT","CopyShader","copyShader","copyUniforms","materialCopy","LuminosityShader","materialLuminance","adaptLuminanceShader","MIP_LEVEL_1X1","toFixed","lastLum","currentLum","tau","materialAdaptiveLum","ToneMapShader","materialToneMap","needsSwap","quad","writeBuffer","readBuffer","maskActive","tDiffuse","luminanceMap","setAdaptive","setAdaptionRate","rate","setMaxLuminance","maxLum","maxLuminance","setAverageLuminance","avgLum","averageLuminance","setMiddleGrey","middleGrey","BasicShader","BleachBypassShader","BlendShader","tDiffuse1","tDiffuse2","mixRatio","BloomPass","strength","kernelSize","sigma","renderTargetX","renderTargetY","ConvolutionShader","convolutionShader","convolutionUniforms","blurX","buildKernel","materialConvolution","KERNEL_SIZE_FLOAT","KERNEL_SIZE_INT","blurY","BokehPass","aperture","maxblur","innerWidth","innerHeight","renderTargetColor","renderTargetDepth","materialDepth","BokehShader","bokehShader","bokehUniforms","materialBokeh","renderToScreen","camera2","scene2","quad2","tColor","tDepth","textureWidth","textureHeight","focalDepth","fstop","showFocus","manualdof","vignetting","depthblur","fringe","znear","zfar","noise","dithering","pentagon","shaderFocus","focusCoords","BrightnessContrastShader","brightness","contrast","SpriteCanvasMaterial","_renderData","_elements","_v1","_v2","_v3","_v1x","_v1y","_v2x","_v2y","_v3x","_v3y","_uvs","_uv1x","_uv1y","_uv2x","_uv2y","_uv3x","_uv3y","_projector","createElement","_canvasWidth","_canvasHeight","_canvasWidthHalf","_canvasHeightHalf","_viewportX","_viewportY","_viewportWidth","_viewportHeight","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextStrokeStyle","_contextFillStyle","_contextLineWidth","_contextLineCap","_contextLineJoin","_contextLineDash","_color","RenderableVertex","_diffuseColor","_emissiveColor","_lightColor","_patterns","_clipBox","_clearBox","_elemBox","_ambientLight","_directionalLights","_pointLights","_centroid","_normal","_normalViewMatrix","renderSprite","element","setOpacity","dist","textureToPattern","setFillStyle","bitmap","ox","oy","save","rotate","setStrokeStyle","renderLine","beginPath","setLineCap","setLineJoin","colorStyle1","colorStyle2","grad","createLinearGradient","addColorStop","exception","stroke","setLineDash","renderFace3","positionWorld","lightPosition","calculateLight","normalModel","strokePath","fillPath","patternPath","vertexNormalsModel","fill","setTransform","repeatX","repeatY","createPattern","u0","u1","u2","idet","transform","expand","pixels","globalAlpha","globalCompositeOperation","lineCap","lineJoin","strokeStyle","sortElements","setClearColorHex","clearRect","projectScene","lightColor","calculateLights","el","RenderableSprite","RenderableLine","RenderableFace","ColorCorrectionShader","powRGB","mulRGB","addRGB","ColorifyShader","uImageIncrement","cKernel","gauss","exp","halfWidth","DDSLoader","loadMipmaps","dds","fourCCToInt32","charCodeAt","loadARGBMip","dataOffset","dataLength","srcBuffer","byteArray","blockBytes","FOURCC_DXT1","FOURCC_DXT3","FOURCC_DXT5","FOURCC_ETC1","header","fourCC","isRGBAUncompressed","fromCharCode","caps2","DOFMipMapShader","DigitalGlitch","tDisp","byp","seed","seed_x","seed_y","distortion_x","distortion_y","col_s","DotScreenPass","DotScreenShader","tSize","EdgeShader","EdgeShader2","EffectComposer","pixelRatio","renderTarget1","renderTarget2","passes","copyPass","ShaderPass","swapBuffers","addPass","pass","insertPass","MaskPass","ClearMaskPass","FXAAShader","FilmPass","noiseIntensity","scanlinesIntensity","scanlinesCount","grayscale","FilmShader","nIntensity","sIntensity","sCount","FocusShader","screenWidth","screenHeight","sampleDistance","waveFactor","FresnelShader","mRefractionRatio","mFresnelBias","mFresnelPower","mFresnelScale","GammaCorrectionShader","GlitchPass","dt_size","generateHeightmap","goWild","curF","generateTrigger","randX","data_arr","val","HorizontalBlurShader","HorizontalTiltShiftShader","HueSaturationShader","statusDomElement","_statusDomElement","KaleidoShader","sides","MTLLoader","setBaseUrl","baseUrl","setMaterialOptions","materialOptions","delimiter_pattern","materialsInfo","ss","materialCreator","MaterialCreator","setManager","setMaterials","materialsArray","nameLookup","convert","converted","mn","covmat","prop","lprop","normalizeRGB","ignoreZeroRGBs","preload","materialName","getAsArray","createMaterial_","MarchingCubes","enableUvs","enableColors","isolation","size2","size3","halfsize","yd","zd","field","normal_cache","vlist","nlist","maxCount","VIntX","pout","nout","isol","valp1","valp2","mu","nc","VIntY","q2","VIntZ","compNorm","q3","polygonize","fx","fy","fz","q1y","q1z","qyz","q1yz","cubeindex","field0","field1","field2","field3","field4","field5","field6","field7","edgeTable","fx2","fy2","fz2","o2","o3","numtris","triTable","posnormtriv","norm","begin","addBall","ballx","bally","ballz","subtract","zs","ys","xs","min_z","max_z","min_y","max_y","min_x","y_offset","z_offset","max_x","addPlaneX","xdiv","cxy","addPlaneY","ydiv","addPlaneZ","zdiv","cz","cyz","smin2","generateGeometry","geo","na","nb","nfaces","writeValue","clearValue","REPLACE","KEEP","MirrorShader","NormalMapShader","heightMap","OBJLoader","foundObjects","addObject","smooth","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addNormal","addUV","ua","ub","uc","ud","nd","ia","ib","ic","vertex_pattern","normal_pattern","uv_pattern","face_pattern1","face_pattern2","face_pattern3","face_pattern4","object_pattern","smoothing_pattern","timeEnd","varying","vUV","u_input","u_transformSize","u_subtransformSize","u_wind","u_resolution","u_size","u_phases","u_deltaTime","u_choppiness","u_initialSpectrum","u_displacementMap","u_normalMap","u_geometrySize","u_projectionMatrix","u_viewMatrix","u_cameraPosition","u_skyColor","u_oceanColor","u_sunDirection","u_exposure","vPos","OrbitControls","minZoom","maxZoom","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","keyPanSpeed","autoRotate","autoRotateSpeed","enableKeys","UP","BOTTOM","mouseButtons","ORBIT","ZOOM","PAN","target0","position0","zoom0","getPolarAngle","spherical","getAzimuthalAngle","changeEvent","STATE","NONE","quat","quatInverse","lastPosition","lastQuaternion","rotateLeft","sphericalDelta","panOffset","zoomChanged","EPS","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","ROTATE","DOLLY","TOUCH_ROTATE","TOUCH_DOLLY","TOUCH_PAN","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","rotateUp","panLeft","objectMatrix","panUp","pan","deltaX","deltaY","body","targetDistance","clientWidth","dollyIn","dollyScale","dollyOut","button","clientX","clientY","handleMouseDownRotate","handleMouseDownDolly","handleMouseDownPan","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","wheelDelta","handleMouseWheel","keyCode","handleKeyDown","touches","pageX","pageY","handleTouchStartRotate","handleTouchStartDolly","handleTouchStartPan","handleTouchMoveRotate","handleTouchMoveDolly","handleTouchMovePan","noZoom","noRotate","noPan","noKeys","staticMoving","dynamicDampingFactor","ParallaxShader","modes","none","steep","occlusion","relief","parallaxScale","parallaxMinLayers","parallaxMaxLayers","RenderableObject","vertexNormalsLength","_object","_objectCount","_vertex","_vertexCount","_face","_faceCount","_line","_lineCount","_sprite","_spriteCount","_modelMatrix","_objectPool","_objectPoolLength","_vertexPool","_vertexPoolLength","_facePool","_facePoolLength","_linePool","_linePoolLength","_spritePool","_spritePoolLength","_vector4","_boundingBox","_points3","_viewMatrix","_viewProjectionMatrix","_modelViewProjectionMatrix","_normalMatrix","_clippedVertex1PositionScreen","_clippedVertex2PositionScreen","projectVertex","invW","checkTriangleVisibility","checkBackfaceCulling","setObject","pushVertex","getNextVertexInPool","pushNormal","pushUv","pushLine","getNextLineInPool","pushTriangle","getNextFaceInPool","getNextSpriteInPool","painterSort","clipLine","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","getNextObjectInPool","objectMaterials","targetVertex","nl","RGBShiftShader","RenderPass","oldClearColor","oldClearAlpha","SSAOShader","cameraNear","cameraFar","onlyAO","aoClamp","lumInfluence","SVGLoader","parser","DOMParser","svgString","doc","parseFromString","documentElement","SavePass","textureID","renderTargetParameters","SepiaShader","TechnicolorShader","TexturePass","TriangleBlurShader","UnpackDepthRGBAShader","VerticalBlurShader","VerticalTiltShiftShader","VignetteShader","darkness"],"mappings":"+EAAA,SAAAA,GACA,IAAAC,EAAcC,EAAQ,KAEtBC,EAAAC,QAAA,SAAAC,GACA,GAAAA,aAAAC,MACA,QAAAC,EAAA,EAAAC,EAAAH,EAAAG,OAAsDD,EAAAC,EAAqBD,IAAA,CAC3E,IAAAE,EAAAJ,EAAAE,GAEA,GAAAE,aAAAC,SACAD,EAAAR,OACS,sBAAAQ,EAGT,UAAAE,MAAA,gCAFUT,EAAA,IAAAA,CAAQ,KAAWO,EAAA,MAAnBP,CAAoCD,IAY9C,OAAAA,GAvBA,wBCAA,IAAAW,GAAA,SAAAZ,GAIA,IAAAC,EAAA,CACAY,SAAA,WAGAC,IAAAC,OAAAC,UACAD,OAAAC,QAAAC,KAAAC,IAAA,aAIAJ,IAAAG,KAAAE,OAEAF,KAAAE,KAAA,SAAAC,GACA,OAAAA,EAAA,KAAAA,EAAA,KAAAA,SAIAN,IAAAJ,SAAAW,UAAAC,MAGAC,OAAAC,eAAAd,SAAAW,UAAA,QACAI,IAAA,WACA,OAAAC,KAAAC,WAAAC,MAAA,wCAKAd,IAAAS,OAAAM,SAIAN,OAAAM,OAAA,SAAAC,GACA,aAEA,QAAAhB,IAAAgB,GAAA,OAAAA,EACA,UAAAC,UAAA,8CAKA,IAFA,IAAAC,EAAAT,OAAAO,GAEAG,EAAA,EAA2BA,EAAAC,UAAA1B,OAA0ByB,IAAA,CACrD,IAAAE,EAAAD,UAAAD,GAEA,QAAAnB,IAAAqB,GAAA,OAAAA,EACA,QAAAC,KAAAD,EACAZ,OAAAF,UAAAgB,eAAAC,KAAAH,EAAAC,KACAJ,EAAAI,GAAAD,EAAAC,IAMA,OAAAJ,IAMAT,OAAAM,OAAA5B,EAAA,CAEAsC,MAAA,CACAC,KAAA,EACAC,OAAA,EACAC,MAAA,GAGAC,aAAA,EACAC,aAAA,EACAC,cAAA,EACAC,kBAAA,EACAC,qBAAA,EACAC,sBAAA,EAEAC,eAAA,EACAC,aAAA,EACAC,iBAAA,EAGAC,UAAA,EACAC,SAAA,EACAC,WAAA,EAEAC,YAAA,EACAC,cAAA,EAEAC,SAAA,EACAC,WAAA,EACAC,aAAA,EAEAC,WAAA,EACAC,eAAA,EACAC,iBAAA,EACAC,oBAAA,EACAC,iBAAA,EACAC,eAAA,EAIAC,YAAA,IACAC,iBAAA,IACAC,wBAAA,IACAC,YAAA,IACAC,YAAA,IAEAC,WAAA,IACAC,UAAA,IACAC,eAAA,IACAC,uBAAA,IACAC,eAAA,IACAC,uBAAA,IACAC,eAAA,IACAC,uBAAA,IAQAC,eAAA,IACAC,uBAAA,IACAC,uBAAA,IAEAC,WAAA,EACAC,YAAA,EACAC,UAAA,EACAC,eAAA,EACAC,WAAA,EACAC,kBAAA,EACAC,aAAA,EACAC,cAAA,EAEAC,kBAAA,EACAC,aAAA,EACAC,aAAA,EAEAC,cAAA,EAEAC,kBAAA,EAEAC,oBAAA,EACAC,sBAAA,EAEAC,kBAAA,EAGAC,UAAA,IACAC,sBAAA,IACAC,sBAAA,IACAC,iCAAA,IACAC,iCAAA,IACAC,2BAAA,IACAC,wBAAA,IACAC,wBAAA,IAEAC,eAAA,IACAC,oBAAA,KACAC,uBAAA,KAEAC,cAAA,KACAC,2BAAA,KACAC,0BAAA,KACAC,aAAA,KACAC,0BAAA,KACAC,yBAAA,KAEAC,iBAAA,KACAC,SAAA,KACAC,UAAA,KACAC,kBAAA,KACAC,QAAA,KACAC,gBAAA,KACAC,UAAA,KACAC,cAAA,KAGAC,sBAAA,KACAC,sBAAA,KACAC,qBAAA,KAEAC,YAAA,KACAC,UAAA,KACAC,WAAA,KACAC,gBAAA,KACAC,qBAAA,KAEAC,WAAAlI,EAAA+H,WAEAI,YAAA,KAEAC,qBAAA,KACAC,sBAAA,KACAC,sBAAA,KACAC,sBAAA,KAEAC,wBAAA,KACAC,wBAAA,KACAC,yBAAA,KACAC,yBAAA,KAEAC,gBAAA,KAEAC,SAAA,KACAC,WAAA,KACAC,aAAA,KAEAC,oBAAA,KACAC,kBAAA,KACAC,kBAAA,KAEAC,oBAAA,KACAC,gBAAA,KACAC,iBAAA,KAEAC,kBAAA,EACAC,sBAAA,EACAC,oBAAA,EAEAC,eAAA,IAEAC,aAAA,KACAC,cAAA,KAIAC,aAAA,KAEAC,eAAA,KACAC,cAAA,KACAC,eAAA,KACAC,aAAA,KAGAC,kBAAA,KAEAC,iBAAA,OAQAlK,EAAAmK,MAAA,SAAAC,EAAAC,EAAAC,GACA,YAAAzJ,IAAAwJ,QAAAxJ,IAAAyJ,EAEA7I,KAAA8I,IAAAH,GAGA3I,KAAA+I,OAAAJ,EAAAC,EAAAC,IAGAtK,EAAAmK,MAAA/I,UAAA,CACAqJ,YAAAzK,EAAAmK,MACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,IAAA,SAAAG,GASA,OARAA,aAAA1K,EAAAmK,MACA1I,KAAAkJ,KAAAD,GACO,kBAAAA,EACPjJ,KAAAmJ,OAAAF,GACO,kBAAAA,GACPjJ,KAAAoJ,SAAAH,GAGAjJ,MAEAqJ,UAAA,SAAAC,GACAtJ,KAAA2I,EAAAW,EACAtJ,KAAA4I,EAAAU,EACAtJ,KAAA6I,EAAAS,GAEAH,OAAA,SAAAI,GAKA,OAJAA,EAAAhK,KAAAiK,MAAAD,GACAvJ,KAAA2I,GAAAY,GAAA,YACAvJ,KAAA4I,GAAAW,GAAA,WACAvJ,KAAA6I,GAAA,IAAAU,GAAA,IACAvJ,MAEA+I,OAAA,SAAAJ,EAAAC,EAAAC,GAIA,OAHA7I,KAAA2I,IACA3I,KAAA4I,IACA5I,KAAA6I,IACA7I,MAEAyJ,OAAA,WACA,SAAAC,EAAAC,EAAAC,EAAAC,GAGA,OAFAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAA,GAAA,GACAA,EAAA,IAAAF,EAAA,GAAAC,EAAAD,GAAAE,EACAA,EAAA,GAAAD,EACAC,EAAA,IAAAF,EAAA,GAAAC,EAAAD,IAAA,IAAAE,GACAF,EAGA,gBAAAG,EAAAC,EAAAC,GAMA,GAJAF,EAAAvL,EAAAgB,KAAA0K,gBAAAH,EAAA,GACAC,EAAAxL,EAAAgB,KAAA2K,MAAAH,EAAA,KACAC,EAAAzL,EAAAgB,KAAA2K,MAAAF,EAAA,KAEA,IAAAD,EACA/J,KAAA2I,EAAA3I,KAAA4I,EAAA5I,KAAA6I,EAAAmB,MACS,CACT,IAAAL,EAAAK,GAAA,GAAAA,GAAA,EAAAD,GAAAC,EAAAD,EAAAC,EAAAD,EACAH,EAAA,EAAAI,EAAAL,EACA3J,KAAA2I,EAAAe,EAAAE,EAAAD,EAAAG,EAAA,KACA9J,KAAA4I,EAAAc,EAAAE,EAAAD,EAAAG,GACA9J,KAAA6I,EAAAa,EAAAE,EAAAD,EAAAG,EAAA,KAGA,OAAA9J,MA1BA,GA6BAoJ,SAAA,SAAAe,GACA,SAAAC,EAAAC,QACAjL,IAAAiL,GAEAC,WAAAD,GAAA,GACAE,QAAAC,KAAA,mCAAAL,EAAA,qBAIA,IAAAM,EAEA,GAAAA,EAAA,kCAAAC,KAAAP,GAAA,CAEA,IAAAQ,EACA/K,EAAA6K,EAAA,GACAG,EAAAH,EAAA,GAEA,OAAA7K,GACA,UACA,WACA,GAAA+K,EAAA,gEAAAD,KAAAE,GAMA,OAJA5K,KAAA2I,EAAApJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACA3K,KAAA4I,EAAArJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACA3K,KAAA6I,EAAAtJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACAP,EAAAO,EAAA,IACA3K,KAGA,GAAA2K,EAAA,sEAAAD,KAAAE,GAMA,OAJA5K,KAAA2I,EAAApJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACA3K,KAAA4I,EAAArJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACA3K,KAAA6I,EAAAtJ,KAAAsL,IAAA,IAAAC,SAAAH,EAAA,YACAP,EAAAO,EAAA,IACA3K,KAGA,MAEA,UACA,WACA,GAAA2K,EAAA,gFAAAD,KAAAE,GAAA,CAEA,IAAAd,EAAAQ,WAAAK,EAAA,QACAZ,EAAAe,SAAAH,EAAA,WACAX,EAAAc,SAAAH,EAAA,WAEA,OADAP,EAAAO,EAAA,IACA3K,KAAAyJ,OAAAK,EAAAC,EAAAC,UAKO,GAAAS,EAAA,qBAAAC,KAAAP,GAAA,CAEP,IAAAZ,EACAwB,GADAxB,EAAAkB,EAAA,IACA3L,OAEA,OAAAiM,EAKA,OAHA/K,KAAA2I,EAAAmC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KAAA4I,EAAAkC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KAAA6I,EAAAiC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KACS,OAAA+K,EAKT,OAHA/K,KAAA2I,EAAAmC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KAAA4I,EAAAkC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KAAA6I,EAAAiC,SAAAvB,EAAAyB,OAAA,GAAAzB,EAAAyB,OAAA,WACAhL,KAIAmK,KAAArL,OAAA,SAIAM,KAFAmK,EAAAhL,EAAA0M,cAAAd,IAIAnK,KAAAmJ,OAAAI,GAGAgB,QAAAC,KAAA,8BAAAL,IAIA,OAAAnK,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAA2I,EAAA3I,KAAA4I,EAAA5I,KAAA6I,IAEAK,KAAA,SAAAyB,GAIA,OAHA3K,KAAA2I,EAAAgC,EAAAhC,EACA3I,KAAA4I,EAAA+B,EAAA/B,EACA5I,KAAA6I,EAAA8B,EAAA9B,EACA7I,MAEAmL,kBAAA,SAAAR,EAAAS,GAKA,YAJAhM,IAAAgM,MAAA,GACApL,KAAA2I,EAAApJ,KAAAC,IAAAmL,EAAAhC,EAAAyC,GACApL,KAAA4I,EAAArJ,KAAAC,IAAAmL,EAAA/B,EAAAwC,GACApL,KAAA6I,EAAAtJ,KAAAC,IAAAmL,EAAA9B,EAAAuC,GACApL,MAEAqL,kBAAA,SAAAV,EAAAS,QACAhM,IAAAgM,MAAA,GACA,IAAAE,EAAAF,EAAA,IAAAA,EAAA,EAIA,OAHApL,KAAA2I,EAAApJ,KAAAC,IAAAmL,EAAAhC,EAAA2C,GACAtL,KAAA4I,EAAArJ,KAAAC,IAAAmL,EAAA/B,EAAA0C,GACAtL,KAAA6I,EAAAtJ,KAAAC,IAAAmL,EAAA9B,EAAAyC,GACAtL,MAEAuL,qBAAA,WACA,IAAA5C,EAAA3I,KAAA2I,EACAC,EAAA5I,KAAA4I,EACAC,EAAA7I,KAAA6I,EAIA,OAHA7I,KAAA2I,MACA3I,KAAA4I,MACA5I,KAAA6I,MACA7I,MAEAwL,qBAAA,WAIA,OAHAxL,KAAA2I,EAAApJ,KAAAkM,KAAAzL,KAAA2I,GACA3I,KAAA4I,EAAArJ,KAAAkM,KAAAzL,KAAA4I,GACA5I,KAAA6I,EAAAtJ,KAAAkM,KAAAzL,KAAA6I,GACA7I,MAEA0L,OAAA,WACA,WAAA1L,KAAA2I,GAAA,OAAA3I,KAAA4I,GAAA,MAAA5I,KAAA6I,GAAA,GAEA8C,aAAA,WACA,gBAAA3L,KAAA0L,SAAAzL,SAAA,KAAA2L,OAAA,IAEAC,OAAA,SAAAC,GAEA,IAUAC,EAAAC,EAVAC,EAAAH,GAAA,CACAhC,EAAA,EACAC,EAAA,EACAC,EAAA,GAEArB,EAAA3I,KAAA2I,EACAC,EAAA5I,KAAA4I,EACAC,EAAA7I,KAAA6I,EACAqD,EAAA3M,KAAA2M,IAAAvD,EAAAC,EAAAC,GACAgC,EAAAtL,KAAAsL,IAAAlC,EAAAC,EAAAC,GAEAsD,GAAAtB,EAAAqB,GAAA,EAEA,GAAArB,IAAAqB,EACAH,EAAA,EACAC,EAAA,MACO,CACP,IAAAI,EAAAF,EAAArB,EAGA,OAFAmB,EAAAG,GAAA,GAAAC,GAAAF,EAAArB,GAAAuB,GAAA,EAAAF,EAAArB,GAEAqB,GACA,KAAAvD,EACAoD,GAAAnD,EAAAC,GAAAuD,GAAAxD,EAAAC,EAAA,KACA,MAEA,KAAAD,EACAmD,GAAAlD,EAAAF,GAAAyD,EAAA,EACA,MAEA,KAAAvD,EACAkD,GAAApD,EAAAC,GAAAwD,EAAA,EAIAL,GAAA,EAMA,OAHAE,EAAAnC,EAAAiC,EACAE,EAAAlC,EAAAiC,EACAC,EAAAjC,EAAAmC,EACAF,GAEAI,SAAA,WACA,kBAAArM,KAAA2I,EAAA,YAAA3I,KAAA4I,EAAA,YAAA5I,KAAA6I,EAAA,QAEAyD,UAAA,SAAAxC,EAAAC,EAAAC,GACA,IAAAiC,EAAAjM,KAAA6L,SAKA,OAJAI,EAAAnC,KACAmC,EAAAlC,KACAkC,EAAAjC,KACAhK,KAAAyJ,OAAAwC,EAAAnC,EAAAmC,EAAAlC,EAAAkC,EAAAjC,GACAhK,MAEAuM,IAAA,SAAA5B,GAIA,OAHA3K,KAAA2I,GAAAgC,EAAAhC,EACA3I,KAAA4I,GAAA+B,EAAA/B,EACA5I,KAAA6I,GAAA8B,EAAA9B,EACA7I,MAEAwM,UAAA,SAAAC,EAAAC,GAIA,OAHA1M,KAAA2I,EAAA8D,EAAA9D,EAAA+D,EAAA/D,EACA3I,KAAA4I,EAAA6D,EAAA7D,EAAA8D,EAAA9D,EACA5I,KAAA6I,EAAA4D,EAAA5D,EAAA6D,EAAA7D,EACA7I,MAEA2M,UAAA,SAAA5C,GAIA,OAHA/J,KAAA2I,GAAAoB,EACA/J,KAAA4I,GAAAmB,EACA/J,KAAA6I,GAAAkB,EACA/J,MAEA4M,IAAA,SAAAjC,GAIA,OAHA3K,KAAA2I,EAAApJ,KAAA2M,IAAA,EAAAlM,KAAA2I,EAAAgC,EAAAhC,GACA3I,KAAA4I,EAAArJ,KAAA2M,IAAA,EAAAlM,KAAA4I,EAAA+B,EAAA/B,GACA5I,KAAA6I,EAAAtJ,KAAA2M,IAAA,EAAAlM,KAAA6I,EAAA8B,EAAA9B,GACA7I,MAEA6M,SAAA,SAAAlC,GAIA,OAHA3K,KAAA2I,GAAAgC,EAAAhC,EACA3I,KAAA4I,GAAA+B,EAAA/B,EACA5I,KAAA6I,GAAA8B,EAAA9B,EACA7I,MAEA8M,eAAA,SAAA/C,GAIA,OAHA/J,KAAA2I,GAAAoB,EACA/J,KAAA4I,GAAAmB,EACA/J,KAAA6I,GAAAkB,EACA/J,MAEA+M,KAAA,SAAApC,EAAAqC,GAIA,OAHAhN,KAAA2I,IAAAgC,EAAAhC,EAAA3I,KAAA2I,GAAAqE,EACAhN,KAAA4I,IAAA+B,EAAA/B,EAAA5I,KAAA4I,GAAAoE,EACAhN,KAAA6I,IAAA8B,EAAA9B,EAAA7I,KAAA6I,GAAAmE,EACAhN,MAEAiN,OAAA,SAAAC,GACA,OAAAA,EAAAvE,IAAA3I,KAAA2I,GAAAuE,EAAAtE,IAAA5I,KAAA4I,GAAAsE,EAAArE,IAAA7I,KAAA6I,GAEAsE,UAAA,SAAAC,EAAAC,GAKA,YAJAjO,IAAAiO,MAAA,GACArN,KAAA2I,EAAAyE,EAAAC,GACArN,KAAA4I,EAAAwE,EAAAC,EAAA,GACArN,KAAA6I,EAAAuE,EAAAC,EAAA,GACArN,MAEAsN,QAAA,SAAAF,EAAAC,GAMA,YALAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAA2I,EACAyE,EAAAC,EAAA,GAAArN,KAAA4I,EACAwE,EAAAC,EAAA,GAAArN,KAAA6I,EACAuE,IAGA7O,EAAA0M,cAAA,CACAsC,UAAA,SACAC,aAAA,SACAC,KAAA,MACAC,WAAA,QACAC,MAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,EACAC,eAAA,SACAC,KAAA,IACAC,WAAA,QACAC,MAAA,SACAC,UAAA,SACAC,UAAA,QACAC,WAAA,QACAC,UAAA,SACAC,MAAA,SACAC,eAAA,QACAC,SAAA,SACAC,QAAA,SACAC,KAAA,MACAC,SAAA,IACAC,SAAA,MACAC,cAAA,SACAC,SAAA,SACAC,UAAA,MACAC,SAAA,SACAC,UAAA,SACAC,YAAA,QACAC,eAAA,QACAC,WAAA,SACAC,WAAA,SACAC,QAAA,QACAC,WAAA,SACAC,aAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,QACAC,cAAA,MACAC,WAAA,QACAC,SAAA,SACAC,YAAA,MACAC,QAAA,QACAC,QAAA,QACAC,WAAA,QACAC,UAAA,SACAC,YAAA,SACAC,YAAA,QACAC,QAAA,SACAC,UAAA,SACAC,WAAA,SACAC,KAAA,SACAC,UAAA,SACAC,KAAA,QACAC,MAAA,MACAC,YAAA,SACAC,KAAA,QACAC,SAAA,SACAC,QAAA,SACAC,UAAA,SACAC,OAAA,QACAC,MAAA,SACAC,MAAA,SACAC,SAAA,SACAC,cAAA,SACAC,UAAA,QACAC,aAAA,SACAC,UAAA,SACAC,WAAA,SACAC,UAAA,SACAC,qBAAA,SACAC,UAAA,SACAC,WAAA,QACAC,UAAA,SACAC,UAAA,SACAC,YAAA,SACAC,cAAA,QACAC,aAAA,QACAC,eAAA,QACAC,eAAA,QACAC,eAAA,SACAC,YAAA,SACAC,KAAA,MACAC,UAAA,QACAC,MAAA,SACAC,QAAA,SACAC,OAAA,QACAC,iBAAA,QACAC,WAAA,IACAC,aAAA,SACAC,aAAA,QACAC,eAAA,QACAC,gBAAA,QACAC,kBAAA,MACAC,gBAAA,QACAC,gBAAA,SACAC,aAAA,QACAC,UAAA,SACAC,UAAA,SACAC,SAAA,SACAC,YAAA,SACAC,KAAA,IACAC,QAAA,SACAC,MAAA,QACAC,UAAA,QACAC,OAAA,SACAC,UAAA,SACAC,OAAA,SACAC,cAAA,SACAC,UAAA,SACAC,cAAA,SACAC,cAAA,SACAC,WAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,WAAA,SACAC,OAAA,QACAC,IAAA,SACAC,UAAA,SACAC,UAAA,QACAC,YAAA,QACAC,OAAA,SACAC,WAAA,SACAC,SAAA,QACAC,SAAA,SACAC,OAAA,SACAC,OAAA,SACAC,QAAA,QACAC,UAAA,QACAC,UAAA,QACAC,UAAA,QACAC,KAAA,SACAC,YAAA,MACAC,UAAA,QACAC,IAAA,SACAC,KAAA,MACAC,QAAA,SACAC,OAAA,SACAC,UAAA,QACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,WAAA,SACAC,OAAA,SACAC,YAAA,UAUAlY,EAAAmY,WAAA,SAAAhX,EAAAiX,EAAAC,EAAAC,GACA7W,KAAA8W,GAAApX,GAAA,EACAM,KAAA+W,GAAAJ,GAAA,EACA3W,KAAAgX,GAAAJ,GAAA,EACA5W,KAAAiX,QAAA7X,IAAAyX,IAAA,GAGAtY,EAAAmY,WAAA/W,UAAA,CACAqJ,YAAAzK,EAAAmY,WAEAhX,QACA,OAAAM,KAAA8W,IAGApX,MAAAuJ,GACAjJ,KAAA8W,GAAA7N,EACAjJ,KAAAkX,oBAGAP,QACA,OAAA3W,KAAA+W,IAGAJ,MAAA1N,GACAjJ,KAAA+W,GAAA9N,EACAjJ,KAAAkX,oBAGAN,QACA,OAAA5W,KAAAgX,IAGAJ,MAAA3N,GACAjJ,KAAAgX,GAAA/N,EACAjJ,KAAAkX,oBAGAL,QACA,OAAA7W,KAAAiX,IAGAJ,MAAA5N,GACAjJ,KAAAiX,GAAAhO,EACAjJ,KAAAkX,oBAGApO,IAAA,SAAApJ,EAAAiX,EAAAC,EAAAC,GAMA,OALA7W,KAAA8W,GAAApX,EACAM,KAAA+W,GAAAJ,EACA3W,KAAAgX,GAAAJ,EACA5W,KAAAiX,GAAAJ,EACA7W,KAAAkX,mBACAlX,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAAgX,GAAAhX,KAAAiX,KAEA/N,KAAA,SAAAiO,GAMA,OALAnX,KAAA8W,GAAAK,EAAAzX,EACAM,KAAA+W,GAAAI,EAAAR,EACA3W,KAAAgX,GAAAG,EAAAP,EACA5W,KAAAiX,GAAAE,EAAAN,EACA7W,KAAAkX,mBACAlX,MAEAoX,aAAA,SAAAC,EAAAC,GACA,GAAAD,aAAA9Y,EAAAgZ,SAAA,EACA,UAAAtY,MAAA,mGAMA,IAAAuY,EAAAjY,KAAAkY,IAAAJ,EAAAP,GAAA,GACAY,EAAAnY,KAAAkY,IAAAJ,EAAAN,GAAA,GACAY,EAAApY,KAAAkY,IAAAJ,EAAAL,GAAA,GACAY,EAAArY,KAAAsY,IAAAR,EAAAP,GAAA,GACAgB,EAAAvY,KAAAsY,IAAAR,EAAAN,GAAA,GACAgB,EAAAxY,KAAAsY,IAAAR,EAAAL,GAAA,GACAgB,EAAAX,EAAAW,MAmCA,MAjCA,QAAAA,GACAhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GACO,QAAAC,GACPhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GACO,QAAAC,GACPhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GACO,QAAAC,GACPhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GACO,QAAAC,GACPhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,GACO,QAAAC,IACPhY,KAAA8W,GAAAc,EAAAF,EAAAC,EAAAH,EAAAM,EAAAC,EACA/X,KAAA+W,GAAAS,EAAAM,EAAAH,EAAAC,EAAAF,EAAAK,EACA/X,KAAAgX,GAAAQ,EAAAE,EAAAK,EAAAH,EAAAE,EAAAH,EACA3X,KAAAiX,GAAAO,EAAAE,EAAAC,EAAAC,EAAAE,EAAAC,IAGA,IAAAT,GAAAtX,KAAAkX,mBACAlX,MAEAiY,iBAAA,SAAAC,EAAAC,GAGA,IAAAC,EAAAD,EAAA,EACApO,EAAAxK,KAAAsY,IAAAO,GAMA,OALApY,KAAA8W,GAAAoB,EAAAxY,EAAAqK,EACA/J,KAAA+W,GAAAmB,EAAAvB,EAAA5M,EACA/J,KAAAgX,GAAAkB,EAAAtB,EAAA7M,EACA/J,KAAAiX,GAAA1X,KAAAkY,IAAAW,GACApY,KAAAkX,mBACAlX,MAEAqY,sBAAA,SAAA5N,GAGA,IAWAV,EAXAuO,EAAA7N,EAAA8N,SACAC,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,IACAW,EAAAT,EAAAI,EAAAI,EA8BA,OA3BAC,EAAA,GACAlP,EAAA,GAAAxK,KAAAkM,KAAAwN,EAAA,GACAjZ,KAAAiX,GAAA,IAAAlN,EACA/J,KAAA8W,IAAAiC,EAAAF,GAAA9O,EACA/J,KAAA+W,IAAA2B,EAAAI,GAAA/O,EACA/J,KAAAgX,IAAA2B,EAAAF,GAAA1O,GACOyO,EAAAI,GAAAJ,EAAAQ,GACPjP,EAAA,EAAAxK,KAAAkM,KAAA,EAAA+M,EAAAI,EAAAI,GACAhZ,KAAAiX,IAAA8B,EAAAF,GAAA9O,EACA/J,KAAA8W,GAAA,IAAA/M,EACA/J,KAAA+W,IAAA0B,EAAAE,GAAA5O,EACA/J,KAAAgX,IAAA0B,EAAAI,GAAA/O,GACO6O,EAAAI,GACPjP,EAAA,EAAAxK,KAAAkM,KAAA,EAAAmN,EAAAJ,EAAAQ,GACAhZ,KAAAiX,IAAAyB,EAAAI,GAAA/O,EACA/J,KAAA8W,IAAA2B,EAAAE,GAAA5O,EACA/J,KAAA+W,GAAA,IAAAhN,EACA/J,KAAAgX,IAAA6B,EAAAE,GAAAhP,IAEAA,EAAA,EAAAxK,KAAAkM,KAAA,EAAAuN,EAAAR,EAAAI,GACA5Y,KAAAiX,IAAA0B,EAAAF,GAAA1O,EACA/J,KAAA8W,IAAA4B,EAAAI,GAAA/O,EACA/J,KAAA+W,IAAA8B,EAAAE,GAAAhP,EACA/J,KAAAgX,GAAA,IAAAjN,GAGA/J,KAAAkX,mBACAlX,MAEAkZ,mBAAA,WAGA,IAAAC,EAAAxQ,EAEA,gBAAAyQ,EAAAC,GAoBA,YAnBAja,IAAA+Z,MAAA,IAAA5a,EAAA+a,UACA3Q,EAAAyQ,EAAAG,IAAAF,GAAA,GAHA,MAMA1Q,EAAA,EAEApJ,KAAAia,IAAAJ,EAAA1Z,GAAAH,KAAAia,IAAAJ,EAAAxC,GACAuC,EAAArQ,KAAAsQ,EAAAzC,EAAAyC,EAAA1Z,EAAA,GAEAyZ,EAAArQ,IAAA,GAAAsQ,EAAAxC,EAAAwC,EAAAzC,IAGAwC,EAAAM,aAAAL,EAAAC,GAGArZ,KAAA8W,GAAAqC,EAAAzZ,EACAM,KAAA+W,GAAAoC,EAAAxC,EACA3W,KAAAgX,GAAAmC,EAAAvC,EACA5W,KAAAiX,GAAAtO,EACA3I,KAAA0Z,aAzBA,GA4BAC,QAAA,WACA,OAAA3Z,KAAA4Z,YAAAF,aAEAE,UAAA,WAKA,OAJA5Z,KAAA8W,KAAA,EACA9W,KAAA+W,KAAA,EACA/W,KAAAgX,KAAA,EACAhX,KAAAkX,mBACAlX,MAEAuZ,IAAA,SAAAM,GACA,OAAA7Z,KAAA8W,GAAA+C,EAAA/C,GAAA9W,KAAA+W,GAAA8C,EAAA9C,GAAA/W,KAAAgX,GAAA6C,EAAA7C,GAAAhX,KAAAiX,GAAA4C,EAAA5C,IAEA6C,SAAA,WACA,OAAA9Z,KAAA8W,GAAA9W,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAA+W,GAAA/W,KAAAgX,GAAAhX,KAAAgX,GAAAhX,KAAAiX,GAAAjX,KAAAiX,IAEAnY,OAAA,WACA,OAAAS,KAAAkM,KAAAzL,KAAA8W,GAAA9W,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAA+W,GAAA/W,KAAAgX,GAAAhX,KAAAgX,GAAAhX,KAAAiX,GAAAjX,KAAAiX,KAEAyC,UAAA,WACA,IAAA1P,EAAAhK,KAAAlB,SAgBA,OAdA,IAAAkL,GACAhK,KAAA8W,GAAA,EACA9W,KAAA+W,GAAA,EACA/W,KAAAgX,GAAA,EACAhX,KAAAiX,GAAA,IAEAjN,EAAA,EAAAA,EACAhK,KAAA8W,GAAA9W,KAAA8W,GAAA9M,EACAhK,KAAA+W,GAAA/W,KAAA+W,GAAA/M,EACAhK,KAAAgX,GAAAhX,KAAAgX,GAAAhN,EACAhK,KAAAiX,GAAAjX,KAAAiX,GAAAjN,GAGAhK,KAAAkX,mBACAlX,MAEA6M,SAAA,SAAAjD,EAAAD,GACA,YAAAvK,IAAAuK,GACAY,QAAAC,KAAA,0GACAxK,KAAA+Z,oBAAAnQ,EAAAD,IAGA3J,KAAA+Z,oBAAA/Z,KAAA4J,IAEAoQ,YAAA,SAAApQ,GACA,OAAA5J,KAAA+Z,oBAAAnQ,EAAA5J,OAEA+Z,oBAAA,SAAAE,EAAApR,GAEA,IAAAqR,EAAAD,EAAAnD,GACAqD,EAAAF,EAAAlD,GACAqD,EAAAH,EAAAjD,GACAqD,EAAAJ,EAAAhD,GACAqD,EAAAzR,EAAAiO,GACAyD,EAAA1R,EAAAkO,GACAyD,EAAA3R,EAAAmO,GACAyD,EAAA5R,EAAAoO,GAMA,OALAjX,KAAA8W,GAAAoD,EAAAO,EAAAJ,EAAAC,EAAAH,EAAAK,EAAAJ,EAAAG,EACAva,KAAA+W,GAAAoD,EAAAM,EAAAJ,EAAAE,EAAAH,EAAAE,EAAAJ,EAAAM,EACAxa,KAAAgX,GAAAoD,EAAAK,EAAAJ,EAAAG,EAAAN,EAAAK,EAAAJ,EAAAG,EACAta,KAAAiX,GAAAoD,EAAAI,EAAAP,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EACAxa,KAAAkX,mBACAlX,MAEA0a,MAAA,SAAAC,EAAA9Q,GACA,OAAAA,EAAA,OAAA7J,KACA,OAAA6J,EAAA,OAAA7J,KAAAkJ,KAAAyR,GACA,IAAAjb,EAAAM,KAAA8W,GACAH,EAAA3W,KAAA+W,GACAH,EAAA5W,KAAAgX,GACAH,EAAA7W,KAAAiX,GAEA2D,EAAA/D,EAAA8D,EAAA1D,GAAAvX,EAAAib,EAAA7D,GAAAH,EAAAgE,EAAA5D,GAAAH,EAAA+D,EAAA3D,GAYA,GAVA4D,EAAA,GACA5a,KAAAiX,IAAA0D,EAAA1D,GACAjX,KAAA8W,IAAA6D,EAAA7D,GACA9W,KAAA+W,IAAA4D,EAAA5D,GACA/W,KAAAgX,IAAA2D,EAAA3D,GACA4D,MAEA5a,KAAAkJ,KAAAyR,GAGAC,GAAA,EAKA,OAJA5a,KAAAiX,GAAAJ,EACA7W,KAAA8W,GAAApX,EACAM,KAAA+W,GAAAJ,EACA3W,KAAAgX,GAAAJ,EACA5W,KAGA,IAAA6a,EAAAtb,KAAAkM,KAAA,EAAAmP,KAEA,GAAArb,KAAAia,IAAAqB,GAAA,KAKA,OAJA7a,KAAAiX,GAAA,IAAAJ,EAAA7W,KAAAiX,IACAjX,KAAA8W,GAAA,IAAApX,EAAAM,KAAA8W,IACA9W,KAAA+W,GAAA,IAAAJ,EAAA3W,KAAA+W,IACA/W,KAAAgX,GAAA,IAAAJ,EAAA5W,KAAAgX,IACAhX,KAGA,IAAA8a,EAAAvb,KAAAwb,MAAAF,EAAAD,GACAI,EAAAzb,KAAAsY,KAAA,EAAAhO,GAAAiR,GAAAD,EACAI,EAAA1b,KAAAsY,IAAAhO,EAAAiR,GAAAD,EAMA,OALA7a,KAAAiX,GAAAJ,EAAAmE,EAAAhb,KAAAiX,GAAAgE,EACAjb,KAAA8W,GAAApX,EAAAsb,EAAAhb,KAAA8W,GAAAmE,EACAjb,KAAA+W,GAAAJ,EAAAqE,EAAAhb,KAAA+W,GAAAkE,EACAjb,KAAAgX,GAAAJ,EAAAoE,EAAAhb,KAAAgX,GAAAiE,EACAjb,KAAAkX,mBACAlX,MAEAiN,OAAA,SAAAkK,GACA,OAAAA,EAAAL,KAAA9W,KAAA8W,IAAAK,EAAAJ,KAAA/W,KAAA+W,IAAAI,EAAAH,KAAAhX,KAAAgX,IAAAG,EAAAF,KAAAjX,KAAAiX,IAEA9J,UAAA,SAAAC,EAAAC,GAOA,YANAjO,IAAAiO,MAAA,GACArN,KAAA8W,GAAA1J,EAAAC,GACArN,KAAA+W,GAAA3J,EAAAC,EAAA,GACArN,KAAAgX,GAAA5J,EAAAC,EAAA,GACArN,KAAAiX,GAAA7J,EAAAC,EAAA,GACArN,KAAAkX,mBACAlX,MAEAsN,QAAA,SAAAF,EAAAC,GAOA,YANAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAA8W,GACA1J,EAAAC,EAAA,GAAArN,KAAA+W,GACA3J,EAAAC,EAAA,GAAArN,KAAAgX,GACA5J,EAAAC,EAAA,GAAArN,KAAAiX,GACA7J,GAEA8N,SAAA,SAAAC,GAEA,OADAnb,KAAAkX,iBAAAiE,EACAnb,MAEAkX,iBAAA,cAEArX,OAAAM,OAAA5B,EAAAmY,WAAA,CACAgE,MAAA,SAAAU,EAAAT,EAAAU,EAAAxR,GACA,OAAAwR,EAAAnS,KAAAkS,GAAAV,MAAAC,EAAA9Q,IAEAyR,UAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA/R,GAEA,IAAAgS,EAAAJ,EAAAC,EAAA,GACAI,EAAAL,EAAAC,EAAA,GACAK,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GACAO,EAAAN,EAAAC,EAAA,GACAM,EAAAP,EAAAC,EAAA,GACAO,EAAAR,EAAAC,EAAA,GACAQ,EAAAT,EAAAC,EAAA,GAEA,GAAAI,IAAAI,GAAAP,IAAAI,GAAAH,IAAAI,GAAAH,IAAAI,EAAA,CACA,IAAApS,EAAA,EAAAF,EACA4N,EAAAoE,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EAAAH,EAAAI,EACAC,EAAA5E,GAAA,OACA6E,EAAA,EAAA7E,IAEA,GAAA6E,EAAAjd,OAAAC,QAAA,CACA,IAAAuY,EAAAtY,KAAAkM,KAAA6Q,GACAC,EAAAhd,KAAAwb,MAAAlD,EAAAJ,EAAA4E,GACAtS,EAAAxK,KAAAsY,IAAA9N,EAAAwS,GAAA1E,EACAhO,EAAAtK,KAAAsY,IAAAhO,EAAA0S,GAAA1E,EAGA,IAAA2E,EAAA3S,EAAAwS,EAMA,GALAR,IAAA9R,EAAAkS,EAAAO,EACAV,IAAA/R,EAAAmS,EAAAM,EACAT,IAAAhS,EAAAoS,EAAAK,EACAR,IAAAjS,EAAAqS,EAAAI,EAEAzS,IAAA,EAAAF,EAAA,CACA,IAAA4S,EAAA,EAAAld,KAAAkM,KAAAoQ,IAAAC,IAAAC,IAAAC,KACAH,GAAAY,EACAX,GAAAW,EACAV,GAAAU,EACAT,GAAAS,GAIAlB,EAAAC,GAAAK,EACAN,EAAAC,EAAA,GAAAM,EACAP,EAAAC,EAAA,GAAAO,EACAR,EAAAC,EAAA,GAAAQ,KAWAzd,EAAAme,QAAA,SAAAhd,EAAAiX,GACA3W,KAAAN,KAAA,EACAM,KAAA2W,KAAA,GAGApY,EAAAme,QAAA/c,UAAA,CACAqJ,YAAAzK,EAAAme,QAEAC,YACA,OAAA3c,KAAAN,GAGAid,UAAA1T,GACAjJ,KAAAN,EAAAuJ,GAGA2T,aACA,OAAA5c,KAAA2W,GAGAiG,WAAA3T,GACAjJ,KAAA2W,EAAA1N,GAIAH,IAAA,SAAApJ,EAAAiX,GAGA,OAFA3W,KAAAN,IACAM,KAAA2W,IACA3W,MAEAqJ,UAAA,SAAAC,GAGA,OAFAtJ,KAAAN,EAAA4J,EACAtJ,KAAA2W,EAAArN,EACAtJ,MAEA6c,KAAA,SAAAnd,GAEA,OADAM,KAAAN,IACAM,MAEA8c,KAAA,SAAAnG,GAEA,OADA3W,KAAA2W,IACA3W,MAEA+c,aAAA,SAAAxc,EAAA0I,GACA,OAAA1I,GACA,OACAP,KAAAN,EAAAuJ,EACA,MAEA,OACAjJ,KAAA2W,EAAA1N,EACA,MAEA,QACA,UAAAhK,MAAA,0BAAAsB,KAGAyc,aAAA,SAAAzc,GACA,OAAAA,GACA,OACA,OAAAP,KAAAN,EAEA,OACA,OAAAM,KAAA2W,EAEA,QACA,UAAA1X,MAAA,0BAAAsB,KAGA2K,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAN,EAAAM,KAAA2W,IAEAzN,KAAA,SAAA2Q,GAGA,OAFA7Z,KAAAN,EAAAma,EAAAna,EACAM,KAAA2W,EAAAkD,EAAAlD,EACA3W,MAEAuM,IAAA,SAAAsN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAid,WAAApD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,OAEA2M,UAAA,SAAA5C,GAGA,OAFA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,MAEAid,WAAA,SAAAhD,EAAApR,GAGA,OAFA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,MAEAkd,gBAAA,SAAArD,EAAA9P,GAGA,OAFA/J,KAAAN,GAAAma,EAAAna,EAAAqK,EACA/J,KAAA2W,GAAAkD,EAAAlD,EAAA5M,EACA/J,MAEA4M,IAAA,SAAAiN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAmd,WAAAtD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,OAEAod,UAAA,SAAArT,GAGA,OAFA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,MAEAmd,WAAA,SAAAlD,EAAApR,GAGA,OAFA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,MAEA6M,SAAA,SAAAgN,GAGA,OAFA7Z,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,MAEA8M,eAAA,SAAAxD,GASA,OARA+T,SAAA/T,IACAtJ,KAAAN,GAAA4J,EACAtJ,KAAA2W,GAAArN,IAEAtJ,KAAAN,EAAA,EACAM,KAAA2W,EAAA,GAGA3W,MAEAsd,OAAA,SAAAzD,GAGA,OAFA7Z,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,MAEAud,aAAA,SAAAjU,GACA,OAAAtJ,KAAA8M,eAAA,EAAAxD,IAEAuB,IAAA,SAAAgP,GAGA,OAFA7Z,KAAAN,EAAAH,KAAAsL,IAAA7K,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAAsL,IAAA7K,KAAA2W,EAAAkD,EAAAlD,GACA3W,MAEAkM,IAAA,SAAA2N,GAGA,OAFA7Z,KAAAN,EAAAH,KAAA2M,IAAAlM,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAA2M,IAAAlM,KAAA2W,EAAAkD,EAAAlD,GACA3W,MAEAkK,MAAA,SAAAW,EAAAqB,GAIA,OAFAlM,KAAAN,EAAAH,KAAA2M,IAAArB,EAAAnL,EAAAH,KAAAsL,IAAAqB,EAAAxM,EAAAM,KAAAN,IACAM,KAAA2W,EAAApX,KAAA2M,IAAArB,EAAA8L,EAAApX,KAAAsL,IAAAqB,EAAAyK,EAAA3W,KAAA2W,IACA3W,MAEAwd,YAAA,WACA,IAAA3S,EAAAqB,EACA,gBAAAuR,EAAAC,GAQA,YAPAte,IAAAyL,IACAA,EAAA,IAAAtM,EAAAme,QACAxQ,EAAA,IAAA3N,EAAAme,SAGA7R,EAAA/B,IAAA2U,KACAvR,EAAApD,IAAA4U,KACA1d,KAAAkK,MAAAW,EAAAqB,IAVA,GAaAyR,YAAA,SAAA9S,EAAAqB,GACA,IAAApN,EAAAkB,KAAAlB,SACA,OAAAkB,KAAA8M,eAAAvN,KAAA2M,IAAArB,EAAAtL,KAAAsL,IAAAqB,EAAApN,QAEA0K,MAAA,WAGA,OAFAxJ,KAAAN,EAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,MAEA4d,KAAA,WAGA,OAFA5d,KAAAN,EAAAH,KAAAqe,KAAA5d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAqe,KAAA5d,KAAA2W,GACA3W,MAEA6d,MAAA,WAGA,OAFA7d,KAAAN,EAAAH,KAAAse,MAAA7d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAse,MAAA7d,KAAA2W,GACA3W,MAEA8d,YAAA,WAGA,OAFA9d,KAAAN,EAAAM,KAAAN,EAAA,EAAAH,KAAAqe,KAAA5d,KAAAN,GAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAA3W,KAAA2W,EAAA,EAAApX,KAAAqe,KAAA5d,KAAA2W,GAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,MAEA+d,OAAA,WAGA,OAFA/d,KAAAN,GAAAM,KAAAN,EACAM,KAAA2W,GAAA3W,KAAA2W,EACA3W,MAEAuZ,IAAA,SAAAM,GACA,OAAA7Z,KAAAN,EAAAma,EAAAna,EAAAM,KAAA2W,EAAAkD,EAAAlD,GAEAmD,SAAA,WACA,OAAA9Z,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,GAEA7X,OAAA,WACA,OAAAS,KAAAkM,KAAAzL,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,IAEAqH,gBAAA,WACA,OAAAze,KAAAia,IAAAxZ,KAAAN,GAAAH,KAAAia,IAAAxZ,KAAA2W,IAEA+C,UAAA,WACA,OAAA1Z,KAAAud,aAAAvd,KAAAlB,WAEAqZ,MAAA,WAEA,IAAAA,EAAA5Y,KAAAwb,MAAA/a,KAAA2W,EAAA3W,KAAAN,GAEA,OADAyY,EAAA,IAAAA,GAAA,EAAA5Y,KAAA0e,IACA9F,GAEA+F,WAAA,SAAArE,GACA,OAAAta,KAAAkM,KAAAzL,KAAAme,kBAAAtE,KAEAsE,kBAAA,SAAAtE,GACA,IAAAuE,EAAApe,KAAAN,EAAAma,EAAAna,EACA2e,EAAAre,KAAA2W,EAAAkD,EAAAlD,EACA,OAAAyH,IAAAC,KAEAC,oBAAA,SAAAzE,GACA,OAAAta,KAAAia,IAAAxZ,KAAAN,EAAAma,EAAAna,GAAAH,KAAAia,IAAAxZ,KAAA2W,EAAAkD,EAAAlD,IAEA4H,UAAA,SAAAzf,GACA,OAAAkB,KAAA8M,eAAAhO,EAAAkB,KAAAlB,WAEAiO,KAAA,SAAA8M,EAAA7M,GAGA,OAFAhN,KAAAN,IAAAma,EAAAna,EAAAM,KAAAN,GAAAsN,EACAhN,KAAA2W,IAAAkD,EAAAlD,EAAA3W,KAAA2W,GAAA3J,EACAhN,MAEAwe,YAAA,SAAArF,EAAAsF,EAAAzR,GACA,OAAAhN,KAAAmd,WAAAsB,EAAAtF,GAAArM,eAAAE,GAAAT,IAAA4M,IAEAlM,OAAA,SAAA4M,GACA,OAAAA,EAAAna,IAAAM,KAAAN,GAAAma,EAAAlD,IAAA3W,KAAA2W,GAEAxJ,UAAA,SAAAC,EAAAC,GAIA,YAHAjO,IAAAiO,MAAA,GACArN,KAAAN,EAAA0N,EAAAC,GACArN,KAAA2W,EAAAvJ,EAAAC,EAAA,GACArN,MAEAsN,QAAA,SAAAF,EAAAC,GAKA,YAJAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAAN,EACA0N,EAAAC,EAAA,GAAArN,KAAA2W,EACAvJ,GAEAsR,cAAA,SAAAC,EAAApe,EAAA8M,GAKA,YAJAjO,IAAAiO,MAAA,GACA9M,IAAAoe,EAAAC,SAAAvR,EACArN,KAAAN,EAAAif,EAAAvR,MAAA7M,GACAP,KAAA2W,EAAAgI,EAAAvR,MAAA7M,EAAA,GACAP,MAEA6e,aAAA,SAAAC,EAAA3G,GACA,IAAAjL,EAAA3N,KAAAkY,IAAAU,GACApO,EAAAxK,KAAAsY,IAAAM,GACAzY,EAAAM,KAAAN,EAAAof,EAAApf,EACAiX,EAAA3W,KAAA2W,EAAAmI,EAAAnI,EAGA,OAFA3W,KAAAN,IAAAwN,EAAAyJ,EAAA5M,EAAA+U,EAAApf,EACAM,KAAA2W,EAAAjX,EAAAqK,EAAA4M,EAAAzJ,EAAA4R,EAAAnI,EACA3W,OAaAzB,EAAA+a,QAAA,SAAA5Z,EAAAiX,EAAAC,GACA5W,KAAAN,KAAA,EACAM,KAAA2W,KAAA,EACA3W,KAAA4W,KAAA,GAGArY,EAAA+a,QAAA3Z,UAAA,CACAqJ,YAAAzK,EAAA+a,QACAxQ,IAAA,SAAApJ,EAAAiX,EAAAC,GAIA,OAHA5W,KAAAN,IACAM,KAAA2W,IACA3W,KAAA4W,IACA5W,MAEAqJ,UAAA,SAAAC,GAIA,OAHAtJ,KAAAN,EAAA4J,EACAtJ,KAAA2W,EAAArN,EACAtJ,KAAA4W,EAAAtN,EACAtJ,MAEA6c,KAAA,SAAAnd,GAEA,OADAM,KAAAN,IACAM,MAEA8c,KAAA,SAAAnG,GAEA,OADA3W,KAAA2W,IACA3W,MAEA+e,KAAA,SAAAnI,GAEA,OADA5W,KAAA4W,IACA5W,MAEA+c,aAAA,SAAAxc,EAAA0I,GACA,OAAA1I,GACA,OACAP,KAAAN,EAAAuJ,EACA,MAEA,OACAjJ,KAAA2W,EAAA1N,EACA,MAEA,OACAjJ,KAAA4W,EAAA3N,EACA,MAEA,QACA,UAAAhK,MAAA,0BAAAsB,KAGAyc,aAAA,SAAAzc,GACA,OAAAA,GACA,OACA,OAAAP,KAAAN,EAEA,OACA,OAAAM,KAAA2W,EAEA,OACA,OAAA3W,KAAA4W,EAEA,QACA,UAAA3X,MAAA,0BAAAsB,KAGA2K,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA4W,IAEA1N,KAAA,SAAA2Q,GAIA,OAHA7Z,KAAAN,EAAAma,EAAAna,EACAM,KAAA2W,EAAAkD,EAAAlD,EACA3W,KAAA4W,EAAAiD,EAAAjD,EACA5W,MAEAuM,IAAA,SAAAsN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAid,WAAApD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,OAEA2M,UAAA,SAAA5C,GAIA,OAHA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,KAAA4W,GAAA7M,EACA/J,MAEAid,WAAA,SAAAhD,EAAApR,GAIA,OAHA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,KAAA4W,EAAAqD,EAAArD,EAAA/N,EAAA+N,EACA5W,MAEAkd,gBAAA,SAAArD,EAAA9P,GAIA,OAHA/J,KAAAN,GAAAma,EAAAna,EAAAqK,EACA/J,KAAA2W,GAAAkD,EAAAlD,EAAA5M,EACA/J,KAAA4W,GAAAiD,EAAAjD,EAAA7M,EACA/J,MAEA4M,IAAA,SAAAiN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAmd,WAAAtD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,OAEAod,UAAA,SAAArT,GAIA,OAHA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,KAAA4W,GAAA7M,EACA/J,MAEAmd,WAAA,SAAAlD,EAAApR,GAIA,OAHA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,KAAA4W,EAAAqD,EAAArD,EAAA/N,EAAA+N,EACA5W,MAEA6M,SAAA,SAAAgN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,mGACAxK,KAAAgf,gBAAAnF,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,OAEA8M,eAAA,SAAAxD,GAWA,OAVA+T,SAAA/T,IACAtJ,KAAAN,GAAA4J,EACAtJ,KAAA2W,GAAArN,EACAtJ,KAAA4W,GAAAtN,IAEAtJ,KAAAN,EAAA,EACAM,KAAA2W,EAAA,EACA3W,KAAA4W,EAAA,GAGA5W,MAEAgf,gBAAA,SAAA/E,EAAApR,GAIA,OAHA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,KAAA4W,EAAAqD,EAAArD,EAAA/N,EAAA+N,EACA5W,MAEAif,WAAA,WACA,IAAA9H,EACA,gBAAAE,GAMA,OALAA,aAAA9Y,EAAAgZ,SAAA,GACAhN,QAAA2U,MAAA,oGAGA9f,IAAA+X,MAAA,IAAA5Y,EAAAmY,YACA1W,KAAAmf,gBAAAhI,EAAAC,aAAAC,KARA,GAWA+H,eAAA,WACA,IAAAjI,EACA,gBAAAe,EAAAC,GAEA,YADA/Y,IAAA+X,MAAA,IAAA5Y,EAAAmY,YACA1W,KAAAmf,gBAAAhI,EAAAc,iBAAAC,EAAAC,KAJA,GAOAkH,aAAA,SAAA5U,GACA,IAAA/K,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACA0I,EAAA7U,EAAA8N,SAIA,OAHAvY,KAAAN,EAAA4f,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EACA5W,KAAA2W,EAAA2I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EACA5W,KAAA4W,EAAA0I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EACA5W,MAEAuf,aAAA,SAAA9U,GAEA,IAAA/K,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACA0I,EAAA7U,EAAA8N,SAIA,OAHAvY,KAAAN,EAAA4f,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,IACAtf,KAAA2W,EAAA2I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,IACAtf,KAAA4W,EAAA0I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EAAA0I,EAAA,IACAtf,MAEAwf,gBAAA,SAAA/U,GAEA,IAAA/K,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACA0I,EAAA7U,EAAA8N,SACAkH,EAAA,GAAAH,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EAAA0I,EAAA,KAKA,OAHAtf,KAAAN,GAAA4f,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,KAAAG,EACAzf,KAAA2W,GAAA2I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,KAAAG,EACAzf,KAAA4W,GAAA0I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EAAA0I,EAAA,KAAAG,EACAzf,MAEAmf,gBAAA,SAAAvV,GACA,IAAAlK,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACA8I,EAAA9V,EAAAlK,EACAigB,EAAA/V,EAAA+M,EACAiJ,EAAAhW,EAAAgN,EACAiJ,EAAAjW,EAAAiN,EAEAiJ,EAAAD,EAAAngB,EAAAigB,EAAA/I,EAAAgJ,EAAAjJ,EACAoJ,EAAAF,EAAAlJ,EAAAiJ,EAAAlgB,EAAAggB,EAAA9I,EACAoJ,EAAAH,EAAAjJ,EAAA8I,EAAA/I,EAAAgJ,EAAAjgB,EACAugB,GAAAP,EAAAhgB,EAAAigB,EAAAhJ,EAAAiJ,EAAAhJ,EAKA,OAHA5W,KAAAN,EAAAogB,EAAAD,EAAAI,GAAAP,EAAAK,GAAAH,EAAAI,GAAAL,EACA3f,KAAA2W,EAAAoJ,EAAAF,EAAAI,GAAAN,EAAAK,GAAAN,EAAAI,GAAAF,EACA5f,KAAA4W,EAAAoJ,EAAAH,EAAAI,GAAAL,EAAAE,GAAAH,EAAAI,GAAAL,EACA1f,MAEAkgB,QAAA,WACA,IAAAC,EACA,gBAAAC,GAGA,YAFAhhB,IAAA+gB,MAAA,IAAA5hB,EAAA8hB,SACAF,EAAAG,iBAAAF,EAAAG,iBAAAJ,EAAAK,WAAAJ,EAAAK,cACAzgB,KAAAwf,gBAAAW,IALA,GAQAO,UAAA,WACA,IAAAP,EACA,gBAAAC,GAGA,YAFAhhB,IAAA+gB,MAAA,IAAA5hB,EAAA8hB,SACAF,EAAAG,iBAAAF,EAAAK,YAAAN,EAAAK,WAAAJ,EAAAG,mBACAvgB,KAAAwf,gBAAAW,IALA,GAQAQ,mBAAA,SAAAlW,GAGA,IAAA/K,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACA0I,EAAA7U,EAAA8N,SAIA,OAHAvY,KAAAN,EAAA4f,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EACA5W,KAAA2W,EAAA2I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EACA5W,KAAA4W,EAAA0I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EACA5W,KAAA0Z,aAEA4D,OAAA,SAAAzD,GAIA,OAHA7Z,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,MAEAud,aAAA,SAAAjU,GACA,OAAAtJ,KAAA8M,eAAA,EAAAxD,IAEAuB,IAAA,SAAAgP,GAIA,OAHA7Z,KAAAN,EAAAH,KAAAsL,IAAA7K,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAAsL,IAAA7K,KAAA2W,EAAAkD,EAAAlD,GACA3W,KAAA4W,EAAArX,KAAAsL,IAAA7K,KAAA4W,EAAAiD,EAAAjD,GACA5W,MAEAkM,IAAA,SAAA2N,GAIA,OAHA7Z,KAAAN,EAAAH,KAAA2M,IAAAlM,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAA2M,IAAAlM,KAAA2W,EAAAkD,EAAAlD,GACA3W,KAAA4W,EAAArX,KAAA2M,IAAAlM,KAAA4W,EAAAiD,EAAAjD,GACA5W,MAEAkK,MAAA,SAAAW,EAAAqB,GAKA,OAHAlM,KAAAN,EAAAH,KAAA2M,IAAArB,EAAAnL,EAAAH,KAAAsL,IAAAqB,EAAAxM,EAAAM,KAAAN,IACAM,KAAA2W,EAAApX,KAAA2M,IAAArB,EAAA8L,EAAApX,KAAAsL,IAAAqB,EAAAyK,EAAA3W,KAAA2W,IACA3W,KAAA4W,EAAArX,KAAA2M,IAAArB,EAAA+L,EAAArX,KAAAsL,IAAAqB,EAAA0K,EAAA5W,KAAA4W,IACA5W,MAEAwd,YAAA,WACA,IAAA3S,EAAAqB,EACA,gBAAAuR,EAAAC,GAQA,YAPAte,IAAAyL,IACAA,EAAA,IAAAtM,EAAA+a,QACApN,EAAA,IAAA3N,EAAA+a,SAGAzO,EAAA/B,IAAA2U,OACAvR,EAAApD,IAAA4U,OACA1d,KAAAkK,MAAAW,EAAAqB,IAVA,GAaAyR,YAAA,SAAA9S,EAAAqB,GACA,IAAApN,EAAAkB,KAAAlB,SACA,OAAAkB,KAAA8M,eAAAvN,KAAA2M,IAAArB,EAAAtL,KAAAsL,IAAAqB,EAAApN,QAEA0K,MAAA,WAIA,OAHAxJ,KAAAN,EAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAiK,MAAAxJ,KAAA4W,GACA5W,MAEA4d,KAAA,WAIA,OAHA5d,KAAAN,EAAAH,KAAAqe,KAAA5d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAqe,KAAA5d,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAqe,KAAA5d,KAAA4W,GACA5W,MAEA6d,MAAA,WAIA,OAHA7d,KAAAN,EAAAH,KAAAse,MAAA7d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAse,MAAA7d,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAse,MAAA7d,KAAA4W,GACA5W,MAEA8d,YAAA,WAIA,OAHA9d,KAAAN,EAAAM,KAAAN,EAAA,EAAAH,KAAAqe,KAAA5d,KAAAN,GAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAA3W,KAAA2W,EAAA,EAAApX,KAAAqe,KAAA5d,KAAA2W,GAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,KAAA4W,EAAA5W,KAAA4W,EAAA,EAAArX,KAAAqe,KAAA5d,KAAA4W,GAAArX,KAAAiK,MAAAxJ,KAAA4W,GACA5W,MAEA+d,OAAA,WAIA,OAHA/d,KAAAN,GAAAM,KAAAN,EACAM,KAAA2W,GAAA3W,KAAA2W,EACA3W,KAAA4W,GAAA5W,KAAA4W,EACA5W,MAEAuZ,IAAA,SAAAM,GACA,OAAA7Z,KAAAN,EAAAma,EAAAna,EAAAM,KAAA2W,EAAAkD,EAAAlD,EAAA3W,KAAA4W,EAAAiD,EAAAjD,GAEAkD,SAAA,WACA,OAAA9Z,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,EAAA3W,KAAA4W,EAAA5W,KAAA4W,GAEA9X,OAAA,WACA,OAAAS,KAAAkM,KAAAzL,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,EAAA3W,KAAA4W,EAAA5W,KAAA4W,IAEAoH,gBAAA,WACA,OAAAze,KAAAia,IAAAxZ,KAAAN,GAAAH,KAAAia,IAAAxZ,KAAA2W,GAAApX,KAAAia,IAAAxZ,KAAA4W,IAEA8C,UAAA,WACA,OAAA1Z,KAAAud,aAAAvd,KAAAlB,WAEAyf,UAAA,SAAAzf,GACA,OAAAkB,KAAA8M,eAAAhO,EAAAkB,KAAAlB,WAEAiO,KAAA,SAAA8M,EAAA7M,GAIA,OAHAhN,KAAAN,IAAAma,EAAAna,EAAAM,KAAAN,GAAAsN,EACAhN,KAAA2W,IAAAkD,EAAAlD,EAAA3W,KAAA2W,GAAA3J,EACAhN,KAAA4W,IAAAiD,EAAAjD,EAAA5W,KAAA4W,GAAA5J,EACAhN,MAEAwe,YAAA,SAAArF,EAAAsF,EAAAzR,GACA,OAAAhN,KAAAmd,WAAAsB,EAAAtF,GAAArM,eAAAE,GAAAT,IAAA4M,IAEAyH,MAAA,SAAA/G,EAAAhD,GACA,QAAAzX,IAAAyX,EAEA,OADAtM,QAAAC,KAAA,6FACAxK,KAAAyZ,aAAAI,EAAAhD,GAGA,IAAAnX,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EAIA,OAHA5W,KAAAN,EAAAiX,EAAAkD,EAAAjD,IAAAiD,EAAAlD,EACA3W,KAAA2W,EAAAC,EAAAiD,EAAAna,IAAAma,EAAAjD,EACA5W,KAAA4W,EAAAlX,EAAAma,EAAAlD,IAAAkD,EAAAna,EACAM,MAEAyZ,aAAA,SAAAQ,EAAApR,GACA,IAAAgY,EAAA5G,EAAAva,EACAohB,EAAA7G,EAAAtD,EACAoK,EAAA9G,EAAArD,EACAoK,EAAAnY,EAAAnJ,EACAuhB,EAAApY,EAAA8N,EACAuK,EAAArY,EAAA+N,EAIA,OAHA5W,KAAAN,EAAAohB,EAAAI,EAAAH,EAAAE,EACAjhB,KAAA2W,EAAAoK,EAAAC,EAAAH,EAAAK,EACAlhB,KAAA4W,EAAAiK,EAAAI,EAAAH,EAAAE,EACAhhB,MAEAmhB,gBAAA,SAAAC,GACA,IAAA9X,EAAA8X,EAAA7H,IAAAvZ,MAAAohB,EAAAtH,WACA,OAAA9Z,KAAAkJ,KAAAkY,GAAAtU,eAAAxD,IAEA+X,eAAA,WACA,IAAAlI,EACA,gBAAAmI,GAGA,YAFAliB,IAAA+Z,MAAA,IAAA5a,EAAA+a,SACAH,EAAAjQ,KAAAlJ,MAAAmhB,gBAAAG,GACAthB,KAAA4M,IAAAuM,IALA,GAQAoI,QAAA,WAGA,IAAApI,EACA,gBAAAqI,GAEA,YADApiB,IAAA+Z,MAAA,IAAA5a,EAAA+a,SACAtZ,KAAA4M,IAAAuM,EAAAjQ,KAAAsY,GAAA1U,eAAA,EAAA9M,KAAAuZ,IAAAiI,MANA,GASAC,QAAA,SAAA5H,GACA,IAAA6H,EAAA1hB,KAAAuZ,IAAAM,GAAAta,KAAAkM,KAAAzL,KAAA8Z,WAAAD,EAAAC,YAEA,OAAAva,KAAAoiB,KAAApjB,EAAAgB,KAAA2K,MAAAwX,GAAA,OAEAxD,WAAA,SAAArE,GACA,OAAAta,KAAAkM,KAAAzL,KAAAme,kBAAAtE,KAEAsE,kBAAA,SAAAtE,GACA,IAAAuE,EAAApe,KAAAN,EAAAma,EAAAna,EACA2e,EAAAre,KAAA2W,EAAAkD,EAAAlD,EACAiL,EAAA5hB,KAAA4W,EAAAiD,EAAAjD,EACA,OAAAwH,IAAAC,IAAAuD,KAEAtD,oBAAA,SAAAzE,GACA,OAAAta,KAAAia,IAAAxZ,KAAAN,EAAAma,EAAAna,GAAAH,KAAAia,IAAAxZ,KAAA2W,EAAAkD,EAAAlD,GAAApX,KAAAia,IAAAxZ,KAAA4W,EAAAiD,EAAAjD,IAEAiL,iBAAA,SAAA9X,GACA,IAAA+X,EAAAviB,KAAAsY,IAAA9N,EAAAgY,KAAAhY,EAAAiY,OAIA,OAHAhiB,KAAAN,EAAAoiB,EAAAviB,KAAAsY,IAAA9N,EAAA2X,OACA1hB,KAAA2W,EAAApX,KAAAkY,IAAA1N,EAAAgY,KAAAhY,EAAAiY,OACAhiB,KAAA4W,EAAAkL,EAAAviB,KAAAkY,IAAA1N,EAAA2X,OACA1hB,MAEAiiB,sBAAA,SAAAxX,GACA,OAAAzK,KAAAkiB,oBAAAzX,EAAA,IAEA0X,mBAAA,SAAA1X,GACA,IAAA2X,EAAApiB,KAAAkiB,oBAAAzX,EAAA,GAAA3L,SACAujB,EAAAriB,KAAAkiB,oBAAAzX,EAAA,GAAA3L,SACAwjB,EAAAtiB,KAAAkiB,oBAAAzX,EAAA,GAAA3L,SAIA,OAHAkB,KAAAN,EAAA0iB,EACApiB,KAAA2W,EAAA0L,EACAriB,KAAA4W,EAAA0L,EACAtiB,MAEAkiB,oBAAA,SAAAzX,EAAAlK,GACA,qBAAAkK,EAAA,CACAF,QAAAC,KAAA,qEACA,IAAA+X,EAAA9X,EACAA,EAAAlK,EACAA,EAAAgiB,EAGA,OAAAviB,KAAAmN,UAAA1C,EAAA8N,SAAA,EAAAhY,IAEA0M,OAAA,SAAA4M,GACA,OAAAA,EAAAna,IAAAM,KAAAN,GAAAma,EAAAlD,IAAA3W,KAAA2W,GAAAkD,EAAAjD,IAAA5W,KAAA4W,GAEAzJ,UAAA,SAAAC,EAAAC,GAKA,YAJAjO,IAAAiO,MAAA,GACArN,KAAAN,EAAA0N,EAAAC,GACArN,KAAA2W,EAAAvJ,EAAAC,EAAA,GACArN,KAAA4W,EAAAxJ,EAAAC,EAAA,GACArN,MAEAsN,QAAA,SAAAF,EAAAC,GAMA,YALAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAAN,EACA0N,EAAAC,EAAA,GAAArN,KAAA2W,EACAvJ,EAAAC,EAAA,GAAArN,KAAA4W,EACAxJ,GAEAsR,cAAA,SAAAC,EAAApe,EAAA8M,GAMA,YALAjO,IAAAiO,MAAA,GACA9M,IAAAoe,EAAAC,SAAAvR,EACArN,KAAAN,EAAAif,EAAAvR,MAAA7M,GACAP,KAAA2W,EAAAgI,EAAAvR,MAAA7M,EAAA,GACAP,KAAA4W,EAAA+H,EAAAvR,MAAA7M,EAAA,GACAP,OAYAzB,EAAAikB,QAAA,SAAA9iB,EAAAiX,EAAAC,EAAAC,GACA7W,KAAAN,KAAA,EACAM,KAAA2W,KAAA,EACA3W,KAAA4W,KAAA,EACA5W,KAAA6W,OAAAzX,IAAAyX,IAAA,GAGAtY,EAAAikB,QAAA7iB,UAAA,CACAqJ,YAAAzK,EAAAikB,QACA1Z,IAAA,SAAApJ,EAAAiX,EAAAC,EAAAC,GAKA,OAJA7W,KAAAN,IACAM,KAAA2W,IACA3W,KAAA4W,IACA5W,KAAA6W,IACA7W,MAEAqJ,UAAA,SAAAC,GAKA,OAJAtJ,KAAAN,EAAA4J,EACAtJ,KAAA2W,EAAArN,EACAtJ,KAAA4W,EAAAtN,EACAtJ,KAAA6W,EAAAvN,EACAtJ,MAEA6c,KAAA,SAAAnd,GAEA,OADAM,KAAAN,IACAM,MAEA8c,KAAA,SAAAnG,GAEA,OADA3W,KAAA2W,IACA3W,MAEA+e,KAAA,SAAAnI,GAEA,OADA5W,KAAA4W,IACA5W,MAEAyiB,KAAA,SAAA5L,GAEA,OADA7W,KAAA6W,IACA7W,MAEA+c,aAAA,SAAAxc,EAAA0I,GACA,OAAA1I,GACA,OACAP,KAAAN,EAAAuJ,EACA,MAEA,OACAjJ,KAAA2W,EAAA1N,EACA,MAEA,OACAjJ,KAAA4W,EAAA3N,EACA,MAEA,OACAjJ,KAAA6W,EAAA5N,EACA,MAEA,QACA,UAAAhK,MAAA,0BAAAsB,KAGAyc,aAAA,SAAAzc,GACA,OAAAA,GACA,OACA,OAAAP,KAAAN,EAEA,OACA,OAAAM,KAAA2W,EAEA,OACA,OAAA3W,KAAA4W,EAEA,OACA,OAAA5W,KAAA6W,EAEA,QACA,UAAA5X,MAAA,0BAAAsB,KAGA2K,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA4W,EAAA5W,KAAA6W,IAEA3N,KAAA,SAAA2Q,GAKA,OAJA7Z,KAAAN,EAAAma,EAAAna,EACAM,KAAA2W,EAAAkD,EAAAlD,EACA3W,KAAA4W,EAAAiD,EAAAjD,EACA5W,KAAA6W,OAAAzX,IAAAya,EAAAhD,EAAAgD,EAAAhD,EAAA,EACA7W,MAEAuM,IAAA,SAAAsN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAid,WAAApD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,KAAA6W,GAAAgD,EAAAhD,EACA7W,OAEA2M,UAAA,SAAA5C,GAKA,OAJA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,KAAA4W,GAAA7M,EACA/J,KAAA6W,GAAA9M,EACA/J,MAEAid,WAAA,SAAAhD,EAAApR,GAKA,OAJA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,KAAA4W,EAAAqD,EAAArD,EAAA/N,EAAA+N,EACA5W,KAAA6W,EAAAoD,EAAApD,EAAAhO,EAAAgO,EACA7W,MAEAkd,gBAAA,SAAArD,EAAA9P,GAKA,OAJA/J,KAAAN,GAAAma,EAAAna,EAAAqK,EACA/J,KAAA2W,GAAAkD,EAAAlD,EAAA5M,EACA/J,KAAA4W,GAAAiD,EAAAjD,EAAA7M,EACA/J,KAAA6W,GAAAgD,EAAAhD,EAAA9M,EACA/J,MAEA4M,IAAA,SAAAiN,EAAAhD,GACA,YAAAzX,IAAAyX,GACAtM,QAAAC,KAAA,yFACAxK,KAAAmd,WAAAtD,EAAAhD,KAGA7W,KAAAN,GAAAma,EAAAna,EACAM,KAAA2W,GAAAkD,EAAAlD,EACA3W,KAAA4W,GAAAiD,EAAAjD,EACA5W,KAAA6W,GAAAgD,EAAAhD,EACA7W,OAEAod,UAAA,SAAArT,GAKA,OAJA/J,KAAAN,GAAAqK,EACA/J,KAAA2W,GAAA5M,EACA/J,KAAA4W,GAAA7M,EACA/J,KAAA6W,GAAA9M,EACA/J,MAEAmd,WAAA,SAAAlD,EAAApR,GAKA,OAJA7I,KAAAN,EAAAua,EAAAva,EAAAmJ,EAAAnJ,EACAM,KAAA2W,EAAAsD,EAAAtD,EAAA9N,EAAA8N,EACA3W,KAAA4W,EAAAqD,EAAArD,EAAA/N,EAAA+N,EACA5W,KAAA6W,EAAAoD,EAAApD,EAAAhO,EAAAgO,EACA7W,MAEA8M,eAAA,SAAAxD,GAaA,OAZA+T,SAAA/T,IACAtJ,KAAAN,GAAA4J,EACAtJ,KAAA2W,GAAArN,EACAtJ,KAAA4W,GAAAtN,EACAtJ,KAAA6W,GAAAvN,IAEAtJ,KAAAN,EAAA,EACAM,KAAA2W,EAAA,EACA3W,KAAA4W,EAAA,EACA5W,KAAA6W,EAAA,GAGA7W,MAEAuf,aAAA,SAAA9U,GACA,IAAA/K,EAAAM,KAAAN,EACAiX,EAAA3W,KAAA2W,EACAC,EAAA5W,KAAA4W,EACAC,EAAA7W,KAAA6W,EACAyI,EAAA7U,EAAA8N,SAKA,OAJAvY,KAAAN,EAAA4f,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,IAAAzI,EACA7W,KAAA2W,EAAA2I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,GAAA1I,EAAA0I,EAAA,IAAAzI,EACA7W,KAAA4W,EAAA0I,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EAAA0I,EAAA,IAAAzI,EACA7W,KAAA6W,EAAAyI,EAAA,GAAA5f,EAAA4f,EAAA,GAAA3I,EAAA2I,EAAA,IAAA1I,EAAA0I,EAAA,IAAAzI,EACA7W,MAEAud,aAAA,SAAAjU,GACA,OAAAtJ,KAAA8M,eAAA,EAAAxD,IAEAoZ,2BAAA,SAAA9Y,GAGA5J,KAAA6W,EAAA,EAAAtX,KAAAoiB,KAAA/X,EAAAiN,GACA,IAAA9M,EAAAxK,KAAAkM,KAAA,EAAA7B,EAAAiN,EAAAjN,EAAAiN,GAYA,OAVA9M,EAAA,MACA/J,KAAAN,EAAA,EACAM,KAAA2W,EAAA,EACA3W,KAAA4W,EAAA,IAEA5W,KAAAN,EAAAkK,EAAAlK,EAAAqK,EACA/J,KAAA2W,EAAA/M,EAAA+M,EAAA5M,EACA/J,KAAA4W,EAAAhN,EAAAgN,EAAA7M,GAGA/J,MAEA2iB,+BAAA,SAAAlY,GAGA,IAAA0N,EACAzY,EACAiX,EACAC,EAMA0B,EAAA7N,EAAA8N,SACAC,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,IAEA,GAAA/Y,KAAAia,IAAAf,EAAAE,GAfA,KAeApZ,KAAAia,IAAAd,EAAAI,GAfA,KAeAvZ,KAAAia,IAAAX,EAAAE,GAfA,IAeA,CAIA,GAAAxZ,KAAAia,IAAAf,EAAAE,GAjBA,IAiBApZ,KAAAia,IAAAd,EAAAI,GAjBA,IAiBAvZ,KAAAia,IAAAX,EAAAE,GAjBA,IAiBAxZ,KAAAia,IAAAhB,EAAAI,EAAAI,EAAA,GAjBA,GAoBA,OADAhZ,KAAA8I,IAAA,SACA9I,KAIAmY,EAAA5Y,KAAA0e,GACA,IAAA2E,GAAApK,EAAA,KACAqK,GAAAjK,EAAA,KACAkK,GAAA9J,EAAA,KACA+J,GAAAtK,EAAAE,GAAA,EACAqK,GAAAtK,EAAAI,GAAA,EACAmK,GAAApK,EAAAE,GAAA,EAsCA,OApCA6J,EAAAC,GAAAD,EAAAE,EAEAF,EApCA,KAqCAljB,EAAA,EACAiX,EAAA,WACAC,EAAA,aAGAD,EAAAoM,GADArjB,EAAAH,KAAAkM,KAAAmX,IAEAhM,EAAAoM,EAAAtjB,GAESmjB,EAAAC,EAETD,EA/CA,KAgDAnjB,EAAA,WACAiX,EAAA,EACAC,EAAA,aAGAlX,EAAAqjB,GADApM,EAAApX,KAAAkM,KAAAoX,IAEAjM,EAAAqM,EAAAtM,GAIAmM,EA1DA,KA2DApjB,EAAA,WACAiX,EAAA,WACAC,EAAA,IAGAlX,EAAAsjB,GADApM,EAAArX,KAAAkM,KAAAqX,IAEAnM,EAAAsM,EAAArM,GAIA5W,KAAA8I,IAAApJ,EAAAiX,EAAAC,EAAAuB,GACAnY,KAIA,IAAA+J,EAAAxK,KAAAkM,MAAAsN,EAAAF,IAAAE,EAAAF,IAAAH,EAAAI,IAAAJ,EAAAI,IAAAH,EAAAF,IAAAE,EAAAF,IASA,OAPAlZ,KAAAia,IAAAzP,GAAA,OAAAA,EAAA,GAGA/J,KAAAN,GAAAqZ,EAAAF,GAAA9O,EACA/J,KAAA2W,GAAA+B,EAAAI,GAAA/O,EACA/J,KAAA4W,GAAA+B,EAAAF,GAAA1O,EACA/J,KAAA6W,EAAAtX,KAAAoiB,MAAAnJ,EAAAI,EAAAI,EAAA,MACAhZ,MAEA6K,IAAA,SAAAgP,GAKA,OAJA7Z,KAAAN,EAAAH,KAAAsL,IAAA7K,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAAsL,IAAA7K,KAAA2W,EAAAkD,EAAAlD,GACA3W,KAAA4W,EAAArX,KAAAsL,IAAA7K,KAAA4W,EAAAiD,EAAAjD,GACA5W,KAAA6W,EAAAtX,KAAAsL,IAAA7K,KAAA6W,EAAAgD,EAAAhD,GACA7W,MAEAkM,IAAA,SAAA2N,GAKA,OAJA7Z,KAAAN,EAAAH,KAAA2M,IAAAlM,KAAAN,EAAAma,EAAAna,GACAM,KAAA2W,EAAApX,KAAA2M,IAAAlM,KAAA2W,EAAAkD,EAAAlD,GACA3W,KAAA4W,EAAArX,KAAA2M,IAAAlM,KAAA4W,EAAAiD,EAAAjD,GACA5W,KAAA6W,EAAAtX,KAAA2M,IAAAlM,KAAA6W,EAAAgD,EAAAhD,GACA7W,MAEAkK,MAAA,SAAAW,EAAAqB,GAMA,OAJAlM,KAAAN,EAAAH,KAAA2M,IAAArB,EAAAnL,EAAAH,KAAAsL,IAAAqB,EAAAxM,EAAAM,KAAAN,IACAM,KAAA2W,EAAApX,KAAA2M,IAAArB,EAAA8L,EAAApX,KAAAsL,IAAAqB,EAAAyK,EAAA3W,KAAA2W,IACA3W,KAAA4W,EAAArX,KAAA2M,IAAArB,EAAA+L,EAAArX,KAAAsL,IAAAqB,EAAA0K,EAAA5W,KAAA4W,IACA5W,KAAA6W,EAAAtX,KAAA2M,IAAArB,EAAAgM,EAAAtX,KAAAsL,IAAAqB,EAAA2K,EAAA7W,KAAA6W,IACA7W,MAEAwd,YAAA,WACA,IAAA3S,EAAAqB,EACA,gBAAAuR,EAAAC,GAQA,YAPAte,IAAAyL,IACAA,EAAA,IAAAtM,EAAAikB,QACAtW,EAAA,IAAA3N,EAAAikB,SAGA3X,EAAA/B,IAAA2U,SACAvR,EAAApD,IAAA4U,SACA1d,KAAAkK,MAAAW,EAAAqB,IAVA,GAaA1C,MAAA,WAKA,OAJAxJ,KAAAN,EAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAiK,MAAAxJ,KAAA4W,GACA5W,KAAA6W,EAAAtX,KAAAiK,MAAAxJ,KAAA6W,GACA7W,MAEA4d,KAAA,WAKA,OAJA5d,KAAAN,EAAAH,KAAAqe,KAAA5d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAqe,KAAA5d,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAqe,KAAA5d,KAAA4W,GACA5W,KAAA6W,EAAAtX,KAAAqe,KAAA5d,KAAA6W,GACA7W,MAEA6d,MAAA,WAKA,OAJA7d,KAAAN,EAAAH,KAAAse,MAAA7d,KAAAN,GACAM,KAAA2W,EAAApX,KAAAse,MAAA7d,KAAA2W,GACA3W,KAAA4W,EAAArX,KAAAse,MAAA7d,KAAA4W,GACA5W,KAAA6W,EAAAtX,KAAAse,MAAA7d,KAAA6W,GACA7W,MAEA8d,YAAA,WAKA,OAJA9d,KAAAN,EAAAM,KAAAN,EAAA,EAAAH,KAAAqe,KAAA5d,KAAAN,GAAAH,KAAAiK,MAAAxJ,KAAAN,GACAM,KAAA2W,EAAA3W,KAAA2W,EAAA,EAAApX,KAAAqe,KAAA5d,KAAA2W,GAAApX,KAAAiK,MAAAxJ,KAAA2W,GACA3W,KAAA4W,EAAA5W,KAAA4W,EAAA,EAAArX,KAAAqe,KAAA5d,KAAA4W,GAAArX,KAAAiK,MAAAxJ,KAAA4W,GACA5W,KAAA6W,EAAA7W,KAAA6W,EAAA,EAAAtX,KAAAqe,KAAA5d,KAAA6W,GAAAtX,KAAAiK,MAAAxJ,KAAA6W,GACA7W,MAEA+d,OAAA,WAKA,OAJA/d,KAAAN,GAAAM,KAAAN,EACAM,KAAA2W,GAAA3W,KAAA2W,EACA3W,KAAA4W,GAAA5W,KAAA4W,EACA5W,KAAA6W,GAAA7W,KAAA6W,EACA7W,MAEAuZ,IAAA,SAAAM,GACA,OAAA7Z,KAAAN,EAAAma,EAAAna,EAAAM,KAAA2W,EAAAkD,EAAAlD,EAAA3W,KAAA4W,EAAAiD,EAAAjD,EAAA5W,KAAA6W,EAAAgD,EAAAhD,GAEAiD,SAAA,WACA,OAAA9Z,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,EAAA3W,KAAA4W,EAAA5W,KAAA4W,EAAA5W,KAAA6W,EAAA7W,KAAA6W,GAEA/X,OAAA,WACA,OAAAS,KAAAkM,KAAAzL,KAAAN,EAAAM,KAAAN,EAAAM,KAAA2W,EAAA3W,KAAA2W,EAAA3W,KAAA4W,EAAA5W,KAAA4W,EAAA5W,KAAA6W,EAAA7W,KAAA6W,IAEAmH,gBAAA,WACA,OAAAze,KAAAia,IAAAxZ,KAAAN,GAAAH,KAAAia,IAAAxZ,KAAA2W,GAAApX,KAAAia,IAAAxZ,KAAA4W,GAAArX,KAAAia,IAAAxZ,KAAA6W,IAEA6C,UAAA,WACA,OAAA1Z,KAAAud,aAAAvd,KAAAlB,WAEAyf,UAAA,SAAAzf,GACA,OAAAkB,KAAA8M,eAAAhO,EAAAkB,KAAAlB,WAEAiO,KAAA,SAAA8M,EAAA7M,GAKA,OAJAhN,KAAAN,IAAAma,EAAAna,EAAAM,KAAAN,GAAAsN,EACAhN,KAAA2W,IAAAkD,EAAAlD,EAAA3W,KAAA2W,GAAA3J,EACAhN,KAAA4W,IAAAiD,EAAAjD,EAAA5W,KAAA4W,GAAA5J,EACAhN,KAAA6W,IAAAgD,EAAAhD,EAAA7W,KAAA6W,GAAA7J,EACAhN,MAEAwe,YAAA,SAAArF,EAAAsF,EAAAzR,GACA,OAAAhN,KAAAmd,WAAAsB,EAAAtF,GAAArM,eAAAE,GAAAT,IAAA4M,IAEAlM,OAAA,SAAA4M,GACA,OAAAA,EAAAna,IAAAM,KAAAN,GAAAma,EAAAlD,IAAA3W,KAAA2W,GAAAkD,EAAAjD,IAAA5W,KAAA4W,GAAAiD,EAAAhD,IAAA7W,KAAA6W,GAEA1J,UAAA,SAAAC,EAAAC,GAMA,YALAjO,IAAAiO,MAAA,GACArN,KAAAN,EAAA0N,EAAAC,GACArN,KAAA2W,EAAAvJ,EAAAC,EAAA,GACArN,KAAA4W,EAAAxJ,EAAAC,EAAA,GACArN,KAAA6W,EAAAzJ,EAAAC,EAAA,GACArN,MAEAsN,QAAA,SAAAF,EAAAC,GAOA,YANAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAAN,EACA0N,EAAAC,EAAA,GAAArN,KAAA2W,EACAvJ,EAAAC,EAAA,GAAArN,KAAA4W,EACAxJ,EAAAC,EAAA,GAAArN,KAAA6W,EACAzJ,GAEAsR,cAAA,SAAAC,EAAApe,EAAA8M,GAOA,YANAjO,IAAAiO,MAAA,GACA9M,IAAAoe,EAAAC,SAAAvR,EACArN,KAAAN,EAAAif,EAAAvR,MAAA7M,GACAP,KAAA2W,EAAAgI,EAAAvR,MAAA7M,EAAA,GACAP,KAAA4W,EAAA+H,EAAAvR,MAAA7M,EAAA,GACAP,KAAA6W,EAAA8H,EAAAvR,MAAA7M,EAAA,GACAP,OAUAzB,EAAAgZ,MAAA,SAAA7X,EAAAiX,EAAAC,EAAAoB,GACAhY,KAAA8W,GAAApX,GAAA,EACAM,KAAA+W,GAAAJ,GAAA,EACA3W,KAAAgX,GAAAJ,GAAA,EACA5W,KAAAkjB,OAAAlL,GAAAzZ,EAAAgZ,MAAA4L,cAGA5kB,EAAAgZ,MAAA6L,eAAA,sCACA7kB,EAAAgZ,MAAA4L,aAAA,MACA5kB,EAAAgZ,MAAA5X,UAAA,CACAqJ,YAAAzK,EAAAgZ,MAEA7X,QACA,OAAAM,KAAA8W,IAGApX,MAAAuJ,GACAjJ,KAAA8W,GAAA7N,EACAjJ,KAAAkX,oBAGAP,QACA,OAAA3W,KAAA+W,IAGAJ,MAAA1N,GACAjJ,KAAA+W,GAAA9N,EACAjJ,KAAAkX,oBAGAN,QACA,OAAA5W,KAAAgX,IAGAJ,MAAA3N,GACAjJ,KAAAgX,GAAA/N,EACAjJ,KAAAkX,oBAGAc,YACA,OAAAhY,KAAAkjB,QAGAlL,UAAA/O,GACAjJ,KAAAkjB,OAAAja,EACAjJ,KAAAkX,oBAGApO,IAAA,SAAApJ,EAAAiX,EAAAC,EAAAoB,GAMA,OALAhY,KAAA8W,GAAApX,EACAM,KAAA+W,GAAAJ,EACA3W,KAAAgX,GAAAJ,EACA5W,KAAAkjB,OAAAlL,GAAAhY,KAAAkjB,OACAljB,KAAAkX,mBACAlX,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAAgX,GAAAhX,KAAAkjB,SAEAha,KAAA,SAAAmO,GAMA,OALArX,KAAA8W,GAAAO,EAAAP,GACA9W,KAAA+W,GAAAM,EAAAN,GACA/W,KAAAgX,GAAAK,EAAAL,GACAhX,KAAAkjB,OAAA7L,EAAA6L,OACAljB,KAAAkX,mBACAlX,MAEAqY,sBAAA,SAAA5N,EAAAuN,EAAAV,GACA,IAAApN,EAAA3L,EAAAgB,KAAA2K,MAEAoO,EAAA7N,EAAA8N,SACAC,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GACAO,EAAAP,EAAA,GACAQ,EAAAR,EAAA,GACAS,EAAAT,EAAA,GACAU,EAAAV,EAAA,IAqEA,MAlEA,SAFAN,KAAAhY,KAAAkjB,SAGAljB,KAAA+W,GAAAxX,KAAA8jB,KAAAnZ,EAAAwO,GAAA,MAEAnZ,KAAAia,IAAAd,GAAA,QACA1Y,KAAA8W,GAAAvX,KAAAwb,OAAAlC,EAAAG,GACAhZ,KAAAgX,GAAAzX,KAAAwb,OAAAtC,EAAAD,KAEAxY,KAAA8W,GAAAvX,KAAAwb,MAAAhC,EAAAH,GACA5Y,KAAAgX,GAAA,IAEO,QAAAgB,GACPhY,KAAA8W,GAAAvX,KAAA8jB,MAAAnZ,EAAA2O,GAAA,MAEAtZ,KAAAia,IAAAX,GAAA,QACA7Y,KAAA+W,GAAAxX,KAAAwb,MAAArC,EAAAM,GACAhZ,KAAAgX,GAAAzX,KAAAwb,MAAApC,EAAAC,KAEA5Y,KAAA+W,GAAAxX,KAAAwb,OAAAjC,EAAAN,GACAxY,KAAAgX,GAAA,IAEO,QAAAgB,GACPhY,KAAA8W,GAAAvX,KAAA8jB,KAAAnZ,EAAA6O,GAAA,MAEAxZ,KAAAia,IAAAT,GAAA,QACA/Y,KAAA+W,GAAAxX,KAAAwb,OAAAjC,EAAAE,GACAhZ,KAAAgX,GAAAzX,KAAAwb,OAAAtC,EAAAG,KAEA5Y,KAAA+W,GAAA,EACA/W,KAAAgX,GAAAzX,KAAAwb,MAAApC,EAAAH,KAEO,QAAAR,GACPhY,KAAA+W,GAAAxX,KAAA8jB,MAAAnZ,EAAA4O,GAAA,MAEAvZ,KAAAia,IAAAV,GAAA,QACA9Y,KAAA8W,GAAAvX,KAAAwb,MAAAhC,EAAAC,GACAhZ,KAAAgX,GAAAzX,KAAAwb,MAAApC,EAAAH,KAEAxY,KAAA8W,GAAA,EACA9W,KAAAgX,GAAAzX,KAAAwb,OAAAtC,EAAAG,KAEO,QAAAZ,GACPhY,KAAAgX,GAAAzX,KAAA8jB,KAAAnZ,EAAAyO,GAAA,MAEApZ,KAAAia,IAAAb,GAAA,QACA3Y,KAAA8W,GAAAvX,KAAAwb,OAAAlC,EAAAD,GACA5Y,KAAA+W,GAAAxX,KAAAwb,OAAAjC,EAAAN,KAEAxY,KAAA8W,GAAA,EACA9W,KAAA+W,GAAAxX,KAAAwb,MAAArC,EAAAM,KAEO,QAAAhB,GACPhY,KAAAgX,GAAAzX,KAAA8jB,MAAAnZ,EAAAuO,GAAA,MAEAlZ,KAAAia,IAAAf,GAAA,QACAzY,KAAA8W,GAAAvX,KAAAwb,MAAAhC,EAAAH,GACA5Y,KAAA+W,GAAAxX,KAAAwb,MAAArC,EAAAF,KAEAxY,KAAA8W,GAAAvX,KAAAwb,OAAAlC,EAAAG,GACAhZ,KAAA+W,GAAA,IAGAxM,QAAAC,KAAA,kEAAAwN,GAGAhY,KAAAkjB,OAAAlL,GACA,IAAAV,GAAAtX,KAAAkX,mBACAlX,MAEAsjB,kBAAA,WACA,IAAAnD,EACA,gBAAAvW,EAAAoO,EAAAV,GAGA,YAFAlY,IAAA+gB,MAAA,IAAA5hB,EAAA8hB,SACAF,EAAAoD,2BAAA3Z,GACA5J,KAAAqY,sBAAA8H,EAAAnI,EAAAV,IALA,GAQAkM,eAAA,SAAA3J,EAAA7B,GACA,OAAAhY,KAAA8I,IAAA+Q,EAAAna,EAAAma,EAAAlD,EAAAkD,EAAAjD,EAAAoB,GAAAhY,KAAAkjB,SAEAO,QAAA,WAEA,IAAA7Z,EAAA,IAAArL,EAAAmY,WACA,gBAAAgN,GAEA,OADA9Z,EAAAwN,aAAApX,MACAA,KAAAsjB,kBAAA1Z,EAAA8Z,IALA,GAQAzW,OAAA,SAAAoK,GACA,OAAAA,EAAAP,KAAA9W,KAAA8W,IAAAO,EAAAN,KAAA/W,KAAA+W,IAAAM,EAAAL,KAAAhX,KAAAgX,IAAAK,EAAA6L,SAAAljB,KAAAkjB,QAEA/V,UAAA,SAAAC,GAMA,OALApN,KAAA8W,GAAA1J,EAAA,GACApN,KAAA+W,GAAA3J,EAAA,GACApN,KAAAgX,GAAA5J,EAAA,QACAhO,IAAAgO,EAAA,KAAApN,KAAAkjB,OAAA9V,EAAA,IACApN,KAAAkX,mBACAlX,MAEAsN,QAAA,SAAAF,EAAAC,GAOA,YANAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACAD,EAAAC,GAAArN,KAAA8W,GACA1J,EAAAC,EAAA,GAAArN,KAAA+W,GACA3J,EAAAC,EAAA,GAAArN,KAAAgX,GACA5J,EAAAC,EAAA,GAAArN,KAAAkjB,OACA9V,GAEAuW,UAAA,SAAAC,GACA,OAAAA,EACAA,EAAA9a,IAAA9I,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAAgX,IAEA,IAAAzY,EAAA+a,QAAAtZ,KAAA8W,GAAA9W,KAAA+W,GAAA/W,KAAAgX,KAGAkE,SAAA,SAAAC,GAEA,OADAnb,KAAAkX,iBAAAiE,EACAnb,MAEAkX,iBAAA,cAOA3Y,EAAAslB,MAAA,SAAAC,EAAAC,GACA/jB,KAAA8jB,WAAA1kB,IAAA0kB,IAAA,IAAAvlB,EAAA+a,QACAtZ,KAAA+jB,SAAA3kB,IAAA2kB,IAAA,IAAAxlB,EAAA+a,SAGA/a,EAAAslB,MAAAlkB,UAAA,CACAqJ,YAAAzK,EAAAslB,MACA/a,IAAA,SAAAgb,EAAAC,GAGA,OAFA/jB,KAAA8jB,MAAA5a,KAAA4a,GACA9jB,KAAA+jB,IAAA7a,KAAA6a,GACA/jB,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAA8a,GAGA,OAFAhkB,KAAA8jB,MAAA5a,KAAA8a,EAAAF,OACA9jB,KAAA+jB,IAAA7a,KAAA8a,EAAAD,KACA/jB,MAEA8e,OAAA,SAAAhT,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACA2D,WAAAjd,KAAA8jB,MAAA9jB,KAAA+jB,KAAAjX,eAAA,KAEAV,MAAA,SAAAN,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACA6D,WAAAnd,KAAA+jB,IAAA/jB,KAAA8jB,QAEAG,WAAA,WACA,OAAAjkB,KAAA8jB,MAAA3F,kBAAAne,KAAA+jB,MAEAG,SAAA,WACA,OAAAlkB,KAAA8jB,MAAA5F,WAAAle,KAAA+jB,MAEAI,GAAA,SAAAta,EAAAiC,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QACA,OAAAtZ,KAAAoM,MAAAgY,GAAAtX,eAAAjD,GAAA0C,IAAAvM,KAAA8jB,QAEAO,6BAAA,WACA,IAAAC,EAAA,IAAA/lB,EAAA+a,QACAiL,EAAA,IAAAhmB,EAAA+a,QACA,gBAAAkL,EAAAC,GACAH,EAAAnH,WAAAqH,EAAAxkB,KAAA8jB,OACAS,EAAApH,WAAAnd,KAAA+jB,IAAA/jB,KAAA8jB,OACA,IAAAY,EAAAH,EAAAhL,IAAAgL,GAEA1a,EADA0a,EAAAhL,IAAA+K,GACAI,EAMA,OAJAD,IACA5a,EAAAtL,EAAAgB,KAAA2K,MAAAL,EAAA,MAGAA,GAdA,GAiBA8a,oBAAA,SAAAH,EAAAC,EAAA3Y,GACA,IAAAjC,EAAA7J,KAAAqkB,6BAAAG,EAAAC,GACAL,EAAAtY,GAAA,IAAAvN,EAAA+a,QACA,OAAAtZ,KAAAoM,MAAAgY,GAAAtX,eAAAjD,GAAA0C,IAAAvM,KAAA8jB,QAEAvE,aAAA,SAAAY,GAGA,OAFAngB,KAAA8jB,MAAAvE,aAAAY,GACAngB,KAAA+jB,IAAAxE,aAAAY,GACAngB,MAEAiN,OAAA,SAAA+W,GACA,OAAAA,EAAAF,MAAA7W,OAAAjN,KAAA8jB,QAAAE,EAAAD,IAAA9W,OAAAjN,KAAA+jB,OAQAxlB,EAAAqmB,KAAA,SAAA/Z,EAAAqB,GACAlM,KAAA6K,SAAAzL,IAAAyL,IAAA,IAAAtM,EAAAme,QAAAmI,SACA7kB,KAAAkM,SAAA9M,IAAA8M,IAAA,IAAA3N,EAAAme,SAAAmI,WAGAtmB,EAAAqmB,KAAAjlB,UAAA,CACAqJ,YAAAzK,EAAAqmB,KACA9b,IAAA,SAAA+B,EAAAqB,GAGA,OAFAlM,KAAA6K,IAAA3B,KAAA2B,GACA7K,KAAAkM,IAAAhD,KAAAgD,GACAlM,MAEA8kB,cAAA,SAAAC,GACA/kB,KAAAglB,YAEA,QAAAC,EAAA,EAAAC,EAAAH,EAAAjmB,OAAyCmmB,EAAAC,EAAQD,IACjDjlB,KAAAmlB,cAAAJ,EAAAE,IAGA,OAAAjlB,MAEAolB,qBAAA,WACA,IAAAjM,EAAA,IAAA5a,EAAAme,QACA,gBAAAoC,EAAA/T,GACA,IAAAsa,EAAAlM,EAAAjQ,KAAA6B,GAAA+B,eAAA,IAGA,OAFA9M,KAAA6K,IAAA3B,KAAA4V,GAAAlS,IAAAyY,GACArlB,KAAAkM,IAAAhD,KAAA4V,GAAAvS,IAAA8Y,GACArlB,MANA,GASAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAoc,GAGA,OAFAtlB,KAAA6K,IAAA3B,KAAAoc,EAAAza,KACA7K,KAAAkM,IAAAhD,KAAAoc,EAAApZ,KACAlM,MAEAglB,UAAA,WAGA,OAFAhlB,KAAA6K,IAAAnL,EAAAM,KAAA6K,IAAA8L,EAAAkO,IACA7kB,KAAAkM,IAAAxM,EAAAM,KAAAkM,IAAAyK,GAAAkO,IACA7kB,MAEAulB,QAAA,WAEA,OAAAvlB,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAAnL,GAAAM,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA8L,GAEAmI,OAAA,SAAAhT,GAEA,OADAA,GAAA,IAAAvN,EAAAme,SACAO,WAAAjd,KAAA6K,IAAA7K,KAAAkM,KAAAY,eAAA,KAEA/B,KAAA,SAAAe,GAEA,OADAA,GAAA,IAAAvN,EAAAme,SACAS,WAAAnd,KAAAkM,IAAAlM,KAAA6K,MAEAsa,cAAA,SAAAX,GAGA,OAFAxkB,KAAA6K,QAAA2Z,GACAxkB,KAAAkM,QAAAsY,GACAxkB,MAEAwlB,eAAA,SAAApE,GAGA,OAFAphB,KAAA6K,IAAA+B,IAAAwU,GACAphB,KAAAkM,IAAAK,IAAA6U,GACAphB,MAEAylB,eAAA,SAAAnc,GAGA,OAFAtJ,KAAA6K,IAAA8B,WAAArD,GACAtJ,KAAAkM,IAAAS,UAAArD,GACAtJ,MAEA0lB,cAAA,SAAAlB,GACA,QAAAA,EAAA9kB,EAAAM,KAAA6K,IAAAnL,GAAA8kB,EAAA9kB,EAAAM,KAAAkM,IAAAxM,GAAA8kB,EAAA7N,EAAA3W,KAAA6K,IAAA8L,GAAA6N,EAAA7N,EAAA3W,KAAAkM,IAAAyK,IAMAgP,YAAA,SAAAL,GACA,OAAAtlB,KAAA6K,IAAAnL,GAAA4lB,EAAAza,IAAAnL,GAAA4lB,EAAApZ,IAAAxM,GAAAM,KAAAkM,IAAAxM,GAAAM,KAAA6K,IAAA8L,GAAA2O,EAAAza,IAAA8L,GAAA2O,EAAApZ,IAAAyK,GAAA3W,KAAAkM,IAAAyK,GAMAiP,aAAA,SAAApB,EAAA1Y,GAIA,OADAA,GAAA,IAAAvN,EAAAme,SACA5T,KAAA0b,EAAA9kB,EAAAM,KAAA6K,IAAAnL,IAAAM,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAAnL,IAAA8kB,EAAA7N,EAAA3W,KAAA6K,IAAA8L,IAAA3W,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA8L,KAEAkP,cAAA,SAAAP,GAEA,QAAAA,EAAApZ,IAAAxM,EAAAM,KAAA6K,IAAAnL,GAAA4lB,EAAAza,IAAAnL,EAAAM,KAAAkM,IAAAxM,GAAA4lB,EAAApZ,IAAAyK,EAAA3W,KAAA6K,IAAA8L,GAAA2O,EAAAza,IAAA8L,EAAA3W,KAAAkM,IAAAyK,IAMAmP,WAAA,SAAAtB,EAAA1Y,GAEA,OADAA,GAAA,IAAAvN,EAAAme,SACAxT,KAAAsb,GAAAta,MAAAlK,KAAA6K,IAAA7K,KAAAkM,MAEA6Z,gBAAA,WACA,IAAA5M,EAAA,IAAA5a,EAAAme,QACA,gBAAA8H,GAEA,OADArL,EAAAjQ,KAAAsb,GAAAta,MAAAlK,KAAA6K,IAAA7K,KAAAkM,KACAU,IAAA4X,GAAA1lB,UAJA,GAOAknB,UAAA,SAAAV,GAGA,OAFAtlB,KAAA6K,IAAAqB,IAAAoZ,EAAAza,KACA7K,KAAAkM,IAAArB,IAAAya,EAAApZ,KACAlM,MAEAimB,MAAA,SAAAX,GAGA,OAFAtlB,KAAA6K,QAAAya,EAAAza,KACA7K,KAAAkM,QAAAoZ,EAAApZ,KACAlM,MAEAkmB,UAAA,SAAA7Y,GAGA,OAFArN,KAAA6K,IAAA0B,IAAAc,GACArN,KAAAkM,IAAAK,IAAAc,GACArN,MAEAiN,OAAA,SAAAqY,GACA,OAAAA,EAAAza,IAAAoC,OAAAjN,KAAA6K,MAAAya,EAAApZ,IAAAe,OAAAjN,KAAAkM,OASA3N,EAAA4nB,KAAA,SAAAtb,EAAAqB,GACAlM,KAAA6K,SAAAzL,IAAAyL,IAAA,IAAAtM,EAAA+a,QAAAuL,aACA7kB,KAAAkM,SAAA9M,IAAA8M,IAAA,IAAA3N,EAAA+a,SAAAuL,gBAGAtmB,EAAA4nB,KAAAxmB,UAAA,CACAqJ,YAAAzK,EAAA4nB,KACArd,IAAA,SAAA+B,EAAAqB,GAGA,OAFAlM,KAAA6K,IAAA3B,KAAA2B,GACA7K,KAAAkM,IAAAhD,KAAAgD,GACAlM,MAEAomB,aAAA,SAAAhZ,GAQA,IAPA,IAAAiZ,EAAAxB,IACAyB,EAAAzB,IACA0B,EAAA1B,IACA2B,GAAA3B,IACA4B,GAAA5B,IACA6B,GAAA7B,IAEAI,EAAA,EAAAjb,EAAAoD,EAAAtO,OAAuCmmB,EAAAjb,EAAOib,GAAA,GAC9C,IAAAvlB,EAAA0N,EAAA6X,GACAtO,EAAAvJ,EAAA6X,EAAA,GACArO,EAAAxJ,EAAA6X,EAAA,GACAvlB,EAAA2mB,MAAA3mB,GACAiX,EAAA2P,MAAA3P,GACAC,EAAA2P,MAAA3P,GACAlX,EAAA8mB,MAAA9mB,GACAiX,EAAA8P,MAAA9P,GACAC,EAAA8P,MAAA9P,GAGA5W,KAAA6K,IAAA/B,IAAAud,EAAAC,EAAAC,GACAvmB,KAAAkM,IAAApD,IAAA0d,EAAAC,EAAAC,IAEA5B,cAAA,SAAAC,GACA/kB,KAAAglB,YAEA,QAAAC,EAAA,EAAAC,EAAAH,EAAAjmB,OAAyCmmB,EAAAC,EAAQD,IACjDjlB,KAAAmlB,cAAAJ,EAAAE,IAGA,OAAAjlB,MAEAolB,qBAAA,WACA,IAAAjM,EAAA,IAAA5a,EAAA+a,QACA,gBAAAwF,EAAA/T,GACA,IAAAsa,EAAAlM,EAAAjQ,KAAA6B,GAAA+B,eAAA,IAGA,OAFA9M,KAAA6K,IAAA3B,KAAA4V,GAAAlS,IAAAyY,GACArlB,KAAAkM,IAAAhD,KAAA4V,GAAAvS,IAAA8Y,GACArlB,MANA,GASA2mB,cAAA,WAGA,IAAAxN,EAAA,IAAA5a,EAAA+a,QACA,gBAAAsN,GACA,IAAAC,EAAA7mB,KAwCA,OAvCA4mB,EAAAE,mBAAA,GACA9mB,KAAAglB,YACA4B,EAAAG,SAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAC,SAEA,QAAA7nB,IAAA6nB,EACA,GAAAA,aAAA1oB,EAAA2oB,SAGA,IAFA,IAAAC,EAAAF,EAAAE,SAEAlC,EAAA,EAAAC,EAAAiC,EAAAroB,OAAmDmmB,EAAAC,EAAQD,IAC3D9L,EAAAjQ,KAAAie,EAAAlC,IACA9L,EAAAoG,aAAAyH,EAAAvG,aACAoG,EAAA1B,cAAAhM,QAEa,GAAA8N,aAAA1oB,EAAA6oB,eAAA,CACb,IAAAzI,EAAAsI,EAAAI,WAAAC,SAEA,QAAAloB,IAAAuf,EAAA,CACA,IAAAvR,EAAAC,EAAAka,EAEA5I,aAAApgB,EAAAipB,4BACApa,EAAAuR,EAAA8I,KAAAra,MACAC,EAAAsR,EAAAtR,OACAka,EAAA5I,EAAA8I,KAAAF,SAEAna,EAAAuR,EAAAvR,MACAC,EAAA,EACAka,EAAA,GAGA,IAAAtC,EAAA5X,EAAA6X,EAAA9X,EAAAtO,OAAuDmmB,EAAAC,EAAQD,GAAAsC,EAC/DpO,EAAAhM,UAAAC,EAAA6X,GACA9L,EAAAoG,aAAAyH,EAAAvG,aACAoG,EAAA1B,cAAAhM,OAMAnZ,MA7CA,GAgDAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAoc,GAGA,OAFAtlB,KAAA6K,IAAA3B,KAAAoc,EAAAza,KACA7K,KAAAkM,IAAAhD,KAAAoc,EAAApZ,KACAlM,MAEAglB,UAAA,WAGA,OAFAhlB,KAAA6K,IAAAnL,EAAAM,KAAA6K,IAAA8L,EAAA3W,KAAA6K,IAAA+L,EAAAiO,IACA7kB,KAAAkM,IAAAxM,EAAAM,KAAAkM,IAAAyK,EAAA3W,KAAAkM,IAAA0K,GAAAiO,IACA7kB,MAEAulB,QAAA,WAEA,OAAAvlB,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAAnL,GAAAM,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA8L,GAAA3W,KAAAkM,IAAA0K,EAAA5W,KAAA6K,IAAA+L,GAEAkI,OAAA,SAAAhT,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACA2D,WAAAjd,KAAA6K,IAAA7K,KAAAkM,KAAAY,eAAA,KAEA/B,KAAA,SAAAe,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACA6D,WAAAnd,KAAAkM,IAAAlM,KAAA6K,MAEAsa,cAAA,SAAAX,GAGA,OAFAxkB,KAAA6K,QAAA2Z,GACAxkB,KAAAkM,QAAAsY,GACAxkB,MAEAwlB,eAAA,SAAApE,GAGA,OAFAphB,KAAA6K,IAAA+B,IAAAwU,GACAphB,KAAAkM,IAAAK,IAAA6U,GACAphB,MAEAylB,eAAA,SAAAnc,GAGA,OAFAtJ,KAAA6K,IAAA8B,WAAArD,GACAtJ,KAAAkM,IAAAS,UAAArD,GACAtJ,MAEA0lB,cAAA,SAAAlB,GACA,QAAAA,EAAA9kB,EAAAM,KAAA6K,IAAAnL,GAAA8kB,EAAA9kB,EAAAM,KAAAkM,IAAAxM,GAAA8kB,EAAA7N,EAAA3W,KAAA6K,IAAA8L,GAAA6N,EAAA7N,EAAA3W,KAAAkM,IAAAyK,GAAA6N,EAAA5N,EAAA5W,KAAA6K,IAAA+L,GAAA4N,EAAA5N,EAAA5W,KAAAkM,IAAA0K,IAMA+O,YAAA,SAAAL,GACA,OAAAtlB,KAAA6K,IAAAnL,GAAA4lB,EAAAza,IAAAnL,GAAA4lB,EAAApZ,IAAAxM,GAAAM,KAAAkM,IAAAxM,GAAAM,KAAA6K,IAAA8L,GAAA2O,EAAAza,IAAA8L,GAAA2O,EAAApZ,IAAAyK,GAAA3W,KAAAkM,IAAAyK,GAAA3W,KAAA6K,IAAA+L,GAAA0O,EAAAza,IAAA+L,GAAA0O,EAAApZ,IAAA0K,GAAA5W,KAAAkM,IAAA0K,GAMAgP,aAAA,SAAApB,EAAA1Y,GAIA,OADAA,GAAA,IAAAvN,EAAA+a,SACAxQ,KAAA0b,EAAA9kB,EAAAM,KAAA6K,IAAAnL,IAAAM,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAAnL,IAAA8kB,EAAA7N,EAAA3W,KAAA6K,IAAA8L,IAAA3W,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA8L,IAAA6N,EAAA5N,EAAA5W,KAAA6K,IAAA+L,IAAA5W,KAAAkM,IAAA0K,EAAA5W,KAAA6K,IAAA+L,KAEAiP,cAAA,SAAAP,GAEA,QAAAA,EAAApZ,IAAAxM,EAAAM,KAAA6K,IAAAnL,GAAA4lB,EAAAza,IAAAnL,EAAAM,KAAAkM,IAAAxM,GAAA4lB,EAAApZ,IAAAyK,EAAA3W,KAAA6K,IAAA8L,GAAA2O,EAAAza,IAAA8L,EAAA3W,KAAAkM,IAAAyK,GAAA2O,EAAApZ,IAAA0K,EAAA5W,KAAA6K,IAAA+L,GAAA0O,EAAAza,IAAA+L,EAAA5W,KAAAkM,IAAA0K,IAMA8Q,iBAAA,WACA,IAAAC,EACA,gBAAAC,GAKA,YAJAxoB,IAAAuoB,MAAA,IAAAppB,EAAA+a,SAEAtZ,KAAA8lB,WAAA8B,EAAA9I,OAAA6I,GAEAA,EAAAxJ,kBAAAyJ,EAAA9I,SAAA8I,EAAA5F,OAAA4F,EAAA5F,QAPA,GAUA6F,gBAAA,SAAAC,GAGA,IAAAjd,EAAAqB,EA0BA,OAxBA4b,EAAAtG,OAAA9hB,EAAA,GACAmL,EAAAid,EAAAtG,OAAA9hB,EAAAM,KAAA6K,IAAAnL,EACAwM,EAAA4b,EAAAtG,OAAA9hB,EAAAM,KAAAkM,IAAAxM,IAEAmL,EAAAid,EAAAtG,OAAA9hB,EAAAM,KAAAkM,IAAAxM,EACAwM,EAAA4b,EAAAtG,OAAA9hB,EAAAM,KAAA6K,IAAAnL,GAGAooB,EAAAtG,OAAA7K,EAAA,GACA9L,GAAAid,EAAAtG,OAAA7K,EAAA3W,KAAA6K,IAAA8L,EACAzK,GAAA4b,EAAAtG,OAAA7K,EAAA3W,KAAAkM,IAAAyK,IAEA9L,GAAAid,EAAAtG,OAAA7K,EAAA3W,KAAAkM,IAAAyK,EACAzK,GAAA4b,EAAAtG,OAAA7K,EAAA3W,KAAA6K,IAAA8L,GAGAmR,EAAAtG,OAAA5K,EAAA,GACA/L,GAAAid,EAAAtG,OAAA5K,EAAA5W,KAAA6K,IAAA+L,EACA1K,GAAA4b,EAAAtG,OAAA5K,EAAA5W,KAAAkM,IAAA0K,IAEA/L,GAAAid,EAAAtG,OAAA5K,EAAA5W,KAAAkM,IAAA0K,EACA1K,GAAA4b,EAAAtG,OAAA5K,EAAA5W,KAAA6K,IAAA+L,GAGA/L,GAAAid,EAAAC,UAAA7b,GAAA4b,EAAAC,UAEAjC,WAAA,SAAAtB,EAAA1Y,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACApQ,KAAAsb,GAAAta,MAAAlK,KAAA6K,IAAA7K,KAAAkM,MAEA6Z,gBAAA,WACA,IAAA5M,EAAA,IAAA5a,EAAA+a,QACA,gBAAAkL,GAEA,OADArL,EAAAjQ,KAAAsb,GAAAta,MAAAlK,KAAA6K,IAAA7K,KAAAkM,KACAU,IAAA4X,GAAA1lB,UAJA,GAOAkpB,kBAAA,WACA,IAAA7O,EAAA,IAAA5a,EAAA+a,QACA,gBAAAxN,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA0pB,OAGA,OAFA7D,EAAAtF,OAAA9e,KAAA8e,SACAsF,EAAApC,OAAA,GAAAhiB,KAAA+K,KAAAoO,GAAAra,SACAslB,GANA,GASA4B,UAAA,SAAAV,GAKA,OAJAtlB,KAAA6K,IAAAqB,IAAAoZ,EAAAza,KACA7K,KAAAkM,IAAArB,IAAAya,EAAApZ,KAEAlM,KAAAulB,WAAAvlB,KAAAglB,YACAhlB,MAEAimB,MAAA,SAAAX,GAGA,OAFAtlB,KAAA6K,QAAAya,EAAAza,KACA7K,KAAAkM,QAAAoZ,EAAApZ,KACAlM,MAEAuf,aAAA,WACA,IAAAwF,EAAA,KAAAxmB,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,SACA,gBAAA6G,GAEA,OAAAngB,KAAAulB,UAAAvlB,MAEA+kB,EAAA,GAAAjc,IAAA9I,KAAA6K,IAAAnL,EAAAM,KAAA6K,IAAA8L,EAAA3W,KAAA6K,IAAA+L,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAA6K,IAAAnL,EAAAM,KAAA6K,IAAA8L,EAAA3W,KAAAkM,IAAA0K,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAA6K,IAAAnL,EAAAM,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA+L,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAA6K,IAAAnL,EAAAM,KAAAkM,IAAAyK,EAAA3W,KAAAkM,IAAA0K,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAA8L,EAAA3W,KAAA6K,IAAA+L,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAAkM,IAAAxM,EAAAM,KAAA6K,IAAA8L,EAAA3W,KAAAkM,IAAA0K,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAAkM,IAAAxM,EAAAM,KAAAkM,IAAAyK,EAAA3W,KAAA6K,IAAA+L,GAAA2I,aAAAY,GAEA4E,EAAA,GAAAjc,IAAA9I,KAAAkM,IAAAxM,EAAAM,KAAAkM,IAAAyK,EAAA3W,KAAAkM,IAAA0K,GAAA2I,aAAAY,GAEAngB,KAAA8kB,cAAAC,GACA/kB,OAvBA,GA0BAkmB,UAAA,SAAA7Y,GAGA,OAFArN,KAAA6K,IAAA0B,IAAAc,GACArN,KAAAkM,IAAAK,IAAAc,GACArN,MAEAiN,OAAA,SAAAqY,GACA,OAAAA,EAAAza,IAAAoC,OAAAjN,KAAA6K,MAAAya,EAAApZ,IAAAe,OAAAjN,KAAAkM,OAWA3N,EAAA2pB,QAAA,WACAloB,KAAAuY,SAAA,IAAA4P,aAAA,qBAEA3nB,UAAA1B,OAAA,GACAyL,QAAA2U,MAAA,kFAIA3gB,EAAA2pB,QAAAvoB,UAAA,CACAqJ,YAAAzK,EAAA2pB,QACApf,IAAA,SAAAsf,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAtQ,EAAAtY,KAAAuY,SAUA,OATAD,EAAA,GAAA8P,EACA9P,EAAA,GAAAiQ,EACAjQ,EAAA,GAAAoQ,EACApQ,EAAA,GAAA+P,EACA/P,EAAA,GAAAkQ,EACAlQ,EAAA,GAAAqQ,EACArQ,EAAA,GAAAgQ,EACAhQ,EAAA,GAAAmQ,EACAnQ,EAAA,GAAAsQ,EACA5oB,MAEA6oB,SAAA,WAEA,OADA7oB,KAAA8I,IAAA,mBACA9I,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAmE,UAAAnN,KAAAuY,WAEArP,KAAA,SAAAuB,GACA,IAAAqe,EAAAre,EAAA8N,SAEA,OADAvY,KAAA8I,IAAAggB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA9oB,MAEA+oB,eAAA,SAAAte,GACA,IAAAqe,EAAAre,EAAA8N,SAEA,OADAvY,KAAA8I,IAAAggB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACA9oB,MAEAgpB,oBAAA,WACA,IAAA7P,EACA,gBAAA/L,EAAAC,EAAAvO,QACAM,IAAA+Z,MAAA,IAAA5a,EAAA+a,cACAla,IAAAiO,MAAA,QACAjO,IAAAN,MAAAsO,EAAAtO,QAEA,QAAAmmB,EAAA,EAAAgE,EAAA5b,EAAmC4X,EAAAnmB,EAAYmmB,GAAA,EAAAgE,GAAA,EAC/C9P,EAAAhM,UAAAC,EAAA6b,GACA9P,EAAAkG,aAAArf,MACAmZ,EAAA7L,QAAAF,EAAA6b,GAGA,OAAA7b,GAbA,GAgBA8b,cAAA,WACA,IAAA/P,EACA,gBAAAgQ,EAAA9b,EAAAvO,QACAM,IAAA+Z,MAAA,IAAA5a,EAAA+a,cACAla,IAAAiO,MAAA,QACAjO,IAAAN,MAAAqqB,EAAArqB,OAAAqqB,EAAAvK,UAEA,QAAAqG,EAAA,EAAAgE,EAAA5b,EAAmC4X,EAAAnmB,EAAYmmB,IAAAgE,IAC/C9P,EAAAzZ,EAAAypB,EAAAC,KAAAH,GACA9P,EAAAxC,EAAAwS,EAAAE,KAAAJ,GACA9P,EAAAvC,EAAAuS,EAAAG,KAAAL,GACA9P,EAAAkG,aAAArf,MACAmpB,EAAAI,OAAApQ,EAAAzZ,EAAAyZ,EAAAxC,EAAAwC,EAAAvC,GAGA,OAAAuS,GAfA,GAkBArc,eAAA,SAAA/C,GACA,IAAAuO,EAAAtY,KAAAuY,SAUA,OATAD,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACA/J,MAEAwpB,YAAA,WACA,IAAAlR,EAAAtY,KAAAuY,SACA0B,EAAA3B,EAAA,GACAzP,EAAAyP,EAAA,GACApL,EAAAoL,EAAA,GACAmH,EAAAnH,EAAA,GACAgH,EAAAhH,EAAA,GACAmE,EAAAnE,EAAA,GACA1P,EAAA0P,EAAA,GACAxO,EAAAwO,EAAA,GACA2M,EAAA3M,EAAA,GACA,OAAA2B,EAAAqF,EAAA2F,EAAAhL,EAAAwC,EAAA3S,EAAAjB,EAAA4W,EAAAwF,EAAApc,EAAA4T,EAAA7T,EAAAsE,EAAAuS,EAAA3V,EAAAoD,EAAAoS,EAAA1W,GAEA4X,WAAA,SAAAL,EAAAsJ,GACAtJ,aAAA5hB,EAAA8hB,SACA9V,QAAA2U,MAAA,gEAGA,IAAA4J,EAAA3I,EAAA5H,SACAD,EAAAtY,KAAAuY,SACA6P,EAAAU,EAAA,GACAP,EAAAO,EAAA,GACAJ,EAAAI,EAAA,GACAT,EAAAS,EAAA,GACAN,EAAAM,EAAA,GACAH,EAAAG,EAAA,GACAR,EAAAQ,EAAA,GACAL,EAAAK,EAAA,GACAF,EAAAE,EAAA,GACAY,EAAAd,EAAAJ,EAAAG,EAAAF,EACAkB,EAAAhB,EAAAL,EAAAM,EAAAP,EACAuB,EAAAnB,EAAAJ,EAAAG,EAAAF,EACAuB,EAAAzB,EAAAsB,EAAAnB,EAAAoB,EAAAjB,EAAAkB,EAEA,OAAAC,EAAA,CACA,IAAAC,EAAA,oEAEA,GAAAL,EACA,UAAAxqB,MAAA6qB,GAKA,OAHAvf,QAAAC,KAAAsf,GAGA9pB,KAAA6oB,WAGA,IAAAkB,EAAA,EAAAF,EAUA,OATAvR,EAAA,GAAAoR,EAAAK,EACAzR,EAAA,IAAAoQ,EAAAD,EAAAG,EAAAL,GAAAwB,EACAzR,EAAA,IAAAqQ,EAAAJ,EAAAG,EAAAF,GAAAuB,EACAzR,EAAA,GAAAqR,EAAAI,EACAzR,EAAA,IAAAsQ,EAAAR,EAAAM,EAAAJ,GAAAyB,EACAzR,EAAA,IAAAoQ,EAAAL,EAAAM,EAAAP,GAAA2B,EACAzR,EAAA,GAAAsR,EAAAG,EACAzR,EAAA,IAAAiQ,EAAAD,EAAAG,EAAAL,GAAA2B,EACAzR,EAAA,IAAAkQ,EAAAJ,EAAAG,EAAAF,GAAA0B,EACA/pB,MAEAgqB,UAAA,WACA,IAAAC,EACAxf,EAAAzK,KAAAuY,SAUA,OATA0R,EAAAxf,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwf,EACAA,EAAAxf,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwf,EACAA,EAAAxf,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAAwf,EACAjqB,MAEAkqB,qBAAA,SAAA9c,EAAAC,GAEA,OADA9C,QAAAC,KAAA,mFACAxK,KAAAsN,QAAAF,EAAAC,IAEA8c,gBAAA,SAAAC,GACA,OAAApqB,KAAA+oB,eAAAqB,GAAA5J,WAAAxgB,MAAAgqB,aAEAK,mBAAA,SAAA1hB,GACA,IAAA8B,EAAAzK,KAAAuY,SAUA,OATA5P,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACA9B,EAAA,GAAA8B,EAAA,GACAzK,MAEAmN,UAAA,SAAAC,GAEA,OADApN,KAAAuY,SAAAzP,IAAAsE,GACApN,MAEAsN,QAAA,SAAAF,EAAAC,QACAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACA,IAAAiL,EAAAtY,KAAAuY,SAUA,OATAnL,EAAAC,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,IAiBA7O,EAAA8hB,QAAA,WACArgB,KAAAuY,SAAA,IAAA4P,aAAA,mCAEA3nB,UAAA1B,OAAA,GACAyL,QAAA2U,MAAA,kFAIA3gB,EAAA8hB,QAAA1gB,UAAA,CACAqJ,YAAAzK,EAAA8hB,QACAvX,IAAA,SAAAsf,EAAAC,EAAAC,EAAAgC,EAAA/B,EAAAC,EAAAC,EAAA8B,EAAA7B,EAAAC,EAAAC,EAAA4B,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAtS,EAAAtY,KAAAuY,SAiBA,OAhBAD,EAAA,GAAA8P,EACA9P,EAAA,GAAA+P,EACA/P,EAAA,GAAAgQ,EACAhQ,EAAA,IAAAgS,EACAhS,EAAA,GAAAiQ,EACAjQ,EAAA,GAAAkQ,EACAlQ,EAAA,GAAAmQ,EACAnQ,EAAA,IAAAiS,EACAjS,EAAA,GAAAoQ,EACApQ,EAAA,GAAAqQ,EACArQ,EAAA,IAAAsQ,EACAtQ,EAAA,IAAAkS,EACAlS,EAAA,GAAAmS,EACAnS,EAAA,GAAAoS,EACApS,EAAA,IAAAqS,EACArS,EAAA,IAAAsS,EACA5qB,MAEA6oB,SAAA,WAEA,OADA7oB,KAAA8I,IAAA,iCACA9I,MAEAkL,MAAA,WACA,WAAA3M,EAAA8hB,SAAAlT,UAAAnN,KAAAuY,WAEArP,KAAA,SAAAuB,GAEA,OADAzK,KAAAuY,SAAAzP,IAAA2B,EAAA8N,UACAvY,MAEA6qB,aAAA,SAAApgB,GACA,IAAA6N,EAAAtY,KAAAuY,SACAuQ,EAAAre,EAAA8N,SAIA,OAHAD,EAAA,IAAAwQ,EAAA,IACAxQ,EAAA,IAAAwQ,EAAA,IACAxQ,EAAA,IAAAwQ,EAAA,IACA9oB,MAEA8qB,aAAA,SAAAC,EAAAC,EAAAC,GAIA,OAHAF,EAAA7I,oBAAAliB,KAAA,GACAgrB,EAAA9I,oBAAAliB,KAAA,GACAirB,EAAA/I,oBAAAliB,KAAA,GACAA,MAEAkrB,UAAA,SAAAH,EAAAC,EAAAC,GAEA,OADAjrB,KAAA8I,IAAAiiB,EAAArrB,EAAAsrB,EAAAtrB,EAAAurB,EAAAvrB,EAAA,EAAAqrB,EAAApU,EAAAqU,EAAArU,EAAAsU,EAAAtU,EAAA,EAAAoU,EAAAnU,EAAAoU,EAAApU,EAAAqU,EAAArU,EAAA,WACA5W,MAEAmrB,gBAAA,WACA,IAAAhS,EACA,gBAAA1O,QACArL,IAAA+Z,MAAA,IAAA5a,EAAA+a,SACA,IAAAhB,EAAAtY,KAAAuY,SACAuQ,EAAAre,EAAA8N,SACA6S,EAAA,EAAAjS,EAAA+I,oBAAAzX,EAAA,GAAA3L,SACAusB,EAAA,EAAAlS,EAAA+I,oBAAAzX,EAAA,GAAA3L,SACAwsB,EAAA,EAAAnS,EAAA+I,oBAAAzX,EAAA,GAAA3L,SAUA,OATAwZ,EAAA,GAAAwQ,EAAA,GAAAsC,EACA9S,EAAA,GAAAwQ,EAAA,GAAAsC,EACA9S,EAAA,GAAAwQ,EAAA,GAAAsC,EACA9S,EAAA,GAAAwQ,EAAA,GAAAuC,EACA/S,EAAA,GAAAwQ,EAAA,GAAAuC,EACA/S,EAAA,GAAAwQ,EAAA,GAAAuC,EACA/S,EAAA,GAAAwQ,EAAA,GAAAwC,EACAhT,EAAA,GAAAwQ,EAAA,GAAAwC,EACAhT,EAAA,IAAAwQ,EAAA,IAAAwC,EACAtrB,MAlBA,GAqBAurB,sBAAA,SAAAlU,GACAA,aAAA9Y,EAAAgZ,SAAA,GACAhN,QAAA2U,MAAA,wGAGA,IAAA5G,EAAAtY,KAAAuY,SACA7Y,EAAA2X,EAAA3X,EACAiX,EAAAU,EAAAV,EACAC,EAAAS,EAAAT,EACAqD,EAAA1a,KAAAkY,IAAA/X,GACAmJ,EAAAtJ,KAAAsY,IAAAnY,GACAwN,EAAA3N,KAAAkY,IAAAd,GACA8I,EAAAlgB,KAAAsY,IAAAlB,GACA2I,EAAA/f,KAAAkY,IAAAb,GACA6F,EAAAld,KAAAsY,IAAAjB,GAEA,WAAAS,EAAAW,MAAA,CACA,IAAAwT,EAAAvR,EAAAqF,EACAmM,EAAAxR,EAAAwC,EACAiP,EAAA7iB,EAAAyW,EACAqM,EAAA9iB,EAAA4T,EACAnE,EAAA,GAAApL,EAAAoS,EACAhH,EAAA,IAAApL,EAAAuP,EACAnE,EAAA,GAAAmH,EACAnH,EAAA,GAAAmT,EAAAC,EAAAjM,EACAnH,EAAA,GAAAkT,EAAAG,EAAAlM,EACAnH,EAAA,IAAAzP,EAAAqE,EACAoL,EAAA,GAAAqT,EAAAH,EAAA/L,EACAnH,EAAA,GAAAoT,EAAAD,EAAAhM,EACAnH,EAAA,IAAA2B,EAAA/M,OACO,WAAAmK,EAAAW,MAAA,CACP,IAAA4T,EAAA1e,EAAAoS,EACAuM,EAAA3e,EAAAuP,EACAqP,EAAArM,EAAAH,EACAyM,EAAAtM,EAAAhD,EACAnE,EAAA,GAAAsT,EAAAG,EAAAljB,EACAyP,EAAA,GAAAwT,EAAAjjB,EAAAgjB,EACAvT,EAAA,GAAA2B,EAAAwF,EACAnH,EAAA,GAAA2B,EAAAwC,EACAnE,EAAA,GAAA2B,EAAAqF,EACAhH,EAAA,IAAAzP,EACAyP,EAAA,GAAAuT,EAAAhjB,EAAAijB,EACAxT,EAAA,GAAAyT,EAAAH,EAAA/iB,EACAyP,EAAA,IAAA2B,EAAA/M,OACO,WAAAmK,EAAAW,MAAA,CACP4T,EAAA1e,EAAAoS,EACAuM,EAAA3e,EAAAuP,EACAqP,EAAArM,EAAAH,EACAyM,EAAAtM,EAAAhD,EACAnE,EAAA,GAAAsT,EAAAG,EAAAljB,EACAyP,EAAA,IAAA2B,EAAAwC,EACAnE,EAAA,GAAAwT,EAAAD,EAAAhjB,EACAyP,EAAA,GAAAuT,EAAAC,EAAAjjB,EACAyP,EAAA,GAAA2B,EAAAqF,EACAhH,EAAA,GAAAyT,EAAAH,EAAA/iB,EACAyP,EAAA,IAAA2B,EAAAwF,EACAnH,EAAA,GAAAzP,EACAyP,EAAA,IAAA2B,EAAA/M,OACO,WAAAmK,EAAAW,MAAA,CACPwT,EAAAvR,EAAAqF,EACAmM,EAAAxR,EAAAwC,EACAiP,EAAA7iB,EAAAyW,EACAqM,EAAA9iB,EAAA4T,EACAnE,EAAA,GAAApL,EAAAoS,EACAhH,EAAA,GAAAoT,EAAAjM,EAAAgM,EACAnT,EAAA,GAAAkT,EAAA/L,EAAAkM,EACArT,EAAA,GAAApL,EAAAuP,EACAnE,EAAA,GAAAqT,EAAAlM,EAAA+L,EACAlT,EAAA,GAAAmT,EAAAhM,EAAAiM,EACApT,EAAA,IAAAmH,EACAnH,EAAA,GAAAzP,EAAAqE,EACAoL,EAAA,IAAA2B,EAAA/M,OACO,WAAAmK,EAAAW,MAAA,CACP,IAAAgU,EAAA/R,EAAA/M,EACA+e,EAAAhS,EAAAwF,EACAyM,EAAArjB,EAAAqE,EACAif,EAAAtjB,EAAA4W,EACAnH,EAAA,GAAApL,EAAAoS,EACAhH,EAAA,GAAA6T,EAAAH,EAAAvP,EACAnE,EAAA,GAAA4T,EAAAzP,EAAAwP,EACA3T,EAAA,GAAAmE,EACAnE,EAAA,GAAA2B,EAAAqF,EACAhH,EAAA,IAAAzP,EAAAyW,EACAhH,EAAA,IAAAmH,EAAAH,EACAhH,EAAA,GAAA2T,EAAAxP,EAAAyP,EACA5T,EAAA,IAAA0T,EAAAG,EAAA1P,OACO,WAAApF,EAAAW,MAAA,CACPgU,EAAA/R,EAAA/M,EACA+e,EAAAhS,EAAAwF,EACAyM,EAAArjB,EAAAqE,EACAif,EAAAtjB,EAAA4W,EACAnH,EAAA,GAAApL,EAAAoS,EACAhH,EAAA,IAAAmE,EACAnE,EAAA,GAAAmH,EAAAH,EACAhH,EAAA,GAAA0T,EAAAvP,EAAA0P,EACA7T,EAAA,GAAA2B,EAAAqF,EACAhH,EAAA,GAAA2T,EAAAxP,EAAAyP,EACA5T,EAAA,GAAA4T,EAAAzP,EAAAwP,EACA3T,EAAA,GAAAzP,EAAAyW,EACAhH,EAAA,IAAA6T,EAAA1P,EAAAuP,EAYA,OARA1T,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAtY,MAEAujB,2BAAA,SAAA3Z,GACA,IAAA0O,EAAAtY,KAAAuY,SACA7Y,EAAAkK,EAAAlK,EACAiX,EAAA/M,EAAA+M,EACAC,EAAAhN,EAAAgN,EACAC,EAAAjN,EAAAiN,EACAuV,EAAA1sB,IACA2sB,EAAA1V,IACA2V,EAAA1V,IACAgM,EAAAljB,EAAA0sB,EACArJ,EAAArjB,EAAA2sB,EACArJ,EAAAtjB,EAAA4sB,EACAzJ,EAAAlM,EAAA0V,EACApJ,EAAAtM,EAAA2V,EACAxJ,EAAAlM,EAAA0V,EACAC,EAAA1V,EAAAuV,EACAI,EAAA3V,EAAAwV,EACAI,EAAA5V,EAAAyV,EAmBA,OAlBAhU,EAAA,MAAAuK,EAAAC,GACAxK,EAAA,GAAAyK,EAAA0J,EACAnU,EAAA,GAAA0K,EAAAwJ,EACAlU,EAAA,GAAAyK,EAAA0J,EACAnU,EAAA,MAAAsK,EAAAE,GACAxK,EAAA,GAAA2K,EAAAsJ,EACAjU,EAAA,GAAA0K,EAAAwJ,EACAlU,EAAA,GAAA2K,EAAAsJ,EACAjU,EAAA,OAAAsK,EAAAC,GAEAvK,EAAA,KACAA,EAAA,KACAA,EAAA,MAEAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAA,EAAA,MACAtY,MAEA0sB,OAAA,WACA,IAAAhtB,EAAAiX,EAAAC,EACA,gBAAA+V,EAAAvsB,EAAAwsB,QACAxtB,IAAAM,IACAA,EAAA,IAAAnB,EAAA+a,QACA3C,EAAA,IAAApY,EAAA+a,QACA1C,EAAA,IAAArY,EAAA+a,SAGA,IAAAhB,EAAAtY,KAAAuY,SAwBA,OAvBA3B,EAAAuG,WAAAwP,EAAAvsB,GAAAsZ,YAEA,IAAA9C,EAAAkD,aACAlD,IAAA,GAGAlX,EAAA+Z,aAAAmT,EAAAhW,GAAA8C,YAEA,IAAAha,EAAAoa,aACAlD,KAAA,KACAlX,EAAA+Z,aAAAmT,EAAAhW,GAAA8C,aAGA/C,EAAA8C,aAAA7C,EAAAlX,GACA4Y,EAAA,GAAA5Y,IACA4Y,EAAA,GAAA3B,EAAAjX,EACA4Y,EAAA,GAAA1B,EAAAlX,EACA4Y,EAAA,GAAA5Y,EAAAiX,EACA2B,EAAA,GAAA3B,IACA2B,EAAA,GAAA1B,EAAAD,EACA2B,EAAA,GAAA5Y,EAAAkX,EACA0B,EAAA,GAAA3B,EAAAC,EACA0B,EAAA,IAAA1B,IACA5W,MAjCA,GAoCA6M,SAAA,SAAApC,EAAAoiB,GACA,YAAAztB,IAAAytB,GACAtiB,QAAAC,KAAA,oGACAxK,KAAAsgB,iBAAA7V,EAAAoiB,IAGA7sB,KAAAsgB,iBAAAtgB,KAAAyK,IAEAuP,YAAA,SAAAvP,GACA,OAAAzK,KAAAsgB,iBAAA7V,EAAAzK,OAEAsgB,iBAAA,SAAArG,EAAApR,GACA,IAAA2iB,EAAAvR,EAAA1B,SACAmT,EAAA7iB,EAAA0P,SACAD,EAAAtY,KAAAuY,SACAuU,EAAAtB,EAAA,GACAuB,EAAAvB,EAAA,GACAwB,EAAAxB,EAAA,GACAyB,EAAAzB,EAAA,IACA0B,EAAA1B,EAAA,GACA2B,EAAA3B,EAAA,GACA4B,EAAA5B,EAAA,GACA6B,EAAA7B,EAAA,IACA8B,EAAA9B,EAAA,GACA+B,EAAA/B,EAAA,GACAgC,EAAAhC,EAAA,IACAiC,EAAAjC,EAAA,IACAkC,EAAAlC,EAAA,GACAmC,EAAAnC,EAAA,GACAoC,EAAApC,EAAA,IACAqC,EAAArC,EAAA,IACAsC,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GACAsC,EAAAtC,EAAA,GACAuC,EAAAvC,EAAA,IACAwC,EAAAxC,EAAA,GACAyC,EAAAzC,EAAA,GACA0C,EAAA1C,EAAA,GACA2C,EAAA3C,EAAA,IACA4C,EAAA5C,EAAA,GACA6C,EAAA7C,EAAA,GACA8C,EAAA9C,EAAA,IACA+C,EAAA/C,EAAA,IACAgD,EAAAhD,EAAA,GACAiD,EAAAjD,EAAA,GACAkD,EAAAlD,EAAA,IACAmD,EAAAnD,EAAA,IAiBA,OAhBApT,EAAA,GAAAwU,EAAAgB,EAAAf,EAAAmB,EAAAlB,EAAAsB,EAAArB,EAAAyB,EACApW,EAAA,GAAAwU,EAAAiB,EAAAhB,EAAAoB,EAAAnB,EAAAuB,EAAAtB,EAAA0B,EACArW,EAAA,GAAAwU,EAAAkB,EAAAjB,EAAAqB,EAAApB,EAAAwB,EAAAvB,EAAA2B,EACAtW,EAAA,IAAAwU,EAAAmB,EAAAlB,EAAAsB,EAAArB,EAAAyB,EAAAxB,EAAA4B,EACAvW,EAAA,GAAA4U,EAAAY,EAAAX,EAAAe,EAAAd,EAAAkB,EAAAjB,EAAAqB,EACApW,EAAA,GAAA4U,EAAAa,EAAAZ,EAAAgB,EAAAf,EAAAmB,EAAAlB,EAAAsB,EACArW,EAAA,GAAA4U,EAAAc,EAAAb,EAAAiB,EAAAhB,EAAAoB,EAAAnB,EAAAuB,EACAtW,EAAA,IAAA4U,EAAAe,EAAAd,EAAAkB,EAAAjB,EAAAqB,EAAApB,EAAAwB,EACAvW,EAAA,GAAAgV,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EAAAb,EAAAiB,EACApW,EAAA,GAAAgV,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EAAAd,EAAAkB,EACArW,EAAA,IAAAgV,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EAAAf,EAAAmB,EACAtW,EAAA,IAAAgV,EAAAW,EAAAV,EAAAc,EAAAb,EAAAiB,EAAAhB,EAAAoB,EACAvW,EAAA,GAAAoV,EAAAI,EAAAH,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EACApW,EAAA,GAAAoV,EAAAK,EAAAJ,EAAAQ,EAAAP,EAAAW,EAAAV,EAAAc,EACArW,EAAA,IAAAoV,EAAAM,EAAAL,EAAAS,EAAAR,EAAAY,EAAAX,EAAAe,EACAtW,EAAA,IAAAoV,EAAAO,EAAAN,EAAAU,EAAAT,EAAAa,EAAAZ,EAAAgB,EACA7uB,MAEA8uB,gBAAA,SAAA7U,EAAApR,EAAAF,GACA,IAAA2P,EAAAtY,KAAAuY,SAkBA,OAjBAvY,KAAAsgB,iBAAArG,EAAApR,GACAF,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,GAAA2P,EAAA,GACA3P,EAAA,IAAA2P,EAAA,IACA3P,EAAA,IAAA2P,EAAA,IACA3P,EAAA,IAAA2P,EAAA,IACA3P,EAAA,IAAA2P,EAAA,IACA3P,EAAA,IAAA2P,EAAA,IACA3P,EAAA,IAAA2P,EAAA,IACAtY,MAEA8M,eAAA,SAAA/C,GACA,IAAAuO,EAAAtY,KAAAuY,SAiBA,OAhBAD,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,KAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,KAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,KAAAvO,EACAuO,EAAA,KAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,IAAAvO,EACAuO,EAAA,KAAAvO,EACAuO,EAAA,KAAAvO,EACA/J,MAEAgpB,oBAAA,WACA,IAAA7P,EACA,gBAAA/L,EAAAC,EAAAvO,QACAM,IAAA+Z,MAAA,IAAA5a,EAAA+a,cACAla,IAAAiO,MAAA,QACAjO,IAAAN,MAAAsO,EAAAtO,QAEA,QAAAmmB,EAAA,EAAAgE,EAAA5b,EAAmC4X,EAAAnmB,EAAYmmB,GAAA,EAAAgE,GAAA,EAC/C9P,EAAAhM,UAAAC,EAAA6b,GACA9P,EAAAoG,aAAAvf,MACAmZ,EAAA7L,QAAAF,EAAA6b,GAGA,OAAA7b,GAbA,GAgBA8b,cAAA,WACA,IAAA/P,EACA,gBAAAgQ,EAAA9b,EAAAvO,QACAM,IAAA+Z,MAAA,IAAA5a,EAAA+a,cACAla,IAAAiO,MAAA,QACAjO,IAAAN,MAAAqqB,EAAArqB,OAAAqqB,EAAAvK,UAEA,QAAAqG,EAAA,EAAAgE,EAAA5b,EAAmC4X,EAAAnmB,EAAYmmB,IAAAgE,IAC/C9P,EAAAzZ,EAAAypB,EAAAC,KAAAH,GACA9P,EAAAxC,EAAAwS,EAAAE,KAAAJ,GACA9P,EAAAvC,EAAAuS,EAAAG,KAAAL,GACA9P,EAAAoG,aAAAvf,MACAmpB,EAAAI,OAAApQ,EAAAzZ,EAAAyZ,EAAAxC,EAAAwC,EAAAvC,GAGA,OAAAuS,GAfA,GAkBAK,YAAA,WACA,IAAAlR,EAAAtY,KAAAuY,SACA6P,EAAA9P,EAAA,GACA+P,EAAA/P,EAAA,GACAgQ,EAAAhQ,EAAA,GACAgS,EAAAhS,EAAA,IACAiQ,EAAAjQ,EAAA,GACAkQ,EAAAlQ,EAAA,GACAmQ,EAAAnQ,EAAA,GACAiS,EAAAjS,EAAA,IACAoQ,EAAApQ,EAAA,GACAqQ,EAAArQ,EAAA,GACAsQ,EAAAtQ,EAAA,IACAkS,EAAAlS,EAAA,IAOA,OANAA,EAAA,KAMAgS,EAAA7B,EAAAE,EAAAL,EAAAiC,EAAA5B,EAAA2B,EAAA9B,EAAAI,EAAAP,EAAAkC,EAAA3B,EAAAN,EAAAE,EAAAgC,EAAAnC,EAAAI,EAAA+B,GALAlS,EAAA,KAKA8P,EAAAK,EAAA+B,EAAApC,EAAAmC,EAAA3B,EAAA0B,EAAA/B,EAAAK,EAAAN,EAAAC,EAAAiC,EAAAlC,EAAAiC,EAAA7B,EAAA4B,EAAA7B,EAAAC,GAJApQ,EAAA,MAIA8P,EAAAmC,EAAA5B,EAAAP,EAAAI,EAAAgC,EAAAF,EAAA/B,EAAAI,EAAAN,EAAAE,EAAAiC,EAAAF,EAAA9B,EAAAE,EAAAL,EAAAkC,EAAA7B,GAHApQ,EAAA,MAGAgQ,EAAAE,EAAAE,EAAAN,EAAAK,EAAAE,EAAAP,EAAAI,EAAAI,EAAAN,EAAAC,EAAAI,EAAAN,EAAAE,EAAAK,EAAAP,EAAAI,EAAAC,IAEAsB,UAAA,WACA,IACAC,EADA3R,EAAAtY,KAAAuY,SAoBA,OAlBA0R,EAAA3R,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA2R,EACAA,EAAA3R,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA2R,EACAA,EAAA3R,EAAA,GACAA,EAAA,GAAAA,EAAA,GACAA,EAAA,GAAA2R,EACAA,EAAA3R,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAA2R,EACAA,EAAA3R,EAAA,GACAA,EAAA,GAAAA,EAAA,IACAA,EAAA,IAAA2R,EACAA,EAAA3R,EAAA,IACAA,EAAA,IAAAA,EAAA,IACAA,EAAA,IAAA2R,EACAjqB,MAEAkqB,qBAAA,SAAA9c,EAAAC,GAEA,OADA9C,QAAAC,KAAA,mFACAxK,KAAAsN,QAAAF,EAAAC,IAEA0hB,YAAA,WACA,IAAA5V,EACA,kBAGA,YAFA/Z,IAAA+Z,MAAA,IAAA5a,EAAA+a,SACA/O,QAAAC,KAAA,wGACA2O,EAAA+I,oBAAAliB,KAAA,IALA,GAQAgvB,YAAA,SAAAnV,GACA,IAAAvB,EAAAtY,KAAAuY,SAIA,OAHAD,EAAA,IAAAuB,EAAAna,EACA4Y,EAAA,IAAAuB,EAAAlD,EACA2B,EAAA,IAAAuB,EAAAjD,EACA5W,MAEAwgB,WAAA,SAAA/V,EAAAgf,GAEA,IAAAnR,EAAAtY,KAAAuY,SACAuQ,EAAAre,EAAA8N,SACA6P,EAAAU,EAAA,GACAP,EAAAO,EAAA,GACAJ,EAAAI,EAAA,GACA2B,EAAA3B,EAAA,GACAT,EAAAS,EAAA,GACAN,EAAAM,EAAA,GACAH,EAAAG,EAAA,GACA4B,EAAA5B,EAAA,GACAR,EAAAQ,EAAA,GACAL,EAAAK,EAAA,GACAF,EAAAE,EAAA,IACA6B,EAAA7B,EAAA,IACAwB,EAAAxB,EAAA,IACAyB,EAAAzB,EAAA,IACA0B,EAAA1B,EAAA,IACA8B,EAAA9B,EAAA,IACAY,EAAAjB,EAAA+B,EAAAE,EAAAH,EAAA3B,EAAA8B,EAAAH,EAAA5B,EAAAgC,EAAAnC,EAAAgC,EAAAG,EAAAlC,EAAAE,EAAAiC,EAAApC,EAAAI,EAAAgC,EACAjB,EAAAW,EAAA1B,EAAA8B,EAAApC,EAAAkC,EAAAE,EAAAJ,EAAA3B,EAAAgC,EAAAtC,EAAAmC,EAAAG,EAAArC,EAAAK,EAAAiC,EAAAvC,EAAAO,EAAAgC,EACAhB,EAAAtB,EAAAiC,EAAAG,EAAAJ,EAAA7B,EAAAiC,EAAAJ,EAAA9B,EAAAmC,EAAAtC,EAAAkC,EAAAI,EAAArC,EAAAE,EAAAoC,EAAAvC,EAAAI,EAAAmC,EACAqE,EAAA3E,EAAA7B,EAAAE,EAAAL,EAAAiC,EAAA5B,EAAA2B,EAAA9B,EAAAI,EAAAP,EAAAkC,EAAA3B,EAAAN,EAAAE,EAAAgC,EAAAnC,EAAAI,EAAA+B,EACAX,EAAAzB,EAAAsB,EAAAnB,EAAAoB,EAAAjB,EAAAkB,EAAAa,EAAAwE,EAEA,OAAApF,EAAA,CACA,IAAAC,EAAA,oEAEA,GAAAL,EACA,UAAAxqB,MAAA6qB,GAKA,OAHAvf,QAAAC,KAAAsf,GAGA9pB,KAAA6oB,WAGA,IAAAkB,EAAA,EAAAF,EAiBA,OAhBAvR,EAAA,GAAAoR,EAAAK,EACAzR,EAAA,IAAAiS,EAAA3B,EAAA6B,EAAAhC,EAAA+B,EAAAC,EAAAF,EAAA7B,EAAAiC,EAAApC,EAAAiC,EAAAG,EAAAlC,EAAAC,EAAAkC,EAAArC,EAAAK,EAAAgC,GAAAb,EACAzR,EAAA,IAAAkQ,EAAAgC,EAAAC,EAAAF,EAAA5B,EAAA8B,EAAAF,EAAA7B,EAAAgC,EAAAnC,EAAAiC,EAAAE,EAAAlC,EAAAE,EAAAkC,EAAArC,EAAAI,EAAAiC,GAAAb,EACAzR,EAAA,IAAAmQ,EAAAE,EAAA8B,EAAAjC,EAAAI,EAAA6B,EAAAhC,EAAAC,EAAAgC,EAAAnC,EAAAK,EAAA8B,EAAAlC,EAAAE,EAAAiC,EAAApC,EAAAI,EAAAgC,GAAAZ,EACAzR,EAAA,GAAAqR,EAAAI,EACAzR,EAAA,IAAAgQ,EAAAkC,EAAAC,EAAAH,EAAA1B,EAAA6B,EAAAH,EAAA5B,EAAAiC,EAAAvC,EAAAoC,EAAAG,EAAArC,EAAAI,EAAAkC,EAAAxC,EAAAQ,EAAAgC,GAAAb,EACAzR,EAAA,IAAAgS,EAAA3B,EAAA8B,EAAApC,EAAAmC,EAAAC,EAAAH,EAAA5B,EAAAgC,EAAAtC,EAAAoC,EAAAE,EAAArC,EAAAK,EAAAkC,EAAAxC,EAAAO,EAAAiC,GAAAb,EACAzR,EAAA,IAAA+P,EAAAO,EAAA6B,EAAAnC,EAAAK,EAAA8B,EAAAnC,EAAAI,EAAAgC,EAAAtC,EAAAQ,EAAA8B,EAAArC,EAAAK,EAAAiC,EAAAvC,EAAAO,EAAAgC,GAAAZ,EACAzR,EAAA,GAAAsR,EAAAG,EACAzR,EAAA,IAAAgS,EAAA7B,EAAAgC,EAAAnC,EAAAiC,EAAAE,EAAAH,EAAA/B,EAAAoC,EAAAvC,EAAAmC,EAAAI,EAAArC,EAAAC,EAAAqC,EAAAxC,EAAAK,EAAAmC,GAAAb,EACAzR,EAAA,KAAA+P,EAAAkC,EAAAE,EAAAH,EAAA9B,EAAAiC,EAAAH,EAAA/B,EAAAmC,EAAAtC,EAAAmC,EAAAG,EAAArC,EAAAE,EAAAqC,EAAAxC,EAAAI,EAAAoC,GAAAb,EACAzR,EAAA,KAAAgQ,EAAAE,EAAAiC,EAAApC,EAAAI,EAAAgC,EAAAnC,EAAAC,EAAAmC,EAAAtC,EAAAK,EAAAiC,EAAArC,EAAAE,EAAAoC,EAAAvC,EAAAI,EAAAmC,GAAAZ,EACAzR,EAAA,IAAA2W,EAAAlF,EACAzR,EAAA,KAAAgQ,EAAAiC,EAAA7B,EAAA4B,EAAA7B,EAAAC,EAAA4B,EAAA/B,EAAAK,EAAAR,EAAAmC,EAAA3B,EAAAN,EAAAC,EAAAiC,EAAApC,EAAAK,EAAA+B,GAAAT,EACAzR,EAAA,KAAAgS,EAAA9B,EAAAE,EAAAL,EAAAkC,EAAA7B,EAAA4B,EAAA/B,EAAAI,EAAAP,EAAAmC,EAAA5B,EAAAN,EAAAE,EAAAiC,EAAApC,EAAAI,EAAAgC,GAAAT,EACAzR,EAAA,KAAA+P,EAAAI,EAAAC,EAAAJ,EAAAE,EAAAE,EAAAJ,EAAAC,EAAAI,EAAAP,EAAAK,EAAAE,EAAAN,EAAAE,EAAAK,EAAAR,EAAAI,EAAAI,GAAAmB,EACA/pB,MAEAkvB,MAAA,SAAArV,GACA,IAAAvB,EAAAtY,KAAAuY,SACA7Y,EAAAma,EAAAna,EACAiX,EAAAkD,EAAAlD,EACAC,EAAAiD,EAAAjD,EAaA,OAZA0B,EAAA,IAAA5Y,EACA4Y,EAAA,IAAA3B,EACA2B,EAAA,IAAA1B,EACA0B,EAAA,IAAA5Y,EACA4Y,EAAA,IAAA3B,EACA2B,EAAA,IAAA1B,EACA0B,EAAA,IAAA5Y,EACA4Y,EAAA,IAAA3B,EACA2B,EAAA,KAAA1B,EACA0B,EAAA,IAAA5Y,EACA4Y,EAAA,IAAA3B,EACA2B,EAAA,KAAA1B,EACA5W,MAEAmvB,kBAAA,WACA,IAAA7W,EAAAtY,KAAAuY,SACA6W,EAAA9W,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACA+W,EAAA/W,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GACAgX,EAAAhX,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IACA,OAAA/Y,KAAAkM,KAAAlM,KAAA2M,IAAAkjB,EAAAC,EAAAC,KAEAC,gBAAA,SAAA7vB,EAAAiX,EAAAC,GAEA,OADA5W,KAAA8I,IAAA,MAAApJ,EAAA,MAAAiX,EAAA,MAAAC,EAAA,SACA5W,MAEAwvB,cAAA,SAAA9N,GACA,IAAAxU,EAAA3N,KAAAkY,IAAAiK,GACA3X,EAAAxK,KAAAsY,IAAA6J,GAEA,OADA1hB,KAAA8I,IAAA,UAAAoE,GAAAnD,EAAA,IAAAA,EAAAmD,EAAA,WACAlN,MAEAyvB,cAAA,SAAA/N,GACA,IAAAxU,EAAA3N,KAAAkY,IAAAiK,GACA3X,EAAAxK,KAAAsY,IAAA6J,GAEA,OADA1hB,KAAA8I,IAAAoE,EAAA,EAAAnD,EAAA,WAAAA,EAAA,EAAAmD,EAAA,WACAlN,MAEA0vB,cAAA,SAAAhO,GACA,IAAAxU,EAAA3N,KAAAkY,IAAAiK,GACA3X,EAAAxK,KAAAsY,IAAA6J,GAEA,OADA1hB,KAAA8I,IAAAoE,GAAAnD,EAAA,IAAAA,EAAAmD,EAAA,qBACAlN,MAEA2vB,iBAAA,SAAAzX,EAAAC,GAEA,IAAAjL,EAAA3N,KAAAkY,IAAAU,GACApO,EAAAxK,KAAAsY,IAAAM,GACAtO,EAAA,EAAAqD,EACAxN,EAAAwY,EAAAxY,EACAiX,EAAAuB,EAAAvB,EACAC,EAAAsB,EAAAtB,EACAgZ,EAAA/lB,EAAAnK,EACAmwB,EAAAhmB,EAAA8M,EAEA,OADA3W,KAAA8I,IAAA8mB,EAAAlwB,EAAAwN,EAAA0iB,EAAAjZ,EAAA5M,EAAA6M,EAAAgZ,EAAAhZ,EAAA7M,EAAA4M,EAAA,EAAAiZ,EAAAjZ,EAAA5M,EAAA6M,EAAAiZ,EAAAlZ,EAAAzJ,EAAA2iB,EAAAjZ,EAAA7M,EAAArK,EAAA,EAAAkwB,EAAAhZ,EAAA7M,EAAA4M,EAAAkZ,EAAAjZ,EAAA7M,EAAArK,EAAAmK,EAAA+M,IAAA1J,EAAA,WACAlN,MAEA8vB,UAAA,SAAApwB,EAAAiX,EAAAC,GAEA,OADA5W,KAAA8I,IAAApJ,EAAA,QAAAiX,EAAA,QAAAC,EAAA,WACA5W,MAEA+vB,QAAA,SAAAzI,EAAAnQ,EAAA+X,GAIA,OAHAlvB,KAAAujB,2BAAApM,GACAnX,KAAAkvB,SACAlvB,KAAAgvB,YAAA1H,GACAtnB,MAEAgwB,UAAA,WACA,IAAA5O,EAAAjB,EACA,gBAAAmH,EAAAnQ,EAAA+X,QACA9vB,IAAAgiB,IACAA,EAAA,IAAA7iB,EAAA+a,QACA6G,EAAA,IAAA5hB,EAAA8hB,SAGA,IAAA/H,EAAAtY,KAAAuY,SACA6J,EAAAhB,EAAAtY,IAAAwP,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAxZ,SACAujB,EAAAjB,EAAAtY,IAAAwP,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAxZ,SACAwjB,EAAAlB,EAAAtY,IAAAwP,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAAAxZ,SAEAkB,KAAAwpB,cAEA,IACApH,MAGAkF,EAAA5nB,EAAA4Y,EAAA,IACAgP,EAAA3Q,EAAA2B,EAAA,IACAgP,EAAA1Q,EAAA0B,EAAA,IAEA6H,EAAA5H,SAAAzP,IAAA9I,KAAAuY,UAEA,IAAA0X,EAAA,EAAA7N,EACA8N,EAAA,EAAA7N,EACA8N,EAAA,EAAA7N,EAcA,OAbAnC,EAAA5H,SAAA,IAAA0X,EACA9P,EAAA5H,SAAA,IAAA0X,EACA9P,EAAA5H,SAAA,IAAA0X,EACA9P,EAAA5H,SAAA,IAAA2X,EACA/P,EAAA5H,SAAA,IAAA2X,EACA/P,EAAA5H,SAAA,IAAA2X,EACA/P,EAAA5H,SAAA,IAAA4X,EACAhQ,EAAA5H,SAAA,IAAA4X,EACAhQ,EAAA5H,SAAA,KAAA4X,EACAhZ,EAAAkB,sBAAA8H,GACA+O,EAAAxvB,EAAA0iB,EACA8M,EAAAvY,EAAA0L,EACA6M,EAAAtY,EAAA0L,EACAtiB,MAzCA,GA4CAowB,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAApY,EAAAtY,KAAAuY,SACA7Y,EAAA,EAAA+wB,GAAAH,EAAAD,GACA1Z,EAAA,EAAA8Z,GAAAD,EAAAD,GACAtW,GAAAqW,EAAAD,IAAAC,EAAAD,GACAxnB,GAAA2nB,EAAAD,IAAAC,EAAAD,GACArjB,IAAAwjB,EAAAD,IAAAC,EAAAD,GACAhR,GAAA,EAAAiR,EAAAD,GAAAC,EAAAD,GAiBA,OAhBAnY,EAAA,GAAA5Y,EACA4Y,EAAA,KACAA,EAAA,GAAA2B,EACA3B,EAAA,MACAA,EAAA,KACAA,EAAA,GAAA3B,EACA2B,EAAA,GAAAzP,EACAyP,EAAA,MACAA,EAAA,KACAA,EAAA,KACAA,EAAA,IAAApL,EACAoL,EAAA,IAAAmH,EACAnH,EAAA,KACAA,EAAA,KACAA,EAAA,OACAA,EAAA,MACAtY,MAEA2wB,gBAAA,SAAAC,EAAAC,EAAAJ,EAAAC,GACA,IAAAI,EAAAL,EAAAlxB,KAAAwW,IAAAxX,EAAAgB,KAAAwxB,QAAAH,EAAA,IACAI,GAAAF,EACAG,EAAAD,EAAAH,EACAK,EAAAJ,EAAAD,EACA,OAAA7wB,KAAAowB,YAAAa,EAAAC,EAAAF,EAAAF,EAAAL,EAAAC,IAEAS,iBAAA,SAAAd,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,GACA,IAAApY,EAAAtY,KAAAuY,SACA1B,EAAA,GAAAyZ,EAAAD,GACAvmB,EAAA,GAAA0mB,EAAAD,GACA5mB,EAAA,GAAA+mB,EAAAD,GACA/wB,GAAA4wB,EAAAD,GAAAxZ,EACAF,GAAA6Z,EAAAD,GAAAzmB,EACA8M,GAAA8Z,EAAAD,GAAA9mB,EAiBA,OAhBA2O,EAAA,KAAAzB,EACAyB,EAAA,KACAA,EAAA,KACAA,EAAA,KAAA5Y,EACA4Y,EAAA,KACAA,EAAA,KAAAxO,EACAwO,EAAA,KACAA,EAAA,KAAA3B,EACA2B,EAAA,KACAA,EAAA,KACAA,EAAA,OAAA3O,EACA2O,EAAA,KAAA1B,EACA0B,EAAA,KACAA,EAAA,KACAA,EAAA,MACAA,EAAA,MACAtY,MAEAiN,OAAA,SAAAkT,GAIA,IAHA,IAAA7H,EAAAtY,KAAAuY,SACAuQ,EAAA3I,EAAA5H,SAEA0M,EAAA,EAAqBA,EAAA,GAAQA,IAC7B,GAAA3M,EAAA2M,KAAA6D,EAAA7D,GAAA,SAGA,UAEA9X,UAAA,SAAAC,GAEA,OADApN,KAAAuY,SAAAzP,IAAAsE,GACApN,MAEAsN,QAAA,SAAAF,EAAAC,QACAjO,IAAAgO,MAAA,SACAhO,IAAAiO,MAAA,GACA,IAAAiL,EAAAtY,KAAAuY,SAiBA,OAhBAnL,EAAAC,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,GAAAiL,EAAA,GACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,EAAAC,EAAA,IAAAiL,EAAA,IACAlL,IAQA7O,EAAA6yB,IAAA,SAAAC,EAAAC,GACAtxB,KAAAqxB,YAAAjyB,IAAAiyB,IAAA,IAAA9yB,EAAA+a,QACAtZ,KAAAsxB,eAAAlyB,IAAAkyB,IAAA,IAAA/yB,EAAA+a,SAGA/a,EAAA6yB,IAAAzxB,UAAA,CACAqJ,YAAAzK,EAAA6yB,IACAtoB,IAAA,SAAAuoB,EAAAC,GAGA,OAFAtxB,KAAAqxB,OAAAnoB,KAAAmoB,GACArxB,KAAAsxB,UAAApoB,KAAAooB,GACAtxB,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAqoB,GAGA,OAFAvxB,KAAAqxB,OAAAnoB,KAAAqoB,EAAAF,QACArxB,KAAAsxB,UAAApoB,KAAAqoB,EAAAD,WACAtxB,MAEAmkB,GAAA,SAAAta,EAAAiC,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACApQ,KAAAlJ,KAAAsxB,WAAAxkB,eAAAjD,GAAA0C,IAAAvM,KAAAqxB,SAEA3E,OAAA,SAAA7S,GAEA,OADA7Z,KAAAsxB,UAAApoB,KAAA2Q,GAAAjN,IAAA5M,KAAAqxB,QAAA3X,YACA1Z,MAEAwxB,OAAA,WACA,IAAArY,EAAA,IAAA5a,EAAA+a,QACA,gBAAAzP,GAEA,OADA7J,KAAAqxB,OAAAnoB,KAAAlJ,KAAAmkB,GAAAta,EAAAsP,IACAnZ,MAJA,GAOA2kB,oBAAA,SAAAH,EAAA1Y,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QACA8K,EAAAjH,WAAAqH,EAAAxkB,KAAAqxB,QACA,IAAAI,EAAArN,EAAA7K,IAAAvZ,KAAAsxB,WAEA,OAAAG,EAAA,EACArN,EAAAlb,KAAAlJ,KAAAqxB,QAGAjN,EAAAlb,KAAAlJ,KAAAsxB,WAAAxkB,eAAA2kB,GAAAllB,IAAAvM,KAAAqxB,SAEAtL,gBAAA,SAAAvB,GACA,OAAAjlB,KAAAkM,KAAAzL,KAAA0xB,kBAAAlN,KAEAkN,kBAAA,WACA,IAAAvY,EAAA,IAAA5a,EAAA+a,QACA,gBAAAkL,GACA,IAAAiN,EAAAtY,EAAAgE,WAAAqH,EAAAxkB,KAAAqxB,QAAA9X,IAAAvZ,KAAAsxB,WAEA,OAAAG,EAAA,EACAzxB,KAAAqxB,OAAAlT,kBAAAqG,IAGArL,EAAAjQ,KAAAlJ,KAAAsxB,WAAAxkB,eAAA2kB,GAAAllB,IAAAvM,KAAAqxB,QACAlY,EAAAgF,kBAAAqG,KAVA,GAaAmN,oBAAA,WACA,IAAAC,EAAA,IAAArzB,EAAA+a,QACAuY,EAAA,IAAAtzB,EAAA+a,QACAwY,EAAA,IAAAvzB,EAAA+a,QACA,gBAAAyY,EAAA5Y,EAAA6Y,EAAAC,GAOAL,EAAA1oB,KAAA6oB,GAAAxlB,IAAA4M,GAAArM,eAAA,IACA+kB,EAAA3oB,KAAAiQ,GAAAvM,IAAAmlB,GAAArY,YACAoY,EAAA5oB,KAAAlJ,KAAAqxB,QAAAzkB,IAAAglB,GACA,IAMAM,EAAAta,EAAAua,EAAAC,EANAC,EAAA,GAAAN,EAAA7T,WAAA/E,GACAmZ,GAAAtyB,KAAAsxB,UAAA/X,IAAAsY,GACAU,EAAAT,EAAAvY,IAAAvZ,KAAAsxB,WACAkB,GAAAV,EAAAvY,IAAAsY,GACA3kB,EAAA4kB,EAAAhY,WACA+P,EAAAtqB,KAAAia,IAAA,EAAA8Y,KAGA,GAAAzI,EAAA,EAMA,GAHAjS,EAAA0a,EAAAC,EAAAC,EACAJ,EAAAC,EAAAxI,GAFAqI,EAAAI,EAAAE,EAAAD,IAIA,EACA,GAAA3a,IAAAwa,EACA,GAAAxa,GAAAwa,EAAA,CAGA,IAAAK,EAAA,EAAA5I,EAGAsI,GAFAD,GAAAO,IAEAP,EAAAI,GADA1a,GAAA6a,GACA,EAAAF,GAAA3a,GAAA0a,EAAAJ,EAAAta,EAAA,EAAA4a,GAAAtlB,OAGA0K,EAAAya,EAEAF,IADAD,EAAA3yB,KAAA2M,IAAA,IAAAomB,EAAA1a,EAAA2a,KACAL,EAAAta,KAAA,EAAA4a,GAAAtlB,OAIA0K,GAAAya,EAEAF,IADAD,EAAA3yB,KAAA2M,IAAA,IAAAomB,EAAA1a,EAAA2a,KACAL,EAAAta,KAAA,EAAA4a,GAAAtlB,OAGA0K,IAAAwa,EAIAD,IAFAD,EAAA3yB,KAAA2M,IAAA,KAAAomB,EAAAD,EAAAE,KAEAL,GADAta,EAAAsa,EAAA,GAAAG,EAAA9yB,KAAAsL,IAAAtL,KAAA2M,KAAAmmB,GAAAG,GAAAH,KACAza,EAAA,EAAA4a,GAAAtlB,EACa0K,GAAAwa,GAEbF,EAAA,EAEAC,GADAva,EAAArY,KAAAsL,IAAAtL,KAAA2M,KAAAmmB,GAAAG,GAAAH,KACAza,EAAA,EAAA4a,GAAAtlB,GAKAilB,IAFAD,EAAA3yB,KAAA2M,IAAA,IAAAomB,EAAAD,EAAAE,KAEAL,GADAta,EAAAsa,EAAA,EAAAG,EAAA9yB,KAAAsL,IAAAtL,KAAA2M,KAAAmmB,GAAAG,GAAAH,KACAza,EAAA,EAAA4a,GAAAtlB,OAKA0K,EAAA0a,EAAA,GAAAD,IAEAF,IADAD,EAAA3yB,KAAA2M,IAAA,IAAAomB,EAAA1a,EAAA2a,KACAL,EAAAta,KAAA,EAAA4a,GAAAtlB,EAWA,OARA8kB,GACAA,EAAA9oB,KAAAlJ,KAAAsxB,WAAAxkB,eAAAolB,GAAA3lB,IAAAvM,KAAAqxB,QAGAY,GACAA,EAAA/oB,KAAA2oB,GAAA/kB,eAAA8K,GAAArL,IAAAqlB,GAGAO,GAlFA,GAqFAO,gBAAA,WACA,IAAAvZ,EAAA,IAAA5a,EAAA+a,QACA,gBAAAsO,EAAA9b,GACAqN,EAAAgE,WAAAyK,EAAA9I,OAAA9e,KAAAqxB,QACA,IAAAsB,EAAAxZ,EAAAI,IAAAvZ,KAAAsxB,WACAsB,EAAAzZ,EAAAI,IAAAJ,GAAAwZ,IACAE,EAAAjL,EAAA5F,OAAA4F,EAAA5F,OACA,GAAA4Q,EAAAC,EAAA,YACA,IAAAC,EAAAvzB,KAAAkM,KAAAonB,EAAAD,GAEAG,EAAAJ,EAAAG,EAEAE,EAAAL,EAAAG,EAEA,OAAAC,EAAA,GAAAC,EAAA,OAIAD,EAAA,EAAA/yB,KAAAmkB,GAAA6O,EAAAlnB,GAEA9L,KAAAmkB,GAAA4O,EAAAjnB,IApBA,GAuBA4b,iBAAA,SAAAE,GACA,OAAA5nB,KAAA+lB,gBAAA6B,EAAA9I,SAAA8I,EAAA5F,QAEAiR,gBAAA,SAAAnL,GACA,IAAAoL,EAAApL,EAAAtG,OAAAjI,IAAAvZ,KAAAsxB,WAEA,OAAA4B,EAEA,WAAApL,EAAA/B,gBAAA/lB,KAAAqxB,QACA,EAIA,KAGA,IAAAxnB,IAAA7J,KAAAqxB,OAAA9X,IAAAuO,EAAAtG,QAAAsG,EAAAC,UAAAmL,EAEA,OAAArpB,GAAA,EAAAA,EAAA,MAEAspB,eAAA,SAAArL,EAAAhc,GACA,IAAAjC,EAAA7J,KAAAizB,gBAAAnL,GAEA,cAAAje,EACA,KAGA7J,KAAAmkB,GAAAta,EAAAiC,IAEA+b,gBAAA,SAAAC,GAEA,IAAAsL,EAAAtL,EAAA/B,gBAAA/lB,KAAAqxB,QAEA,WAAA+B,GAIAtL,EAAAtG,OAAAjI,IAAAvZ,KAAAsxB,WAEA8B,EAAA,GAOAC,aAAA,SAAA/N,EAAAxZ,GACA,IAAAwnB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAA,EAAA5zB,KAAAsxB,UAAA5xB,EACAm0B,EAAA,EAAA7zB,KAAAsxB,UAAA3a,EACAmd,EAAA,EAAA9zB,KAAAsxB,UAAA1a,EACAya,EAAArxB,KAAAqxB,OAkBA,OAhBAuC,GAAA,GACAN,GAAAhO,EAAAza,IAAAnL,EAAA2xB,EAAA3xB,GAAAk0B,EACAL,GAAAjO,EAAApZ,IAAAxM,EAAA2xB,EAAA3xB,GAAAk0B,IAEAN,GAAAhO,EAAApZ,IAAAxM,EAAA2xB,EAAA3xB,GAAAk0B,EACAL,GAAAjO,EAAAza,IAAAnL,EAAA2xB,EAAA3xB,GAAAk0B,GAGAC,GAAA,GACAL,GAAAlO,EAAAza,IAAA8L,EAAA0a,EAAA1a,GAAAkd,EACAJ,GAAAnO,EAAApZ,IAAAyK,EAAA0a,EAAA1a,GAAAkd,IAEAL,GAAAlO,EAAApZ,IAAAyK,EAAA0a,EAAA1a,GAAAkd,EACAJ,GAAAnO,EAAAza,IAAA8L,EAAA0a,EAAA1a,GAAAkd,GAGAP,EAAAG,GAAAD,EAAAD,EAAA,OAGAC,EAAAF,cAAAE,IACAC,EAAAF,cAAAE,GAEAK,GAAA,GACAJ,GAAApO,EAAAza,IAAA+L,EAAAya,EAAAza,GAAAkd,EACAH,GAAArO,EAAApZ,IAAA0K,EAAAya,EAAAza,GAAAkd,IAEAJ,GAAApO,EAAApZ,IAAA0K,EAAAya,EAAAza,GAAAkd,EACAH,GAAArO,EAAAza,IAAA+L,EAAAya,EAAAza,GAAAkd,GAGAR,EAAAK,GAAAD,EAAAH,EAAA,OACAG,EAAAJ,cAAAI,IACAC,EAAAJ,cAAAI,GAEAJ,EAAA,OACAvzB,KAAAmkB,GAAAmP,GAAA,EAAAA,EAAAC,EAAAznB,MAEA+Z,cAAA,WACA,IAAAhM,EAAA,IAAAtb,EAAA+a,QACA,gBAAAgM,GACA,cAAAtlB,KAAAqzB,aAAA/N,EAAAzL,IAHA,GAMAka,kBAAA,WAEA,IAAAjC,EAAA,IAAAvzB,EAAA+a,QACA0a,EAAA,IAAAz1B,EAAA+a,QACA2a,EAAA,IAAA11B,EAAA+a,QACAkI,EAAA,IAAAjjB,EAAA+a,QACA,gBAAAW,EAAApR,EAAAqE,EAAAgnB,EAAApoB,GAEAkoB,EAAA7W,WAAAtU,EAAAoR,GACAga,EAAA9W,WAAAjQ,EAAA+M,GACAuH,EAAA/H,aAAAua,EAAAC,GAMA,IACAx0B,EADA00B,EAAAn0B,KAAAsxB,UAAA/X,IAAAiI,GAGA,GAAA2S,EAAA,GACA,GAAAD,EAAA,YACAz0B,EAAA,MACS,MAAA00B,EAAA,GAIT,YAHA10B,GAAA,EACA00B,KAKArC,EAAA3U,WAAAnd,KAAAqxB,OAAApX,GACA,IAAAma,EAAA30B,EAAAO,KAAAsxB,UAAA/X,IAAA0a,EAAAxa,aAAAqY,EAAAmC,IAEA,GAAAG,EAAA,EACA,YAGA,IAAAC,EAAA50B,EAAAO,KAAAsxB,UAAA/X,IAAAya,EAAApT,MAAAkR,IAEA,GAAAuC,EAAA,EACA,YAIA,GAAAD,EAAAC,EAAAF,EACA,YAIA,IAAAG,GAAA70B,EAAAqyB,EAAAvY,IAAAiI,GAEA,OAAA8S,EAAA,EACA,KAIAt0B,KAAAmkB,GAAAmQ,EAAAH,EAAAroB,IAvDA,GA0DAyT,aAAA,SAAA6K,GAKA,OAJApqB,KAAAsxB,UAAA/kB,IAAAvM,KAAAqxB,QAAA9R,aAAA6K,GACApqB,KAAAqxB,OAAA9R,aAAA6K,GACApqB,KAAAsxB,UAAA1kB,IAAA5M,KAAAqxB,QACArxB,KAAAsxB,UAAA5X,YACA1Z,MAEAiN,OAAA,SAAAskB,GACA,OAAAA,EAAAF,OAAApkB,OAAAjN,KAAAqxB,SAAAE,EAAAD,UAAArkB,OAAAjN,KAAAsxB,aASA/yB,EAAA0pB,OAAA,SAAAnJ,EAAAkD,GACAhiB,KAAA8e,YAAA1f,IAAA0f,IAAA,IAAAvgB,EAAA+a,QACAtZ,KAAAgiB,YAAA5iB,IAAA4iB,IAAA,GAGAzjB,EAAA0pB,OAAAtoB,UAAA,CACAqJ,YAAAzK,EAAA0pB,OACAnf,IAAA,SAAAgW,EAAAkD,GAGA,OAFAhiB,KAAA8e,OAAA5V,KAAA4V,GACA9e,KAAAgiB,SACAhiB,MAEA8kB,cAAA,WACA,IAAAQ,EAAA,IAAA/mB,EAAA4nB,KACA,gBAAApB,EAAAwP,GACA,IAAAzV,EAAA9e,KAAA8e,YAEA1f,IAAAm1B,EACAzV,EAAA5V,KAAAqrB,GAEAjP,EAAAR,cAAAC,GAAAjG,UAKA,IAFA,IAAA0V,EAAA,EAEAvP,EAAA,EAAAC,EAAAH,EAAAjmB,OAA2CmmB,EAAAC,EAAQD,IACnDuP,EAAAj1B,KAAA2M,IAAAsoB,EAAA1V,EAAAX,kBAAA4G,EAAAE,KAIA,OADAjlB,KAAAgiB,OAAAziB,KAAAkM,KAAA+oB,GACAx0B,MAlBA,GAqBAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAA0e,GAGA,OAFA5nB,KAAA8e,OAAA5V,KAAA0e,EAAA9I,QACA9e,KAAAgiB,OAAA4F,EAAA5F,OACAhiB,MAEAy0B,MAAA,WACA,OAAAz0B,KAAAgiB,QAAA,GAEA0D,cAAA,SAAAlB,GACA,OAAAA,EAAArG,kBAAAne,KAAA8e,SAAA9e,KAAAgiB,OAAAhiB,KAAAgiB,QAEA+D,gBAAA,SAAAvB,GACA,OAAAA,EAAAtG,WAAAle,KAAA8e,QAAA9e,KAAAgiB,QAEA0F,iBAAA,SAAAE,GACA,IAAA8M,EAAA10B,KAAAgiB,OAAA4F,EAAA5F,OACA,OAAA4F,EAAA9I,OAAAX,kBAAAne,KAAA8e,SAAA4V,KAEA7O,cAAA,SAAAP,GACA,OAAAA,EAAAoC,iBAAA1nB,OAEA6nB,gBAAA,SAAAC,GAQA,OAAAvoB,KAAAia,IAAAxZ,KAAA8e,OAAAvF,IAAAuO,EAAAtG,QAAAsG,EAAAC,WAAA/nB,KAAAgiB,QAEA8D,WAAA,SAAAtB,EAAA1Y,GACA,IAAA6oB,EAAA30B,KAAA8e,OAAAX,kBAAAqG,GACAJ,EAAAtY,GAAA,IAAAvN,EAAA+a,QAQA,OAPA8K,EAAAlb,KAAAsb,GAEAmQ,EAAA30B,KAAAgiB,OAAAhiB,KAAAgiB,SACAoC,EAAAxX,IAAA5M,KAAA8e,QAAApF,YACA0K,EAAAtX,eAAA9M,KAAAgiB,QAAAzV,IAAAvM,KAAA8e,SAGAsF,GAEAwQ,eAAA,SAAA9oB,GACA,IAAAwZ,EAAAxZ,GAAA,IAAAvN,EAAA4nB,KAGA,OAFAb,EAAAxc,IAAA9I,KAAA8e,OAAA9e,KAAA8e,QACAwG,EAAAG,eAAAzlB,KAAAgiB,QACAsD,GAEA/F,aAAA,SAAAY,GAGA,OAFAngB,KAAA8e,OAAAS,aAAAY,GACAngB,KAAAgiB,OAAAhiB,KAAAgiB,OAAA7B,EAAAgP,oBACAnvB,MAEAkmB,UAAA,SAAA7Y,GAEA,OADArN,KAAA8e,OAAAvS,IAAAc,GACArN,MAEAiN,OAAA,SAAA2a,GACA,OAAAA,EAAA9I,OAAA7R,OAAAjN,KAAA8e,SAAA8I,EAAA5F,SAAAhiB,KAAAgiB,SAUAzjB,EAAAs2B,QAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACAn1B,KAAAo1B,OAAA,MAAAh2B,IAAA01B,IAAA,IAAAv2B,EAAA82B,WAAAj2B,IAAA21B,IAAA,IAAAx2B,EAAA82B,WAAAj2B,IAAA41B,IAAA,IAAAz2B,EAAA82B,WAAAj2B,IAAA61B,IAAA,IAAA12B,EAAA82B,WAAAj2B,IAAA81B,IAAA,IAAA32B,EAAA82B,WAAAj2B,IAAA+1B,IAAA,IAAA52B,EAAA82B,QAGA92B,EAAAs2B,QAAAl1B,UAAA,CACAqJ,YAAAzK,EAAAs2B,QACA/rB,IAAA,SAAAgsB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAp1B,KAAAo1B,OAOA,OANAA,EAAA,GAAAlsB,KAAA4rB,GACAM,EAAA,GAAAlsB,KAAA6rB,GACAK,EAAA,GAAAlsB,KAAA8rB,GACAI,EAAA,GAAAlsB,KAAA+rB,GACAG,EAAA,GAAAlsB,KAAAgsB,GACAE,EAAA,GAAAlsB,KAAAisB,GACAn1B,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAosB,GAGA,IAFA,IAAAF,EAAAp1B,KAAAo1B,OAEAnQ,EAAA,EAAqBA,EAAA,EAAOA,IAC5BmQ,EAAAnQ,GAAA/b,KAAAosB,EAAAF,OAAAnQ,IAGA,OAAAjlB,MAEAu1B,cAAA,SAAA9qB,GACA,IAAA2qB,EAAAp1B,KAAAo1B,OACAtM,EAAAre,EAAA8N,SACAid,EAAA1M,EAAA,GACA2M,EAAA3M,EAAA,GACA4M,EAAA5M,EAAA,GACA6M,EAAA7M,EAAA,GACA8M,EAAA9M,EAAA,GACA+M,EAAA/M,EAAA,GACAgN,EAAAhN,EAAA,GACAiN,EAAAjN,EAAA,GACAkN,EAAAlN,EAAA,GACAmN,EAAAnN,EAAA,GACAoN,EAAApN,EAAA,IACAqN,EAAArN,EAAA,IACAsN,EAAAtN,EAAA,IACAuN,EAAAvN,EAAA,IACAwN,EAAAxN,EAAA,IACAyN,EAAAzN,EAAA,IAOA,OANAsM,EAAA,GAAAoB,cAAAb,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA1c,YACA0b,EAAA,GAAAoB,cAAAb,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,EAAAO,EAAAH,GAAA1c,YACA0b,EAAA,GAAAoB,cAAAb,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA3c,YACA0b,EAAA,GAAAoB,cAAAb,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,EAAAM,EAAAF,GAAA3c,YACA0b,EAAA,GAAAoB,cAAAb,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAA5c,YACA0b,EAAA,GAAAoB,cAAAb,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,EAAAK,EAAAD,GAAA5c,YACA1Z,MAEAy2B,iBAAA,WACA,IAAA7O,EAAA,IAAArpB,EAAA0pB,OACA,gBAAArB,GACA,IAAAK,EAAAL,EAAAK,SAGA,OAFA,OAAAA,EAAAyP,gBAAAzP,EAAA0P,wBACA/O,EAAA1e,KAAA+d,EAAAyP,gBAAAnX,aAAAqH,EAAAnG,aACAzgB,KAAA0nB,iBAAAE,IANA,GASAgP,iBAAA,WACA,IAAAhP,EAAA,IAAArpB,EAAA0pB,OACA,gBAAA4O,GAIA,OAHAjP,EAAA9I,OAAAhW,IAAA,OACA8e,EAAA5F,OAAA,kBACA4F,EAAArI,aAAAsX,EAAApW,aACAzgB,KAAA0nB,iBAAAE,IANA,GASAF,iBAAA,SAAAE,GAKA,IAJA,IAAAwN,EAAAp1B,KAAAo1B,OACAtW,EAAA8I,EAAA9I,OACAgY,GAAAlP,EAAA5F,OAEAiD,EAAA,EAAqBA,EAAA,EAAOA,IAAA,CAG5B,GAFAmQ,EAAAnQ,GAAAc,gBAAAjH,GAEAgY,EACA,SAIA,UAEAjR,cAAA,WACA,IAAAkP,EAAA,IAAAx2B,EAAA+a,QACA0b,EAAA,IAAAz2B,EAAA+a,QACA,gBAAAgM,GAGA,IAFA,IAAA8P,EAAAp1B,KAAAo1B,OAEAnQ,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAA6C,EAAAsN,EAAAnQ,GACA8P,EAAAr1B,EAAAooB,EAAAtG,OAAA9hB,EAAA,EAAA4lB,EAAAza,IAAAnL,EAAA4lB,EAAApZ,IAAAxM,EACAs1B,EAAAt1B,EAAAooB,EAAAtG,OAAA9hB,EAAA,EAAA4lB,EAAApZ,IAAAxM,EAAA4lB,EAAAza,IAAAnL,EACAq1B,EAAApe,EAAAmR,EAAAtG,OAAA7K,EAAA,EAAA2O,EAAAza,IAAA8L,EAAA2O,EAAApZ,IAAAyK,EACAqe,EAAAre,EAAAmR,EAAAtG,OAAA7K,EAAA,EAAA2O,EAAApZ,IAAAyK,EAAA2O,EAAAza,IAAA8L,EACAoe,EAAAne,EAAAkR,EAAAtG,OAAA5K,EAAA,EAAA0O,EAAAza,IAAA+L,EAAA0O,EAAApZ,IAAA0K,EACAoe,EAAApe,EAAAkR,EAAAtG,OAAA5K,EAAA,EAAA0O,EAAApZ,IAAA0K,EAAA0O,EAAAza,IAAA+L,EACA,IAAAmgB,EAAAjP,EAAA/B,gBAAAgP,GACAnC,EAAA9K,EAAA/B,gBAAAiP,GAEA,GAAA+B,EAAA,GAAAnE,EAAA,EACA,SAIA,UAtBA,GAyBAlN,cAAA,SAAAlB,GAGA,IAFA,IAAA4Q,EAAAp1B,KAAAo1B,OAEAnQ,EAAA,EAAqBA,EAAA,EAAOA,IAC5B,GAAAmQ,EAAAnQ,GAAAc,gBAAAvB,GAAA,EACA,SAIA,WAQAjmB,EAAA82B,MAAA,SAAA7T,EAAAuG,GACA/nB,KAAAwhB,YAAApiB,IAAAoiB,IAAA,IAAAjjB,EAAA+a,QAAA,OACAtZ,KAAA+nB,cAAA3oB,IAAA2oB,IAAA,GAGAxpB,EAAA82B,MAAA11B,UAAA,CACAqJ,YAAAzK,EAAA82B,MACAvsB,IAAA,SAAA0Y,EAAAuG,GAGA,OAFA/nB,KAAAwhB,OAAAtY,KAAAsY,GACAxhB,KAAA+nB,WACA/nB,MAEAw2B,cAAA,SAAA92B,EAAAiX,EAAAC,EAAAC,GAGA,OAFA7W,KAAAwhB,OAAA1Y,IAAApJ,EAAAiX,EAAAC,GACA5W,KAAA+nB,SAAAlR,EACA7W,MAEAg3B,8BAAA,SAAAxV,EAAAgD,GAIA,OAHAxkB,KAAAwhB,OAAAtY,KAAAsY,GACAxhB,KAAA+nB,UAAAvD,EAAAjL,IAAAvZ,KAAAwhB,QAEAxhB,MAEAi3B,sBAAA,WACA,IAAA9d,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACA,gBAAAW,EAAApR,EAAAqE,GACA,IAAAsU,EAAArI,EAAAgE,WAAAjQ,EAAArE,GAAA+X,MAAAnC,EAAAtB,WAAAlD,EAAApR,IAAA6Q,YAGA,OADA1Z,KAAAg3B,8BAAAxV,EAAAvH,GACAja,MAPA,GAUAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAA4e,GAGA,OAFA9nB,KAAAwhB,OAAAtY,KAAA4e,EAAAtG,QACAxhB,KAAA+nB,SAAAD,EAAAC,SACA/nB,MAEA0Z,UAAA,WAEA,IAAAwd,EAAA,EAAAl3B,KAAAwhB,OAAA1iB,SAGA,OAFAkB,KAAAwhB,OAAA1U,eAAAoqB,GACAl3B,KAAA+nB,UAAAmP,EACAl3B,MAEA+d,OAAA,WAGA,OAFA/d,KAAA+nB,WAAA,EACA/nB,KAAAwhB,OAAAzD,SACA/d,MAEA+lB,gBAAA,SAAAvB,GACA,OAAAxkB,KAAAwhB,OAAAjI,IAAAiL,GAAAxkB,KAAA+nB,UAEAoP,iBAAA,SAAAvP,GACA,OAAA5nB,KAAA+lB,gBAAA6B,EAAA9I,QAAA8I,EAAA5F,QAEAoV,aAAA,SAAA5S,EAAA1Y,GACA,OAAA9L,KAAAq3B,WAAA7S,EAAA1Y,GAAAc,IAAA4X,GAAAzG,UAEAsZ,WAAA,SAAA7S,EAAA1Y,GACA,IAAAwrB,EAAAt3B,KAAA+lB,gBAAAvB,GAEA,OADA1Y,GAAA,IAAAvN,EAAA+a,SACApQ,KAAAlJ,KAAAwhB,QAAA1U,eAAAwqB,IAEAC,cAAA,WACA,IAAApe,EAAA,IAAA5a,EAAA+a,QACA,gBAAA0K,EAAAlY,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QACAgY,EAAAtN,EAAA5X,MAAA+M,GACA+Z,EAAAlzB,KAAAwhB,OAAAjI,IAAA+X,GAEA,OAAA4B,EAEA,WAAAlzB,KAAA+lB,gBAAA/B,EAAAF,OACAM,EAAAlb,KAAA8a,EAAAF,YAIA,EAGA,IAAAja,IAAAma,EAAAF,MAAAvK,IAAAvZ,KAAAwhB,QAAAxhB,KAAA+nB,UAAAmL,EAEA,OAAArpB,EAAA,GAAAA,EAAA,SAIAua,EAAAlb,KAAAooB,GAAAxkB,eAAAjD,GAAA0C,IAAAyX,EAAAF,QAvBA,GA0BA0T,eAAA,SAAAxT,GAEA,IAAAyT,EAAAz3B,KAAA+lB,gBAAA/B,EAAAF,OACA4T,EAAA13B,KAAA+lB,gBAAA/B,EAAAD,KACA,OAAA0T,EAAA,GAAAC,EAAA,GAAAA,EAAA,GAAAD,EAAA,GAEA5R,cAAA,SAAAP,GACA,OAAAA,EAAAuC,gBAAA7nB,OAEA0nB,iBAAA,SAAAE,GACA,OAAAA,EAAAC,gBAAA7nB,OAEA23B,cAAA,SAAA7rB,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACApQ,KAAAlJ,KAAAwhB,QAAA1U,gBAAA9M,KAAA+nB,WAEAxI,aAAA,WACA,IAAApG,EAAA,IAAA5a,EAAA+a,QACAse,EAAA,IAAAr5B,EAAA2pB,QACA,gBAAA/H,EAAA0X,GACA,IAAAC,EAAA93B,KAAA23B,cAAAxe,GAAAoG,aAAAY,GAGA4X,EAAAF,GAAAD,EAAAzN,gBAAAhK,GACAqB,EAAAxhB,KAAAwhB,OAAAnC,aAAA0Y,GAAAre,YAGA,OADA1Z,KAAA+nB,UAAA+P,EAAAve,IAAAiI,GACAxhB,MAXA,GAcAkmB,UAAA,SAAA7Y,GAEA,OADArN,KAAA+nB,SAAA/nB,KAAA+nB,SAAA1a,EAAAkM,IAAAvZ,KAAAwhB,QACAxhB,MAEAiN,OAAA,SAAA6a,GACA,OAAAA,EAAAtG,OAAAvU,OAAAjN,KAAAwhB,SAAAsG,EAAAC,WAAA/nB,KAAA+nB,WAcAxpB,EAAAy5B,UAAA,SAAAhW,EAAAD,EAAAL,GAMA,OALA1hB,KAAAgiB,YAAA5iB,IAAA4iB,IAAA,EACAhiB,KAAA+hB,SAAA3iB,IAAA2iB,IAAA,EAEA/hB,KAAA0hB,WAAAtiB,IAAAsiB,IAAA,EAEA1hB,MAGAzB,EAAAy5B,UAAAr4B,UAAA,CACAqJ,YAAAzK,EAAAy5B,UACAlvB,IAAA,SAAAkZ,EAAAD,EAAAL,GAIA,OAHA1hB,KAAAgiB,SACAhiB,KAAA+hB,MACA/hB,KAAA0hB,QACA1hB,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAA+uB,GAIA,OAHAj4B,KAAAgiB,OAAA9Y,KAAA+uB,EAAAjW,QACAhiB,KAAA+hB,IAAA7Y,KAAA+uB,EAAAlW,KACA/hB,KAAA0hB,MAAAxY,KAAA+uB,EAAAvW,OACA1hB,MAGAk4B,SAAA,WAGA,OADAl4B,KAAA+hB,IAAAxiB,KAAA2M,IADA,KACA3M,KAAAsL,IAAAtL,KAAA0e,GADA,KACAje,KAAA+hB,MACA/hB,MAEAwjB,eAAA,SAAA2U,GAYA,OAXAn4B,KAAAgiB,OAAAmW,EAAAr5B,SAEA,IAAAkB,KAAAgiB,QACAhiB,KAAA0hB,MAAA,EACA1hB,KAAA+hB,IAAA,IAEA/hB,KAAA0hB,MAAAniB,KAAAwb,MAAAod,EAAAz4B,EAAAy4B,EAAAvhB,GAEA5W,KAAA+hB,IAAAxiB,KAAAoiB,KAAApjB,EAAAgB,KAAA2K,MAAAiuB,EAAAxhB,EAAA3W,KAAAgiB,QAAA,OAGAhiB,OASAzB,EAAAgB,KAAA,CACAwxB,QAAAxxB,KAAA0e,GAAA,IACAma,QAAA,IAAA74B,KAAA0e,GACAoa,aAAA,WAEA,IAGA1vB,EAHA2vB,EAAA,iEAAAC,MAAA,IACAC,EAAA,IAAA55B,MAAA,IACA65B,EAAA,EAEA,kBACA,QAAAxT,EAAA,EAAuBA,EAAA,GAAQA,IAC/B,IAAAA,GAAA,KAAAA,GAAA,KAAAA,GAAA,KAAAA,EACAuT,EAAAvT,GAAA,IACW,KAAAA,EACXuT,EAAAvT,GAAA,KAEAwT,GAAA,IAAAA,EAAA,kBAAAl5B,KAAAm5B,SAAA,GACA/vB,EAAA,GAAA8vB,EACAA,IAAA,EACAD,EAAAvT,GAAAqT,EAAA,KAAArT,EAAA,EAAAtc,EAAA,EAAAA,IAIA,OAAA6vB,EAAAG,KAAA,KApBA,GAuBAzuB,MAAA,SAAAjB,EAAA4B,EAAAqB,GACA,OAAA3M,KAAA2M,IAAArB,EAAAtL,KAAAsL,IAAAqB,EAAAjD,KAIAgB,gBAAA,SAAA4iB,EAAApiB,GACA,OAAAoiB,EAAApiB,QAGAmuB,UAAA,SAAAl5B,EAAAm5B,EAAAC,EAAAtG,EAAAuG,GACA,OAAAvG,GAAA9yB,EAAAm5B,IAAAE,EAAAvG,IAAAsG,EAAAD,IAGAG,WAAA,SAAAt5B,EAAAmL,EAAAqB,GACA,OAAAxM,GAAAmL,EAAA,EACAnL,GAAAwM,EAAA,GACAxM,KAAAmL,IAAAqB,EAAArB,IACAnL,GAAA,IAAAA,IAEAu5B,aAAA,SAAAv5B,EAAAmL,EAAAqB,GACA,OAAAxM,GAAAmL,EAAA,EACAnL,GAAAwM,EAAA,GACAxM,KAAAmL,IAAAqB,EAAArB,IACAnL,QAAA,EAAAA,EAAA,SAEAw5B,SAAA,WAEA,OADA3uB,QAAAC,KAAA,yEACAjL,KAAAm5B,UAGAS,QAAA,SAAAC,EAAAC,GACA,OAAAD,EAAA75B,KAAAiK,MAAAjK,KAAAm5B,UAAAW,EAAAD,EAAA,KAGAE,UAAA,SAAAF,EAAAC,GACA,OAAAD,EAAA75B,KAAAm5B,UAAAW,EAAAD,IAGAG,gBAAA,SAAAC,GACA,OAAAA,GAAA,GAAAj6B,KAAAm5B,WAEAe,SAAA,SAAAC,GACA,OAAAA,EAAAn7B,EAAAgB,KAAAwxB,SAEA4I,SAAA,SAAAC,GACA,OAAAA,EAAAr7B,EAAAgB,KAAA64B,SAEAyB,aAAA,SAAA5wB,GACA,YAAAA,IAAA,QAAAA,GAEA6wB,kBAAA,SAAA7wB,GACA,OAAA1J,KAAAC,IAAA,EAAAD,KAAAse,MAAAte,KAAAw6B,IAAA9wB,GAAA1J,KAAAy6B,OAEAC,eAAA,SAAAhxB,GAQA,OAPAA,IACAA,MAAA,EACAA,MAAA,EACAA,MAAA,EACAA,MAAA,EACAA,MAAA,KACAA,IAaA1K,EAAA27B,OAAA,SAAAnV,GACA/kB,KAAA+kB,SACA,IAMAP,EACA2V,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAdAxtB,EAAA,GACAytB,EAAA,CACAj7B,EAAA,EACAiX,EAAA,EACAC,EAAA,GAuIA,SAAAgkB,EAAA9F,EAAAC,EAAAC,EAAAC,EAAAprB,EAAAgxB,EAAAC,GACA,IAAA/I,EAAA,IAAAiD,EAAAF,GACA3b,EAAA,IAAA8b,EAAAF,GACA,UAAAA,EAAAC,GAAAjD,EAAA5Y,GAAA2hB,IAAA,GAAA/F,EAAAC,GAAA,EAAAjD,EAAA5Y,GAAA0hB,EAAA9I,EAAAloB,EAAAkrB,EA9HA/0B,KAAA+6B,cAAA,SAAA9gB,GACAja,KAAA+kB,OAAA,GAEA,QAAAE,EAAA,EAAqBA,EAAAhL,EAAAnb,OAAcmmB,IACnCjlB,KAAA+kB,OAAAE,GAAA,CACAvlB,EAAAua,EAAAgL,GAAA,GACAtO,EAAAsD,EAAAgL,GAAA,GACArO,EAAAqD,EAAAgL,GAAA,KAKAjlB,KAAAg7B,SAAA,SAAAC,GAiBA,OAhBAzW,GAAAxkB,KAAA+kB,OAAAjmB,OAAA,GAAAm8B,EACAd,EAAA56B,KAAAiK,MAAAgb,GACA4V,EAAA5V,EAAA2V,EACAjtB,EAAA,OAAAitB,MAAA,EACAjtB,EAAA,GAAAitB,EACAjtB,EAAA,GAAAitB,EAAAn6B,KAAA+kB,OAAAjmB,OAAA,EAAAkB,KAAA+kB,OAAAjmB,OAAA,EAAAq7B,EAAA,EACAjtB,EAAA,GAAAitB,EAAAn6B,KAAA+kB,OAAAjmB,OAAA,EAAAkB,KAAA+kB,OAAAjmB,OAAA,EAAAq7B,EAAA,EACAI,EAAAv6B,KAAA+kB,OAAA7X,EAAA,IACAstB,EAAAx6B,KAAA+kB,OAAA7X,EAAA,IACAutB,EAAAz6B,KAAA+kB,OAAA7X,EAAA,IACAwtB,EAAA16B,KAAA+kB,OAAA7X,EAAA,IAEAotB,EAAAF,GADAC,EAAAD,KAEAO,EAAAj7B,EAAAk7B,EAAAL,EAAA76B,EAAA86B,EAAA96B,EAAA+6B,EAAA/6B,EAAAg7B,EAAAh7B,EAAA06B,EAAAC,EAAAC,GACAK,EAAAhkB,EAAAikB,EAAAL,EAAA5jB,EAAA6jB,EAAA7jB,EAAA8jB,EAAA9jB,EAAA+jB,EAAA/jB,EAAAyjB,EAAAC,EAAAC,GACAK,EAAA/jB,EAAAgkB,EAAAL,EAAA3jB,EAAA4jB,EAAA5jB,EAAA6jB,EAAA7jB,EAAA8jB,EAAA9jB,EAAAwjB,EAAAC,EAAAC,GACAK,GAGA36B,KAAAk7B,sBAAA,WACA,IAAAjW,EACAtb,EACAK,EAAAhK,KAAA+kB,OAAAjmB,OACAq8B,EAAA,GAEA,IAAAlW,EAAA,EAAiBA,EAAAjb,EAAOib,IACxBtb,EAAA3J,KAAA+kB,OAAAE,GACAkW,EAAAlW,GAAA,CAAAtb,EAAAjK,EAAAiK,EAAAgN,EAAAhN,EAAAiN,GAGA,OAAAukB,GAIAn7B,KAAAo7B,UAAA,SAAAC,GACA,IAAApW,EACA1kB,EACA+6B,EACAhU,EACA9C,EAAA,EACA2V,EAAA,EACAoB,EAAA,EACAC,EAAA,IAAAj9B,EAAA+a,QACAmiB,EAAA,IAAAl9B,EAAA+a,QACAoiB,EAAA,GACAC,EAAA,EAOA,IALAD,EAAA,KACAL,MAAA,KACAC,EAAAt7B,KAAA+kB,OAAAjmB,OAAAu8B,EACAG,EAAAtyB,KAAAlJ,KAAA+kB,OAAA,IAEAE,EAAA,EAAiBA,EAAAqW,EAAcrW,IAC/B1kB,EAAA0kB,EAAAqW,EACAhU,EAAAtnB,KAAAg7B,SAAAz6B,GACAk7B,EAAAvyB,KAAAoe,GACAqU,GAAAF,EAAAvd,WAAAsd,GACAA,EAAAtyB,KAAAoe,GACA9C,GAAAxkB,KAAA+kB,OAAAjmB,OAAA,GAAAyB,GACA45B,EAAA56B,KAAAiK,MAAAgb,MAEA+W,IACAG,EAAAvB,GAAAwB,EACAJ,EAAApB,GAMA,OADAuB,IAAA58B,QAAA68B,EACA,CACAC,OAAAF,EACAG,MAAAF,IAIA37B,KAAA87B,yBAAA,SAAAC,GACA,IAAA9W,EACAgE,EACA1oB,EACAy7B,EACAC,EACAC,EACAC,EACA7U,EACA8U,EAAA,GACAX,EAAA,IAAAl9B,EAAA+a,QACA+iB,EAAAr8B,KAAAo7B,YAGA,IAFAgB,EAAAE,KAAAb,EAAAvyB,KAAAlJ,KAAA+kB,OAAA,IAAA7Z,SAEA+Z,EAAA,EAAiBA,EAAAjlB,KAAA+kB,OAAAjmB,OAAwBmmB,IAAA,CAQzC,IALAiX,EAAAG,EAAAT,OAAA3W,GAAAoX,EAAAT,OAAA3W,EAAA,GACAkX,EAAA58B,KAAAqe,KAAAme,EAAAG,EAAAG,EAAAR,OACAG,GAAA/W,EAAA,IAAAjlB,KAAA+kB,OAAAjmB,OAAA,GACAm9B,EAAAhX,GAAAjlB,KAAA+kB,OAAAjmB,OAAA,GAEAmqB,EAAA,EAAmBA,EAAAkT,EAAA,EAAkBlT,IACrC1oB,EAAAy7B,EAAA/S,GAAA,EAAAkT,IAAAF,EAAAD,GACA1U,EAAAtnB,KAAAg7B,SAAAz6B,GACA67B,EAAAE,KAAAb,EAAAvyB,KAAAoe,GAAApc,SAGAkxB,EAAAE,KAAAb,EAAAvyB,KAAAlJ,KAAA+kB,OAAAE,IAAA/Z,SAGAlL,KAAA+kB,OAAAqX,IAiBA79B,EAAAg+B,SAAA,SAAAtiB,EAAApR,EAAAqE,GACAlN,KAAAia,OAAA7a,IAAA6a,IAAA,IAAA1b,EAAA+a,QACAtZ,KAAA6I,OAAAzJ,IAAAyJ,IAAA,IAAAtK,EAAA+a,QACAtZ,KAAAkN,OAAA9N,IAAA8N,IAAA,IAAA3O,EAAA+a,SAGA/a,EAAAg+B,SAAA/a,OAAA,WACA,IAAAuQ,EAAA,IAAAxzB,EAAA+a,QACA,gBAAAW,EAAApR,EAAAqE,EAAApB,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QACA8K,EAAAjH,WAAAjQ,EAAArE,GACAkpB,EAAA5U,WAAAlD,EAAApR,GACAub,EAAAxD,MAAAmR,GACA,IAAAyK,EAAApY,EAAAtK,WAEA,OAAA0iB,EAAA,EACApY,EAAAtX,eAAA,EAAAvN,KAAAkM,KAAA+wB,IAGApY,EAAAtb,IAAA,QAbA,GAmBAvK,EAAAg+B,SAAAE,mBAAA,WACA,IAAA1K,EAAA,IAAAxzB,EAAA+a,QACAH,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACA,gBAAAkL,EAAAvK,EAAApR,EAAAqE,EAAApB,GACAimB,EAAA5U,WAAAjQ,EAAA+M,GACAd,EAAAgE,WAAAtU,EAAAoR,GACAwE,EAAAtB,WAAAqH,EAAAvK,GACA,IAAAyiB,EAAA3K,EAAAxY,IAAAwY,GACA4K,EAAA5K,EAAAxY,IAAAJ,GACAyjB,EAAA7K,EAAAxY,IAAAkF,GACAoe,EAAA1jB,EAAAI,IAAAJ,GACA2jB,EAAA3jB,EAAAI,IAAAkF,GACAse,EAAAL,EAAAG,EAAAF,IACAvY,EAAAtY,GAAA,IAAAvN,EAAA+a,QAEA,OAAAyjB,EAGA,OAAA3Y,EAAAtb,KAAA,SAGA,IAAAk0B,EAAA,EAAAD,EACAE,GAAAJ,EAAAD,EAAAD,EAAAG,GAAAE,EACAnjB,GAAA6iB,EAAAI,EAAAH,EAAAC,GAAAI,EAEA,OAAA5Y,EAAAtb,IAAA,EAAAm0B,EAAApjB,IAAAojB,IA1BA,GA8BA1+B,EAAAg+B,SAAA7W,cAAA,WACA,IAAAvM,EAAA,IAAA5a,EAAA+a,QACA,gBAAAkL,EAAAvK,EAAApR,EAAAqE,GACA,IAAAkX,EAAA7lB,EAAAg+B,SAAAE,mBAAAjY,EAAAvK,EAAApR,EAAAqE,EAAAiM,GACA,OAAAiL,EAAA1kB,GAAA,GAAA0kB,EAAAzN,GAAA,GAAAyN,EAAA1kB,EAAA0kB,EAAAzN,GAAA,GAJA,GAQApY,EAAAg+B,SAAA58B,UAAA,CACAqJ,YAAAzK,EAAAg+B,SACAzzB,IAAA,SAAAmR,EAAApR,EAAAqE,GAIA,OAHAlN,KAAAia,EAAA/Q,KAAA+Q,GACAja,KAAA6I,EAAAK,KAAAL,GACA7I,KAAAkN,EAAAhE,KAAAgE,GACAlN,MAEAk9B,wBAAA,SAAAnY,EAAAoY,EAAAC,EAAAC,GAIA,OAHAr9B,KAAAia,EAAA/Q,KAAA6b,EAAAoY,IACAn9B,KAAA6I,EAAAK,KAAA6b,EAAAqY,IACAp9B,KAAAkN,EAAAhE,KAAA6b,EAAAsY,IACAr9B,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAo0B,GAIA,OAHAt9B,KAAAia,EAAA/Q,KAAAo0B,EAAArjB,GACAja,KAAA6I,EAAAK,KAAAo0B,EAAAz0B,GACA7I,KAAAkN,EAAAhE,KAAAo0B,EAAApwB,GACAlN,MAEAu9B,KAAA,WACA,IAAAxL,EAAA,IAAAxzB,EAAA+a,QACAH,EAAA,IAAA5a,EAAA+a,QACA,kBAGA,OAFAyY,EAAA5U,WAAAnd,KAAAkN,EAAAlN,KAAA6I,GACAsQ,EAAAgE,WAAAnd,KAAAia,EAAAja,KAAA6I,GACA,GAAAkpB,EAAAnR,MAAAzH,GAAAra,UANA,GASA0+B,SAAA,SAAA1xB,GAEA,OADAA,GAAA,IAAAvN,EAAA+a,SACA2D,WAAAjd,KAAAia,EAAAja,KAAA6I,GAAA0D,IAAAvM,KAAAkN,GAAAJ,eAAA,MAEA0U,OAAA,SAAA1V,GACA,OAAAvN,EAAAg+B,SAAA/a,OAAAxhB,KAAAia,EAAAja,KAAA6I,EAAA7I,KAAAkN,EAAApB,IAEAgc,MAAA,SAAAhc,GAEA,OADAA,GAAA,IAAAvN,EAAA82B,OACA4B,sBAAAj3B,KAAAia,EAAAja,KAAA6I,EAAA7I,KAAAkN,IAEAuvB,mBAAA,SAAAjY,EAAA1Y,GACA,OAAAvN,EAAAg+B,SAAAE,mBAAAjY,EAAAxkB,KAAAia,EAAAja,KAAA6I,EAAA7I,KAAAkN,EAAApB,IAEA4Z,cAAA,SAAAlB,GACA,OAAAjmB,EAAAg+B,SAAA7W,cAAAlB,EAAAxkB,KAAAia,EAAAja,KAAA6I,EAAA7I,KAAAkN,IAEAyX,oBAAA,WACA,IAAAmD,EAAA2V,EAAAC,EAAA/V,EACA,gBAAAnD,EAAA1Y,QACA1M,IAAA0oB,IACAA,EAAA,IAAAvpB,EAAA82B,MACAoI,EAAA,KAAAl/B,EAAAslB,MAAA,IAAAtlB,EAAAslB,MAAA,IAAAtlB,EAAAslB,OACA6Z,EAAA,IAAAn/B,EAAA+a,QACAqO,EAAA,IAAAppB,EAAA+a,SAGA,IAAA8K,EAAAtY,GAAA,IAAAvN,EAAA+a,QACAqkB,EAAA9Y,IAKA,GAHAiD,EAAAmP,sBAAAj3B,KAAAia,EAAAja,KAAA6I,EAAA7I,KAAAkN,GACA4a,EAAAsP,aAAA5S,EAAAkZ,IAEA,IAAA19B,KAAA0lB,cAAAgY,GAEAtZ,EAAAlb,KAAAw0B,OACS,CAETD,EAAA,GAAA30B,IAAA9I,KAAAia,EAAAja,KAAA6I,GACA40B,EAAA,GAAA30B,IAAA9I,KAAA6I,EAAA7I,KAAAkN,GACAuwB,EAAA,GAAA30B,IAAA9I,KAAAkN,EAAAlN,KAAAia,GAEA,QAAAgL,EAAA,EAAyBA,EAAAwY,EAAA3+B,OAAqBmmB,IAAA,CAC9CwY,EAAAxY,GAAAN,oBAAA+Y,GAAA,EAAA/V,GACA,IAAAzD,EAAAwZ,EAAAvf,kBAAAwJ,GAEAzD,EAAAyZ,IACAA,EAAAzZ,EACAE,EAAAlb,KAAAye,KAKA,OAAAvD,GApCA,GAuCAnX,OAAA,SAAAqwB,GACA,OAAAA,EAAArjB,EAAAhN,OAAAjN,KAAAia,IAAAqjB,EAAAz0B,EAAAoE,OAAAjN,KAAA6I,IAAAy0B,EAAApwB,EAAAD,OAAAjN,KAAAkN,KA0BA3O,EAAAq/B,YAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAh+B,KAAA69B,qBACA79B,KAAAi+B,aAAA,EACAj+B,KAAAg+B,kBAAA5+B,IAAA4+B,IAAA,IAAAF,EAAA90B,YAAA+0B,GACA/9B,KAAA89B,eACA99B,KAAAk+B,UAAAH,GAGAx/B,EAAAq/B,YAAAj+B,UAAA,CACAqJ,YAAAzK,EAAAq/B,YACAO,SAAA,SAAAt0B,GACA,IAAAu0B,EAAAp+B,KAAA69B,mBACAT,EAAAp9B,KAAAi+B,aACAjL,EAAAoL,EAAAhB,GACArK,EAAAqL,EAAAhB,EAAA,GAEAiB,EAAA,CACAC,EAAA,CACA,IAAAhO,EAEAiO,EAAA,CAKAC,EAAA,KAAA30B,EAAAmpB,GAAA,CACA,QAAAyL,EAAArB,EAAA,IAA0C,CAC1C,QAAAh+B,IAAA4zB,EAAA,CACA,GAAAnpB,EAAAkpB,EAAA,MAAAyL,EAIA,OAFApB,EAAAgB,EAAAt/B,OACAkB,KAAAi+B,aAAAb,EACAp9B,KAAA0+B,UAAAtB,EAAA,EAAAvzB,EAAAkpB,GAGA,GAAAqK,IAAAqB,EAAA,MAKA,GAHA1L,EAAAC,EAGAnpB,GAFAmpB,EAAAoL,IAAAhB,IAIA,MAAAkB,EAKAhO,EAAA8N,EAAAt/B,OACA,MAAAy/B,EAKA,GAAA10B,GAAAkpB,EAoCA,MAAAsL,EAlCA,IAAAM,EAAAP,EAAA,GAEAv0B,EAAA80B,IACAvB,EAAA,EAEArK,EAAA4L,GAIA,IAAAF,EAAArB,EAAA,IAA0C,CAC1C,QAAAh+B,IAAA2zB,EAGA,OADA/yB,KAAAi+B,aAAA,EACAj+B,KAAA4+B,aAAA,EAAA/0B,EAAAmpB,GAGA,GAAAoK,IAAAqB,EAAA,MAKA,GAHAzL,EAAAD,EAGAlpB,IAFAkpB,EAAAqL,IAAAhB,EAAA,IAIA,MAAAkB,EAKAhO,EAAA8M,EACAA,EAAA,EAUA,KAAAA,EAAA9M,GAAA,CACA,IAAAuO,EAAAzB,EAAA9M,IAAA,EAEAzmB,EAAAu0B,EAAAS,GACAvO,EAAAuO,EAEAzB,EAAAyB,EAAA,EAOA,GAHA7L,EAAAoL,EAAAhB,QAGAh+B,KAFA2zB,EAAAqL,EAAAhB,EAAA,IAIA,OADAp9B,KAAAi+B,aAAA,EACAj+B,KAAA4+B,aAAA,EAAA/0B,EAAAmpB,GAGA,QAAA5zB,IAAA4zB,EAGA,OAFAoK,EAAAgB,EAAAt/B,OACAkB,KAAAi+B,aAAAb,EACAp9B,KAAA0+B,UAAAtB,EAAA,EAAArK,EAAAlpB,GAKA7J,KAAAi+B,aAAAb,EACAp9B,KAAA8+B,iBAAA1B,EAAArK,EAAAC,GAIA,OAAAhzB,KAAA++B,aAAA3B,EAAArK,EAAAlpB,EAAAmpB,IAEAgM,SAAA,KAIAC,iBAAA,GACAC,aAAA,WACA,OAAAl/B,KAAAg/B,UAAAh/B,KAAAi/B,kBAEAE,iBAAA,SAAA5+B,GAOA,IALA,IAAA6jB,EAAApkB,KAAAg+B,aACAoB,EAAAp/B,KAAA89B,aACAvW,EAAAvnB,KAAAk+B,UACA7wB,EAAA9M,EAAAgnB,EAEAtC,EAAA,EAAqBA,IAAAsC,IAActC,EACnCb,EAAAa,GAAAma,EAAA/xB,EAAA4X,GAGA,OAAAb,GAGA2a,aAAA,SAAA3B,EAAArK,EAAAlpB,EAAAmpB,GACA,UAAA/zB,MAAA,4BAEA6/B,iBAAA,SAAA1B,EAAArK,EAAAC,MAGAnzB,OAAAM,OAAA5B,EAAAq/B,YAAAj+B,UAAA,CACAi/B,aACArgC,EAAAq/B,YAAAj+B,UAAAw/B,iBACAT,UACAngC,EAAAq/B,YAAAj+B,UAAAw/B,mBAaA5gC,EAAA8gC,iBAAA,SAAAxB,EAAAC,EAAAC,EAAAC,GACAz/B,EAAAq/B,YAAAh9B,KAAAZ,KAAA69B,EAAAC,EAAAC,EAAAC,GACAh+B,KAAAs/B,aAAA,EACAt/B,KAAAu/B,aAAA,EACAv/B,KAAAw/B,aAAA,EACAx/B,KAAAy/B,aAAA,GAGAlhC,EAAA8gC,iBAAA1/B,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq/B,YAAAj+B,WAAA,CACAqJ,YAAAzK,EAAA8gC,iBACAJ,iBAAA,CACAU,YAAAphC,EAAAmJ,oBACAk4B,UAAArhC,EAAAmJ,qBAEAo3B,iBAAA,SAAA1B,EAAArK,EAAAC,GACA,IAAAoL,EAAAp+B,KAAA69B,mBACAgC,EAAAzC,EAAA,EACA0C,EAAA1C,EAAA,EACA2C,EAAA3B,EAAAyB,GACAG,EAAA5B,EAAA0B,GAEA,QAAA1gC,IAAA2gC,EACA,OAAA//B,KAAAk/B,eAAAS,aACA,KAAAphC,EAAAoJ,gBAEAk4B,EAAAzC,EACA2C,EAAA,EAAAhN,EAAAC,EACA,MAEA,KAAAz0B,EAAAqJ,iBAGAm4B,EAAAhN,EAAAqL,EADAyB,EAAAzB,EAAAt/B,OAAA,GACAs/B,EAAAyB,EAAA,GACA,MAEA,QAGAA,EAAAzC,EACA2C,EAAA/M,EAIA,QAAA5zB,IAAA4gC,EACA,OAAAhgC,KAAAk/B,eAAAU,WACA,KAAArhC,EAAAoJ,gBAEAm4B,EAAA1C,EACA4C,EAAA,EAAAhN,EAAAD,EACA,MAEA,KAAAx0B,EAAAqJ,iBAEAk4B,EAAA,EACAE,EAAAhN,EAAAoL,EAAA,GAAAA,EAAA,GACA,MAEA,QAGA0B,EAAA1C,EAAA,EACA4C,EAAAjN,EAIA,IAAAkN,EAAA,IAAAjN,EAAAD,GACAxL,EAAAvnB,KAAAk+B,UACAl+B,KAAAs/B,YAAAW,GAAAlN,EAAAgN,GACA//B,KAAAw/B,YAAAS,GAAAD,EAAAhN,GACAhzB,KAAAu/B,YAAAM,EAAAtY,EACAvnB,KAAAy/B,YAAAK,EAAAvY,GAEAwX,aAAA,SAAA3B,EAAArK,EAAAlpB,EAAAmpB,GAmBA,IAlBA,IAAA5O,EAAApkB,KAAAg+B,aACAoB,EAAAp/B,KAAA89B,aACAvW,EAAAvnB,KAAAk+B,UACAgC,EAAA9C,EAAA7V,EACA4Y,EAAAD,EAAA3Y,EACA6Y,EAAApgC,KAAAu/B,YACAc,EAAArgC,KAAAy/B,YACAa,EAAAtgC,KAAAs/B,YACAiB,EAAAvgC,KAAAw/B,YACA71B,GAAAE,EAAAkpB,IAAAC,EAAAD,GACAqL,EAAAz0B,IACA62B,EAAApC,EAAAz0B,EAEA82B,GAAAH,EAAAE,EAAA,EAAAF,EAAAlC,EAAAkC,EAAA32B,EACAuoB,GAAA,EAAAoO,GAAAE,IAAA,MAAAF,GAAAlC,IAAA,GAAAkC,GAAA32B,EAAA,EACAiO,IAAA,EAAA2oB,GAAAC,GAAA,IAAAD,GAAAnC,EAAA,GAAAz0B,EACA+2B,EAAAH,EAAAC,EAAAD,EAAAnC,EAEAnZ,EAAA,EAAqBA,IAAAsC,IAActC,EACnCb,EAAAa,GAAAwb,EAAArB,EAAAgB,EAAAnb,GAAAiN,EAAAkN,EAAAe,EAAAlb,GAAArN,EAAAwnB,EAAAc,EAAAjb,GAAAyb,EAAAtB,EAAAiB,EAAApb,GAGA,OAAAb,KAYA7lB,EAAAoiC,oBAAA,SAAA9C,EAAAC,EAAAC,EAAAC,GACAz/B,EAAAq/B,YAAAh9B,KAAAZ,KAAA69B,EAAAC,EAAAC,EAAAC,IAGAz/B,EAAAoiC,oBAAAhhC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq/B,YAAAj+B,WAAA,CACAqJ,YAAAzK,EAAAoiC,oBACA5B,aAAA,SAAA3B,EAAArK,EAAAlpB,EAAAmpB,GACA,OAAAhzB,KAAAm/B,iBAAA/B,EAAA,MAQA7+B,EAAAqiC,kBAAA,SAAA/C,EAAAC,EAAAC,EAAAC,GACAz/B,EAAAq/B,YAAAh9B,KAAAZ,KAAA69B,EAAAC,EAAAC,EAAAC,IAGAz/B,EAAAqiC,kBAAAjhC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq/B,YAAAj+B,WAAA,CACAqJ,YAAAzK,EAAAqiC,kBACA7B,aAAA,SAAA3B,EAAArK,EAAAlpB,EAAAmpB,GASA,IARA,IAAA5O,EAAApkB,KAAAg+B,aACAoB,EAAAp/B,KAAA89B,aACAvW,EAAAvnB,KAAAk+B,UACA2C,EAAAzD,EAAA7V,EACAuZ,EAAAD,EAAAtZ,EACAwZ,GAAAl3B,EAAAkpB,IAAAC,EAAAD,GACAiO,EAAA,EAAAD,EAEA9b,EAAA,EAAqBA,IAAAsC,IAActC,EACnCb,EAAAa,GAAAma,EAAA0B,EAAA7b,GAAA+b,EAAA5B,EAAAyB,EAAA5b,GAAA8b,EAGA,OAAA3c,KAUA7lB,EAAA0iC,4BAAA,SAAApD,EAAAC,EAAAC,EAAAC,GACAz/B,EAAAq/B,YAAAh9B,KAAAZ,KAAA69B,EAAAC,EAAAC,EAAAC,IAGAz/B,EAAA0iC,4BAAAthC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq/B,YAAAj+B,WAAA,CACAqJ,YAAAzK,EAAA0iC,4BACAlC,aAAA,SAAA3B,EAAArK,EAAAlpB,EAAAmpB,GAOA,IANA,IAAA5O,EAAApkB,KAAAg+B,aACAoB,EAAAp/B,KAAA89B,aACAvW,EAAAvnB,KAAAk+B,UACA7wB,EAAA+vB,EAAA7V,EACAva,GAAAnD,EAAAkpB,IAAAC,EAAAD,GAEAhP,EAAA1W,EAAAka,EAAqCla,IAAA0W,EAAgB1W,GAAA,EACrD9O,EAAAmY,WAAA4E,UAAA8I,EAAA,EAAAgb,EAAA/xB,EAAAka,EAAA6X,EAAA/xB,EAAAL,GAGA,OAAAoX,KAQA7lB,EAAA2iC,MAAA,SAAAC,GACAnhC,KAAAmhC,eAAA/hC,IAAA+hC,KACAnhC,KAAAohC,UAAA,EACAphC,KAAAqhC,QAAA,EACArhC,KAAAshC,YAAA,EACAthC,KAAAuhC,SAAA,GAGAhjC,EAAA2iC,MAAAvhC,UAAA,CACAqJ,YAAAzK,EAAA2iC,MACApd,MAAA,WACA9jB,KAAAohC,WAAAI,aAAAC,MAAAC,MACA1hC,KAAAqhC,QAAArhC,KAAAohC,UACAphC,KAAAuhC,SAAA,GAEAI,KAAA,WACA3hC,KAAA4hC,iBACA5hC,KAAAuhC,SAAA,GAEAK,eAAA,WAEA,OADA5hC,KAAA6hC,WACA7hC,KAAAshC,aAEAO,SAAA,WACA,IAAA/P,EAAA,EAMA,GAJA9xB,KAAAmhC,YAAAnhC,KAAAuhC,SACAvhC,KAAA8jB,QAGA9jB,KAAAuhC,QAAA,CACA,IAAAO,GAAAN,aAAAC,MAAAC,MACA5P,GAAAgQ,EAAA9hC,KAAAqhC,SAAA,IACArhC,KAAAqhC,QAAAS,EACA9hC,KAAAshC,aAAAxP,EAGA,OAAAA,IAQAvzB,EAAAwjC,gBAAA,aAEAliC,OAAAM,OAAA5B,EAAAwjC,gBAAApiC,UAAA,CACAqiC,iBAAA,SAAAC,EAAAC,QACA9iC,IAAAY,KAAAmiC,aAAAniC,KAAAmiC,WAAA,IACA,IAAAC,EAAApiC,KAAAmiC,gBAEA/iC,IAAAgjC,EAAAH,KACAG,EAAAH,GAAA,KAGA,IAAAG,EAAAH,GAAAI,QAAAH,IACAE,EAAAH,GAAA3F,KAAA4F,IAGAI,iBAAA,SAAAL,EAAAC,GACA,QAAA9iC,IAAAY,KAAAmiC,WAAA,SACA,IAAAC,EAAApiC,KAAAmiC,WAEA,YAAA/iC,IAAAgjC,EAAAH,KAAA,IAAAG,EAAAH,GAAAI,QAAAH,IAMAK,oBAAA,SAAAN,EAAAC,GACA,QAAA9iC,IAAAY,KAAAmiC,WAAA,CACA,IACAK,EADAxiC,KAAAmiC,WACAF,GAEA,QAAA7iC,IAAAojC,EAAA,CACA,IAAAjiC,EAAAiiC,EAAAH,QAAAH,IAEA,IAAA3hC,GACAiiC,EAAAC,OAAAliC,EAAA,MAIAmiC,cAAA,SAAAC,GACA,QAAAvjC,IAAAY,KAAAmiC,WAAA,CACA,IACAK,EADAxiC,KAAAmiC,WACAQ,EAAAV,MAEA,QAAA7iC,IAAAojC,EAAA,CACAG,EAAAviC,OAAAJ,KACA,IAAAoN,EAAA,GACA6X,EAAA,EACAnmB,EAAA0jC,EAAA1jC,OAEA,IAAAmmB,EAAA,EAAmBA,EAAAnmB,EAAYmmB,IAC/B7X,EAAA6X,GAAAud,EAAAvd,GAGA,IAAAA,EAAA,EAAmBA,EAAAnmB,EAAYmmB,IAC/B7X,EAAA6X,GAAArkB,KAAAZ,KAAA2iC,QAUApkC,EAAAqkC,OAAA,WACA5iC,KAAA6iC,KAAA,GAGAtkC,EAAAqkC,OAAAjjC,UAAA,CACAqJ,YAAAzK,EAAAqkC,OACA95B,IAAA,SAAAg6B,GACA9iC,KAAA6iC,KAAA,GAAAC,GAEAC,OAAA,SAAAD,GACA9iC,KAAA6iC,MAAA,GAAAC,GAEAE,OAAA,SAAAF,GACA9iC,KAAA6iC,MAAA,GAAAC,GAEAG,QAAA,SAAAH,GACA9iC,KAAA6iC,QAAA,GAAAC,IAEAI,KAAA,SAAAC,GACA,YAAAnjC,KAAA6iC,KAAAM,EAAAN,QAUA,SAAAtkC,GAyBA,SAAA6kC,EAAAnpB,EAAApR,GACA,OAAAoR,EAAAiK,SAAArb,EAAAqb,SAGA,SAAAmf,EAAAzc,EAAA0c,EAAAC,EAAAC,GACA,QAAA5c,EAAA6c,UACA7c,EAAA8c,QAAAJ,EAAAC,IAEA,IAAAC,GAGA,IAFA,IAAAG,EAAA/c,EAAA+c,SAEA1e,EAAA,EAAAjb,EAAA25B,EAAA7kC,OAA4CmmB,EAAAjb,EAAOib,IACnDoe,EAAAM,EAAA1e,GAAAqe,EAAAC,GAAA,GApCAhlC,EAAAqlC,UAAA,SAAAvS,EAAAC,EAAAb,EAAAC,GACA1wB,KAAAuxB,IAAA,IAAAhzB,EAAA6yB,IAAAC,EAAAC,GAEAtxB,KAAAywB,QAAA,EACAzwB,KAAA0wB,OAAA7L,IACA7kB,KAAA6jC,OAAA,CACAC,KAAA,GACAC,KAAA,GACAC,IAAA,GACAC,OAAA,CACAC,UAAA,GAEAC,OAAA,IAEAtkC,OAAAukC,iBAAApkC,KAAA6jC,OAAA,CACAQ,WAAA,CACAtkC,IAAA,WAEA,OADAwK,QAAAC,KAAA,yEACAxK,KAAAikC,YAwBA1lC,EAAAqlC,UAAAjkC,UAAA,CACAqJ,YAAAzK,EAAAqlC,UACAU,cAAA,EACAx7B,IAAA,SAAAuoB,EAAAC,GAEAtxB,KAAAuxB,IAAAzoB,IAAAuoB,EAAAC,IAEAiT,cAAA,SAAApJ,EAAA/a,GACAA,aAAA7hB,EAAAimC,mBACAxkC,KAAAuxB,IAAAF,OAAApP,sBAAA7B,EAAAK,aACAzgB,KAAAuxB,IAAAD,UAAAxoB,IAAAqyB,EAAAz7B,EAAAy7B,EAAAxkB,EAAA,IAAA+J,UAAAN,GAAAxT,IAAA5M,KAAAuxB,IAAAF,QAAA3X,aACS0G,aAAA7hB,EAAAkmC,oBACTzkC,KAAAuxB,IAAAF,OAAAvoB,IAAAqyB,EAAAz7B,EAAAy7B,EAAAxkB,GAAAyJ,EAAAqQ,KAAArQ,EAAAsQ,MAAAtQ,EAAAqQ,KAAArQ,EAAAsQ,MAAAhQ,UAAAN,GAEApgB,KAAAuxB,IAAAD,UAAAxoB,IAAA,QAAA6X,mBAAAP,EAAAK,cAEAlW,QAAA2U,MAAA,8CAGAwlB,gBAAA,SAAA9d,EAAA4c,GACA,IAAAD,EAAA,GAKA,OAHAF,EAAAzc,EAAA5mB,KAAAujC,EAAAC,GAEAD,EAAAoB,KAAAvB,GACAG,GAEAqB,iBAAA,SAAAC,EAAArB,GACA,IAAAD,EAAA,GAEA,QAAA3kC,MAAAkmC,QAAAD,GAEA,OADAt6B,QAAAC,KAAA,8DACA+4B,EAGA,QAAAte,EAAA,EAAAjb,EAAA66B,EAAA/lC,OAA2CmmB,EAAAjb,EAAOib,IAClDoe,EAAAwB,EAAA5f,GAAAjlB,KAAAujC,EAAAC,GAIA,OADAD,EAAAoB,KAAAvB,GACAG,IAnFA,CAsFGhlC,GAWHA,EAAAwmC,SAAA,WACAllC,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAymC,oBAEAhlC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAAiiC,KAAA,WACAjiC,KAAAilC,OAAA,KACAjlC,KAAA2jC,SAAA,GACA3jC,KAAA4sB,GAAAruB,EAAAwmC,SAAAG,UAAAh6B,QACA,IAAAoc,EAAA,IAAA/oB,EAAA+a,QACA6rB,EAAA,IAAA5mC,EAAAgZ,MACAJ,EAAA,IAAA5Y,EAAAmY,WACAwY,EAAA,IAAA3wB,EAAA+a,QAAA,OAUA6rB,EAAAjqB,SARA,WACA/D,EAAAC,aAAA+tB,GAAA,KAQAhuB,EAAA+D,SALA,WACAiqB,EAAA7hB,kBAAAnM,OAAA/X,GAAA,KAKAS,OAAAukC,iBAAApkC,KAAA,CACAsnB,SAAA,CACA8d,YAAA,EACAn8B,MAAAqe,GAEA6d,SAAA,CACAC,YAAA,EACAn8B,MAAAk8B,GAEAhuB,WAAA,CACAiuB,YAAA,EACAn8B,MAAAkO,GAEA+X,MAAA,CACAkW,YAAA,EACAn8B,MAAAimB,GAEAmW,gBAAA,CACAp8B,MAAA,IAAA1K,EAAA8hB,SAEA0X,aAAA,CACA9uB,MAAA,IAAA1K,EAAA2pB,WAGAloB,KAAAmgB,OAAA,IAAA5hB,EAAA8hB,QACArgB,KAAAygB,YAAA,IAAAliB,EAAA8hB,QACArgB,KAAAslC,iBAAA/mC,EAAAwmC,SAAAQ,wBACAvlC,KAAAwlC,wBAAA,EACAxlC,KAAAmjC,OAAA,IAAA5kC,EAAAqkC,OACA5iC,KAAAyjC,SAAA,EACAzjC,KAAAylC,YAAA,EACAzlC,KAAA0lC,eAAA,EACA1lC,KAAA2lC,eAAA,EACA3lC,KAAA4lC,YAAA,EACA5lC,KAAA6lC,SAAA,IAGAtnC,EAAAwmC,SAAAG,UAAA,IAAA3mC,EAAA+a,QAAA,OACA/a,EAAAwmC,SAAAQ,yBAAA,EACA1lC,OAAAM,OAAA5B,EAAAwmC,SAAAplC,UAAApB,EAAAwjC,gBAAApiC,UAAA,CACAmmC,YAAA,SAAA3lB,GACAngB,KAAAmgB,OAAAG,iBAAAH,EAAAngB,KAAAmgB,QACAngB,KAAAmgB,OAAA6P,UAAAhwB,KAAAsnB,SAAAtnB,KAAAmX,WAAAnX,KAAAkvB,QAEA6W,yBAAA,SAAA7tB,EAAAC,GAEAnY,KAAAmX,WAAAc,iBAAAC,EAAAC,IAEA6tB,qBAAA,SAAA3uB,GACArX,KAAAmX,WAAAC,aAAAC,GAAA,IAEA4uB,sBAAA,SAAAx7B,GAEAzK,KAAAmX,WAAAkB,sBAAA5N,IAEAy7B,0BAAA,SAAAt8B,GAEA5J,KAAAmX,WAAAjO,KAAAU,IAEAu8B,aAAA,WAGA,IAAAC,EAAA,IAAA7nC,EAAAmY,WACA,gBAAAwB,EAAAC,GAGA,OAFAiuB,EAAAnuB,iBAAAC,EAAAC,GACAnY,KAAAmX,WAAAtK,SAAAu5B,GACApmC,MAPA,GAUAqmC,QAAA,WACA,IAAAltB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAAnB,GACA,OAAAnY,KAAAmmC,aAAAhtB,EAAAhB,IAHA,GAMAmuB,QAAA,WACA,IAAAntB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAAnB,GACA,OAAAnY,KAAAmmC,aAAAhtB,EAAAhB,IAHA,GAMAouB,QAAA,WACA,IAAAptB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAAnB,GACA,OAAAnY,KAAAmmC,aAAAhtB,EAAAhB,IAHA,GAMAquB,gBAAA,WAGA,IAAArtB,EAAA,IAAA5a,EAAA+a,QACA,gBAAApB,EAAAgM,GAGA,OAFA/K,EAAAjQ,KAAAgP,GAAAiH,gBAAAnf,KAAAmX,YACAnX,KAAAsnB,SAAA/a,IAAA4M,EAAArM,eAAAoX,IACAlkB,MAPA,GAUAymC,WAAA,WACA,IAAAttB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAA4K,GACA,OAAAlkB,KAAAwmC,gBAAArtB,EAAA+K,IAHA,GAMAwiB,WAAA,WACA,IAAAvtB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAA4K,GACA,OAAAlkB,KAAAwmC,gBAAArtB,EAAA+K,IAHA,GAMAyiB,WAAA,WACA,IAAAxtB,EAAA,IAAA5a,EAAA+a,QAAA,OACA,gBAAA4K,GACA,OAAAlkB,KAAAwmC,gBAAArtB,EAAA+K,IAHA,GAMA0iB,aAAA,SAAAxlB,GACA,OAAAA,EAAA7B,aAAAvf,KAAAygB,cAEAomB,aAAA,WACA,IAAAjP,EAAA,IAAAr5B,EAAA8hB,QACA,gBAAAe,GACA,OAAAA,EAAA7B,aAAAqY,EAAApX,WAAAxgB,KAAAygB,eAHA,GAMAiM,OAAA,WAEA,IAAAkL,EAAA,IAAAr5B,EAAA8hB,QACA,gBAAAe,GACAwW,EAAAlL,OAAAtL,EAAAphB,KAAAsnB,SAAAtnB,KAAA4sB,IACA5sB,KAAAmX,WAAAkB,sBAAAuf,IALA,GAQArrB,IAAA,SAAAqa,GACA,GAAApmB,UAAA1B,OAAA,GACA,QAAAmmB,EAAA,EAAuBA,EAAAzkB,UAAA1B,OAAsBmmB,IAC7CjlB,KAAAuM,IAAA/L,UAAAykB,IAGA,OAAAjlB,KAGA,OAAA4mB,IAAA5mB,MACAuK,QAAA2U,MAAA,kEAAA0H,GACA5mB,OAGA4mB,aAAAroB,EAAAwmC,UACA,OAAAne,EAAAqe,QACAre,EAAAqe,OAAA6B,OAAAlgB,GAGAA,EAAAqe,OAAAjlC,KACA4mB,EAAA8b,cAAA,CACAT,KAAA,UAEAjiC,KAAA2jC,SAAArH,KAAA1V,IAEArc,QAAA2U,MAAA,gEAAA0H,GAGA5mB,OAEA8mC,OAAA,SAAAlgB,GACA,GAAApmB,UAAA1B,OAAA,EACA,QAAAmmB,EAAA,EAAuBA,EAAAzkB,UAAA1B,OAAsBmmB,IAC7CjlB,KAAA8mC,OAAAtmC,UAAAykB,IAIA,IAAA1kB,EAAAP,KAAA2jC,SAAAtB,QAAAzb,IAEA,IAAArmB,IACAqmB,EAAAqe,OAAA,KACAre,EAAA8b,cAAA,CACAT,KAAA,YAEAjiC,KAAA2jC,SAAAlB,OAAAliC,EAAA,KAGAwmC,cAAA,SAAAC,GACA,OAAAhnC,KAAAinC,oBAAA,KAAAD,IAEAE,gBAAA,SAAAtnC,GACA,OAAAI,KAAAinC,oBAAA,OAAArnC,IAEAqnC,oBAAA,SAAArnC,EAAAqJ,GACA,GAAAjJ,KAAAJ,KAAAqJ,EAAA,OAAAjJ,KAEA,QAAAilB,EAAA,EAAAjb,EAAAhK,KAAA2jC,SAAA7kC,OAA+CmmB,EAAAjb,EAAOib,IAAA,CACtD,IACA2B,EADA5mB,KAAA2jC,SAAA1e,GACAgiB,oBAAArnC,EAAAqJ,GAEA,QAAA7J,IAAAwnB,EACA,OAAAA,IAMAugB,iBAAA,SAAAr7B,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QAEA,OADAtZ,KAAA8mB,mBAAA,GACA1C,EAAAnC,sBAAAjiB,KAAAygB,cAEA2mB,mBAAA,WACA,IAAA9f,EAAA,IAAA/oB,EAAA+a,QACA4V,EAAA,IAAA3wB,EAAA+a,QACA,gBAAAxN,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAAmY,WAGA,OAFA1W,KAAA8mB,mBAAA,GACA9mB,KAAAygB,YAAAuP,UAAA1I,EAAAlD,EAAA8K,GACA9K,GAPA,GAUAijB,iBAAA,WACA,IAAAlwB,EAAA,IAAA5Y,EAAAmY,WACA,gBAAA5K,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAAgZ,MAEA,OADAvX,KAAAonC,mBAAAjwB,GACAiN,EAAAd,kBAAAnM,EAAAnX,KAAAmlC,SAAAntB,OAAA,IALA,GAQAsvB,cAAA,WACA,IAAAhgB,EAAA,IAAA/oB,EAAA+a,QACAnC,EAAA,IAAA5Y,EAAAmY,WACA,gBAAA5K,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QAGA,OAFAtZ,KAAA8mB,mBAAA,GACA9mB,KAAAygB,YAAAuP,UAAA1I,EAAAnQ,EAAAiN,GACAA,GAPA,GAUAmjB,kBAAA,WACA,IAAApwB,EAAA,IAAA5Y,EAAAmY,WACA,gBAAA5K,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QAEA,OADAtZ,KAAAonC,mBAAAjwB,GACAiN,EAAAtb,IAAA,OAAAqW,gBAAAhI,IALA,GAQAusB,QAAA,aACA3c,SAAA,SAAA5L,GACAA,EAAAnb,MAGA,IAFA,IAAA2jC,EAAA3jC,KAAA2jC,SAEA1e,EAAA,EAAAjb,EAAA25B,EAAA7kC,OAA0CmmB,EAAAjb,EAAOib,IACjD0e,EAAA1e,GAAA8B,SAAA5L,IAGAqsB,gBAAA,SAAArsB,GACA,QAAAnb,KAAAyjC,QAAA,CACAtoB,EAAAnb,MAGA,IAFA,IAAA2jC,EAAA3jC,KAAA2jC,SAEA1e,EAAA,EAAAjb,EAAA25B,EAAA7kC,OAA0CmmB,EAAAjb,EAAOib,IACjD0e,EAAA1e,GAAAuiB,gBAAArsB,KAGAssB,kBAAA,SAAAtsB,GACA,IAAA8pB,EAAAjlC,KAAAilC,OAEA,OAAAA,IACA9pB,EAAA8pB,GACAA,EAAAwC,kBAAAtsB,KAGAusB,aAAA,WACA1nC,KAAAmgB,OAAA4P,QAAA/vB,KAAAsnB,SAAAtnB,KAAAmX,WAAAnX,KAAAkvB,OACAlvB,KAAAwlC,wBAAA,GAEA1e,kBAAA,SAAA6gB,IACA,IAAA3nC,KAAAslC,kBAAAtlC,KAAA0nC,gBAEA,IAAA1nC,KAAAwlC,yBAAA,IAAAmC,IACA,OAAA3nC,KAAAilC,OACAjlC,KAAAygB,YAAAvX,KAAAlJ,KAAAmgB,QAEAngB,KAAAygB,YAAAH,iBAAAtgB,KAAAilC,OAAAxkB,YAAAzgB,KAAAmgB,QAGAngB,KAAAwlC,wBAAA,EACAmC,GAAA,GAIA,QAAA1iB,EAAA,EAAAjb,EAAAhK,KAAA2jC,SAAA7kC,OAA+CmmB,EAAAjb,EAAOib,IACtDjlB,KAAA2jC,SAAA1e,GAAA6B,kBAAA6gB,IAGAC,OAAA,SAAAC,GAEA,IAAAC,OAAA1oC,IAAAyoC,GAAA,KAAAA,EACAvnC,EAAA,GAIAwnC,IAEAD,EAAA,CACAE,WAAA,GACAC,UAAA,GACAC,SAAA,GACAC,OAAA,IAEA5nC,EAAA6nC,SAAA,CACAC,QAAA,IACAnG,KAAA,SACAoG,UAAA,oBAKA,IAAAzhB,EAAA,GA2BA,GA1BAA,EAAA4R,KAAAx4B,KAAAw4B,KACA5R,EAAAqb,KAAAjiC,KAAAiiC,KACA,KAAAjiC,KAAAJ,OAAAgnB,EAAAhnB,KAAAI,KAAAJ,MACA,OAAA0oC,KAAAC,UAAAvoC,KAAA6lC,YAA+Cjf,EAAAif,SAAA7lC,KAAA6lC,WAC/C,IAAA7lC,KAAAylC,aAAA7e,EAAA6e,YAAA,IACA,IAAAzlC,KAAA0lC,gBAAA9e,EAAA8e,eAAA,IACA,IAAA1lC,KAAAyjC,UAAA7c,EAAA6c,SAAA,GACA7c,EAAAzG,OAAAngB,KAAAmgB,OAAA7S,eAEAlO,IAAAY,KAAAinB,gBACA7nB,IAAAyoC,EAAAE,WAAA/nC,KAAAinB,SAAAuR,QACAqP,EAAAE,WAAA/nC,KAAAinB,SAAAuR,MAAAx4B,KAAAinB,SAAA2gB,OAAAC,IAGAjhB,EAAAK,SAAAjnB,KAAAinB,SAAAuR,WAGAp5B,IAAAY,KAAAwoC,gBACAppC,IAAAyoC,EAAAG,UAAAhoC,KAAAwoC,SAAAhQ,QACAqP,EAAAG,UAAAhoC,KAAAwoC,SAAAhQ,MAAAx4B,KAAAwoC,SAAAZ,OAAAC,IAGAjhB,EAAA4hB,SAAAxoC,KAAAwoC,SAAAhQ,MAIAx4B,KAAA2jC,SAAA7kC,OAAA,GACA8nB,EAAA+c,SAAA,GAEA,QAAA1e,EAAA,EAAuBA,EAAAjlB,KAAA2jC,SAAA7kC,OAA0BmmB,IACjD2B,EAAA+c,SAAArH,KAAAt8B,KAAA2jC,SAAA1e,GAAA2iB,OAAAC,GAAAjhB,QAIA,GAAAkhB,EAAA,CACA,IAAAC,EAAAU,EAAAZ,EAAAE,YACAC,EAAAS,EAAAZ,EAAAG,WACAC,EAAAQ,EAAAZ,EAAAI,UACAC,EAAAO,EAAAZ,EAAAK,QACAH,EAAAjpC,OAAA,IAAAwB,EAAAynC,cACAC,EAAAlpC,OAAA,IAAAwB,EAAA0nC,aACAC,EAAAnpC,OAAA,IAAAwB,EAAA2nC,YACAC,EAAAppC,OAAA,IAAAwB,EAAA4nC,UAIA,OADA5nC,EAAAsmB,SACAtmB,EAIA,SAAAmoC,EAAAC,GACA,IAAAtJ,EAAA,GAEA,QAAAuJ,KAAAD,EAAA,CACA,IAAAjhB,EAAAihB,EAAAC,UACAlhB,EAAA0gB,SACA/I,EAAA9C,KAAA7U,GAGA,OAAA2X,IAGAl0B,MAAA,SAAAs4B,GACA,WAAAxjC,KAAAgJ,aAAAE,KAAAlJ,KAAAwjC,IAEAt6B,KAAA,SAAAzI,EAAA+iC,GAkBA,QAjBApkC,IAAAokC,OAAA,GACAxjC,KAAAJ,KAAAa,EAAAb,KACAI,KAAA4sB,GAAA1jB,KAAAzI,EAAAmsB,IACA5sB,KAAAsnB,SAAApe,KAAAzI,EAAA6mB,UACAtnB,KAAAmX,WAAAjO,KAAAzI,EAAA0W,YACAnX,KAAAkvB,MAAAhmB,KAAAzI,EAAAyuB,OACAlvB,KAAAmgB,OAAAjX,KAAAzI,EAAA0f,QACAngB,KAAAygB,YAAAvX,KAAAzI,EAAAggB,aACAzgB,KAAAslC,iBAAA7kC,EAAA6kC,iBACAtlC,KAAAwlC,uBAAA/kC,EAAA+kC,uBACAxlC,KAAAyjC,QAAAhjC,EAAAgjC,QACAzjC,KAAAylC,WAAAhlC,EAAAglC,WACAzlC,KAAA0lC,cAAAjlC,EAAAilC,cACA1lC,KAAA2lC,cAAAllC,EAAAklC,cACA3lC,KAAA4lC,YAAAnlC,EAAAmlC,YACA5lC,KAAA6lC,SAAAyC,KAAAM,MAAAN,KAAAC,UAAA9nC,EAAAolC,YAEA,IAAArC,EACA,QAAAve,EAAA,EAAuBA,EAAAxkB,EAAAkjC,SAAA7kC,OAA4BmmB,IAAA,CACnD,IAAA4jB,EAAApoC,EAAAkjC,SAAA1e,GACAjlB,KAAAuM,IAAAs8B,EAAA39B,SAIA,OAAAlL,QAGAzB,EAAAymC,gBAAA,EAOAzmC,EAAAuqC,MAAA,SAAA7uB,EAAApR,EAAAqE,EAAAsU,EAAA7W,EAAAo+B,GACA/oC,KAAAia,IACAja,KAAA6I,IACA7I,KAAAkN,IACAlN,KAAAwhB,oBAAAjjB,EAAA+a,QAAAkI,EAAA,IAAAjjB,EAAA+a,QACAtZ,KAAAgpC,cAAApqC,MAAAkmC,QAAAtjB,KAAA,GACAxhB,KAAA2K,mBAAApM,EAAAmK,MAAAiC,EAAA,IAAApM,EAAAmK,MACA1I,KAAAipC,aAAArqC,MAAAkmC,QAAAn6B,KAAA,GACA3K,KAAA+oC,mBAAA3pC,IAAA2pC,IAAA,GAGAxqC,EAAAuqC,MAAAnpC,UAAA,CACAqJ,YAAAzK,EAAAuqC,MACA59B,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GACAT,KAAAia,EAAAxZ,EAAAwZ,EACAja,KAAA6I,EAAApI,EAAAoI,EACA7I,KAAAkN,EAAAzM,EAAAyM,EACAlN,KAAAwhB,OAAAtY,KAAAzI,EAAA+gB,QACAxhB,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAA+oC,cAAAtoC,EAAAsoC,cAEA,QAAA9jB,EAAA,EAAAC,EAAAzkB,EAAAuoC,cAAAlqC,OAAuDmmB,EAAAC,EAAQD,IAC/DjlB,KAAAgpC,cAAA/jB,GAAAxkB,EAAAuoC,cAAA/jB,GAAA/Z,QAGA,IAAA+Z,EAAA,EAAAC,EAAAzkB,EAAAwoC,aAAAnqC,OAAsDmmB,EAAAC,EAAQD,IAC9DjlB,KAAAipC,aAAAhkB,GAAAxkB,EAAAwoC,aAAAhkB,GAAA/Z,QAGA,OAAAlL,OAQAzB,EAAA2qC,gBAAA,SAAA97B,EAAAwR,EAAAuqB,GACAnpC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAoN,QACApN,KAAA4e,WACA5e,KAAAopC,SAAA,EACAppC,KAAAqpC,YAAA,CACAh8B,OAAA,EACAi8B,OAAA,GAEAtpC,KAAAooC,QAAA,EACApoC,KAAAmpC,YAAA,IAAAA,GAGA5qC,EAAA2qC,gBAAAvpC,UAAA,CACAqJ,YAAAzK,EAAA2qC,gBAEAI,YACA,OAAAtpC,KAAAoN,MAAAtO,OAAAkB,KAAA4e,UAGA2qB,gBAAAtgC,IACA,IAAAA,GAAAjJ,KAAAooC,WAGAoB,WAAA,SAAAvgC,GAEA,OADAjJ,KAAAopC,QAAAngC,EACAjJ,MAEAkJ,KAAA,SAAAzI,GAIA,OAHAT,KAAAoN,MAAA,IAAA3M,EAAA2M,MAAApE,YAAAvI,EAAA2M,OACApN,KAAA4e,SAAAne,EAAAme,SACA5e,KAAAopC,QAAA3oC,EAAA2oC,QACAppC,MAEAypC,OAAA,SAAAC,EAAA/qB,EAAAgrB,GACAD,GAAA1pC,KAAA4e,SACA+qB,GAAAhrB,EAAAC,SAEA,QAAAqG,EAAA,EAAAjb,EAAAhK,KAAA4e,SAAwCqG,EAAAjb,EAAOib,IAC/CjlB,KAAAoN,MAAAs8B,EAAAzkB,GAAAtG,EAAAvR,MAAAu8B,EAAA1kB,GAGA,OAAAjlB,MAEA4pC,UAAA,SAAAx8B,GAEA,OADApN,KAAAoN,MAAAtE,IAAAsE,GACApN,MAEA6pC,gBAAA,SAAAC,GAIA,IAHA,IAAA18B,EAAApN,KAAAoN,MACAC,EAAA,EAEA4X,EAAA,EAAAjb,EAAA8/B,EAAAhrC,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAta,EAAAm/B,EAAA7kB,QAEA7lB,IAAAuL,IACAJ,QAAAC,KAAA,8DAAAya,GACAta,EAAA,IAAApM,EAAAmK,OAGA0E,EAAAC,KAAA1C,EAAAhC,EACAyE,EAAAC,KAAA1C,EAAA/B,EACAwE,EAAAC,KAAA1C,EAAA9B,EAGA,OAAA7I,MAEA+pC,iBAAA,SAAAC,GAIA,IAHA,IAAA58B,EAAApN,KAAAoN,MACAC,EAAA,EAEA4X,EAAA,EAAAjb,EAAAggC,EAAAlrC,OAAyCmmB,EAAAjb,EAAOib,IAAA,CAChD,IAAA1kB,EAAAypC,EAAA/kB,GACA7X,EAAAC,KAAA9M,EAAA0Z,EACA7M,EAAAC,KAAA9M,EAAAsI,EACAuE,EAAAC,KAAA9M,EAAA2M,EAGA,OAAAlN,MAEAiqC,kBAAA,SAAAC,GAIA,IAHA,IAAA98B,EAAApN,KAAAoN,MACAC,EAAA,EAEA4X,EAAA,EAAAjb,EAAAkgC,EAAAprC,OAAyCmmB,EAAAjb,EAAOib,IAAA,CAChD,IAAA7D,EAAA8oB,EAAAjlB,QAEA7lB,IAAAgiB,IACA7W,QAAAC,KAAA,iEAAAya,GACA7D,EAAA,IAAA7iB,EAAAme,SAGAtP,EAAAC,KAAA+T,EAAA1hB,EACA0N,EAAAC,KAAA+T,EAAAzK,EAGA,OAAA3W,MAEAmqC,kBAAA,SAAAD,GAIA,IAHA,IAAA98B,EAAApN,KAAAoN,MACAC,EAAA,EAEA4X,EAAA,EAAAjb,EAAAkgC,EAAAprC,OAAyCmmB,EAAAjb,EAAOib,IAAA,CAChD,IAAA7D,EAAA8oB,EAAAjlB,QAEA7lB,IAAAgiB,IACA7W,QAAAC,KAAA,iEAAAya,GACA7D,EAAA,IAAA7iB,EAAA+a,SAGAlM,EAAAC,KAAA+T,EAAA1hB,EACA0N,EAAAC,KAAA+T,EAAAzK,EACAvJ,EAAAC,KAAA+T,EAAAxK,EAGA,OAAA5W,MAEAoqC,kBAAA,SAAAF,GAIA,IAHA,IAAA98B,EAAApN,KAAAoN,MACAC,EAAA,EAEA4X,EAAA,EAAAjb,EAAAkgC,EAAAprC,OAAyCmmB,EAAAjb,EAAOib,IAAA,CAChD,IAAA7D,EAAA8oB,EAAAjlB,QAEA7lB,IAAAgiB,IACA7W,QAAAC,KAAA,iEAAAya,GACA7D,EAAA,IAAA7iB,EAAAikB,SAGApV,EAAAC,KAAA+T,EAAA1hB,EACA0N,EAAAC,KAAA+T,EAAAzK,EACAvJ,EAAAC,KAAA+T,EAAAxK,EACAxJ,EAAAC,KAAA+T,EAAAvK,EAGA,OAAA7W,MAEA8I,IAAA,SAAAG,EAAAoE,GAGA,YAFAjO,IAAAiO,MAAA,GACArN,KAAAoN,MAAAtE,IAAAG,EAAAoE,GACArN,MAEAopB,KAAA,SAAA7oB,GACA,OAAAP,KAAAoN,MAAA7M,EAAAP,KAAA4e,WAEA/B,KAAA,SAAAtc,EAAAb,GAEA,OADAM,KAAAoN,MAAA7M,EAAAP,KAAA4e,UAAAlf,EACAM,MAEAqpB,KAAA,SAAA9oB,GACA,OAAAP,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,IAEA9B,KAAA,SAAAvc,EAAAoW,GAEA,OADA3W,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,GAAAjI,EACA3W,MAEAspB,KAAA,SAAA/oB,GACA,OAAAP,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,IAEAG,KAAA,SAAAxe,EAAAqW,GAEA,OADA5W,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,GAAAhI,EACA5W,MAEAqqC,KAAA,SAAA9pC,GACA,OAAAP,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,IAEA6D,KAAA,SAAAliB,EAAAsW,GAEA,OADA7W,KAAAoN,MAAA7M,EAAAP,KAAA4e,SAAA,GAAA/H,EACA7W,MAEAsqC,MAAA,SAAA/pC,EAAAb,EAAAiX,GAIA,OAHApW,GAAAP,KAAA4e,SACA5e,KAAAoN,MAAA7M,EAAA,GAAAb,EACAM,KAAAoN,MAAA7M,EAAA,GAAAoW,EACA3W,MAEAupB,OAAA,SAAAhpB,EAAAb,EAAAiX,EAAAC,GAKA,OAJArW,GAAAP,KAAA4e,SACA5e,KAAAoN,MAAA7M,EAAA,GAAAb,EACAM,KAAAoN,MAAA7M,EAAA,GAAAoW,EACA3W,KAAAoN,MAAA7M,EAAA,GAAAqW,EACA5W,MAEAuqC,QAAA,SAAAhqC,EAAAb,EAAAiX,EAAAC,EAAAC,GAMA,OALAtW,GAAAP,KAAA4e,SACA5e,KAAAoN,MAAA7M,EAAA,GAAAb,EACAM,KAAAoN,MAAA7M,EAAA,GAAAoW,EACA3W,KAAAoN,MAAA7M,EAAA,GAAAqW,EACA5W,KAAAoN,MAAA7M,EAAA,GAAAsW,EACA7W,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,QAIAzB,EAAAisC,cAAA,SAAAp9B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAAuB,UAAAr9B,GAAAwR,IAGArgB,EAAAmsC,eAAA,SAAAt9B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAAyB,WAAAv9B,GAAAwR,IAGArgB,EAAAqsC,sBAAA,SAAAx9B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAA2B,kBAAAz9B,GAAAwR,IAGArgB,EAAAusC,eAAA,SAAA19B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAA6B,WAAA39B,GAAAwR,IAGArgB,EAAAysC,gBAAA,SAAA59B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAA+B,YAAA79B,GAAAwR,IAGArgB,EAAA2sC,eAAA,SAAA99B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAAiC,WAAA/9B,GAAAwR,IAGArgB,EAAA6sC,gBAAA,SAAAh+B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAAmC,YAAAj+B,GAAAwR,IAGArgB,EAAA+sC,iBAAA,SAAAl+B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAA/gB,aAAA/a,GAAAwR,IAGArgB,EAAAgtC,iBAAA,SAAAn+B,EAAAwR,GACA,WAAArgB,EAAA2qC,gBAAA,IAAAsC,aAAAp+B,GAAAwR,IAIArgB,EAAAktC,uBAAA,SAAAr+B,EAAAwR,GAEA,OADArU,QAAAC,KAAA,8GACA,IAAAjM,EAAA2qC,gBAAA97B,EAAAwR,GAAA4qB,YAAA,IAQAjrC,EAAAmtC,yBAAA,SAAAt+B,EAAAwR,EAAA+sB,GACAptC,EAAA2qC,gBAAAtoC,KAAAZ,KAAAoN,EAAAwR,GACA5e,KAAA2rC,oBAAA,GAGAptC,EAAAmtC,yBAAA/rC,UAAAE,OAAA6/B,OAAAnhC,EAAA2qC,gBAAAvpC,WACApB,EAAAmtC,yBAAA/rC,UAAAqJ,YAAAzK,EAAAmtC,yBAEAntC,EAAAmtC,yBAAA/rC,UAAAuJ,KAAA,SAAAzI,GAGA,OAFAlC,EAAA2qC,gBAAAvpC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2rC,iBAAAlrC,EAAAkrC,iBACA3rC,MAQAzB,EAAAqtC,kBAAA,SAAAx+B,EAAAma,GACAvnB,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAoN,QACApN,KAAAunB,SACAvnB,KAAAopC,SAAA,EACAppC,KAAAqpC,YAAA,CACAh8B,OAAA,EACAi8B,OAAA,GAEAtpC,KAAAooC,QAAA,GAGA7pC,EAAAqtC,kBAAAjsC,UAAA,CACAqJ,YAAAzK,EAAAqtC,kBAEA9sC,aACA,OAAAkB,KAAAoN,MAAAtO,QAGAwqC,YACA,OAAAtpC,KAAAoN,MAAAtO,OAAAkB,KAAAunB,QAGAgiB,gBAAAtgC,IACA,IAAAA,GAAAjJ,KAAAooC,WAGAoB,WAAA,SAAAvgC,GAEA,OADAjJ,KAAAopC,QAAAngC,EACAjJ,MAEAkJ,KAAA,SAAAzI,GAIA,OAHAT,KAAAoN,MAAA,IAAA3M,EAAA2M,MAAApE,YAAAvI,EAAA2M,OACApN,KAAAunB,OAAA9mB,EAAA8mB,OACAvnB,KAAAopC,QAAA3oC,EAAA2oC,QACAppC,MAEAypC,OAAA,SAAAC,EAAA/qB,EAAAgrB,GACAD,GAAA1pC,KAAAunB,OACAoiB,GAAAhrB,EAAA4I,OAEA,QAAAtC,EAAA,EAAAjb,EAAAhK,KAAAunB,OAAsCtC,EAAAjb,EAAOib,IAC7CjlB,KAAAoN,MAAAs8B,EAAAzkB,GAAAtG,EAAAvR,MAAAu8B,EAAA1kB,GAGA,OAAAjlB,MAEA8I,IAAA,SAAAG,EAAAoE,GAGA,YAFAjO,IAAAiO,MAAA,GACArN,KAAAoN,MAAAtE,IAAAG,EAAAoE,GACArN,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,QAQAzB,EAAAstC,2BAAA,SAAAz+B,EAAAma,EAAAokB,GACAptC,EAAAqtC,kBAAAhrC,KAAAZ,KAAAoN,EAAAma,GACAvnB,KAAA2rC,oBAAA,GAGAptC,EAAAstC,2BAAAlsC,UAAAE,OAAA6/B,OAAAnhC,EAAAqtC,kBAAAjsC,WACApB,EAAAstC,2BAAAlsC,UAAAqJ,YAAAzK,EAAAstC,2BAEAttC,EAAAstC,2BAAAlsC,UAAAuJ,KAAA,SAAAzI,GAGA,OAFAlC,EAAAqtC,kBAAAjsC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2rC,iBAAAlrC,EAAAkrC,iBACA3rC,MAQAzB,EAAAipB,2BAAA,SAAAskB,EAAAltB,EAAAvR,EAAA87B,GACAnpC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAynB,KAAAqkB,EACA9rC,KAAA4e,WACA5e,KAAAqN,SACArN,KAAAmpC,YAAA,IAAAA,GAGA5qC,EAAAipB,2BAAA7nB,UAAA,CACAqJ,YAAAzK,EAAAipB,2BAEA1oB,aAEA,OADAyL,QAAAC,KAAA,0EACAxK,KAAAoN,MAAAtO,QAGAwqC,YACA,OAAAtpC,KAAAynB,KAAA6hB,OAGAl8B,YACA,OAAApN,KAAAynB,KAAAra,OAGAyP,KAAA,SAAAtc,EAAAb,GAEA,OADAM,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,QAAA3N,EACAM,MAEA8c,KAAA,SAAAvc,EAAAoW,GAEA,OADA3W,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,GAAAsJ,EACA3W,MAEA+e,KAAA,SAAAxe,EAAAqW,GAEA,OADA5W,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,GAAAuJ,EACA5W,MAEAyiB,KAAA,SAAAliB,EAAAsW,GAEA,OADA7W,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,GAAAwJ,EACA7W,MAEAopB,KAAA,SAAA7oB,GACA,OAAAP,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,SAEAgc,KAAA,SAAA9oB,GACA,OAAAP,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,IAEAic,KAAA,SAAA/oB,GACA,OAAAP,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,IAEAg9B,KAAA,SAAA9pC,GACA,OAAAP,KAAAynB,KAAAra,MAAA7M,EAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OAAA,IAEAi9B,MAAA,SAAA/pC,EAAAb,EAAAiX,GAIA,OAHApW,IAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OACArN,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAb,EACAM,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAoW,EACA3W,MAEAupB,OAAA,SAAAhpB,EAAAb,EAAAiX,EAAAC,GAKA,OAJArW,IAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OACArN,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAb,EACAM,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAoW,EACA3W,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAqW,EACA5W,MAEAuqC,QAAA,SAAAhqC,EAAAb,EAAAiX,EAAAC,EAAAC,GAMA,OALAtW,IAAAP,KAAAynB,KAAAF,OAAAvnB,KAAAqN,OACArN,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAb,EACAM,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAoW,EACA3W,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAqW,EACA5W,KAAAynB,KAAAra,MAAA7M,EAAA,GAAAsW,EACA7W,OAaAzB,EAAA2oB,SAAA,WACArnB,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAwtC,oBAEA/rC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAAiiC,KAAA,WACAjiC,KAAAmnB,SAAA,GACAnnB,KAAA8pC,OAAA,GACA9pC,KAAAgsC,MAAA,GACAhsC,KAAAisC,cAAA,KACAjsC,KAAAksC,aAAA,GACAlsC,KAAAmsC,aAAA,GACAnsC,KAAAosC,YAAA,GACApsC,KAAAqsC,YAAA,GACArsC,KAAAssC,cAAA,GACAtsC,KAAAusC,YAAA,KACAvsC,KAAA02B,eAAA,KAEA12B,KAAAwsC,oBAAA,EACAxsC,KAAAysC,oBAAA,EACAzsC,KAAA0sC,eAAA,EACA1sC,KAAA2sC,mBAAA,EACA3sC,KAAA4sC,kBAAA,EACA5sC,KAAA6sC,yBAAA,EACA7sC,KAAA8sC,kBAAA,GAGAjtC,OAAAM,OAAA5B,EAAA2oB,SAAAvnB,UAAApB,EAAAwjC,gBAAApiC,UAAA,CACAmmC,YAAA,SAAA3lB,GAGA,IAFA,IAAA4X,GAAA,IAAAx5B,EAAA2pB,SAAAiC,gBAAAhK,GAEA8E,EAAA,EAAAC,EAAAllB,KAAAmnB,SAAAroB,OAAgDmmB,EAAAC,EAAQD,IAAA,CACxDjlB,KAAAmnB,SAAAlC,GACA1F,aAAAY,GAGA,IAAA8E,EAAA,EAAAC,EAAAllB,KAAAgsC,MAAAltC,OAA6CmmB,EAAAC,EAAQD,IAAA,CACrD,IAAA8nB,EAAA/sC,KAAAgsC,MAAA/mB,GACA8nB,EAAAvrB,OAAAnC,aAAA0Y,GAAAre,YAEA,QAAAuP,EAAA,EAAA+jB,EAAAD,EAAA/D,cAAAlqC,OAAuDmqB,EAAA+jB,EAAQ/jB,IAC/D8jB,EAAA/D,cAAA/f,GAAA5J,aAAA0Y,GAAAre,YAcA,OAVA,OAAA1Z,KAAAusC,aACAvsC,KAAAitC,qBAGA,OAAAjtC,KAAA02B,gBACA12B,KAAA22B,wBAGA32B,KAAAysC,oBAAA,EACAzsC,KAAA2sC,mBAAA,EACA3sC,MAEAqmC,QAAA,WAEA,IAAAzO,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAApI,cAAArX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAsmC,QAAA,WAEA,IAAA1O,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAAnI,cAAAtX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAumC,QAAA,WAEA,IAAA3O,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAAlI,cAAAvX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAkmB,UAAA,WAEA,IAAA0R,EACA,gBAAAl4B,EAAAiX,EAAAC,GAIA,YAHAxX,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAArI,gBAAA7vB,EAAAiX,EAAAC,GACA5W,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAkvB,MAAA,WAEA,IAAA0I,EACA,gBAAAl4B,EAAAiX,EAAAC,GAIA,YAHAxX,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAA9H,UAAApwB,EAAAiX,EAAAC,GACA5W,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUA0sB,OAAA,WACA,IAAAwgB,EACA,gBAAA9rB,QACAhiB,IAAA8tC,MAAA,IAAA3uC,EAAAwmC,UACAmI,EAAAxgB,OAAAtL,GACA8rB,EAAAxF,eACA1nC,KAAA8lC,YAAAoH,EAAA/sB,SANA,GASAgtB,mBAAA,SAAAlmB,GACA,IAAAJ,EAAA7mB,KACAgqC,EAAA,OAAA/iB,EAAA1mB,MAAA0mB,EAAA1mB,MAAA6M,WAAAhO,EACAioB,EAAAJ,EAAAI,WACA+lB,EAAA/lB,EAAAC,SAAAla,MACAigC,OAAAjuC,IAAAioB,EAAA7F,OAAA6F,EAAA7F,OAAApU,WAAAhO,EACA0qC,OAAA1qC,IAAAioB,EAAA1c,MAAA0c,EAAA1c,MAAAyC,WAAAhO,EACAkuC,OAAAluC,IAAAioB,EAAAkmB,GAAAlmB,EAAAkmB,GAAAngC,WAAAhO,EACAouC,OAAApuC,IAAAioB,EAAAomB,IAAApmB,EAAAomB,IAAArgC,WAAAhO,OACAA,IAAAouC,IAAAxtC,KAAAisC,cAAA,OAKA,IAJA,IAAAyB,EAAA,GACAC,EAAA,GACAC,EAAA,GAEA3oB,EAAA,EAAAgE,EAAA,EAA4BhE,EAAAmoB,EAAAtuC,OAAsBmmB,GAAA,EAAAgE,GAAA,EAClDpC,EAAAM,SAAAmV,KAAA,IAAA/9B,EAAA+a,QAAA8zB,EAAAnoB,GAAAmoB,EAAAnoB,EAAA,GAAAmoB,EAAAnoB,EAAA,UAEA7lB,IAAAiuC,GACAK,EAAApR,KAAA,IAAA/9B,EAAA+a,QAAA+zB,EAAApoB,GAAAooB,EAAApoB,EAAA,GAAAooB,EAAApoB,EAAA,UAGA7lB,IAAA0qC,GACAjjB,EAAAijB,OAAAxN,KAAA,IAAA/9B,EAAAmK,MAAAohC,EAAA7kB,GAAA6kB,EAAA7kB,EAAA,GAAA6kB,EAAA7kB,EAAA,UAGA7lB,IAAAkuC,GACAK,EAAArR,KAAA,IAAA/9B,EAAAme,QAAA4wB,EAAArkB,GAAAqkB,EAAArkB,EAAA,UAGA7pB,IAAAouC,GACAI,EAAAtR,KAAA,IAAA/9B,EAAAme,QAAA8wB,EAAAvkB,GAAAukB,EAAAvkB,EAAA,KAIA,SAAA4kB,EAAA5zB,EAAApR,EAAAqE,EAAA67B,GACA,IAAAC,OAAA5pC,IAAAiuC,EAAA,CAAAK,EAAAzzB,GAAA/O,QAAAwiC,EAAA7kC,GAAAqC,QAAAwiC,EAAAxgC,GAAAhC,SAAA,GACA+9B,OAAA7pC,IAAA0qC,EAAA,CAAAjjB,EAAAijB,OAAA7vB,GAAA/O,QAAA2b,EAAAijB,OAAAjhC,GAAAqC,QAAA2b,EAAAijB,OAAA58B,GAAAhC,SAAA,GACA6hC,EAAA,IAAAxuC,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAA87B,EAAAC,EAAAF,GACAliB,EAAAmlB,MAAA1P,KAAAyQ,QAEA3tC,IAAAkuC,GACAzmB,EAAAolB,cAAA,GAAA3P,KAAA,CAAAqR,EAAA1zB,GAAA/O,QAAAyiC,EAAA9kC,GAAAqC,QAAAyiC,EAAAzgC,GAAAhC,eAGA9L,IAAAouC,GACA3mB,EAAAolB,cAAA,GAAA3P,KAAA,CAAAsR,EAAA3zB,GAAA/O,QAAA0iC,EAAA/kC,GAAAqC,QAAA0iC,EAAA1gC,GAAAhC,UAIA,QAAA9L,IAAA4qC,EAAA,CACA,IAAA8D,EAAA7mB,EAAA6mB,OAEA,GAAAA,EAAAhvC,OAAA,EACA,IAAAmmB,EAAA,EAAyBA,EAAA6oB,EAAAhvC,OAAmBmmB,IAK5C,IAJA,IAAA8oB,EAAAD,EAAA7oB,GACAnB,EAAAiqB,EAAAjqB,MAGAkpB,GAAA/jB,EAAAnF,IAFAiqB,EAAAzE,OAEmDrgB,EAAA+jB,EAAQ/jB,GAAA,EAC3D4kB,EAAA7D,EAAA/gB,GAAA+gB,EAAA/gB,EAAA,GAAA+gB,EAAA/gB,EAAA,GAAA8kB,EAAAhF,oBAIA,IAAA9jB,EAAA,EAAyBA,EAAA+kB,EAAAlrC,OAAoBmmB,GAAA,EAC7C4oB,EAAA7D,EAAA/kB,GAAA+kB,EAAA/kB,EAAA,GAAA+kB,EAAA/kB,EAAA,SAIA,IAAAA,EAAA,EAAuBA,EAAAmoB,EAAAtuC,OAAA,EAA0BmmB,GAAA,EACjD4oB,EAAA5oB,IAAA,EAAAA,EAAA,GAcA,OAVAjlB,KAAAguC,qBAEA,OAAA/mB,EAAAslB,cACAvsC,KAAAusC,YAAAtlB,EAAAslB,YAAArhC,SAGA,OAAA+b,EAAAyP,iBACA12B,KAAA02B,eAAAzP,EAAAyP,eAAAxrB,SAGAlL,MAEA8e,OAAA,WACA9e,KAAAitC,qBACA,IAAA5/B,EAAArN,KAAAusC,YAAAztB,SAAAf,SAEA,OADA/d,KAAAkmB,UAAA7Y,EAAA3N,EAAA2N,EAAAsJ,EAAAtJ,EAAAuJ,GACAvJ,GAEAqM,UAAA,WACA1Z,KAAA22B,wBACA,IAAA7X,EAAA9e,KAAA02B,eAAA5X,OACAkD,EAAAhiB,KAAA02B,eAAA1U,OACAjY,EAAA,IAAAiY,EAAA,IAAAA,EACA7B,EAAA,IAAA5hB,EAAA8hB,QAGA,OAFAF,EAAArX,IAAAiB,EAAA,KAAAA,EAAA+U,EAAApf,EAAA,EAAAqK,EAAA,GAAAA,EAAA+U,EAAAnI,EAAA,IAAA5M,KAAA+U,EAAAlI,EAAA,SACA5W,KAAA8lC,YAAA3lB,GACAngB,MAEAguC,mBAAA,WAIA,IAHA,IAAAC,EAAA,IAAA1vC,EAAA+a,QACA40B,EAAA,IAAA3vC,EAAA+a,QAEAmD,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAA6C2d,EAAA0xB,EAAQ1xB,IAAA,CACrD,IAAAswB,EAAA/sC,KAAAgsC,MAAAvvB,GACA2xB,EAAApuC,KAAAmnB,SAAA4lB,EAAA9yB,GACAo0B,EAAAruC,KAAAmnB,SAAA4lB,EAAAlkC,GACAylC,EAAAtuC,KAAAmnB,SAAA4lB,EAAA7/B,GACA+gC,EAAA9wB,WAAAmxB,EAAAD,GACAH,EAAA/wB,WAAAixB,EAAAC,GACAJ,EAAArtB,MAAAstB,GACAD,EAAAv0B,YACAqzB,EAAAvrB,OAAAtY,KAAA+kC,KAGAM,qBAAA,SAAAC,GAEA,IAAA30B,EAAA40B,EAAAhyB,EAAA0xB,EAAApB,EAAA5lB,EAGA,SAJA/nB,IAAAovC,OAAA,GAEArnB,EAAA,IAAAvoB,MAAAoB,KAAAmnB,SAAAroB,QAEA+a,EAAA,EAAA40B,EAAAzuC,KAAAmnB,SAAAroB,OAA4C+a,EAAA40B,EAAQ50B,IACpDsN,EAAAtN,GAAA,IAAAtb,EAAA+a,QAGA,GAAAk1B,EAAA,CAGA,IAAAJ,EAAAC,EAAAC,EACAL,EAAA,IAAA1vC,EAAA+a,QACA40B,EAAA,IAAA3vC,EAAA+a,QAEA,IAAAmD,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAA2C2d,EAAA0xB,EAAQ1xB,IACnDswB,EAAA/sC,KAAAgsC,MAAAvvB,GACA2xB,EAAApuC,KAAAmnB,SAAA4lB,EAAA9yB,GACAo0B,EAAAruC,KAAAmnB,SAAA4lB,EAAAlkC,GACAylC,EAAAtuC,KAAAmnB,SAAA4lB,EAAA7/B,GACA+gC,EAAA9wB,WAAAmxB,EAAAD,GACAH,EAAA/wB,WAAAixB,EAAAC,GACAJ,EAAArtB,MAAAstB,GACA/mB,EAAA4lB,EAAA9yB,GAAA1N,IAAA0hC,GACA9mB,EAAA4lB,EAAAlkC,GAAA0D,IAAA0hC,GACA9mB,EAAA4lB,EAAA7/B,GAAAX,IAAA0hC,QAGA,IAAAxxB,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAA2C2d,EAAA0xB,EAAQ1xB,IAEnD0K,GADA4lB,EAAA/sC,KAAAgsC,MAAAvvB,IACAxC,GAAA1N,IAAAwgC,EAAAvrB,QACA2F,EAAA4lB,EAAAlkC,GAAA0D,IAAAwgC,EAAAvrB,QACA2F,EAAA4lB,EAAA7/B,GAAAX,IAAAwgC,EAAAvrB,QAIA,IAAA3H,EAAA,EAAA40B,EAAAzuC,KAAAmnB,SAAAroB,OAA4C+a,EAAA40B,EAAQ50B,IACpDsN,EAAAtN,GAAAH,YAGA,IAAA+C,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAAyC2d,EAAA0xB,EAAQ1xB,IAAA,CAEjD,IAAAusB,GADA+D,EAAA/sC,KAAAgsC,MAAAvvB,IACAusB,cAEA,IAAAA,EAAAlqC,QACAkqC,EAAA,GAAA9/B,KAAAie,EAAA4lB,EAAA9yB,IACA+uB,EAAA,GAAA9/B,KAAAie,EAAA4lB,EAAAlkC,IACAmgC,EAAA,GAAA9/B,KAAAie,EAAA4lB,EAAA7/B,MAEA87B,EAAA,GAAA7hB,EAAA4lB,EAAA9yB,GAAA/O,QACA89B,EAAA,GAAA7hB,EAAA4lB,EAAAlkC,GAAAqC,QACA89B,EAAA,GAAA7hB,EAAA4lB,EAAA7/B,GAAAhC,SAIAlL,KAAAgsC,MAAAltC,OAAA,IACAkB,KAAA2sC,mBAAA,IAGA+B,oBAAA,WACA,IAAAzpB,EAAAC,EAAAzI,EAAA0xB,EAAApB,EAIA,IAAAtwB,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAAyC2d,EAAA0xB,EAAQ1xB,IAWjD,KAVAswB,EAAA/sC,KAAAgsC,MAAAvvB,IAEAkyB,qBAGA5B,EAAA4B,qBAAAzlC,KAAA6jC,EAAAvrB,QAFAurB,EAAA4B,qBAAA5B,EAAAvrB,OAAAtW,QAKA6hC,EAAA6B,0BAAA7B,EAAA6B,wBAAA,IAEA3pB,EAAA,EAAAC,EAAA6nB,EAAA/D,cAAAlqC,OAAmDmmB,EAAAC,EAAQD,IAC3D8nB,EAAA6B,wBAAA3pB,GAGA8nB,EAAA6B,wBAAA3pB,GAAA/b,KAAA6jC,EAAA/D,cAAA/jB,IAFA8nB,EAAA6B,wBAAA3pB,GAAA8nB,EAAA/D,cAAA/jB,GAAA/Z,QAQA,IAAA2jC,EAAA,IAAAtwC,EAAA2oB,SAGA,IAFA2nB,EAAA7C,MAAAhsC,KAAAgsC,MAEA/mB,EAAA,EAAAC,EAAAllB,KAAAksC,aAAAptC,OAAgDmmB,EAAAC,EAAQD,IAAA,CAExD,IAAAjlB,KAAAmsC,aAAAlnB,GAAA,CACAjlB,KAAAmsC,aAAAlnB,GAAA,GACAjlB,KAAAmsC,aAAAlnB,GAAA6pB,YAAA,GACA9uC,KAAAmsC,aAAAlnB,GAAA+jB,cAAA,GACA,IAAA+F,EAAA/uC,KAAAmsC,aAAAlnB,GAAA6pB,YACAE,EAAAhvC,KAAAmsC,aAAAlnB,GAAA+jB,cAGA,IAAAvsB,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAA6C2d,EAAA0xB,EAAQ1xB,IACrDwyB,EAAA,IAAA1wC,EAAA+a,QACA0vB,EAAA,CACA/uB,EAAA,IAAA1b,EAAA+a,QACAzQ,EAAA,IAAAtK,EAAA+a,QACApM,EAAA,IAAA3O,EAAA+a,SAEAy1B,EAAAzS,KAAA2S,GACAD,EAAA1S,KAAA0M,GAIA,IAOAiG,EAAAjG,EAPAmD,EAAAnsC,KAAAmsC,aAAAlnB,GASA,IAPA4pB,EAAA1nB,SAAAnnB,KAAAksC,aAAAjnB,GAAAkC,SAEA0nB,EAAAb,qBACAa,EAAAN,uBAIA9xB,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAA2C2d,EAAA0xB,EAAQ1xB,IACnDswB,EAAA/sC,KAAAgsC,MAAAvvB,GACAwyB,EAAA9C,EAAA2C,YAAAryB,GACAusB,EAAAmD,EAAAnD,cAAAvsB,GACAwyB,EAAA/lC,KAAA6jC,EAAAvrB,QACAwnB,EAAA/uB,EAAA/Q,KAAA6jC,EAAA/D,cAAA,IACAA,EAAAngC,EAAAK,KAAA6jC,EAAA/D,cAAA,IACAA,EAAA97B,EAAAhE,KAAA6jC,EAAA/D,cAAA,IAKA,IAAAvsB,EAAA,EAAA0xB,EAAAnuC,KAAAgsC,MAAAltC,OAAyC2d,EAAA0xB,EAAQ1xB,KACjDswB,EAAA/sC,KAAAgsC,MAAAvvB,IACA+E,OAAAurB,EAAA4B,qBACA5B,EAAA/D,cAAA+D,EAAA6B,yBAGAM,gBAAA,WACA3kC,QAAAC,KAAA,yDAEA2kC,qBAAA,WAIA,IAHA,IAAA1vB,EAAA,EACA0H,EAAAnnB,KAAAmnB,SAEAlC,EAAA,EAAAC,EAAAiC,EAAAroB,OAA2CmmB,EAAAC,EAAQD,IACnDA,EAAA,IACAxF,GAAA0H,EAAAlC,GAAA/G,WAAAiJ,EAAAlC,EAAA,KAGAjlB,KAAAssC,cAAArnB,GAAAxF,GAGAwtB,mBAAA,WACA,OAAAjtC,KAAAusC,cACAvsC,KAAAusC,YAAA,IAAAhuC,EAAA4nB,MAGAnmB,KAAAusC,YAAAznB,cAAA9kB,KAAAmnB,WAEAwP,sBAAA,WACA,OAAA32B,KAAA02B,iBACA12B,KAAA02B,eAAA,IAAAn4B,EAAA0pB,QAGAjoB,KAAA02B,eAAA5R,cAAA9kB,KAAAmnB,WAEAioB,MAAA,SAAAnoB,EAAA9G,EAAAkvB,GACA,GAAApoB,aAAA1oB,EAAA2oB,YAAA,GAKA,IAAA6Q,EACAuX,EAAAtvC,KAAAmnB,SAAAroB,OACAywC,EAAAvvC,KAAAmnB,SACAqoB,EAAAvoB,EAAAE,SACAsoB,EAAAzvC,KAAAgsC,MACA0D,EAAAzoB,EAAA+kB,MACA2D,EAAA3vC,KAAAisC,cAAA,GACAuB,EAAAvmB,EAAAglB,cAAA,QACA7sC,IAAAiwC,MAAA,QAEAjwC,IAAA+gB,IACA4X,GAAA,IAAAx5B,EAAA2pB,SAAAiC,gBAAAhK,IAIA,QAAA8E,EAAA,EAAAC,EAAAsqB,EAAA1wC,OAA4CmmB,EAAAC,EAAQD,IAAA,CACpD,IACA2qB,EADAJ,EAAAvqB,GACA/Z,aACA9L,IAAA+gB,GAAAyvB,EAAArwB,aAAAY,GACAovB,EAAAjT,KAAAsT,GAIA,IAAA3qB,EAAA,EAAAC,EAAAwqB,EAAA5wC,OAAqCmmB,EAAAC,EAAQD,IAAA,CAC7C,IACA4qB,EACAruB,EACA7W,EAHAoiC,EAAA2C,EAAAzqB,GAIA6qB,EAAA/C,EAAA/D,cACA+G,EAAAhD,EAAA9D,cACA4G,EAAA,IAAAtxC,EAAAuqC,MAAAiE,EAAA9yB,EAAAq1B,EAAAvC,EAAAlkC,EAAAymC,EAAAvC,EAAA7/B,EAAAoiC,IACA9tB,OAAAtY,KAAA6jC,EAAAvrB,aAEApiB,IAAA24B,GACA8X,EAAAruB,OAAAnC,aAAA0Y,GAAAre,YAGA,QAAAuP,EAAA,EAAA+jB,EAAA8C,EAAAhxC,OAAsDmqB,EAAA+jB,EAAQ/jB,IAC9DzH,EAAAsuB,EAAA7mB,GAAA/d,aAEA9L,IAAA24B,GACAvW,EAAAnC,aAAA0Y,GAAAre,YAGAm2B,EAAA7G,cAAA1M,KAAA9a,GAGAquB,EAAAllC,MAAAzB,KAAA6jC,EAAApiC,OAEA,IAAAse,EAAA,EAAA+jB,EAAA+C,EAAAjxC,OAAqDmqB,EAAA+jB,EAAQ/jB,IAC7Dte,EAAAolC,EAAA9mB,GACA4mB,EAAA5G,aAAA3M,KAAA3xB,EAAAO,SAGA2kC,EAAA9G,cAAAgE,EAAAhE,cAAAsG,EACAI,EAAAnT,KAAAuT,GAIA,IAAA5qB,EAAA,EAAAC,EAAAsoB,EAAA1uC,OAAmCmmB,EAAAC,EAAQD,IAAA,CAC3C,IAAAsoB,EAAAC,EAAAvoB,GACA+qB,EAAA,GAEA,QAAA5wC,IAAAmuC,EAAA,CAIA,IAAAtkB,EAAA,EAAA+jB,EAAAO,EAAAzuC,OAAuCmqB,EAAA+jB,EAAQ/jB,IAC/C+mB,EAAA1T,KAAAiR,EAAAtkB,GAAA/d,SAGAykC,EAAArT,KAAA0T,UA3EAzlC,QAAA2U,MAAA,sEAAA+H,IA8EAgpB,UAAA,SAAAC,GACAA,aAAA3xC,EAAAulC,QAAA,GAKAoM,EAAA5K,kBAAA4K,EAAAxI,eACA1nC,KAAAovC,MAAAc,EAAAjpB,SAAAipB,EAAA/vB,SALA5V,QAAA2U,MAAA,kEAAAgxB,IAaAC,cAAA,WACA,IAIAt2B,EAAA8uB,EAIA1jB,EAAAC,EAAA6nB,EACA/C,EAAA/gB,EAAA+jB,EATAoD,EAAA,GAEAC,EAAA,GACAC,EAAA,GAIAC,EAAAhxC,KAAAC,IAAA,GAFA,GAMA,IAAAylB,EAAA,EAAAC,EAAAllB,KAAAmnB,SAAAroB,OAA4CmmB,EAAAC,EAAQD,IACpDpL,EAAA7Z,KAAAmnB,SAAAlC,QAGA7lB,IAAAgxC,EAFAzH,EAAAppC,KAAAse,MAAAhE,EAAAna,EAAA6wC,GAAA,IAAAhxC,KAAAse,MAAAhE,EAAAlD,EAAA45B,GAAA,IAAAhxC,KAAAse,MAAAhE,EAAAjD,EAAA25B,KAGAH,EAAAzH,GAAA1jB,EACAorB,EAAA/T,KAAAt8B,KAAAmnB,SAAAlC,IACAqrB,EAAArrB,GAAAorB,EAAAvxC,OAAA,GAGAwxC,EAAArrB,GAAAqrB,EAAAF,EAAAzH,IAMA,IAAA6H,EAAA,GAEA,IAAAvrB,EAAA,EAAAC,EAAAllB,KAAAgsC,MAAAltC,OAAyCmmB,EAAAC,EAAQD,IAAA,EACjD8nB,EAAA/sC,KAAAgsC,MAAA/mB,IACAhL,EAAAq2B,EAAAvD,EAAA9yB,GACA8yB,EAAAlkC,EAAAynC,EAAAvD,EAAAlkC,GACAkkC,EAAA7/B,EAAAojC,EAAAvD,EAAA7/B,GACA88B,EAAA,CAAA+C,EAAA9yB,EAAA8yB,EAAAlkC,EAAAkkC,EAAA7/B,GAIA,IAHA,IAGA2f,EAAA,EAAuBA,EAAA,EAAOA,IAC9B,GAAAmd,EAAAnd,KAAAmd,GAAAnd,EAAA,OACAA,EACA2jB,EAAAlU,KAAArX,GACA,OAKA,IAAAA,EAAAurB,EAAA1xC,OAAA,EAA8CmmB,GAAA,EAAQA,IAAA,CACtD,IAAAwrB,EAAAD,EAAAvrB,GAGA,IAFAjlB,KAAAgsC,MAAAvJ,OAAAgO,EAAA,GAEAxnB,EAAA,EAAA+jB,EAAAhtC,KAAAisC,cAAAntC,OAAmDmqB,EAAA+jB,EAAQ/jB,IAC3DjpB,KAAAisC,cAAAhjB,GAAAwZ,OAAAgO,EAAA,GAKA,IAAA3e,EAAA9xB,KAAAmnB,SAAAroB,OAAAuxC,EAAAvxC,OAEA,OADAkB,KAAAmnB,SAAAkpB,EACAve,GAEA4e,yBAAA,WAIA,IAHA,IAAA1E,EAAAhsC,KAAAgsC,MACAltC,EAAAktC,EAAAltC,OAEAmmB,EAAA,EAAqBA,EAAAnmB,EAAYmmB,IACjC+mB,EAAA/mB,GAAA0rB,IAAA1rB,EAQA+mB,EAAArH,KAJA,SAAA1qB,EAAApR,GACA,OAAAoR,EAAA8uB,cAAAlgC,EAAAkgC,gBAKA,IAEA6H,EAAAC,EAFAlB,EAAA3vC,KAAAisC,cAAA,GACAuB,EAAAxtC,KAAAisC,cAAA,GAEA0D,KAAA7wC,aAAA8xC,EAAA,IACApD,KAAA1uC,aAAA+xC,EAAA,IAEA,IAAA5rB,EAAA,EAAqBA,EAAAnmB,EAAYmmB,IAAA,CACjC,IAAA+hB,EAAAgF,EAAA/mB,GAAA0rB,IACAC,KAAAtU,KAAAqT,EAAA3I,IACA6J,KAAAvU,KAAAkR,EAAAxG,IAGA4J,IAAA5wC,KAAAisC,cAAA,GAAA2E,GACAC,IAAA7wC,KAAAisC,cAAA,GAAA4E,IAEAjJ,OAAA,WACA,IAAAngB,EAAA,CACA0gB,SAAA,CACAC,QAAA,IACAnG,KAAA,WACAoG,UAAA,oBAQA,GAJA5gB,EAAA+Q,KAAAx4B,KAAAw4B,KACA/Q,EAAAwa,KAAAjiC,KAAAiiC,KACA,KAAAjiC,KAAAJ,OAAA6nB,EAAA7nB,KAAAI,KAAAJ,WAEAR,IAAAY,KAAA8wC,WAAA,CACA,IAAAA,EAAA9wC,KAAA8wC,WAEA,QAAAnI,KAAAmI,OACA1xC,IAAA0xC,EAAAnI,KAAAlhB,EAAAkhB,GAAAmI,EAAAnI,IAGA,OAAAlhB,EAKA,IAFA,IAAAN,EAAA,GAEAlC,EAAA,EAAqBA,EAAAjlB,KAAAmnB,SAAAroB,OAA0BmmB,IAAA,CAC/C,IAAA8rB,EAAA/wC,KAAAmnB,SAAAlC,GACAkC,EAAAmV,KAAAyU,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAGA,IAAAo1B,EAAA,GACAqB,EAAA,GACA2D,EAAA,GACAlH,EAAA,GACAmH,EAAA,GACA3D,EAAA,GACA4D,EAAA,GAEA,IAAAjsB,EAAA,EAAqBA,EAAAjlB,KAAAgsC,MAAAltC,OAAuBmmB,IAAA,CAC5C,IAAA8nB,EAAA/sC,KAAAgsC,MAAA/mB,GAIAksB,OAAA/xC,IAAAY,KAAAisC,cAAA,GAAAhnB,GACAmsB,EAAArE,EAAAvrB,OAAA1iB,SAAA,EACAuyC,EAAAtE,EAAA/D,cAAAlqC,OAAA,EACAwyC,EAAA,IAAAvE,EAAApiC,MAAAhC,GAAA,IAAAokC,EAAApiC,MAAA/B,GAAA,IAAAmkC,EAAApiC,MAAA9B,EACA0oC,EAAAxE,EAAA9D,aAAAnqC,OAAA,EACA0yC,EAAA,EAcA,GAbAA,EAAAC,EAAAD,EAAA,KAEAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,GAXA,GAYAA,EAAAC,EAAAD,EAAA,EAAAL,GACAK,EAAAC,EAAAD,EAAA,EAAAJ,GACAI,EAAAC,EAAAD,EAAA,EAAAH,GACAG,EAAAC,EAAAD,EAAA,EAAAF,GACAE,EAAAC,EAAAD,EAAA,EAAAD,GACAvF,EAAA1P,KAAAkV,GACAxF,EAAA1P,KAAAyQ,EAAA9yB,EAAA8yB,EAAAlkC,EAAAkkC,EAAA7/B,GACA8+B,EAAA1P,KAAAyQ,EAAAhE,eAEAoI,EAAA,CACA,IAAAlF,EAAAjsC,KAAAisC,cAAA,GAAAhnB,GACA+mB,EAAA1P,KAAAoV,EAAAzF,EAAA,IAAAyF,EAAAzF,EAAA,IAAAyF,EAAAzF,EAAA,KAOA,GAJAmF,GACApF,EAAA1P,KAAAqV,EAAA5E,EAAAvrB,SAGA6vB,EAAA,CACA,IAAArI,EAAA+D,EAAA/D,cACAgD,EAAA1P,KAAAqV,EAAA3I,EAAA,IAAA2I,EAAA3I,EAAA,IAAA2I,EAAA3I,EAAA,KAOA,GAJAsI,GACAtF,EAAA1P,KAAAsV,EAAA7E,EAAApiC,QAGA4mC,EAAA,CACA,IAAAtI,EAAA8D,EAAA9D,aACA+C,EAAA1P,KAAAsV,EAAA3I,EAAA,IAAA2I,EAAA3I,EAAA,IAAA2I,EAAA3I,EAAA,MAIA,SAAAwI,EAAAxoC,EAAAqe,EAAAuqB,GACA,OAAAA,EAAA5oC,EAAA,GAAAqe,EAAAre,IAAA,GAAAqe,GAGA,SAAAqqB,EAAAnwB,GACA,IAAAswB,EAAAtwB,EAAA9hB,EAAAO,WAAAuhB,EAAA7K,EAAA1W,WAAAuhB,EAAA5K,EAAA3W,WAEA,YAAAb,IAAA4xC,EAAAc,GACAd,EAAAc,IAGAd,EAAAc,GAAAzE,EAAAvuC,OAAA,EACAuuC,EAAA/Q,KAAA9a,EAAA9hB,EAAA8hB,EAAA7K,EAAA6K,EAAA5K,GACAo6B,EAAAc,IAGA,SAAAF,EAAAjnC,GACA,IAAAmnC,EAAAnnC,EAAAhC,EAAA1I,WAAA0K,EAAA/B,EAAA3I,WAAA0K,EAAA9B,EAAA5I,WAEA,YAAAb,IAAA6xC,EAAAa,GACAb,EAAAa,IAGAb,EAAAa,GAAAhI,EAAAhrC,OACAgrC,EAAAxN,KAAA3xB,EAAAe,UACAulC,EAAAa,IAGA,SAAAJ,EAAAnE,GACA,IAAAuE,EAAAvE,EAAA7tC,EAAAO,WAAAstC,EAAA52B,EAAA1W,WAEA,YAAAb,IAAA8xC,EAAAY,GACAZ,EAAAY,IAGAZ,EAAAY,GAAAxE,EAAAxuC,OAAA,EACAwuC,EAAAhR,KAAAiR,EAAA7tC,EAAA6tC,EAAA52B,GACAu6B,EAAAY,IAUA,OAPArqB,OAAA,GACAA,OAAAN,WACAM,OAAA4lB,UACAvD,EAAAhrC,OAAA,IAAA2oB,OAAAqiB,UACAwD,EAAAxuC,OAAA,IAAA2oB,OAAA6lB,IAAA,CAAAA,IAEA7lB,OAAAukB,QACAvkB,GAEAvc,MAAA,WAeA,WAAA3M,EAAA2oB,UAAAhe,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GACAT,KAAAmnB,SAAA,GACAnnB,KAAAgsC,MAAA,GACAhsC,KAAAisC,cAAA,KAGA,IAFA,IAAA9kB,EAAA1mB,EAAA0mB,SAEAlC,EAAA,EAAAC,EAAAiC,EAAAroB,OAA2CmmB,EAAAC,EAAQD,IACnDjlB,KAAAmnB,SAAAmV,KAAAnV,EAAAlC,GAAA/Z,SAGA,IAAA8gC,EAAAvrC,EAAAurC,MAEA,IAAA/mB,EAAA,EAAAC,EAAA8mB,EAAAltC,OAAwCmmB,EAAAC,EAAQD,IAChDjlB,KAAAgsC,MAAA1P,KAAA0P,EAAA/mB,GAAA/Z,SAGA,IAAA+Z,EAAA,EAAAC,EAAAzkB,EAAAwrC,cAAAntC,OAAuDmmB,EAAAC,EAAQD,IAAA,CAC/D,IAAAgnB,EAAAxrC,EAAAwrC,cAAAhnB,QAEA7lB,IAAAY,KAAAisC,cAAAhnB,KACAjlB,KAAAisC,cAAAhnB,GAAA,IAGA,QAAAgE,EAAA,EAAA+jB,EAAAf,EAAAntC,OAAkDmqB,EAAA+jB,EAAQ/jB,IAAA,CAI1D,IAHA,IAAAqkB,EAAArB,EAAAhjB,GACA8oB,EAAA,GAEA9W,EAAA,EAAA+W,EAAA1E,EAAAxuC,OAA0Cm8B,EAAA+W,EAAQ/W,IAAA,CAClD,IAAAsS,EAAAD,EAAArS,GACA8W,EAAAzV,KAAAiR,EAAAriC,SAGAlL,KAAAisC,cAAAhnB,GAAAqX,KAAAyV,IAIA,OAAA/xC,MAEAiyC,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,eAIA1jC,EAAAwtC,gBAAA,EAMAxtC,EAAA2zC,eAAA,WACAryC,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAwtC,oBAEA/rC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAAiiC,KAAA,iBACAjiC,KAAAgqC,QAAA,GACAhqC,KAAAmnB,SAAA,GACAnnB,KAAAqtC,QAAA,GACArtC,KAAA8pC,OAAA,GACA9pC,KAAAstC,IAAA,GACAttC,KAAAwtC,KAAA,GACAxtC,KAAA8tC,OAAA,GACA9tC,KAAAksC,aAAA,GACAlsC,KAAAosC,YAAA,GACApsC,KAAAqsC,YAAA,GAEArsC,KAAAusC,YAAA,KACAvsC,KAAA02B,eAAA,KAEA12B,KAAAysC,oBAAA,EACAzsC,KAAA2sC,mBAAA,EACA3sC,KAAA4sC,kBAAA,EACA5sC,KAAA0sC,eAAA,EACA1sC,KAAA8sC,kBAAA,GAGAjtC,OAAAM,OAAA5B,EAAA2zC,eAAAvyC,UAAApB,EAAAwjC,gBAAApiC,UAAA,CACAstC,mBAAA1uC,EAAA2oB,SAAAvnB,UAAAstC,mBACAtW,sBAAAp4B,EAAA2oB,SAAAvnB,UAAAg3B,sBACAqX,mBAAA,WACAzjC,QAAAC,KAAA,yFAEA+jC,qBAAA,WACAhkC,QAAAC,KAAA,2FAEA2nC,cAAA,SAAAlrB,GAMA,IALA,IAAA8mB,EAEAhF,EADA+E,EAAA,GAEA9B,EAAA/kB,EAAA+kB,MAEA/mB,EAAA,EAAqBA,EAAA+mB,EAAAltC,OAAkBmmB,IAAA,CACvC,IAAA8nB,EAAAf,EAAA/mB,GAEA8nB,EAAAhE,oBACAA,EAAAgE,EAAAhE,mBAEA3pC,IAAA2uC,IACAA,EAAAzE,MAAA,EAAArkB,EAAA8oB,EAAAjqB,MACAgqB,EAAAxR,KAAAyR,IAGAA,EAAA,CACAjqB,MAAA,EAAAmB,EACA8jB,uBAKA3pC,IAAA2uC,IACAA,EAAAzE,MAAA,EAAArkB,EAAA8oB,EAAAjqB,MACAgqB,EAAAxR,KAAAyR,IAGA/tC,KAAA8tC,UAEAsE,aAAA,SAAAnrB,GACA,IAQAorB,EARArG,EAAA/kB,EAAA+kB,MACA7kB,EAAAF,EAAAE,SACA8kB,EAAAhlB,EAAAglB,cACAkF,EAAAlF,EAAA,IAAAA,EAAA,GAAAntC,OAAA,EACAwzC,EAAArG,EAAA,IAAAA,EAAA,GAAAntC,OAAA,EAEAotC,EAAAjlB,EAAAilB,aACAqG,EAAArG,EAAAptC,OAGA,GAAAyzC,EAAA,GACAF,EAAA,GAEA,QAAAptB,EAAA,EAAuBA,EAAAstB,EAAwBttB,IAC/CotB,EAAAptB,GAAA,GAGAjlB,KAAAksC,aAAA5kB,SAAA+qB,EAGA,IAEAG,EAFArG,EAAAllB,EAAAklB,aACAsG,EAAAtG,EAAArtC,OAGA,GAAA2zC,EAAA,GACAD,EAAA,GAEA,IAAAvtB,EAAA,EAAuBA,EAAAwtB,EAAwBxtB,IAC/CutB,EAAAvtB,GAAA,GAGAjlB,KAAAksC,aAAA1qB,OAAAgxB,EAIA,IAAAnG,EAAAplB,EAAAolB,YACAD,EAAAnlB,EAAAmlB,YACAsG,EAAArG,EAAAvtC,SAAAqoB,EAAAroB,OACA6zC,EAAAvG,EAAAttC,SAAAqoB,EAAAroB,OAEA,IAAAmmB,EAAA,EAAqBA,EAAA+mB,EAAAltC,OAAkBmmB,IAAA,CACvC,IAAA8nB,EAAAf,EAAA/mB,GACAjlB,KAAAmnB,SAAAmV,KAAAnV,EAAA4lB,EAAA9yB,GAAAkN,EAAA4lB,EAAAlkC,GAAAse,EAAA4lB,EAAA7/B,IACA,IAAA87B,EAAA+D,EAAA/D,cAEA,OAAAA,EAAAlqC,OACAkB,KAAAqtC,QAAA/Q,KAAA0M,EAAA,GAAAA,EAAA,GAAAA,EAAA,QACS,CACT,IAAAxnB,EAAAurB,EAAAvrB,OACAxhB,KAAAqtC,QAAA/Q,KAAA9a,OAGA,IAqBAoxB,EArBA3J,EAAA8D,EAAA9D,aAEA,OAAAA,EAAAnqC,OACAkB,KAAA8pC,OAAAxN,KAAA2M,EAAA,GAAAA,EAAA,GAAAA,EAAA,QACS,CACT,IAAAt+B,EAAAoiC,EAAApiC,MACA3K,KAAA8pC,OAAAxN,KAAA3xB,OAGA,QAAAwmC,OAGA/xC,KAFAwzC,EAAA3G,EAAA,GAAAhnB,IAGAjlB,KAAAstC,IAAAhR,KAAAsW,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAroC,QAAAC,KAAA,2DAAAya,GACAjlB,KAAAstC,IAAAhR,KAAA,IAAA/9B,EAAAme,QAAA,IAAAne,EAAAme,QAAA,IAAAne,EAAAme,UAIA,QAAA41B,OAGAlzC,KAFAwzC,EAAA3G,EAAA,GAAAhnB,IAGAjlB,KAAAwtC,KAAAlR,KAAAsW,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAEAroC,QAAAC,KAAA,4DAAAya,GACAjlB,KAAAwtC,KAAAlR,KAAA,IAAA/9B,EAAAme,QAAA,IAAAne,EAAAme,QAAA,IAAAne,EAAAme,UAKA,QAAAuM,EAAA,EAAuBA,EAAAspB,EAAwBtpB,IAAA,CAC/C,IAAA4pB,EAAA3G,EAAAjjB,GAAA9B,SACAkrB,EAAAppB,GAAAqT,KAAAuW,EAAA9F,EAAA9yB,GAAA44B,EAAA9F,EAAAlkC,GAAAgqC,EAAA9F,EAAA7/B,IAGA,IAAA+b,EAAA,EAAuBA,EAAAwpB,EAAwBxpB,IAAA,CAC/C,IAAA6pB,EAAA3G,EAAAljB,GAAA+f,cAAA/jB,GACAutB,EAAAvpB,GAAAqT,KAAAwW,EAAA74B,EAAA64B,EAAAjqC,EAAAiqC,EAAA5lC,GAIAwlC,GACA1yC,KAAAqsC,YAAA/P,KAAA+P,EAAAU,EAAA9yB,GAAAoyB,EAAAU,EAAAlkC,GAAAwjC,EAAAU,EAAA7/B,IAGAylC,GACA3yC,KAAAosC,YAAA9P,KAAA8P,EAAAW,EAAA9yB,GAAAmyB,EAAAW,EAAAlkC,GAAAujC,EAAAW,EAAA7/B,IAUA,OANAlN,KAAAmyC,cAAAlrB,GACAjnB,KAAAysC,mBAAAxlB,EAAAwlB,mBACAzsC,KAAA2sC,kBAAA1lB,EAAA0lB,kBACA3sC,KAAA4sC,iBAAA3lB,EAAA2lB,iBACA5sC,KAAA0sC,cAAAzlB,EAAAylB,cACA1sC,KAAA8sC,iBAAA7lB,EAAA6lB,iBACA9sC,MAEAiyC,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,eAUA1jC,EAAA6oB,eAAA,WACAvnB,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAwtC,oBAEA/rC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAAiiC,KAAA,iBACAjiC,KAAAO,MAAA,KACAP,KAAAqnB,WAAA,GACArnB,KAAA+yC,gBAAA,GACA/yC,KAAA8tC,OAAA,GACA9tC,KAAAusC,YAAA,KACAvsC,KAAA02B,eAAA,KACA12B,KAAAgzC,UAAA,CACAlvB,MAAA,EACAwlB,MAAAzkB,MAIAhlB,OAAAM,OAAA5B,EAAA6oB,eAAAznB,UAAApB,EAAAwjC,gBAAApiC,UAAA,CACAszC,SAAA,WACA,OAAAjzC,KAAAO,OAEA2yC,SAAA,SAAA3yC,GACAP,KAAAO,SAEA4yC,aAAA,SAAAvzC,EAAA+e,GACA,OAAAA,aAAApgB,EAAA2qC,mBAAA,GAAAvqB,aAAApgB,EAAAipB,8BAAA,GACAjd,QAAAC,KAAA,+EACAxK,KAAAmzC,aAAAvzC,EAAA,IAAArB,EAAA2qC,gBAAA1oC,UAAA,GAAAA,UAAA,MAIA,UAAAZ,GACA2K,QAAAC,KAAA,gFACAxK,KAAAkzC,SAAAv0B,KAIA3e,KAAAqnB,WAAAznB,GAAA+e,EACA3e,OAEAozC,aAAA,SAAAxzC,GACA,OAAAI,KAAAqnB,WAAAznB,IAEAyzC,gBAAA,SAAAzzC,GAEA,cADAI,KAAAqnB,WAAAznB,GACAI,MAEAszC,SAAA,SAAAxvB,EAAAwlB,EAAAP,GACA/oC,KAAA8tC,OAAAxR,KAAA,CACAxY,QACAwlB,QACAP,mBAAA3pC,IAAA2pC,IAAA,KAGAwK,YAAA,WACAvzC,KAAA8tC,OAAA,IAEA0F,aAAA,SAAA1vB,EAAAwlB,GACAtpC,KAAAgzC,UAAAlvB,QACA9jB,KAAAgzC,UAAA1J,SAEAxD,YAAA,SAAA3lB,GACA,IAAAmH,EAAAtnB,KAAAqnB,WAAAC,cAEAloB,IAAAkoB,IACAnH,EAAA6I,oBAAA1B,EAAAla,OACAka,EAAAiiB,aAAA,GAGA,IAAA/nB,EAAAxhB,KAAAqnB,WAAA7F,YAEApiB,IAAAoiB,KACA,IAAAjjB,EAAA2pB,SAAAiC,gBAAAhK,GACA6I,oBAAAxH,EAAApU,OACAoU,EAAA+nB,aAAA,GAWA,OARA,OAAAvpC,KAAAusC,aACAvsC,KAAAitC,qBAGA,OAAAjtC,KAAA02B,gBACA12B,KAAA22B,wBAGA32B,MAEAqmC,QAAA,WAEA,IAAAzO,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAApI,cAAArX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAsmC,QAAA,WAEA,IAAA1O,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAAnI,cAAAtX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAumC,QAAA,WAEA,IAAA3O,EACA,gBAAAzf,GAIA,YAHA/Y,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAAlI,cAAAvX,GACAnY,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAkmB,UAAA,WAEA,IAAA0R,EACA,gBAAAl4B,EAAAiX,EAAAC,GAIA,YAHAxX,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAArI,gBAAA7vB,EAAAiX,EAAAC,GACA5W,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUAkvB,MAAA,WAEA,IAAA0I,EACA,gBAAAl4B,EAAAiX,EAAAC,GAIA,YAHAxX,IAAAw4B,MAAA,IAAAr5B,EAAA8hB,SACAuX,EAAA9H,UAAApwB,EAAAiX,EAAAC,GACA5W,KAAA8lC,YAAAlO,GACA53B,MAPA,GAUA0sB,OAAA,WACA,IAAAwgB,EACA,gBAAA9rB,QACAhiB,IAAA8tC,MAAA,IAAA3uC,EAAAwmC,UACAmI,EAAAxgB,OAAAtL,GACA8rB,EAAAxF,eACA1nC,KAAA8lC,YAAAoH,EAAA/sB,SANA,GASArB,OAAA,WACA9e,KAAAitC,qBACA,IAAA5/B,EAAArN,KAAAusC,YAAAztB,SAAAf,SAEA,OADA/d,KAAAkmB,UAAA7Y,EAAA3N,EAAA2N,EAAAsJ,EAAAtJ,EAAAuJ,GACAvJ,GAEAsZ,cAAA,SAAAC,GAEA,IAAAK,EAAAL,EAAAK,SAEA,GAAAL,aAAAroB,EAAA0lC,QAAArd,aAAAroB,EAAAwlC,KAAA,CACA,IAAAqJ,EAAA,IAAA7uC,EAAA+sC,iBAAA,EAAArkB,EAAAE,SAAAroB,OAAA,GACAgrC,EAAA,IAAAvrC,EAAA+sC,iBAAA,EAAArkB,EAAA6iB,OAAAhrC,OAAA,GAIA,GAHAkB,KAAAmzC,aAAA,WAAA/F,EAAAjD,kBAAAljB,EAAAE,WACAnnB,KAAAmzC,aAAA,QAAArJ,EAAAD,gBAAA5iB,EAAA6iB,SAEA7iB,EAAAqlB,eAAArlB,EAAAqlB,cAAAxtC,SAAAmoB,EAAAE,SAAAroB,OAAA,CACA,IAAAwtC,EAAA,IAAA/tC,EAAA+sC,iBAAArkB,EAAAqlB,cAAAxtC,OAAA,GACAkB,KAAAmzC,aAAA,eAAA7G,EAAA1C,UAAA3iB,EAAAqlB,gBAGA,OAAArlB,EAAAyP,iBACA12B,KAAA02B,eAAAzP,EAAAyP,eAAAxrB,SAGA,OAAA+b,EAAAslB,cACAvsC,KAAAusC,YAAAtlB,EAAAslB,YAAArhC,cAEO0b,aAAAroB,EAAAulC,MACP7c,aAAA1oB,EAAA2oB,UACAlnB,KAAAoyC,aAAAnrB,GAIA,OAAAjnB,MAEAyzC,iBAAA,SAAA7sB,GACA,IAuBAjI,EAvBAsI,EAAAL,EAAAK,SAEA,GAAAL,aAAAroB,EAAAulC,KAAA,CACA,IAAA4P,EAAAzsB,EAAA0sB,iBAEA,QAAAv0C,IAAAs0C,IAAA,IAAAzsB,EAAAulB,mBACA,OAAAxsC,KAAAoyC,aAAAnrB,GAGAysB,EAAAjH,mBAAAxlB,EAAAwlB,oBAAAxlB,EAAAulB,mBACAkH,EAAA/G,kBAAA1lB,EAAA0lB,mBAAA1lB,EAAAulB,mBACAkH,EAAA9G,iBAAA3lB,EAAA2lB,kBAAA3lB,EAAAulB,mBACAkH,EAAAhH,cAAAzlB,EAAAylB,eAAAzlB,EAAAulB,mBACAkH,EAAA5G,iBAAA7lB,EAAA6lB,kBAAA7lB,EAAAulB,mBACAvlB,EAAAulB,oBAAA,EACAvlB,EAAAwlB,oBAAA,EACAxlB,EAAA0lB,mBAAA,EACA1lB,EAAA2lB,kBAAA,EACA3lB,EAAAylB,eAAA,EACAzlB,EAAA6lB,kBAAA,EACA7lB,EAAAysB,EAkEA,OA7DA,IAAAzsB,EAAAwlB,0BAGArtC,KAFAuf,EAAA3e,KAAAqnB,WAAAC,YAGA3I,EAAAwrB,kBAAAljB,EAAAE,UACAxI,EAAA4qB,aAAA,GAGAtiB,EAAAwlB,oBAAA,IAGA,IAAAxlB,EAAA0lB,yBAGAvtC,KAFAuf,EAAA3e,KAAAqnB,WAAA7F,UAGA7C,EAAAwrB,kBAAAljB,EAAAomB,SACA1uB,EAAA4qB,aAAA,GAGAtiB,EAAA0lB,mBAAA,IAGA,IAAA1lB,EAAA2lB,wBAGAxtC,KAFAuf,EAAA3e,KAAAqnB,WAAA1c,SAGAgU,EAAAkrB,gBAAA5iB,EAAA6iB,QACAnrB,EAAA4qB,aAAA,GAGAtiB,EAAA2lB,kBAAA,GAGA3lB,EAAAylB,qBAGAttC,KAFAuf,EAAA3e,KAAAqnB,WAAAkmB,MAGA5uB,EAAAsrB,kBAAAhjB,EAAAqmB,KACA3uB,EAAA4qB,aAAA,GAGAtiB,EAAAylB,eAAA,GAGAzlB,EAAA4lB,+BAGAztC,KAFAuf,EAAA3e,KAAAqnB,WAAAusB,gBAGAj1B,EAAAirB,UAAA3iB,EAAAqlB,eACA3tB,EAAA4qB,aAAA,GAGAtiB,EAAA4lB,yBAAA,GAGA5lB,EAAA6lB,mBACA7lB,EAAAkrB,cAAAvrB,EAAAK,UACAjnB,KAAA8tC,OAAA7mB,EAAA6mB,OACA7mB,EAAA6lB,kBAAA,GAGA9sC,MAEAoyC,aAAA,SAAAnrB,GAEA,OADAA,EAAA0sB,kBAAA,IAAAp1C,EAAA2zC,gBAAAE,aAAAnrB,GACAjnB,KAAA6zC,mBAAA5sB,EAAA0sB,mBAEAE,mBAAA,SAAA5sB,GACA,IAAAmmB,EAAA,IAAAjlB,aAAA,EAAAlB,EAAAE,SAAAroB,QAGA,GAFAkB,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAAkE,EAAA,GAAAjD,kBAAAljB,EAAAE,WAEAF,EAAAomB,QAAAvuC,OAAA,GACA,IAAAuuC,EAAA,IAAAllB,aAAA,EAAAlB,EAAAomB,QAAAvuC,QACAkB,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAAmE,EAAA,GAAAlD,kBAAAljB,EAAAomB,UAGA,GAAApmB,EAAA6iB,OAAAhrC,OAAA,GACA,IAAAgrC,EAAA,IAAA3hB,aAAA,EAAAlB,EAAA6iB,OAAAhrC,QACAkB,KAAAmzC,aAAA,YAAA50C,EAAA2qC,gBAAAY,EAAA,GAAAD,gBAAA5iB,EAAA6iB,SAGA,GAAA7iB,EAAAqmB,IAAAxuC,OAAA,GACA,IAAAwuC,EAAA,IAAAnlB,aAAA,EAAAlB,EAAAqmB,IAAAxuC,QACAkB,KAAAmzC,aAAA,SAAA50C,EAAA2qC,gBAAAoE,EAAA,GAAArD,kBAAAhjB,EAAAqmB,MAGA,GAAArmB,EAAAumB,KAAA1uC,OAAA,GACA,IAAA0uC,EAAA,IAAArlB,aAAA,EAAAlB,EAAAumB,KAAA1uC,QACAkB,KAAAmzC,aAAA,UAAA50C,EAAA2qC,gBAAAsE,EAAA,GAAAvD,kBAAAhjB,EAAAumB,OAGA,GAAAvmB,EAAA+iB,QAAAlrC,OAAA,GACA,IACAkrC,EAAA,IADA/iB,EAAAE,SAAAroB,OAAA,MAAAusC,YAAAJ,aACA,EAAAhkB,EAAA+iB,QAAAlrC,QACAkB,KAAAkzC,SAAA,IAAA30C,EAAA2qC,gBAAAc,EAAA,GAAAD,iBAAA9iB,EAAA+iB,UAMA,QAAApqC,KAFAI,KAAA8tC,OAAA7mB,EAAA6mB,OAEA7mB,EAAAilB,aAAA,CAIA,IAHA,IAAA9+B,EAAA,GACA8+B,EAAAjlB,EAAAilB,aAAAtsC,GAEAqlB,EAAA,EAAAjb,EAAAkiC,EAAAptC,OAAgDmmB,EAAAjb,EAAOib,IAAA,CACvD,IAAA4tB,EAAA3G,EAAAjnB,GACAtG,EAAA,IAAApgB,EAAA+sC,iBAAA,EAAAuH,EAAA/zC,OAAA,GACAsO,EAAAkvB,KAAA3d,EAAAwrB,kBAAA0I,IAGA7yC,KAAA+yC,gBAAAnzC,GAAAwN,EAIA,GAAA6Z,EAAAolB,YAAAvtC,OAAA,GACA,IAAAutC,EAAA,IAAA9tC,EAAA+sC,iBAAA,EAAArkB,EAAAolB,YAAAvtC,OAAA,GACAkB,KAAAmzC,aAAA,YAAA9G,EAAAjC,kBAAAnjB,EAAAolB,cAGA,GAAAplB,EAAAmlB,YAAAttC,OAAA,GACA,IAAAstC,EAAA,IAAA7tC,EAAA+sC,iBAAA,EAAArkB,EAAAmlB,YAAAttC,OAAA,GACAkB,KAAAmzC,aAAA,aAAA/G,EAAAhC,kBAAAnjB,EAAAmlB,cAYA,OARA,OAAAnlB,EAAAyP,iBACA12B,KAAA02B,eAAAzP,EAAAyP,eAAAxrB,SAGA,OAAA+b,EAAAslB,cACAvsC,KAAAusC,YAAAtlB,EAAAslB,YAAArhC,SAGAlL,MAEAitC,mBAAA,WACA,OAAAjtC,KAAAusC,cACAvsC,KAAAusC,YAAA,IAAAhuC,EAAA4nB,MAGA,IAAAinB,EAAAptC,KAAAqnB,WAAAC,SAAAla,WAEAhO,IAAAguC,EACAptC,KAAAusC,YAAAnmB,aAAAgnB,GAEAptC,KAAAusC,YAAAvnB,aAGA8uB,MAAA9zC,KAAAusC,YAAA1hC,IAAAnL,IAAAo0C,MAAA9zC,KAAAusC,YAAA1hC,IAAA8L,IAAAm9B,MAAA9zC,KAAAusC,YAAA1hC,IAAA+L,KACArM,QAAA2U,MAAA,oIAAAlf,OAGA22B,sBAAA,WACA,IAAArR,EAAA,IAAA/mB,EAAA4nB,KACA/E,EAAA,IAAA7iB,EAAA+a,QACA,kBACA,OAAAtZ,KAAA02B,iBACA12B,KAAA02B,eAAA,IAAAn4B,EAAA0pB,QAGA,IAAAmlB,EAAAptC,KAAAqnB,WAAAC,SAEA,GAAA8lB,EAAA,CACA,IAAAhgC,EAAAggC,EAAAhgC,MACA0R,EAAA9e,KAAA02B,eAAA5X,OACAwG,EAAAc,aAAAhZ,GACAkY,EAAAxG,UAKA,IAFA,IAAA0V,EAAA,EAEAvP,EAAA,EAAAC,EAAA9X,EAAAtO,OAA4CmmB,EAAAC,EAAQD,GAAA,EACpD7D,EAAAjU,UAAAC,EAAA6X,GACAuP,EAAAj1B,KAAA2M,IAAAsoB,EAAA1V,EAAAX,kBAAAiD,IAGAphB,KAAA02B,eAAA1U,OAAAziB,KAAAkM,KAAA+oB,GAEAsf,MAAA9zC,KAAA02B,eAAA1U,SACAzX,QAAA2U,MAAA,+HAAAlf,QA3BA,GAgCAguC,mBAAA,aAEAO,qBAAA,WACA,IAAAhuC,EAAAP,KAAAO,MACA8mB,EAAArnB,KAAAqnB,WACAymB,EAAA9tC,KAAA8tC,OAEA,GAAAzmB,EAAAC,SAAA,CACA,IAAA8lB,EAAA/lB,EAAAC,SAAAla,MAEA,QAAAhO,IAAAioB,EAAA7F,OACAxhB,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAA,IAAA/gB,aAAAilB,EAAAtuC,QAAA,SAKA,IAFA,IAAAsO,EAAAia,EAAA7F,OAAApU,MAEA6X,EAAA,EAAAC,EAAA9X,EAAAtO,OAA4CmmB,EAAAC,EAAQD,IACpD7X,EAAA6X,GAAA,EAIA,IACAmpB,EACAC,EACAC,EAHAjB,EAAAhmB,EAAA7F,OAAApU,MAIA2mC,EAAA,IAAAx1C,EAAA+a,QACA06B,EAAA,IAAAz1C,EAAA+a,QACA26B,EAAA,IAAA11C,EAAA+a,QACA20B,EAAA,IAAA1vC,EAAA+a,QACA40B,EAAA,IAAA3vC,EAAA+a,QAEA,GAAA/Y,EAAA,CACA,IAAAypC,EAAAzpC,EAAA6M,MAEA,IAAA0gC,EAAAhvC,QACAkB,KAAAszC,SAAA,EAAAtJ,EAAAlrC,QAGA,QAAAmqB,EAAA,EAAA+jB,EAAAc,EAAAhvC,OAA6CmqB,EAAA+jB,IAAQ/jB,EACrD,KAAA8kB,EAAAD,EAAA7kB,GACAnF,EAAAiqB,EAAAjqB,MAGA,IAAAmB,EAAAnB,EAAAoB,EAAApB,EAFAiqB,EAAAzE,MAEmDrkB,EAAAC,EAAQD,GAAA,EAC3DmpB,EAAA,EAAApE,EAAA/kB,EAAA,GACAopB,EAAA,EAAArE,EAAA/kB,EAAA,GACAqpB,EAAA,EAAAtE,EAAA/kB,EAAA,GACA8uB,EAAA5mC,UAAAigC,EAAAgB,GACA4F,EAAA7mC,UAAAigC,EAAAiB,GACA4F,EAAA9mC,UAAAigC,EAAAkB,GACAL,EAAA9wB,WAAA82B,EAAAD,GACA9F,EAAA/wB,WAAA42B,EAAAC,GACA/F,EAAArtB,MAAAstB,GACAb,EAAAe,IAAAH,EAAAvuC,EACA2tC,EAAAe,EAAA,IAAAH,EAAAt3B,EACA02B,EAAAe,EAAA,IAAAH,EAAAr3B,EACAy2B,EAAAgB,IAAAJ,EAAAvuC,EACA2tC,EAAAgB,EAAA,IAAAJ,EAAAt3B,EACA02B,EAAAgB,EAAA,IAAAJ,EAAAr3B,EACAy2B,EAAAiB,IAAAL,EAAAvuC,EACA2tC,EAAAiB,EAAA,IAAAL,EAAAt3B,EACA02B,EAAAiB,EAAA,IAAAL,EAAAr3B,QAKA,IAAAqO,EAAA,EAAAC,EAAAkoB,EAAAtuC,OAAgDmmB,EAAAC,EAAQD,GAAA,EACxD8uB,EAAA5mC,UAAAigC,EAAAnoB,GACA+uB,EAAA7mC,UAAAigC,EAAAnoB,EAAA,GACAgvB,EAAA9mC,UAAAigC,EAAAnoB,EAAA,GACAgpB,EAAA9wB,WAAA82B,EAAAD,GACA9F,EAAA/wB,WAAA42B,EAAAC,GACA/F,EAAArtB,MAAAstB,GACAb,EAAApoB,GAAAgpB,EAAAvuC,EACA2tC,EAAApoB,EAAA,GAAAgpB,EAAAt3B,EACA02B,EAAApoB,EAAA,GAAAgpB,EAAAr3B,EACAy2B,EAAApoB,EAAA,GAAAgpB,EAAAvuC,EACA2tC,EAAApoB,EAAA,GAAAgpB,EAAAt3B,EACA02B,EAAApoB,EAAA,GAAAgpB,EAAAr3B,EACAy2B,EAAApoB,EAAA,GAAAgpB,EAAAvuC,EACA2tC,EAAApoB,EAAA,GAAAgpB,EAAAt3B,EACA02B,EAAApoB,EAAA,GAAAgpB,EAAAr3B,EAIA5W,KAAAk0C,mBACA7sB,EAAA7F,OAAA+nB,aAAA,IAGA6F,MAAA,SAAAnoB,EAAA5Z,GACA,GAAA4Z,aAAA1oB,EAAA6oB,kBAAA,QAKAhoB,IAAAiO,MAAA,GACA,IAAAga,EAAArnB,KAAAqnB,WAEA,QAAAshB,KAAAthB,EACA,QAAAjoB,IAAA6nB,EAAAI,WAAAshB,GAOA,IANA,IACAwL,EADA9sB,EAAAshB,GACAv7B,MACAgnC,EAAAntB,EAAAI,WAAAshB,GACA0L,EAAAD,EAAAhnC,MAGA6X,EAAA,EAAAgE,EAFAmrB,EAAAx1B,SAEAvR,EAAmD4X,EAAAovB,EAAAv1C,OAA4BmmB,IAAAgE,IAC/EkrB,EAAAlrB,GAAAorB,EAAApvB,GAIA,OAAAjlB,KApBAuK,QAAA2U,MAAA,kFAAA+H,IAsBAitB,iBAAA,WAIA,IAHA,IACAx0C,EAAAiX,EAAAC,EAAAiW,EADAwgB,EAAArtC,KAAAqnB,WAAA7F,OAAApU,MAGA6X,EAAA,EAAAC,EAAAmoB,EAAAvuC,OAA0CmmB,EAAAC,EAAQD,GAAA,EAClDvlB,EAAA2tC,EAAApoB,GACAtO,EAAA02B,EAAApoB,EAAA,GACArO,EAAAy2B,EAAApoB,EAAA,GACA4H,EAAA,EAAAttB,KAAAkM,KAAA/L,IAAAiX,IAAAC,KACAy2B,EAAApoB,IAAA4H,EACAwgB,EAAApoB,EAAA,IAAA4H,EACAwgB,EAAApoB,EAAA,IAAA4H,GAGAynB,aAAA,WACA,UAAAt0C,KAAAO,MAEA,OADAgK,QAAAC,KAAA,yEACAxK,KAGA,IAAAu0C,EAAA,IAAAh2C,EAAA6oB,eACA4iB,EAAAhqC,KAAAO,MAAA6M,MACAia,EAAArnB,KAAAqnB,WAEA,QAAAznB,KAAAynB,EAAA,CAQA,IAPA,IAAA1I,EAAA0I,EAAAznB,GACAwN,EAAAuR,EAAAvR,MACAwR,EAAAD,EAAAC,SACA41B,EAAA,IAAApnC,EAAApE,YAAAghC,EAAAlrC,OAAA8f,GACAre,EAAA,EACAopC,EAAA,EAEA1kB,EAAA,EAAAjb,EAAAggC,EAAAlrC,OAA2CmmB,EAAAjb,EAAOib,IAAA,CAClD1kB,EAAAypC,EAAA/kB,GAAArG,EAEA,QAAAqK,EAAA,EAAyBA,EAAArK,EAAcqK,IACvCurB,EAAA7K,KAAAv8B,EAAA7M,KAIAg0C,EAAApB,aAAAvzC,EAAA,IAAArB,EAAA2qC,gBAAAsL,EAAA51B,IAGA,OAAA21B,GAEA3M,OAAA,WACA,IAAAngB,EAAA,CACA0gB,SAAA,CACAC,QAAA,IACAnG,KAAA,iBACAoG,UAAA,0BAQA,GAJA5gB,EAAA+Q,KAAAx4B,KAAAw4B,KACA/Q,EAAAwa,KAAAjiC,KAAAiiC,KACA,KAAAjiC,KAAAJ,OAAA6nB,EAAA7nB,KAAAI,KAAAJ,WAEAR,IAAAY,KAAA8wC,WAAA,CACA,IAAAA,EAAA9wC,KAAA8wC,WAEA,QAAAnI,KAAAmI,OACA1xC,IAAA0xC,EAAAnI,KAAAlhB,EAAAkhB,GAAAmI,EAAAnI,IAGA,OAAAlhB,EAGAA,OAAA,CACAJ,WAAA,IAEA,IAAA9mB,EAAAP,KAAAO,MAEA,UAAAA,EAAA,CACA,IAAA6M,EAAAxO,MAAAe,UAAAiM,MAAAhL,KAAAL,EAAA6M,OACAqa,OAAAlnB,MAAA,CACA0hC,KAAA1hC,EAAA6M,MAAApE,YAAApJ,KACAwN,SAIA,IAAAia,EAAArnB,KAAAqnB,WAEA,QAAAshB,KAAAthB,EAAA,CACA,IAAA1I,EAAA0I,EAAAshB,GACAv7B,EAAAxO,MAAAe,UAAAiM,MAAAhL,KAAA+d,EAAAvR,OACAqa,OAAAJ,WAAAshB,GAAA,CACA/pB,SAAAD,EAAAC,SACAqjB,KAAAtjB,EAAAvR,MAAApE,YAAApJ,KACAwN,QACA+7B,WAAAxqB,EAAAwqB,YAIA,IAAA2E,EAAA9tC,KAAA8tC,OAEAA,EAAAhvC,OAAA,IACA2oB,OAAAqmB,OAAAxF,KAAAM,MAAAN,KAAAC,UAAAuF,KAGA,IAAApX,EAAA12B,KAAA02B,eASA,OAPA,OAAAA,IACAjP,OAAAiP,eAAA,CACA5X,OAAA4X,EAAA5X,OAAAxR,UACA0U,OAAA0U,EAAA1U,SAIAyF,GAEAvc,MAAA,WAeA,WAAA3M,EAAA6oB,gBAAAle,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GACA,IAAAF,EAAAE,EAAAF,MAEA,OAAAA,GACAP,KAAAkzC,SAAA3yC,EAAA2K,SAGA,IAAAmc,EAAA5mB,EAAA4mB,WAEA,QAAAznB,KAAAynB,EAAA,CACA,IAAA1I,EAAA0I,EAAAznB,GACAI,KAAAmzC,aAAAvzC,EAAA+e,EAAAzT,SAKA,IAFA,IAAA4iC,EAAArtC,EAAAqtC,OAEA7oB,EAAA,EAAAjb,EAAA8jC,EAAAhvC,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAA8oB,EAAAD,EAAA7oB,GACAjlB,KAAAszC,SAAAvF,EAAAjqB,MAAAiqB,EAAAzE,MAAAyE,EAAAhF,eAGA,OAAA/oC,MAEAiyC,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,eAIA1jC,EAAA6oB,eAAAqtB,SAAA,MAMAl2C,EAAAm2C,wBAAA,WACAn2C,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,0BACAjiC,KAAA20C,uBAAAv1C,GAGAb,EAAAm2C,wBAAA/0C,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAm2C,wBAAA/0C,UAAAqJ,YAAAzK,EAAAm2C,wBAEAn2C,EAAAm2C,wBAAA/0C,UAAA2zC,SAAA,SAAAxvB,EAAAwlB,EAAAsL,GACA50C,KAAA8tC,OAAAxR,KAAA,CACAxY,QACAwlB,QACAsL,eAIAr2C,EAAAm2C,wBAAA/0C,UAAAuJ,KAAA,SAAAzI,GACA,IAAAF,EAAAE,EAAAF,MAEA,OAAAA,GACAP,KAAAkzC,SAAA3yC,EAAA2K,SAGA,IAAAmc,EAAA5mB,EAAA4mB,WAEA,QAAAznB,KAAAynB,EAAA,CACA,IAAA1I,EAAA0I,EAAAznB,GACAI,KAAAmzC,aAAAvzC,EAAA+e,EAAAzT,SAKA,IAFA,IAAA4iC,EAAArtC,EAAAqtC,OAEA7oB,EAAA,EAAAjb,EAAA8jC,EAAAhvC,OAAsCmmB,EAAAjb,EAAOib,IAAA,CAC7C,IAAA8oB,EAAAD,EAAA7oB,GACAjlB,KAAAszC,SAAAvF,EAAAjqB,MAAAiqB,EAAAzE,MAAAyE,EAAA6G,WAGA,OAAA50C,MAQAzB,EAAAs2C,QAAA,SAAA5rC,GACA,kBAAAA,IACAsB,QAAAC,KAAA,sDACAvB,EAAAzI,UAAA,IAGAR,KAAAiJ,QACAjJ,KAAAopC,SAAA,GAGA7qC,EAAAs2C,QAAAl1C,UAAA,CACAqJ,YAAAzK,EAAAs2C,QACAC,SAAA,SAAA35B,GAGA,OAFAnb,KAAAopC,SAAA,EACAppC,KAAA+0C,iBAAA55B,EACAnb,OAeAzB,EAAAy2C,gBAAA,WACA,UAAA/1C,MAAA,kEAGAV,EAAAy2C,gBAAAC,KAAA,SAAAC,EAAAC,EAAAC,GACAp1C,KAAAq1C,OAAAH,EACAl1C,KAAAs1C,MAAAH,EACAn1C,KAAAu1C,WAAAH,GAAA,KASA,IARA,IAAAI,EAAAL,EAAAK,OACAC,EAAAD,EAAA12C,OACA42C,EAAA,IAAA92C,MAAA62C,GACAE,EAAA,CACAhW,YAAAphC,EAAAmJ,oBACAk4B,UAAArhC,EAAAmJ,qBAGAud,EAAA,EAAmBA,IAAAwwB,IAAexwB,EAAA,CAClC,IAAA2wB,EAAAJ,EAAAvwB,GAAA4wB,kBAAA,MACAH,EAAAzwB,GAAA2wB,EACAA,EAAA5W,SAAA2W,EAGA31C,KAAA81C,qBAAAH,EACA31C,KAAA+1C,cAAAL,EAGA11C,KAAAg2C,kBAAA,IAAAp3C,MAAA62C,GACAz1C,KAAAi2C,YAAA,KAEAj2C,KAAAk2C,kBAAA,KAEAl2C,KAAAm2C,sBAAA,KACAn2C,KAAAo2C,mBAAA,KACAp2C,KAAAq2C,KAAA93C,EAAA8I,WACArH,KAAAs2C,YAAA,EAGAt2C,KAAAu2C,WAAA,KAGAv2C,KAAAw2C,KAAA,EACAx2C,KAAAy2C,UAAA,EACAz2C,KAAA02C,oBAAA,EACA12C,KAAAo6B,OAAA,EACAp6B,KAAA22C,iBAAA,EACA32C,KAAA42C,YAAA/xB,IAEA7kB,KAAA62C,QAAA,EAEA72C,KAAA6xC,SAAA,EAEA7xC,KAAA82C,mBAAA,EAEA92C,KAAA+2C,kBAAA,EAEA/2C,KAAAg3C,gBAAA,GAGAz4C,EAAAy2C,gBAAAC,KAAAt1C,UAAA,CACAqJ,YAAAzK,EAAAy2C,gBAAAC,KAEAgC,KAAA,WAGA,OAFAj3C,KAAAq1C,OAAA6B,gBAAAl3C,MAEAA,MAEA2hC,KAAA,WAGA,OAFA3hC,KAAAq1C,OAAA8B,kBAAAn3C,MAEAA,KAAAo3C,SAEAA,MAAA,WASA,OARAp3C,KAAA62C,QAAA,EACA72C,KAAA6xC,SAAA,EACA7xC,KAAAw2C,KAAA,EAEAx2C,KAAAs2C,YAAA,EAEAt2C,KAAAu2C,WAAA,KAEAv2C,KAAAq3C,aAAAC,eAEAC,UAAA,WACAv3C,KAAAu2C,WACA,OAAAv2C,KAAA6xC,UAAA7xC,KAAA62C,QAAA,IAAA72C,KAAAy2C,WAAA,OAAAz2C,KAAAu2C,YAAAv2C,KAAAq1C,OAAAmC,gBAAAx3C,OAGAy3C,YAAA,WACA,OAAAz3C,KAAAq1C,OAAAmC,gBAAAx3C,OAEA03C,QAAA,SAAAlB,GAEA,OADAx2C,KAAAu2C,WAAAC,EACAx2C,MAEA23C,QAAA,SAAAC,EAAAhB,GAGA,OAFA52C,KAAAq2C,KAAAuB,EACA53C,KAAA42C,cACA52C,MAMA63C,mBAAA,SAAAzd,GAIA,OAHAp6B,KAAAo6B,SAEAp6B,KAAA22C,iBAAA32C,KAAA6xC,QAAAzX,EAAA,EACAp6B,KAAAq3C,cAGAS,mBAAA,WACA,OAAA93C,KAAA22C,kBAEAoB,OAAA,SAAAC,GACA,OAAAh4C,KAAAi4C,gBAAAD,EAAA,MAEAE,QAAA,SAAAF,GACA,OAAAh4C,KAAAi4C,gBAAAD,EAAA,MAEAG,cAAA,SAAAC,EAAAJ,EAAAK,GACAr4C,KAAAq1C,OAIA,GAHA+C,EAAAF,QAAAF,GACAh4C,KAAA+3C,OAAAC,GAEAK,EAAA,CACA,IAAAC,EAAAt4C,KAAAs1C,MAAA0C,SACAO,EAAAH,EAAA9C,MAAA0C,SACAQ,EAAAD,EAAAD,EACAG,EAAAH,EAAAC,EACAH,EAAAC,KAAA,EAAAG,EAAAR,GACAh4C,KAAAq4C,KAAAI,EAAA,EAAAT,GAGA,OAAAh4C,MAEA04C,YAAA,SAAAC,EAAAX,EAAAK,GACA,OAAAM,EAAAR,cAAAn4C,KAAAg4C,EAAAK,IAEAhB,WAAA,WACA,IAAAuB,EAAA54C,KAAAo2C,mBAQA,OANA,OAAAwC,IACA54C,KAAAo2C,mBAAA,KAEAp2C,KAAAq1C,OAAAwD,4BAAAD,IAGA54C,MAMA84C,sBAAA,SAAArC,GAGA,OAFAz2C,KAAAy2C,YACAz2C,KAAA02C,oBAAA12C,KAAA62C,OAAA,EAAAJ,EACAz2C,KAAAs3C,eAGAyB,sBAAA,WACA,OAAA/4C,KAAA02C,qBAEAsC,YAAA,SAAAhB,GAEA,OADAh4C,KAAAy2C,UAAAz2C,KAAAs1C,MAAA0C,WACAh4C,KAAAs3C,eAEA2B,SAAA,SAAAC,GAGA,OAFAl5C,KAAAw2C,KAAA0C,EAAA1C,KACAx2C,KAAAy2C,UAAAyC,EAAAzC,UACAz2C,KAAAs3C,eAEA6B,KAAA,SAAAnB,GACA,OAAAh4C,KAAAq4C,KAAAr4C,KAAA02C,oBAAA,EAAAsB,IAEAK,KAAA,SAAAe,EAAAC,EAAArB,GACA,IAAA9C,EAAAl1C,KAAAq1C,OACA3T,EAAAwT,EAAAsB,KACAZ,EAAA51C,KAAAm2C,sBACAM,EAAAz2C,KAAAy2C,UAEA,OAAAb,IACAA,EAAAV,EAAAoE,0BAAAt5C,KAAAm2C,sBAAAP,GAGA,IAAA2D,EAAA3D,EAAA/X,mBACAuB,EAAAwW,EAAA9X,aAKA,OAJAyb,EAAA,GAAA7X,EACA6X,EAAA,GAAA7X,EAAAsW,EACA5Y,EAAA,GAAAga,EAAA3C,EACArX,EAAA,GAAAia,EAAA5C,EACAz2C,MAEAs3C,YAAA,WACA,IAAAkC,EAAAx5C,KAAAm2C,sBAQA,OANA,OAAAqD,IACAx5C,KAAAm2C,sBAAA,KAEAn2C,KAAAq1C,OAAAwD,4BAAAW,IAGAx5C,MAGAy5C,SAAA,WACA,OAAAz5C,KAAAq1C,QAEAqE,QAAA,WACA,OAAA15C,KAAAs1C,OAEAqE,QAAA,WACA,OAAA35C,KAAAu1C,YAAAv1C,KAAAq1C,OAAAuE,OAGAC,QAAA,SAAArD,EAAAsD,EAAAC,EAAAC,GAEA,IAAA5Y,EAAAphC,KAAAu2C,WAEA,UAAAnV,EAAA,CAEA,IAAA6Y,GAAAzD,EAAApV,GAAA2Y,EAEA,GAAAE,EAAA,OAAAF,EACA,OAIA/5C,KAAAu2C,WAAA,KAEAuD,EAAAC,EAAAE,EAIAH,GAAA95C,KAAAk6C,iBAAA1D,GAEA,IAAA2D,EAAAn6C,KAAAo6C,YAAAN,GAIA1f,EAAAp6B,KAAAq6C,cAAA7D,GAEA,GAAApc,EAAA,EAIA,IAHA,IAAAsb,EAAA11C,KAAA+1C,cACAuE,EAAAt6C,KAAAg2C,kBAEA/sB,EAAA,EAAAxe,EAAAirC,EAAA52C,OAAgDmqB,IAAAxe,IAASwe,EACzDysB,EAAAzsB,GAAAkV,SAAAgc,GACAG,EAAArxB,GAAAsxB,WAAAP,EAAA5f,IAIAigB,cAAA,SAAA7D,GACA,IAAApc,EAAA,EAEA,GAAAp6B,KAAA6xC,QAAA,CACAzX,EAAAp6B,KAAAo6B,OACA,IAAAwb,EAAA51C,KAAAo2C,mBAEA,UAAAR,EAAA,CACA,IAAA4E,EAAA5E,EAAAzX,SAAAqY,GAAA,GACApc,GAAAogB,EAEAhE,EAAAZ,EAAA/X,mBAAA,KACA79B,KAAAq3C,aAEA,IAAAmD,IAEAx6C,KAAA6xC,SAAA,KAOA,OADA7xC,KAAA22C,iBAAAvc,EACAA,GAEA8f,iBAAA,SAAA1D,GACA,IAAAC,EAAA,EAEA,IAAAz2C,KAAA62C,OAAA,CACAJ,EAAAz2C,KAAAy2C,UACA,IAAAb,EAAA51C,KAAAm2C,sBAEA,UAAAP,EAEAa,GADAb,EAAAzX,SAAAqY,GAAA,GAGAA,EAAAZ,EAAA/X,mBAAA,KACA79B,KAAAs3C,cAEA,IAAAb,EAEAz2C,KAAA62C,QAAA,EAGA72C,KAAAy2C,aAOA,OADAz2C,KAAA02C,oBAAAD,EACAA,GAEA2D,YAAA,SAAAN,GACA,IAAAtD,EAAAx2C,KAAAw2C,KAAAsD,EACA,OAAAA,EAAA,OAAAtD,EACA,IAAAwB,EAAAh4C,KAAAs1C,MAAA0C,SACA3B,EAAAr2C,KAAAq2C,KACAoE,EAAAz6C,KAAAs2C,WAEA,GAAAD,IAAA93C,EAAA6I,SAAA,EACA,IAAAqzC,IAEAz6C,KAAAy6C,UAAA,EAEAz6C,KAAA06C,aAAA,UAGAC,EAAA,CACA,GAAAnE,GAAAwB,EACAxB,EAAAwB,MACW,MAAAxB,EAAA,GAEA,MAAAmE,EADXnE,EAAA,EAGAx2C,KAAA82C,kBAAA92C,KAAA62C,QAAA,EAAyD72C,KAAA6xC,SAAA,EAEzD7xC,KAAAq1C,OAAA3S,cAAA,CACAT,KAAA,WACAiX,OAAAl5C,KACAsxB,UAAAwoB,EAAA,cAGO,CAEP,IAAAc,EAAAvE,IAAA93C,EAAA+I,aAgBA,IAdA,IAAAmzC,IAEAX,GAAA,GACAW,EAAA,EAEAz6C,KAAA06C,aAAA,MAAA16C,KAAA42C,YAAAgE,IAKA56C,KAAA06C,YAAA,IAAA16C,KAAA42C,aAAA,EAAAgE,IAIApE,GAAAwB,GAAAxB,EAAA,GAEA,IAAAqE,EAAAt7C,KAAAiK,MAAAgtC,EAAAwB,GAEAxB,GAAAwB,EAAA6C,EACAJ,GAAAl7C,KAAAia,IAAAqhC,GACA,IAAAC,EAAA96C,KAAA42C,YAAA6D,EAEA,GAAAK,EAAA,EAEA96C,KAAA82C,kBAAA92C,KAAA62C,QAAA,EAA2D72C,KAAA6xC,SAAA,EAC3D2E,EAAAsD,EAAA,EAAA9B,EAAA,EAEAh4C,KAAAq1C,OAAA3S,cAAA,CACAT,KAAA,WACAiX,OAAAl5C,KACAsxB,UAAAwoB,EAAA,aAEW,CAEX,OAAAgB,EAAA,CAEA,IAAAC,EAAAjB,EAAA,EAEA95C,KAAA06C,YAAAK,KAAAH,QAEA56C,KAAA06C,aAAA,KAAAE,GAGA56C,KAAAs2C,WAAAmE,EAEAz6C,KAAAq1C,OAAA3S,cAAA,CACAT,KAAA,OACAiX,OAAAl5C,KACA66C,eAKA,GAAAD,GAAA,OAAAH,GAGA,OADAz6C,KAAAw2C,OACAwB,EAAAxB,EAKA,OADAx2C,KAAAw2C,OACAA,GAEAkE,YAAA,SAAAK,EAAAC,EAAAJ,GACA,IAAA5b,EAAAh/B,KAAA81C,qBAEA8E,GACA5b,EAAAW,YAAAphC,EAAAoJ,gBACAq3B,EAAAY,UAAArhC,EAAAoJ,kBAIAq3B,EAAAW,YADAob,EACA/6C,KAAA+2C,iBAAAx4C,EAAAoJ,gBAAApJ,EAAAmJ,oBAEAnJ,EAAAqJ,iBAIAo3B,EAAAY,UADAob,EACAh7C,KAAAg3C,eAAAz4C,EAAAoJ,gBAAApJ,EAAAmJ,oBAEAnJ,EAAAqJ,mBAIAqwC,gBAAA,SAAAD,EAAAiD,EAAAC,GACA,IAAAhG,EAAAl1C,KAAAq1C,OACA3T,EAAAwT,EAAAsB,KACAZ,EAAA51C,KAAAo2C,mBAEA,OAAAR,IACAA,EAAAV,EAAAoE,0BAAAt5C,KAAAo2C,mBAAAR,GAGA,IAAA2D,EAAA3D,EAAA/X,mBACAuB,EAAAwW,EAAA9X,aAKA,OAJAyb,EAAA,GAAA7X,EACAtC,EAAA,GAAA6b,EACA1B,EAAA,GAAA7X,EAAAsW,EACA5Y,EAAA,GAAA8b,EACAl7C,OAYAzB,EAAA48C,cAAA,SAAAv7C,EAAAo4C,EAAAxC,GACAx1C,KAAAJ,OACAI,KAAAw1C,SACAx1C,KAAAg4C,cAAA54C,IAAA44C,KAAA,EACAh4C,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eAEAr4B,KAAAg4C,SAAA,GACAh4C,KAAAo7C,gBAKAp7C,KAAAq7C,OACAr7C,KAAAs7C,YAGA/8C,EAAA48C,cAAAx7C,UAAA,CACAqJ,YAAAzK,EAAA48C,cACAC,cAAA,WAIA,IAHA,IACApD,EAAA,EAEA/yB,EAAA,EAAA4H,EAHA7sB,KAAAw1C,OAGA12C,OAAwCmmB,IAAA4H,IAAS5H,EAAA,CACjD,IAAAs2B,EAAAv7C,KAAAw1C,OAAAvwB,GACA+yB,EAAAz4C,KAAA2M,IAAA8rC,EAAAuD,EAAAhC,MAAAgC,EAAAhC,MAAAz6C,OAAA,IAGAkB,KAAAg4C,YAEAqD,KAAA,WACA,QAAAp2B,EAAA,EAAqBA,EAAAjlB,KAAAw1C,OAAA12C,OAAwBmmB,IAC7CjlB,KAAAw1C,OAAAvwB,GAAAo2B,KAAA,EAAAr7C,KAAAg4C,UAGA,OAAAh4C,MAEAs7C,SAAA,WACA,QAAAr2B,EAAA,EAAqBA,EAAAjlB,KAAAw1C,OAAA12C,OAAwBmmB,IAC7CjlB,KAAAw1C,OAAAvwB,GAAAq2B,WAGA,OAAAt7C,OAIAH,OAAAM,OAAA5B,EAAA48C,cAAA,CACAvS,MAAA,SAAA4S,GAKA,IAJA,IAAAhG,EAAA,GACAiG,EAAAD,EAAAhG,OACAkG,EAAA,GAAAF,EAAAG,KAAA,GAEA12B,EAAA,EAAA4H,EAAA4uB,EAAA38C,OAA4CmmB,IAAA4H,IAAS5H,EACrDuwB,EAAAlZ,KAAA/9B,EAAAq9C,cAAAhT,MAAA6S,EAAAx2B,IAAAiK,MAAAwsB,IAGA,WAAAn9C,EAAA48C,cAAAK,EAAA57C,KAAA47C,EAAAxD,SAAAxC,IAEA5N,OAAA,SAAAuN,GASA,IARA,IAAAK,EAAA,GACAqG,EAAA1G,EAAAK,OACAgG,EAAA,CACA57C,KAAAu1C,EAAAv1C,KACAo4C,SAAA7C,EAAA6C,SACAxC,UAGAvwB,EAAA,EAAA4H,EAAAgvB,EAAA/8C,OAA4CmmB,IAAA4H,IAAS5H,EACrDuwB,EAAAlZ,KAAA/9B,EAAAq9C,cAAAhU,OAAAiU,EAAA52B,KAGA,OAAAu2B,GAEAM,8BAAA,SAAAl8C,EAAAm8C,EAAAJ,EAAAK,GAIA,IAHA,IAAAC,EAAAF,EAAAj9C,OACA02C,EAAA,GAEAvwB,EAAA,EAAqBA,EAAAg3B,EAAqBh3B,IAAA,CAC1C,IAAAs0B,EAAA,GACAna,EAAA,GACAma,EAAAjd,MAAArX,EAAAg3B,EAAA,GAAAA,EAAAh3B,KAAA,GAAAg3B,GACA7c,EAAA9C,KAAA,OACA,IAAAtkB,EAAAzZ,EAAA29C,eAAAC,iBAAA5C,GACAA,EAAAh7C,EAAA29C,eAAAE,YAAA7C,EAAA,EAAAvhC,GACAonB,EAAA7gC,EAAA29C,eAAAE,YAAAhd,EAAA,EAAApnB,GAGAgkC,GAAA,IAAAzC,EAAA,KACAA,EAAAjd,KAAA2f,GACA7c,EAAA9C,KAAA8C,EAAA,KAGAoW,EAAAlZ,KAAA,IAAA/9B,EAAA89C,oBAAA,0BAAAN,EAAA92B,GAAArlB,KAAA,IAAA25C,EAAAna,GAAAlQ,MAAA,EAAAysB,IAGA,WAAAp9C,EAAA48C,cAAAv7C,GAAA,EAAA41C,IAEA8G,WAAA,SAAAC,EAAA38C,GACA,IAAA48C,EAAAD,EAEA,IAAA39C,MAAAkmC,QAAAyX,GAAA,CACA,IAAAE,EAAAF,EACAC,EAAAC,EAAAx1B,UAAAw1B,EAAAx1B,SAAAy1B,YAAAD,EAAAC,WAGA,QAAAz3B,EAAA,EAAqBA,EAAAu3B,EAAA19C,OAAsBmmB,IAC3C,GAAAu3B,EAAAv3B,GAAArlB,SACA,OAAA48C,EAAAv3B,GAIA,aAEA03B,oCAAA,SAAAzQ,EAAAyP,EAAAK,GAOA,IANA,IAAAY,EAAA,GAGAC,EAAA,qBAGA53B,EAAA,EAAAC,EAAAgnB,EAAAptC,OAA+CmmB,EAAAC,EAAQD,IAAA,CACvD,IAAA4tB,EAAA3G,EAAAjnB,GACA63B,EAAAjK,EAAAjzC,KAAAM,MAAA28C,GAEA,GAAAC,KAAAh+C,OAAA,GACA,IACAi+C,EAAAH,EADAh9C,EAAAk9C,EAAA,IAGAC,IACAH,EAAAh9C,GAAAm9C,EAAA,IAGAA,EAAAzgB,KAAAuW,IAIA,IAAAmK,EAAA,GAEA,QAAAp9C,KAAAg9C,EACAI,EAAA1gB,KAAA/9B,EAAA48C,cAAAW,8BAAAl8C,EAAAg9C,EAAAh9C,GAAA+7C,EAAAK,IAGA,OAAAgB,GAGAC,eAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAF,EAEA,OADA3yC,QAAA2U,MAAA,qCACA,KAuBA,IApBA,IAAAm+B,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEA,OAAAF,EAAA1+C,OAAA,CACA,IAAAy6C,EAAA,GACAna,EAAA,GACA7gC,EAAA29C,eAAAyB,YAAAH,EAAAjE,EAAAna,EAAAqe,GAEA,IAAAlE,EAAAz6C,QACA4+C,EAAAphB,KAAA,IAAAghB,EAAAC,EAAAhE,EAAAna,MAKAoW,EAAA,GACAoI,EAAAV,EAAAt9C,MAAA,UAEAo4C,EAAAkF,EAAAp+C,SAAA,EACA68C,EAAAuB,EAAAvB,KAAA,GACAkC,EAAAX,EAAAY,WAAA,GAEAh0C,EAAA,EAAqBA,EAAA+zC,EAAA/+C,OAA4BgL,IAAA,CACjD,IAAA0zC,EAAAK,EAAA/zC,GAAAi0C,KAEA,GAAAP,GAAA,IAAAA,EAAA1+C,OAGA,GAAA0+C,EAAA,GAAAtR,aAAA,CAIA,IAFA,IAAA8R,EAAA,GAEA/iB,EAAA,EAAyBA,EAAAuiB,EAAA1+C,OAA0Bm8B,IACnD,GAAAuiB,EAAAviB,GAAAiR,aACA,QAAAzhC,EAAA,EAA6BA,EAAA+yC,EAAAviB,GAAAiR,aAAAptC,OAA0C2L,IACvEuzC,EAAAR,EAAAviB,GAAAiR,aAAAzhC,KAAA,EAQA,QAAAwzC,KAAAD,EAAA,CACA,IAAAzE,EAAA,GACAna,EAAA,GAEA,IAAA30B,EAAA,EAA2BA,IAAA+yC,EAAAviB,GAAAiR,aAAAptC,SAA4C2L,EAAA,CACvE,IAAAyzC,EAAAV,EAAAviB,GACAse,EAAAjd,KAAA4hB,EAAA1H,MACApX,EAAA9C,KAAA4hB,EAAArL,cAAAoL,EAAA,KAGAzI,EAAAlZ,KAAA,IAAA/9B,EAAA89C,oBAAA,yBAAA4B,EAAA,IAAA1E,EAAAna,IAGA4Y,EAAAgG,EAAAl/C,QAAA68C,GAAA,OACS,CAET,IAAAwC,EAAA,UAAAhB,EAAArzC,GAAAlK,KAAA,IACAy9C,EAAA9+C,EAAA6/C,oBAAAD,EAAA,YAAAX,EAAA,MAAAhI,GACA6H,EAAA9+C,EAAA8/C,wBAAAF,EAAA,cAAAX,EAAA,MAAAhI,GACA6H,EAAA9+C,EAAA6/C,oBAAAD,EAAA,SAAAX,EAAA,MAAAhI,IAIA,WAAAA,EAAA12C,OACA,KAGA,IAAAP,EAAA48C,cAAAyC,EAAA5F,EAAAxC,MAeAj3C,EAAA+/C,eAAA,SAAAC,GACAv+C,KAAA45C,MAAA2E,EAEAv+C,KAAAw+C,qBAEAx+C,KAAAy+C,WAAA,EACAz+C,KAAAw2C,KAAA,EACAx2C,KAAAy2C,UAAA,GAGA52C,OAAAM,OAAA5B,EAAA+/C,eAAA3+C,UAAApB,EAAAwjC,gBAAApiC,UAAA,CAIA++C,WAAA,SAAAvJ,EAAAwJ,GACA,IAAAJ,EAAAI,GAAA3+C,KAAA45C,MACAgF,EAAAL,EAAA/lB,KACAqmB,EAAA,kBAAA1J,EAAA52C,EAAA48C,cAAAmB,WAAAiC,EAAApJ,KACA2J,EAAA,OAAAD,IAAArmB,KAAA2c,EACA4J,EAAA/+C,KAAAg/C,eAAAF,GACAG,EAAA,KAEA,QAAA7/C,IAAA2/C,EAAA,CACA,IAAAG,EAAAH,EAAAI,aAAAP,GAEA,QAAAx/C,IAAA8/C,EACA,OAAAA,EAKAD,EAAAF,EAAAK,aAAA,GAEA,OAAAP,MAAAI,EAAA3J,OAIA,UAAAuJ,EAAA,YAEA,IAAAQ,EAAA,IAAA9gD,EAAA+/C,eAAAgB,QAAAt/C,KAAA6+C,EAAAF,GAOA,OALA3+C,KAAAu/C,YAAAF,EAAAJ,GAGAj/C,KAAAw/C,mBAAAH,EAAAP,EAAAF,GAEAS,GAGAH,eAAA,SAAA/J,EAAAwJ,GACA,IAAAJ,EAAAI,GAAA3+C,KAAA45C,MACAgF,EAAAL,EAAA/lB,KACAqmB,EAAA,kBAAA1J,EAAA52C,EAAA48C,cAAAmB,WAAAiC,EAAApJ,KACA2J,EAAAD,IAAArmB,KAAA2c,EACA4J,EAAA/+C,KAAAg/C,eAAAF,GAEA,YAAA1/C,IAAA2/C,GACAA,EAAAI,aAAAP,IAGA,MAGAa,cAAA,WACA,IAAAC,EAAA1/C,KAAA2/C,SACAC,EAAA5/C,KAAA6/C,gBACAC,EAAA9/C,KAAA+/C,UACAC,EAAAhgD,KAAAigD,iBACAjgD,KAAA6/C,gBAAA,EACA7/C,KAAAigD,iBAAA,EAEA,QAAAh7B,EAAA,EAAqBA,IAAA26B,IAAgB36B,EACrCy6B,EAAAz6B,GAAAmyB,QAGA,IAAAnyB,EAAA,EAAqBA,IAAA+6B,IAAiB/6B,EACtC66B,EAAA76B,GAAAi7B,SAAA,EAGA,OAAAlgD,MAGAsX,OAAA,SAAAwiC,GACAA,GAAA95C,KAAAy2C,UAOA,IANA,IAAAiJ,EAAA1/C,KAAA2/C,SACAC,EAAA5/C,KAAA6/C,gBACArJ,EAAAx2C,KAAAw2C,MAAAsD,EACAC,EAAAx6C,KAAAE,KAAAq6C,GACAE,EAAAh6C,KAAAy+C,YAAA,EAEAx5B,EAAA,EAAqBA,IAAA26B,IAAgB36B,EAAA,CACrC,IAAAi0B,EAAAwG,EAAAz6B,GAEAi0B,EAAArH,SACAqH,EAAAW,QAAArD,EAAAsD,EAAAC,EAAAC,GAKA,IAAA8F,EAAA9/C,KAAA+/C,UACAC,EAAAhgD,KAAAigD,iBAEA,IAAAh7B,EAAA,EAAqBA,IAAA+6B,IAAiB/6B,EACtC66B,EAAA76B,GAAAk7B,MAAAnG,GAGA,OAAAh6C,MAGA25C,QAAA,WACA,OAAA35C,KAAA45C,OAGAwG,YAAA,SAAAjL,GACA,IAAAuK,EAAA1/C,KAAA2/C,SACAb,EAAA3J,EAAA3c,KACA6nB,EAAArgD,KAAAg/C,eACAD,EAAAsB,EAAAvB,GAEA,QAAA1/C,IAAA2/C,EAAA,CAMA,IAFA,IAAAuB,EAAAvB,EAAAK,aAEAn6B,EAAA,EAAA4H,EAAAyzB,EAAAxhD,OAAmDmmB,IAAA4H,IAAS5H,EAAA,CAC5D,IAAAi0B,EAAAoH,EAAAr7B,GAEAjlB,KAAAm3C,kBAAA+B,GAEA,IAAAqH,EAAArH,EAAAjD,YACAuK,EAAAd,IAAA5gD,OAAA,GACAo6C,EAAAjD,YAAA,KACAiD,EAAAhD,kBAAA,KACAsK,EAAAvK,YAAAsK,EACAb,EAAAa,GAAAC,EACAd,EAAAe,MAEAzgD,KAAA0gD,iCAAAxH,UAGAmH,EAAAvB,KAIA6B,YAAA,SAAApC,GACA,IAAAK,EAAAL,EAAA/lB,KACA6nB,EAAArgD,KAAAg/C,eAEA,QAAAF,KAAAuB,EAAA,CACA,IACAnH,EADAmH,EAAAvB,GAAAK,aACAP,QAEAx/C,IAAA85C,IACAl5C,KAAAm3C,kBAAA+B,GAEAl5C,KAAA4gD,sBAAA1H,IAIA,IACA2H,EADA7gD,KAAA8gD,uBACAlC,GAEA,QAAAx/C,IAAAyhD,EACA,QAAAtD,KAAAsD,EAAA,CACA,IAAAE,EAAAF,EAAAtD,GACAwD,EAAAC,uBAEAhhD,KAAAihD,uBAAAF,KAKAG,cAAA,SAAA/L,EAAAwJ,GACA,IAAAzF,EAAAl5C,KAAAk/C,eAAA/J,EAAAwJ,GAEA,OAAAzF,IACAl5C,KAAAm3C,kBAAA+B,GAEAl5C,KAAA4gD,sBAAA1H,OAIA36C,EAAA+/C,eAAAgB,QAAA/gD,EAAAy2C,gBAAAC,KAEAp1C,OAAAM,OAAA5B,EAAA+/C,eAAA3+C,UAAA,CACA4/C,YAAA,SAAArG,EAAA+F,GACA,IAAAV,EAAArF,EAAA3D,YAAAv1C,KAAA45C,MACApE,EAAA0D,EAAA5D,MAAAE,OACAC,EAAAD,EAAA12C,OACAghD,EAAA5G,EAAAlD,kBACAN,EAAAwD,EAAAnD,cACA6I,EAAAL,EAAA/lB,KACA2oB,EAAAnhD,KAAA8gD,uBACAM,EAAAD,EAAAvC,QAEAx/C,IAAAgiD,IACAA,EAAA,GACAD,EAAAvC,GAAAwC,GAGA,QAAAn8B,EAAA,EAAqBA,IAAAwwB,IAAexwB,EAAA,CACpC,IAAAs2B,EAAA/F,EAAAvwB,GACAs4B,EAAAhC,EAAA37C,KACAmhD,EAAAK,EAAA7D,GAEA,QAAAn+C,IAAA2hD,EACAjB,EAAA76B,GAAA87B,MACS,CAGT,QAAA3hD,KAFA2hD,EAAAjB,EAAA76B,IAEA,CAEA,OAAA87B,EAAA9K,gBACA8K,EAAAM,eAEArhD,KAAAshD,oBAAAP,EAAAnC,EAAArB,IAGA,SAGA,IAAAgE,EAAAtC,KAAAjJ,kBAAA/wB,GAAA87B,QAAAS,cACAT,EAAA,IAAAxiD,EAAAkjD,cAAAljD,EAAAmjD,gBAAAhiB,OAAA6e,EAAAhB,EAAAgE,GAAAhG,EAAAoG,cAAApG,EAAAqG,iBACAP,eAEArhD,KAAAshD,oBAAAP,EAAAnC,EAAArB,GAEAuC,EAAA76B,GAAA87B,EAGArL,EAAAzwB,GAAA+Y,aAAA+iB,EAAA53B,SAGA+tB,gBAAA,SAAAgC,GACA,IAAAl5C,KAAAw3C,gBAAA0B,GAAA,CACA,UAAAA,EAAAjD,YAAA,CAGA,IAAA2I,GAAA1F,EAAA3D,YAAAv1C,KAAA45C,OAAAphB,KACAsmB,EAAA5F,EAAA5D,MAAA9c,KACAumB,EAAA/+C,KAAAg/C,eAAAF,GAEA9+C,KAAAu/C,YAAArG,EAAA6F,KAAAK,aAAA,IAEAp/C,KAAAw/C,mBAAAtG,EAAA4F,EAAAF,GAKA,IAFA,IAAAkB,EAAA5G,EAAAlD,kBAEA/wB,EAAA,EAAA4H,EAAAizB,EAAAhhD,OAA4CmmB,IAAA4H,IAAS5H,EAAA,CACrD,IAAA87B,EAAAjB,EAAA76B,GAEA,IAAA87B,EAAAb,aACAlgD,KAAA6hD,aAAAd,GAEAA,EAAAe,qBAIA9hD,KAAA+hD,YAAA7I,KAGA/B,kBAAA,SAAA+B,GACA,GAAAl5C,KAAAw3C,gBAAA0B,GAAA,CAGA,IAFA,IAAA4G,EAAA5G,EAAAlD,kBAEA/wB,EAAA,EAAA4H,EAAAizB,EAAAhhD,OAA4CmmB,IAAA4H,IAAS5H,EAAA,CACrD,IAAA87B,EAAAjB,EAAA76B,GAEA,MAAA87B,EAAAb,WACAa,EAAAC,uBAEAhhD,KAAAgiD,iBAAAjB,IAIA/gD,KAAAiiD,gBAAA/I,KAIAsF,mBAAA,WACAx+C,KAAA2/C,SAAA,GAEA3/C,KAAA6/C,gBAAA,EACA7/C,KAAAg/C,eAAA,GAMAh/C,KAAA+/C,UAAA,GAEA//C,KAAAigD,iBAAA,EACAjgD,KAAA8gD,uBAAA,GAEA9gD,KAAAkiD,qBAAA,GAEAliD,KAAAmiD,4BAAA,EACA,IAAAt7B,EAAA7mB,KACAA,KAAAoiD,MAAA,CACA1C,QAAA,CACA7jB,YACA,OAAAhV,EAAA84B,SAAA7gD,QAGAujD,YACA,OAAAx7B,EAAAg5B,kBAIAC,SAAA,CACAjkB,YACA,OAAAhV,EAAAk5B,UAAAjhD,QAGAujD,YACA,OAAAx7B,EAAAo5B,mBAIAqC,oBAAA,CACAzmB,YACA,OAAAhV,EAAAq7B,qBAAApjD,QAGAujD,YACA,OAAAx7B,EAAAs7B,gCAOA3K,gBAAA,SAAA0B,GACA,IAAA34C,EAAA24C,EAAAjD,YACA,cAAA11C,KAAAP,KAAA6/C,iBAEAL,mBAAA,SAAAtG,EAAA4F,EAAAF,GACA,IAAAc,EAAA1/C,KAAA2/C,SACAU,EAAArgD,KAAAg/C,eACAD,EAAAsB,EAAAvB,GAEA,QAAA1/C,IAAA2/C,EACAA,EAAA,CACAK,aAAA,CAAAlG,GACAiG,aAAA,IAEAjG,EAAAhD,kBAAA,EACAmK,EAAAvB,GAAAC,MACO,CACP,IAAAK,EAAAL,EAAAK,aACAlG,EAAAhD,kBAAAkJ,EAAAtgD,OACAsgD,EAAA9iB,KAAA4c,GAGAA,EAAAjD,YAAAyJ,EAAA5gD,OACA4gD,EAAApjB,KAAA4c,GACA6F,EAAAI,aAAAP,GAAA1F,GAEA0H,sBAAA,SAAA1H,GACA,IAAAwG,EAAA1/C,KAAA2/C,SACAa,EAAAd,IAAA5gD,OAAA,GACAyhD,EAAArH,EAAAjD,YACAuK,EAAAvK,YAAAsK,EACAb,EAAAa,GAAAC,EACAd,EAAAe,MACAvH,EAAAjD,YAAA,KACA,IAAA6I,EAAA5F,EAAA5D,MAAA9c,KACA6nB,EAAArgD,KAAAg/C,eACAD,EAAAsB,EAAAvB,GACAyD,EAAAxD,EAAAK,aACAoD,EAAAD,IAAAzjD,OAAA,GACA2jD,EAAAvJ,EAAAhD,kBACAsM,EAAAtM,kBAAAuM,EACAF,EAAAE,GAAAD,EACAD,EAAA9B,MACAvH,EAAAhD,kBAAA,YACA6I,EAAAI,cACAO,EAAAnK,YAAAv1C,KAAA45C,OAAAphB,MAGA,IAAA+pB,EAAAzjD,eACAuhD,EAAAvB,GAGA9+C,KAAA0gD,iCAAAxH,IAEAwH,iCAAA,SAAAxH,GAGA,IAFA,IAAA4G,EAAA5G,EAAAlD,kBAEA/wB,EAAA,EAAA4H,EAAAizB,EAAAhhD,OAA0CmmB,IAAA4H,IAAS5H,EAAA,CACnD,IAAA87B,EAAAjB,EAAA76B,GAEA,MAAA87B,EAAAM,gBACArhD,KAAAihD,uBAAAF,KAIAgB,YAAA,SAAA7I,GAMA,IAAAwG,EAAA1/C,KAAA2/C,SACA+C,EAAAxJ,EAAAjD,YACA0M,EAAA3iD,KAAA6/C,kBACA+C,EAAAlD,EAAAiD,GACAzJ,EAAAjD,YAAA0M,EACAjD,EAAAiD,GAAAzJ,EACA0J,EAAA3M,YAAAyM,EACAhD,EAAAgD,GAAAE,GAEAX,gBAAA,SAAA/I,GAMA,IAAAwG,EAAA1/C,KAAA2/C,SACA+C,EAAAxJ,EAAAjD,YACA4M,IAAA7iD,KAAA6/C,gBACAiD,EAAApD,EAAAmD,GACA3J,EAAAjD,YAAA4M,EACAnD,EAAAmD,GAAA3J,EACA4J,EAAA7M,YAAAyM,EACAhD,EAAAgD,GAAAI,GAGAxB,oBAAA,SAAAP,EAAAnC,EAAArB,GACA,IAAA4D,EAAAnhD,KAAA8gD,uBACAD,EAAAM,EAAAvC,GACAkB,EAAA9/C,KAAA+/C,eAEA3gD,IAAAyhD,IACAA,EAAA,GACAM,EAAAvC,GAAAiC,GAGAA,EAAAtD,GAAAwD,EACAA,EAAA9K,YAAA6J,EAAAhhD,OACAghD,EAAAxjB,KAAAykB,IAEAE,uBAAA,SAAAF,GACA,IAAAjB,EAAA9/C,KAAA+/C,UACAgD,EAAAhC,UACAnC,EAAAmE,EAAAC,SAAAxqB,KACA+kB,EAAAwF,EAAAxB,KACAJ,EAAAnhD,KAAA8gD,uBACAD,EAAAM,EAAAvC,GACAqE,EAAAnD,IAAAhhD,OAAA,GACAyhD,EAAAQ,EAAA9K,YACAgN,EAAAhN,YAAAsK,EACAT,EAAAS,GAAA0C,EACAnD,EAAAW,aACAI,EAAAtD,GAEA2F,EAAA,CACA,QAAAC,KAAAtC,EACA,MAAAqC,SAGA/B,EAAAvC,KAGAiD,aAAA,SAAAd,GACA,IAAAjB,EAAA9/C,KAAA+/C,UACA2C,EAAA3B,EAAA9K,YACA0M,EAAA3iD,KAAAigD,mBACAmD,EAAAtD,EAAA6C,GACA5B,EAAA9K,YAAA0M,EACA7C,EAAA6C,GAAA5B,EACAqC,EAAAnN,YAAAyM,EACA5C,EAAA4C,GAAAU,GAEApB,iBAAA,SAAAjB,GACA,IAAAjB,EAAA9/C,KAAA+/C,UACA2C,EAAA3B,EAAA9K,YACA4M,IAAA7iD,KAAAigD,iBACAoD,EAAAvD,EAAA+C,GACA9B,EAAA9K,YAAA4M,EACA/C,EAAA+C,GAAA9B,EACAsC,EAAApN,YAAAyM,EACA5C,EAAA4C,GAAAW,GAGA/J,wBAAA,WACA,IAAA5D,EAAA11C,KAAAkiD,qBACAS,EAAA3iD,KAAAmiD,8BACAvM,EAAAF,EAAAiN,GAQA,YANAvjD,IAAAw2C,KACAA,EAAA,IAAAr3C,EAAAqiC,kBAAA,IAAAzY,aAAA,OAAAA,aAAA,KAAAnoB,KAAAsjD,mCACAC,aAAAZ,EACAjN,EAAAiN,GAAA/M,GAGAA,GAEAiD,4BAAA,SAAAjD,GACA,IAAAF,EAAA11C,KAAAkiD,qBACAQ,EAAA9M,EAAA2N,aACAV,IAAA7iD,KAAAmiD,4BACAqB,EAAA9N,EAAAmN,GACAjN,EAAA2N,aAAAV,EACAnN,EAAAmN,GAAAjN,EACA4N,EAAAD,aAAAb,EACAhN,EAAAgN,GAAAc,GAEAF,iCAAA,IAAAn7B,aAAA,KAkCA5pB,EAAAklD,qBAAA,SAAAC,GACA1jD,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eAEAr4B,KAAA2jD,SAAA/kD,MAAAe,UAAAiM,MAAAhL,KAAAJ,WACAR,KAAA4jD,gBAAA,EAGA,IAAA5Z,EAAA,GACAhqC,KAAA6jD,eAAA7Z,EAEA,QAAA/kB,EAAA,EAAA4H,EAAArsB,UAAA1B,OAAyCmmB,IAAA4H,IAAS5H,EAClD+kB,EAAAxpC,UAAAykB,GAAAuT,MAAAvT,EAGAjlB,KAAA8jD,OAAA,GAEA9jD,KAAA+jD,aAAA,GAEA/jD,KAAA+/C,UAAA,GAEA//C,KAAAgkD,uBAAA,GAEA,IAAAn9B,EAAA7mB,KACAA,KAAAoiD,MAAA,CACAvd,QAAA,CACAhJ,YACA,OAAAhV,EAAA88B,SAAA7kD,QAGAujD,YACA,OAAAriD,KAAA67B,MAAAhV,EAAA+8B,kBAKAK,wBACA,OAAAp9B,EAAAk5B,UAAAjhD,UAMAP,EAAAklD,qBAAA9jD,UAAA,CACAqJ,YAAAzK,EAAAklD,qBACAl3C,IAAA,SAAAm3C,GAUA,IATA,IAAA7e,EAAA7kC,KAAA2jD,SACAO,EAAArf,EAAA/lC,OACAqlD,EAAAnkD,KAAA4jD,gBACAQ,EAAApkD,KAAA6jD,eACAQ,EAAArkD,KAAA8jD,OACAQ,EAAAtkD,KAAA+jD,aACAjE,EAAA9/C,KAAA+/C,UACAC,EAAAF,EAAAhhD,OAEAmmB,EAAA,EAAA4H,EAAArsB,UAAA1B,OAA2CmmB,IAAA4H,IAAS5H,EAAA,CACpD,IAAA2B,EAAApmB,UAAAykB,GACAuT,EAAA5R,EAAA4R,KACAj4B,EAAA6jD,EAAA5rB,GAEA,QAAAp5B,IAAAmB,EAAA,CAEAA,EAAA2jD,IACAE,EAAA5rB,GAAAj4B,EACAskC,EAAAvI,KAAA1V,GAEA,QAAAqC,EAAA,EAAAxe,EAAAu1C,EAAwC/2B,IAAAxe,IAASwe,EACjD62B,EAAA72B,GAAAqT,KAAA,IAAA/9B,EAAAmjD,gBAAA96B,EAAAy9B,EAAAp7B,GAAAq7B,EAAAr7B,UAES,GAAA1oB,EAAA4jD,EAAA,CACT,IAAAI,EAAA1f,EAAAtkC,GAEAikD,IAAAL,EACAM,EAAA5f,EAAA2f,GACAJ,EAAAK,EAAAjsB,MAAAj4B,EACAskC,EAAAtkC,GAAAkkD,EACAL,EAAA5rB,GAAAgsB,EACA3f,EAAA2f,GAAA59B,EAEA,IAAAqC,EAAA,EAAAxe,EAAAu1C,EAAwC/2B,IAAAxe,IAASwe,EAAA,CACjD,IAAAy7B,EAAA5E,EAAA72B,GACA07B,EAAAD,EAAAF,GACAzD,EAAA2D,EAAAnkD,GACAmkD,EAAAnkD,GAAAokD,OAEAvlD,IAAA2hD,IAIAA,EAAA,IAAAxiD,EAAAmjD,gBAAA96B,EAAAy9B,EAAAp7B,GAAAq7B,EAAAr7B,KAGAy7B,EAAAF,GAAAzD,QAESlc,EAAAtkC,KAAAgkD,GACTh6C,QAAA2U,MAAA,4HAMAlf,KAAA4jD,gBAAAO,GAEArd,OAAA,SAAA4c,GAQA,IAPA,IAAA7e,EAAA7kC,KAAA2jD,SAEAQ,GADAtf,EAAA/lC,OACAkB,KAAA4jD,iBACAQ,EAAApkD,KAAA6jD,eACA/D,EAAA9/C,KAAA+/C,UACAC,EAAAF,EAAAhhD,OAEAmmB,EAAA,EAAA4H,EAAArsB,UAAA1B,OAA2CmmB,IAAA4H,IAAS5H,EAAA,CACpD,IAAA2B,EAAApmB,UAAAykB,GACAuT,EAAA5R,EAAA4R,KACAj4B,EAAA6jD,EAAA5rB,GAEA,QAAAp5B,IAAAmB,MAAA4jD,EAAA,CAEA,IAAAS,EAAAT,IACAU,EAAAhgB,EAAA+f,GACAR,EAAAS,EAAArsB,MAAAj4B,EACAskC,EAAAtkC,GAAAskD,EACAT,EAAA5rB,GAAAosB,EACA/f,EAAA+f,GAAAh+B,EAEA,QAAAqC,EAAA,EAAAxe,EAAAu1C,EAAwC/2B,IAAAxe,IAASwe,EAAA,CACjD,IAAAy7B,EAAA5E,EAAA72B,GACA67B,EAAAJ,EAAAE,GACA7D,EAAA2D,EAAAnkD,GACAmkD,EAAAnkD,GAAAukD,EACAJ,EAAAE,GAAA7D,IAMA/gD,KAAA4jD,gBAAAO,GAGAY,QAAA,SAAArB,GAQA,IAPA,IAAA7e,EAAA7kC,KAAA2jD,SACAO,EAAArf,EAAA/lC,OACAqlD,EAAAnkD,KAAA4jD,gBACAQ,EAAApkD,KAAA6jD,eACA/D,EAAA9/C,KAAA+/C,UACAC,EAAAF,EAAAhhD,OAEAmmB,EAAA,EAAA4H,EAAArsB,UAAA1B,OAA2CmmB,IAAA4H,IAAS5H,EAAA,CACpD,IACAuT,EADAh4B,UAAAykB,GACAuT,KACAj4B,EAAA6jD,EAAA5rB,GAEA,QAAAp5B,IAAAmB,EAGA,UAFA6jD,EAAA5rB,GAEAj4B,EAAA4jD,EAAA,CAEA,IAAAK,IAAAL,EACAM,EAAA5f,EAAA2f,GAEAQ,EAAAngB,EADAogB,IAAAf,GAGAE,EAAAK,EAAAjsB,MAAAj4B,EACAskC,EAAAtkC,GAAAkkD,EAEAL,EAAAY,EAAAxsB,MAAAgsB,EACA3f,EAAA2f,GAAAQ,EACAngB,EAAA4b,MAEA,QAAAx3B,EAAA,EAAAxe,EAAAu1C,EAA0C/2B,IAAAxe,IAASwe,EAAA,CACnD,IACA07B,GADAD,EAAA5E,EAAA72B,IACAu7B,GACAU,EAAAR,EAAAO,GACAP,EAAAnkD,GAAAokD,EACAD,EAAAF,GAAAU,EACAR,EAAAjE,WAEW,CAEX,IAAAwE,EAEAb,GADAY,EAAAngB,EADAogB,IAAAf,IAEA1rB,MAAAj4B,EACAskC,EAAAtkC,GAAAykD,EACAngB,EAAA4b,MAEA,IAAAx3B,EAAA,EAAAxe,EAAAu1C,EAA0C/2B,IAAAxe,IAASwe,EAAA,CACnD,IAAAy7B,KAAA5E,EAAA72B,IACA1oB,GAAAmkD,EAAAO,GACAP,EAAAjE,QASAzgD,KAAA4jD,gBAAAO,GAGAgB,WAAA,SAAA5D,EAAAC,GAGA,IAAA4D,EAAAplD,KAAAgkD,uBACAzjD,EAAA6kD,EAAA7D,GACAzB,EAAA9/C,KAAA+/C,UACA,QAAA3gD,IAAAmB,EAAA,OAAAu/C,EAAAv/C,GACA,IAAA8jD,EAAArkD,KAAA8jD,OACAQ,EAAAtkD,KAAA+jD,aACAlf,EAAA7kC,KAAA2jD,SACAO,EAAArf,EAAA/lC,OACAqlD,EAAAnkD,KAAA4jD,gBACAc,EAAA,IAAA9lD,MAAAslD,GACA3jD,EAAAu/C,EAAAhhD,OACAsmD,EAAA7D,GAAAhhD,EACA8jD,EAAA/nB,KAAAilB,GACA+C,EAAAhoB,KAAAklB,GACA1B,EAAAxjB,KAAAooB,GAEA,QAAAz/B,EAAAk/B,EAAAt3B,EAAAgY,EAAA/lC,OAAsDmmB,IAAA4H,IAAS5H,EAAA,CAC/D,IAAA2B,EAAAie,EAAA5f,GACAy/B,EAAAz/B,GAAA,IAAA1mB,EAAAmjD,gBAAA96B,EAAA26B,EAAAC,GAGA,OAAAkD,GAEAW,aAAA,SAAA9D,GAGA,IAAA6D,EAAAplD,KAAAgkD,uBACAzjD,EAAA6kD,EAAA7D,GAEA,QAAAniD,IAAAmB,EAAA,CACA,IAAA8jD,EAAArkD,KAAA8jD,OACAQ,EAAAtkD,KAAA+jD,aACAjE,EAAA9/C,KAAA+/C,UACAuF,EAAAxF,EAAAhhD,OAAA,EACAymD,EAAAzF,EAAAwF,GAEAF,EADA7D,EAAA+D,IACA/kD,EACAu/C,EAAAv/C,GAAAglD,EACAzF,EAAAW,MACA6D,EAAA/jD,GAAA+jD,EAAAgB,GACAhB,EAAA7D,MACA4D,EAAA9jD,GAAA8jD,EAAAiB,GACAjB,EAAA5D,SAWAliD,EAAA29C,eAAA,CAEAsJ,WAAA,SAAAp4C,EAAAq4C,EAAAC,GACA,OAAAnnD,EAAA29C,eAAAyJ,aAAAv4C,GACA,IAAAA,EAAApE,YAAAoE,EAAAw4C,SAAAH,EAAAC,IAGAt4C,EAAAxB,MAAA65C,EAAAC,IAGAG,aAAA,SAAAz4C,EAAA60B,EAAA6jB,GACA,OAAA14C,IACA04C,GAAA14C,EAAApE,cAAAi5B,EAAA70B,EAEA,kBAAA60B,EAAA8jB,kBACA,IAAA9jB,EAAA70B,GAGAxO,MAAAe,UAAAiM,MAAAhL,KAAAwM,IAEAu4C,aAAA,SAAA/+B,GACA,OAAAo/B,YAAAC,OAAAr/B,mBAAAs/B,WAGA/J,iBAAA,SAAA5C,GAQA,IAHA,IAAA1sB,EAAA0sB,EAAAz6C,OACAslB,EAAA,IAAAxlB,MAAAiuB,GAEA5H,EAAA,EAAqBA,IAAA4H,IAAS5H,EAC9Bb,EAAAa,KAIA,OADAb,EAAAugB,KAXA,SAAA1f,EAAAgE,GACA,OAAAswB,EAAAt0B,GAAAs0B,EAAAtwB,KAWA7E,GAGAg4B,YAAA,SAAAhd,EAAA7X,EAAAvP,GAIA,IAHA,IAAAmuC,EAAA/mB,EAAAtgC,OACAslB,EAAA,IAAAgb,EAAAp2B,YAAAm9C,GAEAlhC,EAAA,EAAAzJ,EAAA,EAAoCA,IAAA2qC,IAAuBlhC,EAG3D,IAFA,IAAAmhC,EAAApuC,EAAAiN,GAAAsC,EAEA0B,EAAA,EAAuBA,IAAA1B,IAAc0B,EACrC7E,EAAA5I,KAAA4jB,EAAAgnB,EAAAn9B,GAIA,OAAA7E,GAGAu5B,YAAA,SAAA0I,EAAA9M,EAAAna,EAAAknB,GAIA,IAHA,IAAArhC,EAAA,EACA0jB,EAAA0d,EAAA,QAEAjnD,IAAAupC,QAAAvpC,IAAAupC,EAAA2d,IACA3d,EAAA0d,EAAAphC,KAGA,QAAA7lB,IAAAupC,EAAA,CAEA,IAAA1/B,EAAA0/B,EAAA2d,GACA,QAAAlnD,IAAA6J,EAEA,GAAArK,MAAAkmC,QAAA77B,GACA,QAGA7J,KAFA6J,EAAA0/B,EAAA2d,MAGA/M,EAAAjd,KAAAqM,EAAA6N,MACApX,EAAA9C,KAAA6jB,MAAA/gB,EAAAn2B,IAGA0/B,EAAA0d,EAAAphC,gBACS7lB,IAAAupC,QACF,QAAAvpC,IAAA6J,EAAAqE,QAEP,QAGAlO,KAFA6J,EAAA0/B,EAAA2d,MAGA/M,EAAAjd,KAAAqM,EAAA6N,MACAvtC,EAAAqE,QAAA8xB,IAAAtgC,SAGA6pC,EAAA0d,EAAAphC,gBACS7lB,IAAAupC,QAGT,QAGAvpC,KAFA6J,EAAA0/B,EAAA2d,MAGA/M,EAAAjd,KAAAqM,EAAA6N,MACApX,EAAA9C,KAAArzB,IAGA0/B,EAAA0d,EAAAphC,gBACS7lB,IAAAupC,MAeTpqC,EAAAq9C,cAAA,SAAAh8C,EAAA25C,EAAAna,EAAAmnB,GACA,QAAAnnD,IAAAQ,EAAA,UAAAX,MAAA,2BAEA,QAAAG,IAAAm6C,GAAA,IAAAA,EAAAz6C,OACA,UAAAG,MAAA,+BAAAW,GAGAI,KAAAJ,OACAI,KAAAu5C,MAAAh7C,EAAA29C,eAAA2J,aAAAtM,EAAAv5C,KAAAwmD,gBACAxmD,KAAAo/B,OAAA7gC,EAAA29C,eAAA2J,aAAAzmB,EAAAp/B,KAAAymD,iBACAzmD,KAAA0mD,iBAAAH,GAAAvmD,KAAA2mD,sBACA3mD,KAAA4mD,WACA5mD,KAAAs7C,YAGA/8C,EAAAq9C,cAAAj8C,UAAA,CACAqJ,YAAAzK,EAAAq9C,cACA4K,eAAAr+B,aACAs+B,gBAAAt+B,aACAw+B,qBAAApoD,EAAAiJ,kBACAq/C,iCAAA,SAAAziC,GACA,WAAA7lB,EAAAoiC,oBAAA3gC,KAAAu5C,MAAAv5C,KAAAo/B,OAAAp/B,KAAA4hD,eAAAx9B,IAEA0iC,+BAAA,SAAA1iC,GACA,WAAA7lB,EAAAqiC,kBAAA5gC,KAAAu5C,MAAAv5C,KAAAo/B,OAAAp/B,KAAA4hD,eAAAx9B,IAEA2iC,+BAAA,SAAA3iC,GACA,WAAA7lB,EAAA8gC,iBAAAr/B,KAAAu5C,MAAAv5C,KAAAo/B,OAAAp/B,KAAA4hD,eAAAx9B,IAEAsiC,iBAAA,SAAAH,GACA,IAAAS,EAEA,OAAAT,GACA,KAAAhoD,EAAAgJ,oBACAy/C,EAAAhnD,KAAA6mD,iCACA,MAEA,KAAAtoD,EAAAiJ,kBACAw/C,EAAAhnD,KAAA8mD,+BACA,MAEA,KAAAvoD,EAAAkJ,kBACAu/C,EAAAhnD,KAAA+mD,+BAIA,QAAA3nD,IAAA4nD,EAgBAhnD,KAAA61C,kBAAAmR,MAhBA,CACA,IAAAC,EAAA,iCAAAjnD,KAAA2hD,cAAA,yBAAA3hD,KAAAJ,KAEA,QAAAR,IAAAY,KAAA61C,kBAAA,CAEA,GAAA0Q,IAAAvmD,KAAA2mD,qBAGA,UAAA1nD,MAAAgoD,GAFAjnD,KAAA0mD,iBAAA1mD,KAAA2mD,sBAMAp8C,QAAAC,KAAAy8C,KAMAC,iBAAA,WACA,OAAAlnD,KAAA61C,mBACA,KAAA71C,KAAA6mD,iCACA,OAAAtoD,EAAAgJ,oBAEA,KAAAvH,KAAA8mD,+BACA,OAAAvoD,EAAAiJ,kBAEA,KAAAxH,KAAA+mD,+BACA,OAAAxoD,EAAAkJ,oBAGAm6C,aAAA,WACA,OAAA5hD,KAAAo/B,OAAAtgC,OAAAkB,KAAAu5C,MAAAz6C,QAGAqoD,MAAA,SAAAC,GACA,OAAAA,EAGA,IAFA,IAAA7N,EAAAv5C,KAAAu5C,MAEAt0B,EAAA,EAAA4H,EAAA0sB,EAAAz6C,OAAyCmmB,IAAA4H,IAAS5H,EAClDs0B,EAAAt0B,IAAAmiC,EAIA,OAAApnD,MAGAkvB,MAAA,SAAAunB,GACA,OAAAA,EAGA,IAFA,IAAA8C,EAAAv5C,KAAAu5C,MAEAt0B,EAAA,EAAA4H,EAAA0sB,EAAAz6C,OAAyCmmB,IAAA4H,IAAS5H,EAClDs0B,EAAAt0B,IAAAwxB,EAIA,OAAAz2C,MAIAq7C,KAAA,SAAAja,EAAAimB,GAMA,IALA,IAAA9N,EAAAv5C,KAAAu5C,MACA+N,EAAA/N,EAAAz6C,OACA2mD,EAAA,EACAC,EAAA4B,EAAA,EAEA7B,IAAA6B,GAAA/N,EAAAkM,GAAArkB,KACAqkB,EAGA,UAAAC,GAAAnM,EAAAmM,GAAA2B,KACA3B,EAKA,KAFAA,EAEA,IAAAD,GAAAC,IAAA4B,EAAA,CAEA7B,GAAAC,IAAAD,GAAAC,EAAAnmD,KAAA2M,IAAAw5C,EAAA,OACA,IAAAn+B,EAAAvnB,KAAA4hD,eACA5hD,KAAAu5C,MAAAh7C,EAAA29C,eAAAsJ,WAAAjM,EAAAkM,EAAAC,GACA1lD,KAAAo/B,OAAA7gC,EAAA29C,eAAAsJ,WAAAxlD,KAAAo/B,OAAAqmB,EAAAl+B,EAAAm+B,EAAAn+B,GAGA,OAAAvnB,MAGA4mD,SAAA,WACA,IAAAW,GAAA,EACArpB,EAAAl+B,KAAA4hD,eAEA1jB,EAAA3+B,KAAAiK,MAAA00B,KAAA,IACA3zB,QAAA2U,MAAA,8BAAAlf,MACAunD,GAAA,GAGA,IAAAhO,EAAAv5C,KAAAu5C,MACAna,EAAAp/B,KAAAo/B,OACAkoB,EAAA/N,EAAAz6C,OAEA,IAAAwoD,IACA/8C,QAAA2U,MAAA,iBAAAlf,MACAunD,GAAA,GAKA,IAFA,IAAAC,EAAA,KAEAviC,EAAA,EAAqBA,IAAAqiC,EAAariC,IAAA,CAClC,IAAAwiC,EAAAlO,EAAAt0B,GAEA,qBAAAwiC,GAAA3T,MAAA2T,GAAA,CACAl9C,QAAA2U,MAAA,6BAAAlf,KAAAilB,EAAAwiC,GACAF,GAAA,EACA,MAGA,UAAAC,KAAAC,EAAA,CACAl9C,QAAA2U,MAAA,oBAAAlf,KAAAilB,EAAAwiC,EAAAD,GACAD,GAAA,EACA,MAGAC,EAAAC,EAGA,QAAAroD,IAAAggC,GACA7gC,EAAA29C,eAAAyJ,aAAAvmB,GACA,CAAAna,EAAA,UAAA4H,EAAAuS,EAAAtgC,OAA4CmmB,IAAA4H,IAAS5H,EAAA,CACrD,IAAAhc,EAAAm2B,EAAAna,GAEA,GAAA6uB,MAAA7qC,GAAA,CACAsB,QAAA2U,MAAA,8BAAAlf,KAAAilB,EAAAhc,GACAs+C,GAAA,EACA,QAMA,OAAAA,GAIAjM,SAAA,WAMA,IALA,IAAA/B,EAAAv5C,KAAAu5C,MACAna,EAAAp/B,KAAAo/B,OACA7X,EAAAvnB,KAAA4hD,eACA8F,EAAA,EAEAziC,EAAA,EAAA4H,EAAA0sB,EAAAz6C,OAAA,EAA2CmmB,GAAA4H,IAAQ5H,EAAA,CACnD,IAAA0iC,GAAA,EACAnR,EAAA+C,EAAAt0B,GAGA,GAAAuxB,IAFA+C,EAAAt0B,EAAA,KAEA,IAAAA,GAAAuxB,MAAA,IAMA,IAJA,IAAAnpC,EAAA4X,EAAAsC,EACAqgC,EAAAv6C,EAAAka,EACAsgC,EAAAx6C,EAAAka,EAEA0B,EAAA,EAAyBA,IAAA1B,IAAc0B,EAAA,CACvC,IAAAhgB,EAAAm2B,EAAA/xB,EAAA4b,GAEA,GAAAhgB,IAAAm2B,EAAAwoB,EAAA3+B,IAAAhgB,IAAAm2B,EAAAyoB,EAAA5+B,GAAA,CACA0+B,GAAA,EACA,OAMA,GAAAA,EAAA,CACA,GAAA1iC,IAAAyiC,EAAA,CACAnO,EAAAmO,GAAAnO,EAAAt0B,GACA,IAAA6iC,EAAA7iC,EAAAsC,EACAwgC,EAAAL,EAAAngC,EAEA,IAAA0B,EAAA,EAA2BA,IAAA1B,IAAc0B,EACzCmW,EAAA2oB,EAAA9+B,GAAAmW,EAAA0oB,EAAA7+B,KAIAy+B,GASA,OALAA,IAAAnO,EAAAz6C,SACAkB,KAAAu5C,MAAAh7C,EAAA29C,eAAAsJ,WAAAjM,EAAA,EAAAmO,GACA1nD,KAAAo/B,OAAA7gC,EAAA29C,eAAAsJ,WAAApmB,EAAA,EAAAsoB,EAAAngC,IAGAvnB,OAIAH,OAAAM,OAAA5B,EAAAq9C,cAAA,CAGAhT,MAAA,SAAA4S,GACA,QAAAp8C,IAAAo8C,EAAAvZ,KACA,UAAAhjC,MAAA,uCAGA,IAAAq+C,EAAA/+C,EAAAq9C,cAAAoM,8BAAAxM,EAAAvZ,MAEA,QAAA7iC,IAAAo8C,EAAAjC,MAAA,CACA,IAAAA,EAAA,GACAna,EAAA,GACA7gC,EAAA29C,eAAAyB,YAAAnC,EAAAuC,KAAAxE,EAAAna,EAAA,SACAoc,EAAAjC,QACAiC,EAAApc,SAIA,YAAAhgC,IAAAk+C,EAAA1U,MACA0U,EAAA1U,MAAA4S,GAGA,IAAA8B,EAAA9B,EAAA57C,KAAA47C,EAAAjC,MAAAiC,EAAApc,OAAAoc,EAAA+K,gBAGA3e,OAAA,SAAA2T,GACA,IACAC,EADA8B,EAAA/B,EAAAvyC,YAGA,QAAA5J,IAAAk+C,EAAA1V,OACA4T,EAAA8B,EAAA1V,OAAA2T,OACO,CAEPC,EAAA,CACA57C,KAAA27C,EAAA37C,KACA25C,MAAAh7C,EAAA29C,eAAA2J,aAAAtK,EAAAhC,MAAA36C,OACAwgC,OAAA7gC,EAAA29C,eAAA2J,aAAAtK,EAAAnc,OAAAxgC,QAEA,IAAA2nD,EAAAhL,EAAA2L,mBAEAX,IAAAhL,EAAAoL,uBACAnL,EAAA+K,iBAMA,OAFA/K,EAAAvZ,KAAAsZ,EAAAoG,cAEAnG,GAEAwM,8BAAA,SAAAC,GACA,OAAAA,EAAAC,eACA,aACA,aACA,YACA,aACA,cACA,OAAA3pD,EAAA89C,oBAEA,aACA,cACA,cACA,cACA,OAAA99C,EAAA6/C,oBAEA,YACA,OAAA7/C,EAAA4pD,mBAEA,iBACA,OAAA5pD,EAAA8/C,wBAEA,WACA,cACA,OAAA9/C,EAAA6pD,qBAEA,aACA,OAAA7pD,EAAA8pD,oBAGA,UAAAppD,MAAA,yBAAAgpD,MAcA1pD,EAAAmjD,gBAAA,SAAAsB,EAAAzB,EAAAC,GACAxhD,KAAAuhD,OACAvhD,KAAAwhD,cAAAjjD,EAAAmjD,gBAAA4G,eAAA/G,GACAvhD,KAAAgnB,KAAAzoB,EAAAmjD,gBAAA6G,SAAAvF,EAAAhjD,KAAAwhD,WAAApE,WAAA4F,EACAhjD,KAAAgjD,YAGAzkD,EAAAmjD,gBAAA/hD,UAAA,CACAqJ,YAAAzK,EAAAmjD,gBACA8G,SAAA,SAAAC,EAAAp7C,GACArN,KAAA0oD,OACA1oD,KAAAwoD,SAAAC,EAAAp7C,IAMAs7C,SAAA,SAAAC,EAAAv7C,GACArN,KAAA0oD,OACA1oD,KAAA2oD,SAAAC,EAAAv7C,IAGAq7C,KAAA,WACA,IAAAG,EAAA7oD,KAAAgnB,KACAw6B,EAAAxhD,KAAAwhD,WACAsH,EAAAtH,EAAAsH,WACArL,EAAA+D,EAAA/D,aACAsL,EAAAvH,EAAAuH,cAWA,GATAF,IACAA,EAAAtqD,EAAAmjD,gBAAA6G,SAAAvoD,KAAAgjD,SAAAxB,EAAApE,WAAAp9C,KAAAgjD,SACAhjD,KAAAgnB,KAAA6hC,GAIA7oD,KAAAwoD,SAAAxoD,KAAAgpD,sBACAhpD,KAAA2oD,SAAA3oD,KAAAipD,sBAEAJ,EAAA,CAKA,GAAAC,EAAA,CACA,IAAAI,EAAA1H,EAAA0H,YAEA,OAAAJ,GACA,gBACA,IAAAD,EAAArgB,SAEA,YADAj+B,QAAA2U,MAAA,8DAAAlf,MAIA,IAAA6oD,EAAArgB,SAAAR,UAEA,YADAz9B,QAAA2U,MAAA,wFAAAlf,MAIA6oD,IAAArgB,SAAAR,UACA,MAEA,YACA,IAAA6gB,EAAAM,SAEA,YADA5+C,QAAA2U,MAAA,2DAAAlf,MAMA6oD,IAAAM,SAAAhM,MAEA,QAAAl4B,EAAA,EAA2BA,EAAA4jC,EAAA/pD,OAAyBmmB,IACpD,GAAA4jC,EAAA5jC,GAAArlB,OAAAspD,EAAA,CACAA,EAAAjkC,EACA,MAIA,MAEA,QACA,QAAA7lB,IAAAypD,EAAAC,GAEA,YADAv+C,QAAA2U,MAAA,kDAAAlf,MAIA6oD,IAAAC,GAGA,QAAA1pD,IAAA8pD,EAAA,CACA,QAAA9pD,IAAAypD,EAAAK,GAEA,YADA3+C,QAAA2U,MAAA,mEAAAlf,KAAA6oD,GAIAA,IAAAK,IAKA,IAAAE,EAAAP,EAAApL,GAEA,QAAAr+C,IAAAgqD,EAAA,CAOA,IAAAC,EAAArpD,KAAAspD,WAAAC,UAEAnqD,IAAAypD,EAAAtf,aAEA8f,EAAArpD,KAAAspD,WAAAE,YACAxpD,KAAA6oD,qBACOzpD,IAAAypD,EAAArjB,yBAEP6jB,EAAArpD,KAAAspD,WAAAG,uBACAzpD,KAAA6oD,gBAIA,IAAAa,EAAA1pD,KAAA2pD,YAAAC,OAEA,QAAAxqD,IAAA2pD,EAAA,CAEA,6BAAAtL,EAAA,CAGA,IAAAoL,EAAA5hC,SAEA,YADA1c,QAAA2U,MAAA,iFAAAlf,MAIA,IAAA6oD,EAAA5hC,SAAAilB,aAEA,YADA3hC,QAAA2U,MAAA,8FAAAlf,MAIA,IAAAilB,EAAA,EAAyBA,EAAAjlB,KAAAgnB,KAAAC,SAAAilB,aAAAptC,OAA4CmmB,IACrE,GAAA4jC,EAAA5hC,SAAAilB,aAAAjnB,GAAArlB,OAAAmpD,EAAA,CACAA,EAAA9jC,EACA,OAKAykC,EAAA1pD,KAAA2pD,YAAAE,aACA7pD,KAAA8pD,iBAAAV,EACAppD,KAAA+oD,0BACO3pD,IAAAgqD,EAAAj8C,gBAAA/N,IAAAgqD,EAAA97C,SAEPo8C,EAAA1pD,KAAA2pD,YAAAI,eACA/pD,KAAA8pD,iBAAAV,QACOhqD,IAAAgqD,EAAAtqD,QACP4qD,EAAA1pD,KAAA2pD,YAAAK,YACAhqD,KAAA8pD,iBAAAV,GAEAppD,KAAAy9C,eAIAz9C,KAAAwoD,SAAAxoD,KAAAiqD,oBAAAP,GACA1pD,KAAA2oD,SAAA3oD,KAAAkqD,iCAAAR,GAAAL,OA7DA,CACA,IAAAjM,EAAAoE,EAAApE,SACA7yC,QAAA2U,MAAA,0CAAAk+B,EAAA,IAAAK,EAAA,wBAAAoL,SAjEAt+C,QAAA2U,MAAA,sCAAAlf,KAAAuhD,KAAA,0BA8HA4I,OAAA,WACAnqD,KAAAgnB,KAAA,KAGAhnB,KAAAwoD,SAAAxoD,KAAAoqD,kBACApqD,KAAA2oD,SAAA3oD,KAAAqqD,oBAGAxqD,OAAAM,OAAA5B,EAAAmjD,gBAAA/hD,UAAA,CAGAqpD,sBAAA,aACAC,sBAAA,aAEAmB,kBAAA7rD,EAAAmjD,gBAAA/hD,UAAA6oD,SACA6B,kBAAA9rD,EAAAmjD,gBAAA/hD,UAAAgpD,SACAgB,YAAA,CACAC,OAAA,EACAI,YAAA,EACAH,aAAA,EACAE,eAAA,GAEAT,WAAA,CACAC,KAAA,EACAC,YAAA,EACAC,uBAAA,GAEAQ,oBAAA,UAAA9gC,EAAA9b,GACA8b,EAAA9b,GAAArN,KAAAgnB,KAAAhnB,KAAAy9C,eACK,SAAAt0B,EAAA9b,GAGL,IAFA,IAAA5M,EAAAT,KAAA8pD,iBAEA7kC,EAAA,EAAA4H,EAAApsB,EAAA3B,OAAwCmmB,IAAA4H,IAAS5H,EACjDkE,EAAA9b,KAAA5M,EAAAwkB,IAEK,SAAAkE,EAAA9b,GACL8b,EAAA9b,GAAArN,KAAA8pD,iBAAA9pD,KAAA+oD,gBACK,SAAA5/B,EAAA9b,GACLrN,KAAA8pD,iBAAAx8C,QAAA6b,EAAA9b,KAEA68C,iCAAA,EACA,SAAA/gC,EAAA9b,GACArN,KAAAgnB,KAAAhnB,KAAAy9C,cAAAt0B,EAAA9b,IACK,SAAA8b,EAAA9b,GACLrN,KAAAgnB,KAAAhnB,KAAAy9C,cAAAt0B,EAAA9b,GACArN,KAAA6oD,aAAAtf,aAAA,GACK,SAAApgB,EAAA9b,GACLrN,KAAAgnB,KAAAhnB,KAAAy9C,cAAAt0B,EAAA9b,GACArN,KAAA6oD,aAAArjB,wBAAA,IACK,CACL,SAAArc,EAAA9b,GAGA,IAFA,IAAAi9C,EAAAtqD,KAAA8pD,iBAEA7kC,EAAA,EAAA4H,EAAAy9B,EAAAxrD,OAAsCmmB,IAAA4H,IAAS5H,EAC/CqlC,EAAArlC,GAAAkE,EAAA9b,MAEK,SAAA8b,EAAA9b,GAGL,IAFA,IAAAi9C,EAAAtqD,KAAA8pD,iBAEA7kC,EAAA,EAAA4H,EAAAy9B,EAAAxrD,OAAsCmmB,IAAA4H,IAAS5H,EAC/CqlC,EAAArlC,GAAAkE,EAAA9b,KAGArN,KAAA6oD,aAAAtf,aAAA,GACK,SAAApgB,EAAA9b,GAGL,IAFA,IAAAi9C,EAAAtqD,KAAA8pD,iBAEA7kC,EAAA,EAAA4H,EAAAy9B,EAAAxrD,OAAsCmmB,IAAA4H,IAAS5H,EAC/CqlC,EAAArlC,GAAAkE,EAAA9b,KAGArN,KAAA6oD,aAAArjB,wBAAA,IACK,CACL,SAAArc,EAAA9b,GACArN,KAAA8pD,iBAAA9pD,KAAA+oD,eAAA5/B,EAAA9b,IACK,SAAA8b,EAAA9b,GACLrN,KAAA8pD,iBAAA9pD,KAAA+oD,eAAA5/B,EAAA9b,GACArN,KAAA6oD,aAAAtf,aAAA,GACK,SAAApgB,EAAA9b,GACLrN,KAAA8pD,iBAAA9pD,KAAA+oD,eAAA5/B,EAAA9b,GACArN,KAAA6oD,aAAArjB,wBAAA,IACK,CACL,SAAArc,EAAA9b,GACArN,KAAA8pD,iBAAA38C,UAAAgc,EAAA9b,IACK,SAAA8b,EAAA9b,GACLrN,KAAA8pD,iBAAA38C,UAAAgc,EAAA9b,GACArN,KAAA6oD,aAAAtf,aAAA,GACK,SAAApgB,EAAA9b,GACLrN,KAAA8pD,iBAAA38C,UAAAgc,EAAA9b,GACArN,KAAA6oD,aAAArjB,wBAAA,OAIAjnC,EAAAmjD,gBAAA6I,UAAA,SAAAC,EAAAjJ,EAAAkJ,GACA,IAAAjJ,EAAAiJ,GAAAlsD,EAAAmjD,gBAAA4G,eAAA/G,GACAvhD,KAAA0qD,aAAAF,EACAxqD,KAAA+/C,UAAAyK,EAAArF,WAAA5D,EAAAC,IAGAjjD,EAAAmjD,gBAAA6I,UAAA5qD,UAAA,CACAqJ,YAAAzK,EAAAmjD,gBAAA6I,UACA/B,SAAA,SAAAp7C,EAAAC,GACArN,KAAA0oD,OAEA,IAAAiC,EAAA3qD,KAAA0qD,aAAA9G,gBACA7C,EAAA/gD,KAAA+/C,UAAA4K,QAEAvrD,IAAA2hD,KAAAyH,SAAAp7C,EAAAC,IAEAs7C,SAAA,SAAAv7C,EAAAC,GAGA,IAFA,IAAAyyC,EAAA9/C,KAAA+/C,UAEA96B,EAAAjlB,KAAA0qD,aAAA9G,gBAAA/2B,EAAAizB,EAAAhhD,OAA0EmmB,IAAA4H,IAAS5H,EACnF66B,EAAA76B,GAAA0jC,SAAAv7C,EAAAC,IAGAq7C,KAAA,WAGA,IAFA,IAAA5I,EAAA9/C,KAAA+/C,UAEA96B,EAAAjlB,KAAA0qD,aAAA9G,gBAAA/2B,EAAAizB,EAAAhhD,OAA0EmmB,IAAA4H,IAAS5H,EACnF66B,EAAA76B,GAAAyjC,QAGAyB,OAAA,WAGA,IAFA,IAAArK,EAAA9/C,KAAA+/C,UAEA96B,EAAAjlB,KAAA0qD,aAAA9G,gBAAA/2B,EAAAizB,EAAAhhD,OAA0EmmB,IAAA4H,IAAS5H,EACnF66B,EAAA76B,GAAAklC,WAKA5rD,EAAAmjD,gBAAAhiB,OAAA,SAAA6e,EAAAgD,EAAAC,GACA,OAAAjD,aAAAhgD,EAAAklD,qBAGA,IAAAllD,EAAAmjD,gBAAA6I,UAAAhM,EAAAgD,EAAAC,GAFA,IAAAjjD,EAAAmjD,gBAAAnD,EAAAgD,EAAAC,IAMAjjD,EAAAmjD,gBAAA4G,eAAA,SAAA/K,GAWA,IAAAqN,EAAA,uGACAC,EAAAD,EAAAlgD,KAAA6yC,GAEA,IAAAsN,EACA,UAAA5rD,MAAA,kCAAAs+C,GAGAsN,EAAAtqD,QAAAqqD,EAAA3F,WACA2F,EAAA3F,YAGA,IAAA6F,EAAA,CAEA1N,SAAAyN,EAAA,GAEA/B,WAAA+B,EAAA,GACA3B,YAAA2B,EAAA,GACApN,aAAAoN,EAAA,GACA9B,cAAA8B,EAAA,KAIA,UAAAC,EAAArN,cAAA,IAAAqN,EAAArN,aAAA3+C,OACA,UAAAG,MAAA,8CAAAs+C,GAGA,OAAAuN,GAGAvsD,EAAAmjD,gBAAA6G,SAAA,SAAAhK,EAAAnB,GACA,IAAAA,GAAA,KAAAA,GAAA,SAAAA,GAAA,MAAAA,IAAA,IAAAA,OAAAmB,EAAA3+C,MAAAw9C,IAAAmB,EAAA/lB,KACA,OAAA+lB,EAIA,GAAAA,EAAA4K,SAAA,CACA,IAYA4B,EAZA,SAAA5B,GACA,QAAAlkC,EAAA,EAAuBA,EAAAkkC,EAAAhM,MAAAr+C,OAA2BmmB,IAAA,CAClD,IAAA8lC,EAAA5B,EAAAhM,MAAAl4B,GAEA,GAAA8lC,EAAAnrD,OAAAw9C,EACA,OAAA2N,EAIA,YAGAC,CAAAzM,EAAA4K,UAEA,GAAA4B,EACA,OAAAA,EAKA,GAAAxM,EAAA5a,SAAA,CACA,IAeAsnB,EAfA,SAAAC,EAAAvnB,GACA,QAAA1e,EAAA,EAAuBA,EAAA0e,EAAA7kC,OAAqBmmB,IAAA,CAC5C,IAAAkmC,EAAAxnB,EAAA1e,GAEA,GAAAkmC,EAAAvrD,OAAAw9C,GAAA+N,EAAA3yB,OAAA4kB,EACA,OAAA+N,EAGA,IAAA/mC,EAAA8mC,EAAAC,EAAAxnB,UACA,GAAAvf,EAAA,OAAAA,EAGA,YAGA8mC,CAAA3M,EAAA5a,UAEA,GAAAsnB,EACA,OAAAA,EAIA,aAcA1sD,EAAAkjD,cAAA,SAAAV,EAAAkH,EAAA/pB,GACAl+B,KAAA+gD,UACA/gD,KAAAk+B,YACA,IACAktB,EADAC,EAAA7f,aAGA,OAAAyc,GACA,iBACAmD,EAAAprD,KAAAsrD,OACA,MAEA,aACA,WACAD,EAAAzsD,MAAAwsD,EAAAprD,KAAAurD,QACA,MAEA,QACAH,EAAAprD,KAAAwrD,MAGAxrD,KAAAmpB,OAAA,IAAAkiC,EAAA,EAAAntB,GAWAl+B,KAAAyrD,iBAAAL,EACAprD,KAAA0rD,iBAAA,EACA1rD,KAAAkgD,SAAA,EACAlgD,KAAAqhD,eAAA,GAGA9iD,EAAAkjD,cAAA9hD,UAAA,CACAqJ,YAAAzK,EAAAkjD,cAEAlH,WAAA,SAAAP,EAAA5f,GAGA,IAAAjR,EAAAnpB,KAAAmpB,OACA5B,EAAAvnB,KAAAk+B,UACA7wB,EAAA2sC,EAAAzyB,IACAokC,EAAA3rD,KAAA0rD,iBAEA,OAAAC,EAAA,CAEA,QAAA1mC,EAAA,EAAuBA,IAAAsC,IAActC,EACrCkE,EAAA9b,EAAA4X,GAAAkE,EAAAlE,GAGA0mC,EAAAvxB,MACO,CAGP,IAAAwxB,EAAAxxB,GADAuxB,GAAAvxB,GAGAp6B,KAAAyrD,iBAAAtiC,EAAA9b,EAAA,EAAAu+C,EAAArkC,GAGAvnB,KAAA0rD,iBAAAC,GAGAxL,MAAA,SAAAnG,GACA,IAAAzyB,EAAAvnB,KAAAk+B,UACA/U,EAAAnpB,KAAAmpB,OACA9b,EAAA2sC,EAAAzyB,IACA6S,EAAAp6B,KAAA0rD,iBACA3K,EAAA/gD,KAAA+gD,QAGA,GAFA/gD,KAAA0rD,iBAAA,EAEAtxB,EAAA,GAEA,IAAAyxB,EAAA,EAAAtkC,EAEAvnB,KAAAyrD,iBAAAtiC,EAAA9b,EAAAw+C,EAAA,EAAAzxB,EAAA7S,GAGA,QAAAtC,EAAAsC,EAAAjI,EAAAiI,IAA+CtC,IAAA3F,IAAS2F,EACxD,GAAAkE,EAAAlE,KAAAkE,EAAAlE,EAAAsC,GAAA,CAEAw5B,EAAA4H,SAAAx/B,EAAA9b,GACA,QAKAy0C,kBAAA,WACA,IAAAf,EAAA/gD,KAAA+gD,QACA53B,EAAAnpB,KAAAmpB,OACA5B,EAAAvnB,KAAAk+B,UACA2tB,EAAA,EAAAtkC,EACAw5B,EAAAyH,SAAAr/B,EAAA0iC,GAEA,QAAA5mC,EAAAsC,EAAAjI,EAAAusC,EAAmD5mC,IAAA3F,IAAS2F,EAC5DkE,EAAAlE,GAAAkE,EAAA0iC,EAAA5mC,EAAAsC,GAGAvnB,KAAA0rD,iBAAA,GAGA1K,qBAAA,WACA,IAAA6K,EAAA,EAAA7rD,KAAAk+B,UACAl+B,KAAA+gD,QAAA4H,SAAA3oD,KAAAmpB,OAAA0iC,IAGAN,QAAA,SAAApiC,EAAA3N,EAAA4qC,EAAAv8C,EAAA0d,GACA,GAAA1d,GAAA,GACA,QAAAob,EAAA,EAAuBA,IAAAsC,IAActC,EACrCkE,EAAA3N,EAAAyJ,GAAAkE,EAAAi9B,EAAAnhC,IAIAqmC,OAAA,SAAAniC,EAAA3N,EAAA4qC,EAAAv8C,EAAA0d,GACAhpB,EAAAmY,WAAA4E,UAAA6N,EAAA3N,EAAA2N,EAAA3N,EAAA2N,EAAAi9B,EAAAv8C,IAEA2hD,MAAA,SAAAriC,EAAA3N,EAAA4qC,EAAAv8C,EAAA0d,GAGA,IAFA,IAAAxd,EAAA,EAAAF,EAEAob,EAAA,EAAqBA,IAAAsC,IAActC,EAAA,CACnC,IAAAgE,EAAAzN,EAAAyJ,EACAkE,EAAAF,GAAAE,EAAAF,GAAAlf,EAAAof,EAAAi9B,EAAAnhC,GAAApb,KAeAtL,EAAA6pD,qBAAA,SAAAxoD,EAAA25C,EAAAna,GACA7gC,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,IAGA7gC,EAAA6pD,qBAAAzoD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA6pD,qBACAzG,cAAA,OACA8E,gBAAA7nD,MACA+nD,qBAAApoD,EAAAgJ,oBACAu/C,oCAAA1nD,EACA2nD,oCAAA3nD,IAgBAb,EAAA4pD,mBAAA,SAAAvoD,EAAA25C,EAAAna,EAAAmnB,GACAhoD,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,EAAAmnB,IAGAhoD,EAAA4pD,mBAAAxoD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA4pD,mBACAxG,cAAA,UAgBApjD,EAAA89C,oBAAA,SAAAz8C,EAAA25C,EAAAna,EAAAmnB,GACAhoD,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,EAAAmnB,IAGAhoD,EAAA89C,oBAAA18C,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA89C,oBACAsF,cAAA,WAcApjD,EAAA8/C,wBAAA,SAAAz+C,EAAA25C,EAAAna,EAAAmnB,GACAhoD,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,EAAAmnB,IAGAhoD,EAAA8/C,wBAAA1+C,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA8/C,wBACAsD,cAAA,aAEAgF,qBAAApoD,EAAAiJ,kBACAs/C,+BAAA,SAAA1iC,GACA,WAAA7lB,EAAA0iC,4BAAAjhC,KAAAu5C,MAAAv5C,KAAAo/B,OAAAp/B,KAAA4hD,eAAAx9B,IAEA2iC,oCAAA3nD,IAcAb,EAAA8pD,oBAAA,SAAAzoD,EAAA25C,EAAAna,EAAAmnB,GACAhoD,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,EAAAmnB,IAGAhoD,EAAA8pD,oBAAA1oD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA8pD,oBACA1G,cAAA,SACA8E,gBAAA7nD,MACA+nD,qBAAApoD,EAAAgJ,oBACAu/C,oCAAA1nD,EACA2nD,oCAAA3nD,IAaAb,EAAA6/C,oBAAA,SAAAx+C,EAAA25C,EAAAna,EAAAmnB,GACAhoD,EAAAq9C,cAAAh7C,KAAAZ,KAAAJ,EAAA25C,EAAAna,EAAAmnB,IAGAhoD,EAAA6/C,oBAAAz+C,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAq9C,cAAAj8C,WAAA,CACAqJ,YAAAzK,EAAA6/C,oBACAuD,cAAA,WAUApjD,EAAAutD,MAAA,SAAA5pB,GACA3jC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,QACAjiC,KAAA+rD,QAAA7pB,EAAA6pB,QACA/rD,KAAAS,OAAAT,KAAA+rD,QAAAC,qBACAhsD,KAAAS,OAAAwrD,QAAAjsD,KAAAksD,QAAAxD,KAAA1oD,MACAA,KAAAmsD,KAAAnsD,KAAA+rD,QAAAK,aACApsD,KAAAmsD,KAAAE,QAAAnqB,EAAAoqB,YACAtsD,KAAAusD,UAAA,EACAvsD,KAAAohC,UAAA,EACAphC,KAAAwsD,aAAA,EACAxsD,KAAAysD,WAAA,EACAzsD,KAAA0sD,oBAAA,EACA1sD,KAAA2sD,WAAA,QACA3sD,KAAA4sD,QAAA,IAGAruD,EAAAutD,MAAAnsD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAutD,MACAe,UAAA,WACA,OAAA7sD,KAAAmsD,MAEAW,cAAA,SAAAC,GAKA,OAJA/sD,KAAA0sD,oBAAA,EACA1sD,KAAA2sD,WAAA,YACA3sD,KAAAS,OAAAssD,EACA/sD,KAAAqsD,UACArsD,MAEAgtD,UAAA,SAAAC,GAIA,OAHAjtD,KAAAS,OAAA0oB,OAAA8jC,EACAjtD,KAAA2sD,WAAA,SACA3sD,KAAAusD,UAAAvsD,KAAAi3C,OACAj3C,MAEAi3C,KAAA,WACA,QAAAj3C,KAAAysD,UAAA,CAKA,QAAAzsD,KAAA0sD,mBAAA,CAKA,IAAAjsD,EAAAT,KAAA+rD,QAAAC,qBAQA,OAPAvrD,EAAA0oB,OAAAnpB,KAAAS,OAAA0oB,OACA1oB,EAAA41C,KAAAr2C,KAAAS,OAAA41C,KACA51C,EAAAwrD,QAAAjsD,KAAAS,OAAAwrD,QACAxrD,EAAAqjB,MAAA,EAAA9jB,KAAAohC,WACA3gC,EAAA+rD,aAAAvjD,MAAAjJ,KAAAwsD,aACAxsD,KAAAysD,WAAA,EACAzsD,KAAAS,SACAT,KAAAqsD,UAZA9hD,QAAAC,KAAA,yDALAD,QAAAC,KAAA,2CAmBA0iD,MAAA,WACA,QAAAltD,KAAA0sD,mBAQA,OAHA1sD,KAAAS,OAAAkhC,OACA3hC,KAAAohC,UAAAphC,KAAA+rD,QAAAoB,YACAntD,KAAAysD,WAAA,EACAzsD,KAPAuK,QAAAC,KAAA,qDASAm3B,KAAA,WACA,QAAA3hC,KAAA0sD,mBAQA,OAHA1sD,KAAAS,OAAAkhC,OACA3hC,KAAAohC,UAAA,EACAphC,KAAAysD,WAAA,EACAzsD,KAPAuK,QAAAC,KAAA,qDASA6hD,QAAA,WACA,GAAArsD,KAAA4sD,QAAA9tD,OAAA,GACAkB,KAAAS,OAAA4rD,QAAArsD,KAAA4sD,QAAA,IAEA,QAAA3nC,EAAA,EAAAjb,EAAAhK,KAAA4sD,QAAA9tD,OAAgDmmB,EAAAjb,EAAOib,IACvDjlB,KAAA4sD,QAAA3nC,EAAA,GAAAonC,QAAArsD,KAAA4sD,QAAA3nC,IAGAjlB,KAAA4sD,QAAA5sD,KAAA4sD,QAAA9tD,OAAA,GAAAutD,QAAArsD,KAAA6sD,kBAEA7sD,KAAAS,OAAA4rD,QAAArsD,KAAA6sD,aAGA,OAAA7sD,MAEAotD,WAAA,WACA,GAAAptD,KAAA4sD,QAAA9tD,OAAA,GACAkB,KAAAS,OAAA2sD,WAAAptD,KAAA4sD,QAAA,IAEA,QAAA3nC,EAAA,EAAAjb,EAAAhK,KAAA4sD,QAAA9tD,OAAgDmmB,EAAAjb,EAAOib,IACvDjlB,KAAA4sD,QAAA3nC,EAAA,GAAAmoC,WAAAptD,KAAA4sD,QAAA3nC,IAGAjlB,KAAA4sD,QAAA5sD,KAAA4sD,QAAA9tD,OAAA,GAAAsuD,WAAAptD,KAAA6sD,kBAEA7sD,KAAAS,OAAA2sD,WAAAptD,KAAA6sD,aAGA,OAAA7sD,MAEAqtD,WAAA,WACA,OAAArtD,KAAA4sD,SAEAU,WAAA,SAAArkD,GAWA,OAVAA,MAAA,KAEA,IAAAjJ,KAAAysD,WACAzsD,KAAAotD,aACAptD,KAAA4sD,QAAA3jD,EACAjJ,KAAAqsD,WAEArsD,KAAA4sD,QAAA3jD,EAGAjJ,MAEAutD,UAAA,WACA,OAAAvtD,KAAAqtD,aAAA,IAEAG,UAAA,SAAAC,GACA,OAAAztD,KAAAstD,WAAAG,EAAA,CAAAA,GAAA,KAEAC,gBAAA,SAAAzkD,GACA,QAAAjJ,KAAA0sD,mBAWA,OANA1sD,KAAAwsD,aAAAvjD,GAEA,IAAAjJ,KAAAysD,YACAzsD,KAAAS,OAAA+rD,aAAAvjD,MAAAjJ,KAAAwsD,cAGAxsD,KAVAuK,QAAAC,KAAA,qDAYAmjD,gBAAA,WACA,OAAA3tD,KAAAwsD,cAEAN,QAAA,WACAlsD,KAAAysD,WAAA,GAEAmB,QAAA,WACA,WAAA5tD,KAAA0sD,oBACAniD,QAAAC,KAAA,qDACA,GAGAxK,KAAAS,OAAA41C,MAEAsB,QAAA,SAAA1uC,IACA,IAAAjJ,KAAA0sD,mBAKA1sD,KAAAS,OAAA41C,KAAAptC,EAJAsB,QAAAC,KAAA,qDAMAqjD,UAAA,WACA,OAAA7tD,KAAAmsD,UAAAljD,OAEA6kD,UAAA,SAAA7kD,GAEA,OADAjJ,KAAAmsD,UAAAljD,QACAjJ,QAQAzB,EAAAwvD,cAAA,SAAAC,EAAAC,GACAjuD,KAAAkuD,SAAAF,EAAAjC,QAAAoC,iBACAnuD,KAAAkuD,SAAAD,aAAA7uD,IAAA6uD,IAAA,KACAjuD,KAAAynB,KAAA,IAAAkjB,WAAA3qC,KAAAkuD,SAAAE,mBACAJ,EAAAnB,YAAAR,QAAArsD,KAAAkuD,WAGAruD,OAAAM,OAAA5B,EAAAwvD,cAAApuD,UAAA,CACA0uD,iBAAA,WAEA,OADAruD,KAAAkuD,SAAAI,qBAAAtuD,KAAAynB,MACAznB,KAAAynB,MAEA8mC,oBAAA,WAIA,IAHA,IAAAtlD,EAAA,EACAwe,EAAAznB,KAAAquD,mBAEAppC,EAAA,EAAqBA,EAAAwC,EAAA3oB,OAAiBmmB,IACtChc,GAAAwe,EAAAxC,GAGA,OAAAhc,EAAAwe,EAAA3oB,UAQAe,OAAAC,eAAAvB,EAAA,gBACAwB,IAAA,WACA,IAAAgsD,EACA,kBAKA,YAJA3sD,IAAA2sD,IACAA,EAAA,IAAAyC,OAAAC,cAAAD,OAAAE,qBAGA3C,GAPA,KAgBAxtD,EAAAowD,gBAAA,SAAAzsB,GACA3jC,EAAAutD,MAAAlrD,KAAAZ,KAAAkiC,GACAliC,KAAA4uD,OAAA5uD,KAAA+rD,QAAA8C,eACA7uD,KAAA4uD,OAAAvC,QAAArsD,KAAAmsD,OAGA5tD,EAAAowD,gBAAAhvD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAutD,MAAAnsD,WAAA,CACAqJ,YAAAzK,EAAAowD,gBACA9B,UAAA,WACA,OAAA7sD,KAAA4uD,QAEAE,eAAA,WACA,OAAA9uD,KAAA4uD,OAAAG,aAEAC,eAAA,SAAA/lD,GACAjJ,KAAA4uD,OAAAG,YAAA9lD,GAEAgmD,iBAAA,WACA,OAAAjvD,KAAA4uD,OAAAM,eAEAC,iBAAA,SAAAlmD,GACAjJ,KAAA4uD,OAAAM,cAAAjmD,GAEAmmD,iBAAA,WACA,OAAApvD,KAAA4uD,OAAAS,eAEAC,iBAAA,SAAArmD,GACAjJ,KAAA4uD,OAAAS,cAAApmD,GAEAsmD,eAAA,WACA,OAAAvvD,KAAA4uD,OAAAY,aAEAC,eAAA,SAAAxmD,GACAjJ,KAAA4uD,OAAAY,YAAAvmD,GAEA6d,kBAAA,WACA,IAAAQ,EAAA,IAAA/oB,EAAA+a,QACA,gBAAAquB,GACAppC,EAAAwmC,SAAAplC,UAAAmnB,kBAAAlmB,KAAAZ,KAAA2nC,GACArgB,EAAArF,sBAAAjiB,KAAAygB,aACAzgB,KAAA4uD,OAAA5/B,YAAA1H,EAAA5nB,EAAA4nB,EAAA3Q,EAAA2Q,EAAA1Q,IALA,KAcArY,EAAAmxD,cAAA,WACAnxD,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,gBACAjiC,KAAA+rD,QAAAxtD,EAAAkwD,aACAzuD,KAAAmsD,KAAAnsD,KAAA+rD,QAAAK,aACApsD,KAAAmsD,KAAAE,QAAArsD,KAAA+rD,QAAA4D,aACA3vD,KAAAytD,OAAA,MAGAlvD,EAAAmxD,cAAA/vD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAmxD,cACApD,SAAA,WACA,OAAAtsD,KAAAmsD,MAEAyD,aAAA,WACA,OAAA5vD,KAAAytD,SACAztD,KAAAmsD,KAAAiB,WAAAptD,KAAAytD,QACAztD,KAAAytD,OAAAL,WAAAptD,KAAA+rD,QAAA4D,aACA3vD,KAAAmsD,KAAAE,QAAArsD,KAAA+rD,QAAA4D,aACA3vD,KAAAytD,OAAA,OAGAF,UAAA,WACA,OAAAvtD,KAAAytD,QAEAD,UAAA,SAAAvkD,GACA,OAAAjJ,KAAAytD,QACAztD,KAAAmsD,KAAAiB,WAAAptD,KAAAytD,QACAztD,KAAAytD,OAAAL,WAAAptD,KAAA+rD,QAAA4D,cAEA3vD,KAAAmsD,KAAAiB,WAAAptD,KAAA+rD,QAAA4D,aAGA3vD,KAAAytD,OAAAxkD,EACAjJ,KAAAmsD,KAAAE,QAAArsD,KAAAytD,QACAztD,KAAAytD,OAAApB,QAAArsD,KAAA+rD,QAAA4D,cAEAE,gBAAA,WACA,OAAA7vD,KAAAmsD,UAAAljD,OAEA6mD,gBAAA,SAAA7mD,GACAjJ,KAAAmsD,UAAAljD,SAEA6d,kBAAA,WACA,IAAAQ,EAAA,IAAA/oB,EAAA+a,QACAnC,EAAA,IAAA5Y,EAAAmY,WACAwY,EAAA,IAAA3wB,EAAA+a,QACAy2C,EAAA,IAAAxxD,EAAA+a,QACA,gBAAAquB,GACAppC,EAAAwmC,SAAAplC,UAAAmnB,kBAAAlmB,KAAAZ,KAAA2nC,GACA,IAAAzF,EAAAliC,KAAA+rD,QAAA7pB,SACAtV,EAAA5sB,KAAA4sB,GACA5sB,KAAAygB,YAAAuP,UAAA1I,EAAAnQ,EAAA+X,GACA6gC,EAAAjnD,IAAA,QAAAqW,gBAAAhI,GACA+qB,EAAAlT,YAAA1H,EAAA5nB,EAAA4nB,EAAA3Q,EAAA2Q,EAAA1Q,GACAsrB,EAAA8tB,eAAAD,EAAArwD,EAAAqwD,EAAAp5C,EAAAo5C,EAAAn5C,EAAAgW,EAAAltB,EAAAktB,EAAAjW,EAAAiW,EAAAhW,IAZA,KAuBArY,EAAA0xD,OAAA,WACA1xD,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,SACAjiC,KAAAkwD,mBAAA,IAAA3xD,EAAA8hB,QACArgB,KAAAugB,iBAAA,IAAAhiB,EAAA8hB,SAGA9hB,EAAA0xD,OAAAtwD,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAA0xD,OAAAtwD,UAAAqJ,YAAAzK,EAAA0xD,OAEA1xD,EAAA0xD,OAAAtwD,UAAA4nC,kBAAA,WACA,IAAApwB,EAAA,IAAA5Y,EAAAmY,WACA,gBAAA5K,GACA,IAAAsY,EAAAtY,GAAA,IAAAvN,EAAA+a,QAEA,OADAtZ,KAAAonC,mBAAAjwB,GACAiN,EAAAtb,IAAA,QAAAqW,gBAAAhI,IALA,GASA5Y,EAAA0xD,OAAAtwD,UAAA+sB,OAAA,WAEA,IAAAkL,EAAA,IAAAr5B,EAAA8hB,QACA,gBAAAe,GACAwW,EAAAlL,OAAA1sB,KAAAsnB,SAAAlG,EAAAphB,KAAA4sB,IACA5sB,KAAAmX,WAAAkB,sBAAAuf,IALA,GASAr5B,EAAA0xD,OAAAtwD,UAAAuL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAGAzB,EAAA0xD,OAAAtwD,UAAAuJ,KAAA,SAAAzI,GAIA,OAHAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAkwD,mBAAAhnD,KAAAzI,EAAAyvD,oBACAlwD,KAAAugB,iBAAArX,KAAAzI,EAAA8f,kBACAvgB,MAWAzB,EAAA4xD,WAAA,SAAA1/B,EAAAC,EAAA0/B,GACA7xD,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,aACA,IAEAouB,EAAA,IAAA9xD,EAAAimC,kBAFA,GACA,EACA/T,EAAAC,GACA2/B,EAAAzjC,GAAA9jB,IAAA,QACAunD,EAAA3jC,OAAA,IAAAnuB,EAAA+a,QAAA,QACAtZ,KAAAuM,IAAA8jD,GACA,IAAAC,EAAA,IAAA/xD,EAAAimC,kBANA,GACA,EAKA/T,EAAAC,GACA4/B,EAAA1jC,GAAA9jB,IAAA,QACAwnD,EAAA5jC,OAAA,IAAAnuB,EAAA+a,SAAA,QACAtZ,KAAAuM,IAAA+jD,GACA,IAAAC,EAAA,IAAAhyD,EAAAimC,kBAVA,GACA,EASA/T,EAAAC,GACA6/B,EAAA3jC,GAAA9jB,IAAA,OACAynD,EAAA7jC,OAAA,IAAAnuB,EAAA+a,QAAA,QACAtZ,KAAAuM,IAAAgkD,GACA,IAAAC,EAAA,IAAAjyD,EAAAimC,kBAdA,GACA,EAaA/T,EAAAC,GACA8/B,EAAA5jC,GAAA9jB,IAAA,QACA0nD,EAAA9jC,OAAA,IAAAnuB,EAAA+a,QAAA,SACAtZ,KAAAuM,IAAAikD,GACA,IAAAC,EAAA,IAAAlyD,EAAAimC,kBAlBA,GACA,EAiBA/T,EAAAC,GACA+/B,EAAA7jC,GAAA9jB,IAAA,QACA2nD,EAAA/jC,OAAA,IAAAnuB,EAAA+a,QAAA,QACAtZ,KAAAuM,IAAAkkD,GACA,IAAAC,EAAA,IAAAnyD,EAAAimC,kBAtBA,GACA,EAqBA/T,EAAAC,GACAggC,EAAA9jC,GAAA9jB,IAAA,QACA4nD,EAAAhkC,OAAA,IAAAnuB,EAAA+a,QAAA,SACAtZ,KAAAuM,IAAAmkD,GACA,IAAAC,EAAA,CACAC,OAAAryD,EAAA8H,UACAwqD,UAAAtyD,EAAA+G,aACAwrD,UAAAvyD,EAAA+G,cAEAtF,KAAA+wD,aAAA,IAAAxyD,EAAAyyD,sBAAAZ,IAAAO,GAEA3wD,KAAAixD,cAAA,SAAAC,EAAAC,GACA,OAAAnxD,KAAAilC,QAAAjlC,KAAA8mB,oBACA,IAAAiqC,EAAA/wD,KAAA+wD,aACAK,EAAAL,EAAAM,QAAAD,gBACAL,EAAAM,QAAAD,iBAAA,EACAL,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAd,EAAAU,GACAA,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAb,EAAAS,GACAA,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAZ,EAAAQ,GACAA,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAX,EAAAO,GACAA,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAV,EAAAM,GACAA,EAAAM,QAAAD,kBACAL,EAAAO,eAAA,EACAJ,EAAAK,OAAAJ,EAAAT,EAAAK,GACAG,EAAAM,gBAAA,QAIAjzD,EAAA4xD,WAAAxwD,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAA4xD,WAAAxwD,UAAAqJ,YAAAzK,EAAA4xD,WAOA5xD,EAAAkmC,mBAAA,SAAApU,EAAAC,EAAAE,EAAAD,EAAAE,EAAAC,GACAnyB,EAAA0xD,OAAArvD,KAAAZ,MACAA,KAAAiiC,KAAA,qBACAjiC,KAAAyxD,KAAA,EACAzxD,KAAA0xD,KAAA,KACA1xD,KAAAqwB,OACArwB,KAAAswB,QACAtwB,KAAAwwB,MACAxwB,KAAAuwB,SACAvwB,KAAAywB,UAAArxB,IAAAqxB,IAAA,GACAzwB,KAAA0wB,SAAAtxB,IAAAsxB,IAAA,IACA1wB,KAAA2xD,0BAGApzD,EAAAkmC,mBAAA9kC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAA0xD,OAAAtwD,WAAA,CACAqJ,YAAAzK,EAAAkmC,mBACAv7B,KAAA,SAAAzI,GAUA,OATAlC,EAAA0xD,OAAAtwD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAqwB,KAAA5vB,EAAA4vB,KACArwB,KAAAswB,MAAA7vB,EAAA6vB,MACAtwB,KAAAwwB,IAAA/vB,EAAA+vB,IACAxwB,KAAAuwB,OAAA9vB,EAAA8vB,OACAvwB,KAAAywB,KAAAhwB,EAAAgwB,KACAzwB,KAAA0wB,IAAAjwB,EAAAiwB,IACA1wB,KAAAyxD,KAAAhxD,EAAAgxD,KACAzxD,KAAA0xD,KAAA,OAAAjxD,EAAAixD,KAAA,KAAA7xD,OAAAM,OAAA,GAAgEM,EAAAixD,MAChE1xD,MAEA4xD,cAAA,SAAAC,EAAAC,EAAApyD,EAAAiX,EAAAgG,EAAAC,GACA5c,KAAA0xD,KAAA,CACAG,YACAC,aACAC,QAAAryD,EACAsyD,QAAAr7C,EACAgG,QACAC,UAEA5c,KAAA2xD,0BAEAM,gBAAA,WACAjyD,KAAA0xD,KAAA,KACA1xD,KAAA2xD,0BAEAA,uBAAA,WACA,IAAAvzC,GAAApe,KAAAswB,MAAAtwB,KAAAqwB,OAAA,EAAArwB,KAAAyxD,MACApzC,GAAAre,KAAAwwB,IAAAxwB,KAAAuwB,SAAA,EAAAvwB,KAAAyxD,MACAS,GAAAlyD,KAAAswB,MAAAtwB,KAAAqwB,MAAA,EACA8hC,GAAAnyD,KAAAwwB,IAAAxwB,KAAAuwB,QAAA,EACAF,EAAA6hC,EAAA9zC,EACAkS,EAAA4hC,EAAA9zC,EACAoS,EAAA2hC,EAAA9zC,EACAkS,EAAA4hC,EAAA9zC,EAEA,UAAAre,KAAA0xD,KAAA,CACA,IAAAU,EAAApyD,KAAAyxD,MAAAzxD,KAAA0xD,KAAA/0C,MAAA3c,KAAA0xD,KAAAG,WACAQ,EAAAryD,KAAAyxD,MAAAzxD,KAAA0xD,KAAA90C,OAAA5c,KAAA0xD,KAAAI,YACAQ,GAAAtyD,KAAAswB,MAAAtwB,KAAAqwB,MAAArwB,KAAA0xD,KAAA/0C,MACA41C,GAAAvyD,KAAAwwB,IAAAxwB,KAAAuwB,QAAAvwB,KAAA0xD,KAAA90C,OAEA0T,GADAD,GAAAiiC,GAAAtyD,KAAA0xD,KAAAK,QAAAK,IACAE,GAAAtyD,KAAA0xD,KAAA/0C,MAAAy1C,GAEA7hC,GADAC,GAAA+hC,GAAAvyD,KAAA0xD,KAAAM,QAAAK,IACAE,GAAAvyD,KAAA0xD,KAAA90C,OAAAy1C,GAGAryD,KAAAugB,iBAAA4Q,iBAAAd,EAAAC,EAAAE,EAAAD,EAAAvwB,KAAAywB,KAAAzwB,KAAA0wB,MAEAkX,OAAA,SAAAC,GACA,IAAApgB,EAAAlpB,EAAAwmC,SAAAplC,UAAAioC,OAAAhnC,KAAAZ,KAAA6nC,GASA,OARApgB,EAAAb,OAAA6qC,KAAAzxD,KAAAyxD,KACAhqC,EAAAb,OAAAyJ,KAAArwB,KAAAqwB,KACA5I,EAAAb,OAAA0J,MAAAtwB,KAAAswB,MACA7I,EAAAb,OAAA4J,IAAAxwB,KAAAwwB,IACA/I,EAAAb,OAAA2J,OAAAvwB,KAAAuwB,OACA9I,EAAAb,OAAA6J,KAAAzwB,KAAAywB,KACAhJ,EAAAb,OAAA8J,IAAA1wB,KAAA0wB,IACA,OAAA1wB,KAAA0xD,OAAAjqC,EAAAb,OAAA8qC,KAAA7xD,OAAAM,OAAA,GAAiEH,KAAA0xD,OACjEjqC,KAWAlpB,EAAAimC,kBAAA,SAAA5T,EAAAC,EAAAJ,EAAAC,GACAnyB,EAAA0xD,OAAArvD,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA4wB,SAAAxxB,IAAAwxB,IAAA,GACA5wB,KAAAyxD,KAAA,EACAzxD,KAAAywB,UAAArxB,IAAAqxB,IAAA,GACAzwB,KAAA0wB,SAAAtxB,IAAAsxB,IAAA,IACA1wB,KAAAwyD,MAAA,GACAxyD,KAAA6wB,YAAAzxB,IAAAyxB,IAAA,EACA7wB,KAAA0xD,KAAA,KACA1xD,KAAAyyD,UAAA,GAEAzyD,KAAA0yD,WAAA,EAEA1yD,KAAA2xD,0BAGApzD,EAAAimC,kBAAA7kC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAA0xD,OAAAtwD,WAAA,CACAqJ,YAAAzK,EAAAimC,kBACAt7B,KAAA,SAAAzI,GAWA,OAVAlC,EAAA0xD,OAAAtwD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA4wB,IAAAnwB,EAAAmwB,IACA5wB,KAAAyxD,KAAAhxD,EAAAgxD,KACAzxD,KAAAywB,KAAAhwB,EAAAgwB,KACAzwB,KAAA0wB,IAAAjwB,EAAAiwB,IACA1wB,KAAAwyD,MAAA/xD,EAAA+xD,MACAxyD,KAAA6wB,OAAApwB,EAAAowB,OACA7wB,KAAA0xD,KAAA,OAAAjxD,EAAAixD,KAAA,KAAA7xD,OAAAM,OAAA,GAAgEM,EAAAixD,MAChE1xD,KAAAyyD,UAAAhyD,EAAAgyD,UACAzyD,KAAA0yD,WAAAjyD,EAAAiyD,WACA1yD,MAWA2yD,eAAA,SAAAC,GAEA,IAAAC,EAAA,GAAA7yD,KAAA8yD,gBAAAF,EACA5yD,KAAA4wB,IAAA,EAAAryB,EAAAgB,KAAA64B,QAAA74B,KAAAwzD,KAAAF,GACA7yD,KAAA2xD,0BAMAqB,eAAA,WACA,IAAAH,EAAAtzD,KAAAwW,IAAA,GAAAxX,EAAAgB,KAAAwxB,QAAA/wB,KAAA4wB,KACA,SAAA5wB,KAAA8yD,gBAAAD,GAEAI,gBAAA,WACA,SAAA10D,EAAAgB,KAAA64B,QAAA74B,KAAAwzD,KAAAxzD,KAAAwW,IAAA,GAAAxX,EAAAgB,KAAAwxB,QAAA/wB,KAAA4wB,KAAA5wB,KAAAyxD,OAEAyB,aAAA,WAEA,OAAAlzD,KAAAyyD,UAAAlzD,KAAAsL,IAAA7K,KAAA6wB,OAAA,IAEAiiC,cAAA,WAEA,OAAA9yD,KAAAyyD,UAAAlzD,KAAA2M,IAAAlM,KAAA6wB,OAAA,IAsCA+gC,cAAA,SAAAC,EAAAC,EAAApyD,EAAAiX,EAAAgG,EAAAC,GACA5c,KAAA6wB,OAAAghC,EAAAC,EACA9xD,KAAA0xD,KAAA,CACAG,YACAC,aACAC,QAAAryD,EACAsyD,QAAAr7C,EACAgG,QACAC,UAEA5c,KAAA2xD,0BAEAM,gBAAA,WACAjyD,KAAA0xD,KAAA,KACA1xD,KAAA2xD,0BAEAA,uBAAA,WACA,IAAAlhC,EAAAzwB,KAAAywB,KACAD,EAAAC,EAAAlxB,KAAAwW,IAAA,GAAAxX,EAAAgB,KAAAwxB,QAAA/wB,KAAA4wB,KAAA5wB,KAAAyxD,KACA70C,EAAA,EAAA4T,EACA7T,EAAA3c,KAAA6wB,OAAAjU,EACAyT,GAAA,GAAA1T,EACA+0C,EAAA1xD,KAAA0xD,KAEA,UAAAA,EAAA,CACA,IAAAG,EAAAH,EAAAG,UACAC,EAAAJ,EAAAI,WACAzhC,GAAAqhC,EAAAK,QAAAp1C,EAAAk1C,EACArhC,GAAAkhC,EAAAM,QAAAp1C,EAAAk1C,EACAn1C,GAAA+0C,EAAA/0C,MAAAk1C,EACAj1C,GAAA80C,EAAA90C,OAAAk1C,EAGA,IAAAqB,EAAAnzD,KAAA0yD,WACA,IAAAS,IAAA9iC,GAAAI,EAAA0iC,EAAAnzD,KAAAkzD,gBACAlzD,KAAAugB,iBAAA6P,YAAAC,IAAA1T,EAAA6T,EAAA5T,EAAA4T,EAAAC,EAAAzwB,KAAA0wB,MAEAkX,OAAA,SAAAC,GACA,IAAApgB,EAAAlpB,EAAAwmC,SAAAplC,UAAAioC,OAAAhnC,KAAAZ,KAAA6nC,GAUA,OATApgB,EAAAb,OAAAgK,IAAA5wB,KAAA4wB,IACAnJ,EAAAb,OAAA6qC,KAAAzxD,KAAAyxD,KACAhqC,EAAAb,OAAA6J,KAAAzwB,KAAAywB,KACAhJ,EAAAb,OAAA8J,IAAA1wB,KAAA0wB,IACAjJ,EAAAb,OAAA4rC,MAAAxyD,KAAAwyD,MACA/qC,EAAAb,OAAAiK,OAAA7wB,KAAA6wB,OACA,OAAA7wB,KAAA0xD,OAAAjqC,EAAAb,OAAA8qC,KAAA7xD,OAAAM,OAAA,GAAiEH,KAAA0xD,OACjEjqC,EAAAb,OAAA6rC,UAAAzyD,KAAAyyD,UACAhrC,EAAAb,OAAA8rC,WAAA1yD,KAAA0yD,WACAjrC,KAQAlpB,EAAA60D,aAAA,WACApzD,KAAAiiC,KAAA,eACAjiC,KAAA6wB,OAAA,EACA7wB,KAAAqzD,QAAA,IAAA90D,EAAAimC,kBACAxkC,KAAAqzD,QAAAlwB,OAAAJ,OAAA,GACA/iC,KAAAqzD,QAAA/tB,kBAAA,EACAtlC,KAAAszD,QAAA,IAAA/0D,EAAAimC,kBACAxkC,KAAAszD,QAAAnwB,OAAAJ,OAAA,GACA/iC,KAAAszD,QAAAhuB,kBAAA,GAGAzlC,OAAAM,OAAA5B,EAAA60D,aAAAzzD,UAAA,CACA2X,OAAA,WACA,IAAAk7C,EAAA5hC,EAAAC,EAAAJ,EAAAC,EACA6iC,EAAA,IAAAh1D,EAAA8hB,QACAmzC,EAAA,IAAAj1D,EAAA8hB,QACA,gBAAAD,GAGA,GAFAoyC,IAAApyC,EAAAoyC,OAAA5hC,IAAAxQ,EAAAwQ,KAAAC,IAAAzQ,EAAAyQ,OAAA7wB,KAAA6wB,QAAAJ,IAAArQ,EAAAqQ,MAAAC,IAAAtQ,EAAAsQ,IAEA,CACA8hC,EAAApyC,EAAAoyC,MACA5hC,EAAAxQ,EAAAwQ,IACAC,EAAAzQ,EAAAyQ,OAAA7wB,KAAA6wB,OACAJ,EAAArQ,EAAAqQ,KACAC,EAAAtQ,EAAAsQ,IAGA,IAIAO,EAAAC,EAJA3Q,EAAAH,EAAAG,iBAAArV,QAEAuoD,EADA,KACAhjC,EAAA+hC,EACA1hC,EAAAL,EAAAlxB,KAAAwW,IAAAxX,EAAAgB,KAAAwxB,QAAAH,EAAA,IAGA4iC,EAAAj7C,SAAA,KALA,KAMAg7C,EAAAh7C,SAAA,IANA,KAQA0Y,GAAAH,EAAAD,EAAA4iC,EACAviC,EAAAJ,EAAAD,EAAA4iC,EACAlzC,EAAAhI,SAAA,KAAAkY,GAAAS,EAAAD,GACA1Q,EAAAhI,SAAA,IAAA2Y,EAAAD,IAAAC,EAAAD,GACAjxB,KAAAqzD,QAAA9yC,iBAAArX,KAAAqX,GAEA0Q,GAAAH,EAAAD,EAAA4iC,EACAviC,EAAAJ,EAAAD,EAAA4iC,EACAlzC,EAAAhI,SAAA,KAAAkY,GAAAS,EAAAD,GACA1Q,EAAAhI,SAAA,IAAA2Y,EAAAD,IAAAC,EAAAD,GACAjxB,KAAAszD,QAAA/yC,iBAAArX,KAAAqX,GAGAvgB,KAAAqzD,QAAA5yC,YAAAvX,KAAAkX,EAAAK,aAAA5T,SAAA2mD,GACAxzD,KAAAszD,QAAA7yC,YAAAvX,KAAAkX,EAAAK,aAAA5T,SAAA0mD,IAtCA,KAgDAh1D,EAAAm1D,MAAA,SAAA/oD,EAAAgpD,GACAp1D,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,QACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAAiC,GACA3K,KAAA2zD,eAAAv0D,IAAAu0D,IAAA,EACA3zD,KAAA0lC,mBAAAtmC,GAGAb,EAAAm1D,MAAA/zD,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAm1D,MACAxqD,KAAA,SAAAzI,GAIA,OAHAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAA2zD,UAAAlzD,EAAAkzD,UACA3zD,MAEA4nC,OAAA,SAAAC,GACA,IAAApgB,EAAAlpB,EAAAwmC,SAAAplC,UAAAioC,OAAAhnC,KAAAZ,KAAA6nC,GAQA,OAPApgB,EAAAb,OAAAjc,MAAA3K,KAAA2K,MAAAe,SACA+b,EAAAb,OAAA+sC,UAAA3zD,KAAA2zD,eACAv0D,IAAAY,KAAA4zD,cAAAnsC,EAAAb,OAAAgtC,YAAA5zD,KAAA4zD,YAAAloD,eACAtM,IAAAY,KAAAkkB,WAAAuD,EAAAb,OAAA1C,SAAAlkB,KAAAkkB,eACA9kB,IAAAY,KAAAmY,QAAAsP,EAAAb,OAAAzO,MAAAnY,KAAAmY,YACA/Y,IAAAY,KAAA6zD,QAAApsC,EAAAb,OAAAitC,MAAA7zD,KAAA6zD,YACAz0D,IAAAY,KAAA8zD,WAAArsC,EAAAb,OAAAktC,SAAA9zD,KAAA8zD,UACArsC,KAQAlpB,EAAAw1D,YAAA,SAAA3zC,GACApgB,KAAAogB,SACApgB,KAAAg0D,KAAA,EACAh0D,KAAAgiB,OAAA,EACAhiB,KAAAi0D,QAAA,IAAA11D,EAAAme,QAAA,SACA1c,KAAAk0D,IAAA,KACAl0D,KAAAmgB,OAAA,IAAA5hB,EAAA8hB,SAGAxgB,OAAAM,OAAA5B,EAAAw1D,YAAAp0D,UAAA,CACAuJ,KAAA,SAAAzI,GAKA,OAJAT,KAAAogB,OAAA3f,EAAA2f,OAAAlV,QACAlL,KAAAg0D,KAAAvzD,EAAAuzD,KACAh0D,KAAAgiB,OAAAvhB,EAAAuhB,OACAhiB,KAAAi0D,QAAA/qD,KAAAzI,EAAAwzD,SACAj0D,MAEAkL,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,SAQAzB,EAAA41D,aAAA,SAAAxpD,EAAAgpD,GACAp1D,EAAAm1D,MAAA9yD,KAAAZ,KAAA2K,EAAAgpD,GACA3zD,KAAAiiC,KAAA,eACAjiC,KAAAylC,gBAAArmC,GAGAb,EAAA41D,aAAAx0D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAm1D,MAAA/zD,WAAA,CACAqJ,YAAAzK,EAAA41D,eAQA51D,EAAA61D,iBAAA,SAAAzpD,EAAAgpD,GACAp1D,EAAAm1D,MAAA9yD,KAAAZ,KAAA2K,EAAAgpD,GACA3zD,KAAAiiC,KAAA,mBACAjiC,KAAAsnB,SAAApe,KAAA3K,EAAAwmC,SAAAG,WACAllC,KAAA0nC,eACA1nC,KAAAI,OAAA,IAAA7B,EAAAwmC,SACA/kC,KAAAq0D,OAAA,IAAA91D,EAAA+1D,wBAGA/1D,EAAA61D,iBAAAz0D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAm1D,MAAA/zD,WAAA,CACAqJ,YAAAzK,EAAA61D,iBACAlrD,KAAA,SAAAzI,GAIA,OAHAlC,EAAAm1D,MAAA/zD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAI,OAAAK,EAAAL,OAAA8K,QACAlL,KAAAq0D,OAAA5zD,EAAA4zD,OAAAnpD,QACAlL,QAQAzB,EAAA+1D,uBAAA,SAAAC,GACAh2D,EAAAw1D,YAAAnzD,KAAAZ,KAAA,IAAAzB,EAAAkmC,oBAAA,mBAGAlmC,EAAA+1D,uBAAA30D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAw1D,YAAAp0D,WAAA,CACAqJ,YAAAzK,EAAA+1D,yBAOA/1D,EAAAi2D,gBAAA,SAAAC,EAAAb,EAAAD,GACAp1D,EAAAm1D,MAAA9yD,KAAAZ,KAAAy0D,EAAAd,GACA3zD,KAAAiiC,KAAA,kBACAjiC,KAAAylC,gBAAArmC,EACAY,KAAAsnB,SAAApe,KAAA3K,EAAAwmC,SAAAG,WACAllC,KAAA0nC,eACA1nC,KAAA4zD,YAAA,IAAAr1D,EAAAmK,MAAAkrD,IAGAr1D,EAAAi2D,gBAAA70D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAm1D,MAAA/zD,WAAA,CACAqJ,YAAAzK,EAAAi2D,gBACAtrD,KAAA,SAAAzI,GAGA,OAFAlC,EAAAm1D,MAAA/zD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA4zD,YAAA1qD,KAAAzI,EAAAmzD,aACA5zD,QAQAzB,EAAAm2D,WAAA,SAAA/pD,EAAAgpD,EAAAzvC,EAAA2vC,GACAt1D,EAAAm1D,MAAA9yD,KAAAZ,KAAA2K,EAAAgpD,GACA3zD,KAAAiiC,KAAA,aACApiC,OAAAC,eAAAE,KAAA,SACAD,IAAA,WAGA,SAAAC,KAAA2zD,UAAAp0D,KAAA0e,IAEAnV,IAAA,SAAA6rD,GAGA30D,KAAA2zD,UAAAgB,GAAA,EAAAp1D,KAAA0e,OAGAje,KAAAkkB,cAAA9kB,IAAA8kB,IAAA,EACAlkB,KAAA6zD,WAAAz0D,IAAAy0D,IAAA,EAEA7zD,KAAAq0D,OAAA,IAAA91D,EAAAw1D,YAAA,IAAAx1D,EAAAimC,kBAAA,eAGAjmC,EAAAm2D,WAAA/0D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAm1D,MAAA/zD,WAAA,CACAqJ,YAAAzK,EAAAm2D,WACAxrD,KAAA,SAAAzI,GAKA,OAJAlC,EAAAm1D,MAAA/zD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAkkB,SAAAzjB,EAAAyjB,SACAlkB,KAAA6zD,MAAApzD,EAAAozD,MACA7zD,KAAAq0D,OAAA5zD,EAAA4zD,OAAAnpD,QACAlL,QAQAzB,EAAAq2D,UAAA,SAAAjqD,EAAAgpD,EAAAzvC,EAAA/L,EAAA27C,EAAAD,GACAt1D,EAAAm1D,MAAA9yD,KAAAZ,KAAA2K,EAAAgpD,GACA3zD,KAAAiiC,KAAA,YACAjiC,KAAAsnB,SAAApe,KAAA3K,EAAAwmC,SAAAG,WACAllC,KAAA0nC,eACA1nC,KAAAI,OAAA,IAAA7B,EAAAwmC,SACAllC,OAAAC,eAAAE,KAAA,SACAD,IAAA,WAGA,OAAAC,KAAA2zD,UAAAp0D,KAAA0e,IAEAnV,IAAA,SAAA6rD,GAGA30D,KAAA2zD,UAAAgB,EAAAp1D,KAAA0e,MAGAje,KAAAkkB,cAAA9kB,IAAA8kB,IAAA,EACAlkB,KAAAmY,WAAA/Y,IAAA+Y,IAAA5Y,KAAA0e,GAAA,EACAje,KAAA8zD,cAAA10D,IAAA00D,IAAA,EACA9zD,KAAA6zD,WAAAz0D,IAAAy0D,IAAA,EAEA7zD,KAAAq0D,OAAA,IAAA91D,EAAAs2D,iBAGAt2D,EAAAq2D,UAAAj1D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAm1D,MAAA/zD,WAAA,CACAqJ,YAAAzK,EAAAq2D,UACA1rD,KAAA,SAAAzI,GAQA,OAPAlC,EAAAm1D,MAAA/zD,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAkkB,SAAAzjB,EAAAyjB,SACAlkB,KAAAmY,MAAA1X,EAAA0X,MACAnY,KAAA8zD,SAAArzD,EAAAqzD,SACA9zD,KAAA6zD,MAAApzD,EAAAozD,MACA7zD,KAAAI,OAAAK,EAAAL,OAAA8K,QACAlL,KAAAq0D,OAAA5zD,EAAA4zD,OAAAnpD,QACAlL,QAQAzB,EAAAs2D,gBAAA,WACAt2D,EAAAw1D,YAAAnzD,KAAAZ,KAAA,IAAAzB,EAAAimC,kBAAA,eAGAjmC,EAAAs2D,gBAAAl1D,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAw1D,YAAAp0D,WAAA,CACAqJ,YAAAzK,EAAAs2D,gBACAv9C,OAAA,SAAAi9C,GACA,IAAA3jC,EAAA,EAAAryB,EAAAgB,KAAA64B,QAAAm8B,EAAAp8C,MACA0Y,EAAA7wB,KAAAi0D,QAAAt3C,MAAA3c,KAAAi0D,QAAAr3C,OACA8T,EAAA6jC,EAAArwC,UAAA,IACA9D,EAAApgB,KAAAogB,OAEAwQ,IAAAxQ,EAAAwQ,KAAAC,IAAAzQ,EAAAyQ,QAAAH,IAAAtQ,EAAAsQ,MACAtQ,EAAAwQ,MACAxQ,EAAAyQ,SACAzQ,EAAAsQ,MACAtQ,EAAAuxC,6BASApzD,EAAAu2D,YAAA,SAAAC,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAAu2D,YAAAn1D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SACAO,EAAAE,gBAAA,eACAF,EAAAL,KAAAC,EAAA,SAAA/rC,GACA5qB,EAAAkwD,aACAgH,gBAAAtsC,EAAA,SAAA8jC,GACAkI,EAAAlI,MAEOmI,EAAAC,MAQP92D,EAAAm3D,MAAA,CACA7jB,SAAA,EACA8jB,MAAA,GACAppD,IAAA,SAAAo8B,EAAAitB,IACA,IAAA51D,KAAA6xC,UAEA7xC,KAAA21D,MAAAhtB,GAAAitB,IAEA71D,IAAA,SAAA4oC,GACA,QAAA3oC,KAAA6xC,QAEA,OAAA7xC,KAAA21D,MAAAhtB,IAEA7B,OAAA,SAAA6B,UACA3oC,KAAA21D,MAAAhtB,IAEAktB,MAAA,WACA71D,KAAA21D,MAAA,KAQAp3D,EAAAu3D,OAAA,WACA91D,KAAA+1D,YAAA,aAEA/1D,KAAAg2D,eAAA,aAEAh2D,KAAAi2D,eAAA,cAGA13D,EAAAu3D,OAAAn2D,UAAA,CACAqJ,YAAAzK,EAAAu3D,OACAI,iBAAA92D,EACA+2D,eAAA,SAAAjB,GACA,IAAApY,EAAAoY,EAAA38B,MAAA,KACA,WAAAukB,EAAAh+C,OAAA,MACAg+C,EAAA2D,MACA3D,EAAAnkB,KAAA,WAEAy9B,cAAA,SAAApuB,EAAAquB,EAAAH,GAGA,IAFA,IAAA9oD,EAAA,GAEA6X,EAAA,EAAqBA,EAAA+iB,EAAAlpC,SAAsBmmB,EAC3C7X,EAAA6X,GAAAjlB,KAAAs2D,eAAAtuB,EAAA/iB,GAAAoxC,EAAAH,GAGA,OAAA9oD,GAEAkpD,eAAA,WACA,IAAA3rD,EAAA4rD,EAAAC,EACA,gBAAA/rD,EAAA4rD,EAAAH,QACA92D,IAAAuL,MAAA,IAAApM,EAAAmK,YACAtJ,IAAAm3D,MAAA,IAAAh4D,EAAAk4D,oBACAr3D,IAAAo3D,MAAA,IAAAj4D,EAAAm4D,gBAEA,IAAAzuB,EAAA,GAEA,SAAA0uB,EAAApV,EAAAqV,EAAAvpD,EAAAwpD,EAAAC,GACA,IAEAzF,EAFA0F,EAAAV,EAAA9U,EACA+T,EAAA/2D,EAAAu3D,OAAAkB,SAAAj3D,IAAAg3D,GAGA,OAAAzB,EACAjE,EAAAiE,EAAAL,KAAA8B,IAEAR,EAAAU,eAAAf,GACA7E,EAAAkF,EAAAtB,KAAA8B,SAGA33D,IAAAw3D,IACAvF,EAAAuF,OAAAzpD,UAAAypD,GACA,IAAAA,EAAA,KAAAvF,EAAA6F,MAAA34D,EAAAyG,gBACA,IAAA4xD,EAAA,KAAAvF,EAAA8F,MAAA54D,EAAAyG,sBAGA5F,IAAAiO,GACAgkD,EAAAhkD,OAAAF,UAAAE,QAGAjO,IAAAy3D,IACA,WAAAA,EAAA,KAAAxF,EAAA6F,MAAA34D,EAAAyG,gBACA,WAAA6xD,EAAA,KAAAxF,EAAA6F,MAAA34D,EAAA2G,wBACA,WAAA2xD,EAAA,KAAAxF,EAAA8F,MAAA54D,EAAAyG,gBACA,WAAA6xD,EAAA,KAAAxF,EAAA8F,MAAA54D,EAAA2G,8BAGA9F,IAAA03D,IACAzF,EAAAyF,cAGA,IAAAt+B,EAAAj6B,EAAAgB,KAAA84B,eAEA,OADA4P,EAAAzP,GAAA64B,EACA74B,EAIA,IAAAgjB,EAAA,CACAhjB,KAAAj6B,EAAAgB,KAAA84B,eACA4J,KAAA,uBAGA,QAAAriC,KAAA6K,EAAA,CACA,IAAAxB,EAAAwB,EAAA7K,GAEA,OAAAA,GACA,eACA,eACA,qBACA,mBACA,MAEA,cACA47C,EAAA57C,KAAAqJ,EACA,MAEA,eACAuyC,EAAA4b,SAAA74D,EAAA0K,GACA,MAEA,mBACA,iBACAsB,QAAAC,KAAA,+BAAA5K,EAAA,2BACA,MAEA,mBACA47C,EAAA7wC,QAAAwC,UAAAlE,GAAAyC,SACA,MAEA,oBACA8vC,EAAA6b,SAAA1sD,EAAAwC,UAAAlE,GAAAyC,SACA,MAEA,oBACA8vC,EAAA8b,SAAA3sD,EAAAwC,UAAAlE,GAAAyC,SACA,MAEA,mBACA8vC,EAAA+b,UAAAtuD,EACA,MAEA,cACA,UAAAA,EAAAi/C,gBAAA1M,EAAAvZ,KAAA,qBACA,UAAAh5B,EAAAi/C,gBAAA1M,EAAAvZ,KAAA,qBACA,aAAAh5B,EAAAi/C,gBAAA1M,EAAAvZ,KAAA,wBACA,MAEA,iBACAuZ,EAAA0Y,IAAAyC,EAAA1tD,EAAAwB,EAAA+sD,iBAAA/sD,EAAAgtD,iBAAAhtD,EAAAitD,eAAAjtD,EAAAktD,sBACA,MAEA,uBACA,uBACA,qBACA,2BACA,MAEA,kBACAnc,EAAAoc,YAAAjB,EAAA1tD,EAAAwB,EAAAotD,kBAAAptD,EAAAqtD,kBAAArtD,EAAAstD,gBAAAttD,EAAAutD,uBACA,MAEA,wBACA,wBACA,sBACA,4BACA,MAEA,eACAxc,EAAAyc,SAAAtB,EAAA1tD,EAAAwB,EAAAytD,eAAAztD,EAAA0tD,eAAA1tD,EAAA2tD,aAAA3tD,EAAA4tD,oBACA,MAEA,qBACA,qBACA,mBACA,yBACA,MAEA,YACA7c,EAAA8c,MAAA3B,EAAA1tD,EAAAwB,EAAA8tD,YAAA9tD,EAAA+tD,YAAA/tD,EAAAguD,UAAAhuD,EAAAiuD,iBACA,MAEA,kBACA,kBACA,gBACA,sBACA,MAEA,cACAld,EAAAmd,QAAAhC,EAAA1tD,EAAAwB,EAAAmuD,cAAAnuD,EAAAouD,cAAApuD,EAAAquD,YAAAruD,EAAAsuD,mBACA,MAEA,mBACAvd,EAAAwd,UAAA/vD,EACA,MAEA,oBACA,oBACA,kBACA,wBACA,MAEA,gBACAuyC,EAAAyd,UAAAtC,EAAA1tD,EAAAwB,EAAAyuD,gBAAAzuD,EAAA0uD,gBAAA1uD,EAAA2uD,cAAA3uD,EAAA4uD,qBACA,MAEA,sBACA7d,EAAA8d,YAAA,CAAArwD,KACA,MAEA,sBACA,sBACA,oBACA,0BACA,MAEA,kBACAuyC,EAAA+d,YAAA5C,EAAA1tD,EAAAwB,EAAA+uD,kBAAA/uD,EAAAgvD,kBAAAhvD,EAAAivD,gBAAAjvD,EAAAkvD,uBACA,MAEA,wBACA,wBACA,sBACA,4BACA,MAEA,mBACAne,EAAAoe,aAAAjD,EAAA1tD,EAAAwB,EAAAovD,mBAAApvD,EAAAqvD,mBAAArvD,EAAAsvD,iBAAAtvD,EAAAuvD,wBACA,MAEA,yBACA,yBACA,uBACA,6BACA,MAEA,mBACAxe,EAAAye,aAAAtD,EAAA1tD,EAAAwB,EAAAyvD,mBAAAzvD,EAAA0vD,mBAAA1vD,EAAA2vD,iBAAA3vD,EAAA4vD,wBACA,MAEA,yBACA,yBACA,uBACA,6BACA,MAEA,eACA7e,EAAA8e,SAAA3D,EAAA1tD,EAAAwB,EAAA8vD,eAAA9vD,EAAA+vD,eAAA/vD,EAAAgwD,aAAAhwD,EAAAiwD,oBACA,MAEA,qBACA,qBACA,mBACA,yBACA,MAEA,gBACAlf,EAAAmf,KAAAp8D,EAAAoD,SACA,MAEA,kBACA65C,EAAAmf,KAAAp8D,EAAAqD,WACA,MAEA,mBACA2I,QAAAC,KAAA,yEACAgxC,EAAAof,QAAA3xD,EACA,MAEA,gBACA,iBACA,iBACA,cACA,mBACA,kBACA,cACA,gBACAuyC,EAAA57C,GAAAqJ,EACA,MAEA,oBACA,IAAAA,IAAAuyC,EAAAvS,aAAA1qC,EAAA0D,cACA,SAAAgH,IAAAuyC,EAAAvS,aAAA1qC,EAAAyD,YACA,MAEA,QACAuI,QAAA2U,MAAA,2CAAAtf,EAAAqJ,IASA,MAJA,sBAAAuyC,EAAAvZ,aAAAuZ,EAAA8b,SACA,sBAAA9b,EAAAvZ,aAAAuZ,EAAA6b,SACA7b,EAAAof,QAAA,IAAApf,EAAAqf,aAAA,GACArE,EAAAsE,YAAA7yB,GACAuuB,EAAA5tB,MAAA4S,IArPA,IAyPAj9C,EAAAu3D,OAAAkB,SAAA,CACA+D,SAAA,GACAxuD,IAAA,SAAAyuD,EAAA1F,GACAt1D,KAAA+6D,SAAAz+B,KAAA0+B,EAAA1F,IAEAv1D,IAAA,SAAA61D,GAGA,IAFA,IAAAmF,EAAA/6D,KAAA+6D,SAEA91C,EAAA,EAAAjb,EAAA+wD,EAAAj8D,OAA0CmmB,EAAAjb,EAAOib,GAAA,GACjD,IAAA+1C,EAAAD,EAAA91C,GACAqwC,EAAAyF,EAAA91C,EAAA,GAEA,GAAA+1C,EAAA93B,KAAA0yB,GACA,OAAAN,EAIA,cAQA/2D,EAAAg3D,UAAA,SAAAR,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAAg3D,UAAA51D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,QACAj2D,IAAAY,KAAAuhD,OAAA2T,EAAAl1D,KAAAuhD,KAAA2T,GACA,IAAAruC,EAAA7mB,KACAi7D,EAAA18D,EAAAm3D,MAAA31D,IAAAm1D,GAEA,QAAA91D,IAAA67D,EAMA,OALAp0C,EAAAkuC,QAAAmG,UAAAhG,GACAiG,WAAA,WACAhG,KAAA8F,GACAp0C,EAAAkuC,QAAAqG,QAAAlG,IACS,GACT+F,EAGA,IAAAI,EAAA,IAAAC,eAoCA,OAnCAD,EAAAE,iBAAA,cACAF,EAAAG,KAAA,MAAAtG,GAAA,GACAmG,EAAAr5B,iBAAA,gBAAAW,GACA,IAAA84B,EAAA94B,EAAAviC,OAAAq7D,SACAl9D,EAAAm3D,MAAAnpD,IAAA2oD,EAAAuG,GAEA,MAAAz7D,KAAA07D,QACAvG,KAAAsG,GACA50C,EAAAkuC,QAAAqG,QAAAlG,IACS,IAAAl1D,KAAA07D,QAGTnxD,QAAAC,KAAA,4CACA2qD,KAAAsG,GACA50C,EAAAkuC,QAAAqG,QAAAlG,KAEAG,KAAA1yB,GACA9b,EAAAkuC,QAAA4G,UAAAzG,MAEO,QAEP91D,IAAAg2D,GACAiG,EAAAr5B,iBAAA,oBAAAW,GACAyyB,EAAAzyB,KACS,GAGT04B,EAAAr5B,iBAAA,iBAAAW,GACA0yB,KAAA1yB,GACA9b,EAAAkuC,QAAA4G,UAAAzG,KACO,QACP91D,IAAAY,KAAA47D,eAAAP,EAAAO,aAAA57D,KAAA47D,mBACAx8D,IAAAY,KAAA67D,kBAAAR,EAAAQ,gBAAA77D,KAAA67D,iBACAR,EAAAS,KAAA,MACAj1C,EAAAkuC,QAAAmG,UAAAhG,GACAmG,GAEAU,QAAA,SAAA9yD,GAEA,OADAjJ,KAAAuhD,KAAAt4C,EACAjJ,MAEAw1D,gBAAA,SAAAvsD,GAEA,OADAjJ,KAAA47D,aAAA3yD,EACAjJ,MAEAg8D,mBAAA,SAAA/yD,GAEA,OADAjJ,KAAA67D,gBAAA5yD,EACAjJ,QAQAzB,EAAA09D,WAAA,SAAAlH,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAA09D,WAAAt8D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACA,IAAAzB,EAAAg3D,UAAAv1D,KAAA+0D,SACAE,KAAAC,EAAA,SAAAgH,GACA,IAAA1gB,EAEA,IACAA,EAAAlT,KAAAM,MAAAszB,GACS,MAAA58C,GACT/U,QAAAC,KAAA,yFACAgxC,EAAAlT,KAAAM,MAAAszB,EAAAC,UAAA,GAAAD,EAAAp9D,OAAA,IAGA,IAAAs9D,EAAAv1C,EAAA+hB,MAAA4S,GACA2Z,KAAAiH,IACOhH,EAAAC,IAEPzsB,MAAA,SAAA4S,GACA,WAAAj9C,EAAA89D,KAAA7gB,MAQAj9C,EAAA+9D,YAAA,SAAAvH,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAA+9D,YAAA38D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAu8D,EAAAC,SAAAC,gBAAA,sCAQA,GANAF,EAAAG,OAAA,WACAC,IAAAC,gBAAAL,EAAAM,KACA1H,KAAAoH,GACA11C,EAAAkuC,QAAAqG,QAAAlG,IAGA,IAAAA,EAAA7yB,QAAA,SACAk6B,EAAAM,IAAA3H,MACO,CACP,IAAAI,EAAA,IAAA/2D,EAAAg3D,UACAD,EAAAyG,QAAA/7D,KAAAuhD,MACA+T,EAAAE,gBAAA,QACAF,EAAAL,KAAAC,EAAA,SAAA4H,GACAP,EAAAM,IAAAF,IAAAI,gBAAAD,IACS1H,EAAAC,GAIT,OADAxuC,EAAAkuC,QAAAmG,UAAAhG,GACAqH,GAEAtF,eAAA,SAAAhuD,GAEA,OADAjJ,KAAAk2D,YAAAjtD,EACAjJ,MAEA+7D,QAAA,SAAA9yD,GAEA,OADAjJ,KAAAuhD,KAAAt4C,EACAjJ,QASAzB,EAAAy+D,WAAA,SAAAjI,GACA,mBAAAA,IACAxqD,QAAAC,KAAA,6EACAuqD,OAAA31D,GAGAY,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBACAh1D,KAAA67D,iBAAA,GAGAh8D,OAAAM,OAAA5B,EAAAy+D,WAAAr9D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAq2D,EAAAr2D,KAAAq2D,aAAA,kBAAAr2D,KAAAq2D,YAAAr2D,KAAAq2D,YAAA93D,EAAAu3D,OAAAn2D,UAAAw2D,eAAAjB,GACAI,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SACAO,EAAA0G,mBAAAh8D,KAAA67D,iBACAvG,EAAAL,KAAAC,EAAA,SAAAgH,GACA,IAAA1gB,EAAAlT,KAAAM,MAAAszB,GACA/zB,EAAAqT,EAAArT,SAEA,QAAA/oC,IAAA+oC,EAAA,CACA,IAAAlG,EAAAkG,EAAAlG,KAEA,QAAA7iC,IAAA6iC,EAAA,CACA,cAAAA,EAAAimB,cAEA,YADA39C,QAAA2U,MAAA,qBAAAg2C,EAAA,sDAIA,aAAAjzB,EAAAimB,cAEA,YADA39C,QAAA2U,MAAA,qBAAAg2C,EAAA,sDAMA,IAAAtuC,EAAAC,EAAA+hB,MAAA4S,EAAA6a,GACAlB,EAAAvuC,EAAAK,SAAAL,EAAAohB,YACOotB,EAAAC,IAEP4H,eAAA,SAAAh0D,GACAjJ,KAAAq2D,YAAAptD,GAEA2/B,MAAA,SAAA4S,EAAA6a,GACA,IAAApvC,EAAA,IAAA1oB,EAAA2oB,SACAgI,OAAA9vB,IAAAo8C,EAAAtsB,MAAA,EAAAssB,EAAAtsB,MAAA,EA8SA,GAtSA,SAAAA,GACA,SAAAguC,EAAAj0D,EAAAqe,GACA,OAAAre,EAAA,GAAAqe,EAGA,IAAArC,EACAgE,EACAk0C,EACA9vD,EACA+vD,EACAC,EACAC,EACAC,EACAx0B,EACA9G,EACAu7B,EACAC,EACAtsB,EACAC,EACAC,EACAC,EACAC,EACAR,EACAhE,EACA2wB,EACAC,EACAp0D,EACAiY,EACAo8C,EACArwB,EACAtQ,EACApjB,EACAmyB,EAAAwP,EAAAxP,MACA7kB,EAAAq0B,EAAAr0B,SACAkmB,EAAAmO,EAAAnO,QACAvD,EAAA0R,EAAA1R,OACA+zB,EAAA,EAEA,QAAAz+D,IAAAo8C,EAAAlO,IAAA,CAEA,IAAAroB,EAAA,EAAqBA,EAAAu2B,EAAAlO,IAAAxuC,OAAqBmmB,IAC1Cu2B,EAAAlO,IAAAroB,GAAAnmB,QAAA++D,IAGA,IAAA54C,EAAA,EAAqBA,EAAA44C,EAAe54C,IACpCgC,EAAAglB,cAAAhnB,GAAA,GAIA5X,EAAA,EACA+vD,EAAAj2C,EAAAroB,OAEA,KAAAuO,EAAA+vD,IACArsB,EAAA,IAAAxyC,EAAA+a,SACA5Z,EAAAynB,EAAA9Z,KAAA6hB,EACA6hB,EAAAp6B,EAAAwQ,EAAA9Z,KAAA6hB,EACA6hB,EAAAn6B,EAAAuQ,EAAA9Z,KAAA6hB,EACAjI,EAAAE,SAAAmV,KAAAyU,GAGA1jC,EAAA,EACA+vD,EAAApxB,EAAAltC,OAEA,KAAAuO,EAAA+vD,GAUA,GATAn7B,EAAA+J,EAAA3+B,KACAmwD,EAAAN,EAAAj7B,EAAA,GACAw7B,EAAAP,EAAAj7B,EAAA,GACAkP,EAAA+rB,EAAAj7B,EAAA,GACAmP,EAAA8rB,EAAAj7B,EAAA,GACAoP,EAAA6rB,EAAAj7B,EAAA,GACAqP,EAAA4rB,EAAAj7B,EAAA,GACAsP,EAAA2rB,EAAAj7B,EAAA,GAEAu7B,EAAA,CAoBA,IAnBAE,EAAA,IAAAn/D,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,GACAqwD,EAAA70D,EAAAmjC,EAAA3+B,EAAA,GACAqwD,EAAAxwD,EAAA8+B,EAAA3+B,EAAA,IACAswD,EAAA,IAAAp/D,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,EAAA,GACAswD,EAAA90D,EAAAmjC,EAAA3+B,EAAA,GACAswD,EAAAzwD,EAAA8+B,EAAA3+B,EAAA,GACAA,GAAA,EAEAowD,IACA10B,EAAAiD,EAAA3+B,KACAqwD,EAAA30B,gBACA40B,EAAA50B,iBAIAo0B,EAAAl2C,EAAA+kB,MAAAltC,OAEAqyC,EACA,IAAAlsB,EAAA,EAAyBA,EAAA44C,EAAe54C,IAKxC,IAJA24C,EAAApiB,EAAAlO,IAAAroB,GACAgC,EAAAglB,cAAAhnB,GAAAk4C,GAAA,GACAl2C,EAAAglB,cAAAhnB,GAAAk4C,EAAA,MAEAl0C,EAAA,EAA2BA,EAAA,EAAOA,IAClCs0C,EAAAvxB,EAAA3+B,KACA4vB,EAAA2gC,EAAA,EAAAL,GACA1jD,EAAA+jD,EAAA,EAAAL,EAAA,GACAhwB,EAAA,IAAAhvC,EAAAme,QAAAugB,EAAApjB,GACA,IAAAoP,GAAAhC,EAAAglB,cAAAhnB,GAAAk4C,GAAA7gC,KAAAiR,GACA,IAAAtkB,GAAAhC,EAAAglB,cAAAhnB,GAAAk4C,EAAA,GAAA7gC,KAAAiR,GAWA,GANA6D,IACAksB,EAAA,EAAAtxB,EAAA3+B,KACAqwD,EAAAl8C,OAAA1Y,IAAAukC,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACAK,EAAAn8C,OAAAtY,KAAAw0D,EAAAl8C,SAGA6vB,EACA,IAAApsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCq4C,EAAA,EAAAtxB,EAAA3+B,KACAmU,EAAA,IAAAjjB,EAAA+a,QAAA+zB,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACA,IAAAr4C,GAAAy4C,EAAA10B,cAAA1M,KAAA9a,GACA,IAAAyD,GAAA04C,EAAA30B,cAAA1M,KAAA9a,GAWA,GAPA8vB,IACA+rB,EAAArxB,EAAA3+B,KACA9D,EAAAugC,EAAAuzB,GACAK,EAAA/yD,MAAAxB,OAAAI,GACAo0D,EAAAhzD,MAAAxB,OAAAI,IAGAgoC,EACA,IAAAtsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCo4C,EAAArxB,EAAA3+B,KACA9D,EAAAugC,EAAAuzB,GACA,IAAAp4C,GAAAy4C,EAAAz0B,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAa,IACA,IAAA0b,GAAA04C,EAAA10B,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAa,IAIA0d,EAAA+kB,MAAA1P,KAAAohC,GACAz2C,EAAA+kB,MAAA1P,KAAAqhC,OACW,CAcX,IAbA5wB,EAAA,IAAAxuC,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,KACA0/B,EAAAlkC,EAAAmjC,EAAA3+B,KACA0/B,EAAA7/B,EAAA8+B,EAAA3+B,KAEAowD,IACA10B,EAAAiD,EAAA3+B,KACA0/B,EAAAhE,iBAIAo0B,EAAAl2C,EAAA+kB,MAAAltC,OAEAqyC,EACA,IAAAlsB,EAAA,EAAyBA,EAAA44C,EAAe54C,IAIxC,IAHA24C,EAAApiB,EAAAlO,IAAAroB,GACAgC,EAAAglB,cAAAhnB,GAAAk4C,GAAA,GAEAl0C,EAAA,EAA2BA,EAAA,EAAOA,IAClCs0C,EAAAvxB,EAAA3+B,KACA4vB,EAAA2gC,EAAA,EAAAL,GACA1jD,EAAA+jD,EAAA,EAAAL,EAAA,GACAhwB,EAAA,IAAAhvC,EAAAme,QAAAugB,EAAApjB,GACAoN,EAAAglB,cAAAhnB,GAAAk4C,GAAA7gC,KAAAiR,GAUA,GALA6D,IACAksB,EAAA,EAAAtxB,EAAA3+B,KACA0/B,EAAAvrB,OAAA1Y,IAAAukC,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,KAGAjsB,EACA,IAAApsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCq4C,EAAA,EAAAtxB,EAAA3+B,KACAmU,EAAA,IAAAjjB,EAAA+a,QAAA+zB,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACAvwB,EAAA/D,cAAA1M,KAAA9a,GASA,GALA8vB,IACA+rB,EAAArxB,EAAA3+B,KACA0/B,EAAApiC,MAAAxB,OAAA2gC,EAAAuzB,KAGA9rB,EACA,IAAAtsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCo4C,EAAArxB,EAAA3+B,KACA0/B,EAAA9D,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAohC,EAAAuzB,KAIAp2C,EAAA+kB,MAAA1P,KAAAyQ,IA5MA+wB,CAAA5uC,GAiNA,WACA,IAAA6uC,OAAA3+D,IAAAo8C,EAAAuiB,oBAAAviB,EAAAuiB,oBAAA,EAEA,GAAAviB,EAAApP,YACA,QAAAnnB,EAAA,EAAAjb,EAAAwxC,EAAApP,YAAAttC,OAAsDmmB,EAAAjb,EAAOib,GAAA84C,EAAA,CAC7D,IAAAr+D,EAAA87C,EAAApP,YAAAnnB,GACAtO,EAAAonD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACArO,EAAAmnD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACApO,EAAAknD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACAgC,EAAAmlB,YAAA9P,KAAA,IAAA/9B,EAAAikB,QAAA9iB,EAAAiX,EAAAC,EAAAC,IAIA,GAAA2kC,EAAAnP,YACA,QAAApnB,EAAA,EAAAjb,EAAAwxC,EAAAnP,YAAAvtC,OAAsDmmB,EAAAjb,EAAOib,GAAA84C,EAAA,CAC7D,IAAA9jD,EAAAuhC,EAAAnP,YAAApnB,GACApc,EAAAk1D,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACA/X,EAAA6wD,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACAxF,EAAAs+C,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACAgC,EAAAolB,YAAA/P,KAAA,IAAA/9B,EAAAikB,QAAAvI,EAAApR,EAAAqE,EAAAuS,IAIAwH,EAAAk2B,MAAA3B,EAAA2B,MAEAl2B,EAAAk2B,OAAAl2B,EAAAk2B,MAAAr+C,OAAA,IAAAmoB,EAAAmlB,YAAAttC,SAAAmoB,EAAAolB,YAAAvtC,QAAAmoB,EAAAolB,YAAAvtC,SAAAmoB,EAAAE,SAAAroB,SACAyL,QAAAC,KAAA,sCAAAyc,EAAAE,SAAAroB,OAAA,mBAAAmoB,EAAAolB,YAAAvtC,OAAA,uBAAAmoB,EAAAmlB,YAAAttC,OAAA,mBA1OAk/D,GA8OA,SAAA9uC,GACA,QAAA9vB,IAAAo8C,EAAAtP,aACA,QAAAjnB,EAAA,EAAAjb,EAAAwxC,EAAAtP,aAAAptC,OAAuDmmB,EAAAjb,EAAOib,IAAA,CAC9DgC,EAAAilB,aAAAjnB,GAAA,GACAgC,EAAAilB,aAAAjnB,GAAArlB,KAAA47C,EAAAtP,aAAAjnB,GAAArlB,KACAqnB,EAAAilB,aAAAjnB,GAAAkC,SAAA,GAIA,IAHA,IAAA82C,EAAAh3C,EAAAilB,aAAAjnB,GAAAkC,SACA+2C,EAAA1iB,EAAAtP,aAAAjnB,GAAAkC,SAEAtN,EAAA,EAAA40B,EAAAyvB,EAAAp/D,OAAoD+a,EAAA40B,EAAQ50B,GAAA,GAC5D,IAAAk3B,EAAA,IAAAxyC,EAAA+a,QACAy3B,EAAArxC,EAAAw+D,EAAArkD,GAAAqV,EACA6hB,EAAAp6B,EAAAunD,EAAArkD,EAAA,GAAAqV,EACA6hB,EAAAn6B,EAAAsnD,EAAArkD,EAAA,GAAAqV,EACA+uC,EAAA3hC,KAAAyU,IAKA,QAAA3xC,IAAAo8C,EAAA2iB,aAAA3iB,EAAA2iB,YAAAr/D,OAAA,GACAyL,QAAAC,KAAA,mFAIA,IAHA,IAAAwhC,EAAA/kB,EAAA+kB,MACAmyB,EAAA3iB,EAAA2iB,YAAA,GAAAr0B,OAEA7kB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAA2CmmB,EAAAjb,EAAOib,IAClD+mB,EAAA/mB,GAAAta,MAAAwC,UAAAgxD,EAAA,EAAAl5C,IAtQAm5C,CAAAlvC,GA2QA,WACA,IAAAmvC,EAAA,GAEA3hB,EAAA,QAEAt9C,IAAAo8C,EAAA0B,WACAR,EAAApgB,KAAAkf,EAAA0B,gBAGA99C,IAAAo8C,EAAAkB,aACAlB,EAAAkB,WAAA59C,OACA49C,IAAA4hB,OAAA9iB,EAAAkB,YAEAA,EAAApgB,KAAAkf,EAAAkB,aAIA,QAAAz3B,EAAA,EAAuBA,EAAAy3B,EAAA59C,OAAuBmmB,IAAA,CAC9C,IAAAkwB,EAAA52C,EAAA48C,cAAA8B,eAAAP,EAAAz3B,GAAAgC,EAAAk2B,OACAhI,GAAAkpB,EAAA/hC,KAAA6Y,GAIA,GAAAluB,EAAAilB,aAAA,CAEA,IAAAqyB,EAAAhgE,EAAA48C,cAAAwB,oCAAA11B,EAAAilB,aAAA,IACAmyB,IAAAC,OAAAC,GAGAF,EAAAv/D,OAAA,IAAAmoB,EAAAy1B,WAAA2hB,GAvSAG,GACAv3C,EAAA+mB,qBACA/mB,EAAA0P,6BAwSAv3B,IAAAo8C,EAAAxT,WAAA,IAAAwT,EAAAxT,UAAAlpC,OACA,OACAmoB,YAGA,IAAA+gB,EAAAzpC,EAAAu3D,OAAAn2D,UAAAy2D,cAAA5a,EAAAxT,UAAAquB,EAAAr2D,KAAAk2D,aACA,OACAjvC,WACA+gB,gBAUAzpC,EAAAkgE,eAAA,SAAAtJ,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACA0+D,GAAA,EACAC,EAAA,EACAC,EAAA,EACA5+D,KAAA6+D,aAAAz/D,EACAY,KAAAm1D,SACAn1D,KAAAo1D,aACAp1D,KAAAq1D,UAEAr1D,KAAAk7D,UAAA,SAAAhG,GACA0J,KAEA,IAAAF,QACAt/D,IAAAynB,EAAAg4C,SACAh4C,EAAAg4C,QAAA3J,EAAAyJ,EAAAC,GAIAF,GAAA,GAGA1+D,KAAAo7D,QAAA,SAAAlG,GACAyJ,SAEAv/D,IAAAynB,EAAAuuC,YACAvuC,EAAAuuC,WAAAF,EAAAyJ,EAAAC,GAGAD,IAAAC,IACAF,GAAA,OAEAt/D,IAAAynB,EAAAsuC,QACAtuC,EAAAsuC,WAKAn1D,KAAA27D,UAAA,SAAAzG,QACA91D,IAAAynB,EAAAwuC,SACAxuC,EAAAwuC,QAAAH,KAKA32D,EAAAy2D,sBAAA,IAAAz2D,EAAAkgE,eAMAlgE,EAAAugE,qBAAA,SAAA/J,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAAugE,qBAAAn/D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACA,IAAAzB,EAAAg3D,UAAA1uC,EAAAkuC,SACAE,KAAAC,EAAA,SAAAgH,GACA/G,EAAAtuC,EAAA+hB,MAAAN,KAAAM,MAAAszB,MACO9G,EAAAC,IAEPzsB,MAAA,SAAA4S,GACA,IAAAv0B,EAAA,IAAA1oB,EAAA6oB,eACA7mB,EAAAi7C,EAAA/zB,KAAAlnB,MACAw+D,EAAA,CACAt0B,oBACAE,sBACAE,oCACAE,sBACAE,wBACAE,sBACAE,wBACAljB,0BACAqjB,2BAGA,QAAApsC,IAAAmB,EAAA,CACA,IAAAy+D,EAAA,IAAAD,EAAAx+D,EAAA0hC,MAAA1hC,EAAA6M,OACA6Z,EAAAisB,SAAA,IAAA30C,EAAA2qC,gBAAA81B,EAAA,IAGA,IAAA33C,EAAAm0B,EAAA/zB,KAAAJ,WAEA,QAAAshB,KAAAthB,EAAA,CACA,IAAA1I,EAAA0I,EAAAshB,GACAq2B,EAAA,IAAAD,EAAApgD,EAAAsjB,MAAAtjB,EAAAvR,OACA6Z,EAAAksB,aAAAxK,EAAA,IAAApqC,EAAA2qC,gBAAA81B,EAAArgD,EAAAC,SAAAD,EAAAwqB,aAGA,IAAA2E,EAAA0N,EAAA/zB,KAAAqmB,QAAA0N,EAAA/zB,KAAAw3C,WAAAzjB,EAAA/zB,KAAAy3C,QAEA,QAAA9/D,IAAA0uC,EACA,QAAA7oB,EAAA,EAAA4H,EAAAihB,EAAAhvC,OAA0CmmB,IAAA4H,IAAS5H,EAAA,CACnD,IAAA8oB,EAAAD,EAAA7oB,GACAgC,EAAAqsB,SAAAvF,EAAAjqB,MAAAiqB,EAAAzE,MAAAyE,EAAAhF,eAIA,IAAArS,EAAA8kB,EAAA/zB,KAAAiP,eAEA,QAAAt3B,IAAAs3B,EAAA,CACA,IAAA5X,EAAA,IAAAvgB,EAAA+a,aAEAla,IAAAs3B,EAAA5X,QACAA,EAAA3R,UAAAupB,EAAA5X,QAGAmI,EAAAyP,eAAA,IAAAn4B,EAAA0pB,OAAAnJ,EAAA4X,EAAA1U,QAGA,OAAAiF,KAQA1oB,EAAAm4D,eAAA,SAAA3B,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBACAh1D,KAAAioC,SAAA,IAGApoC,OAAAM,OAAA5B,EAAAm4D,eAAA/2D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACA,IAAAzB,EAAAg3D,UAAA1uC,EAAAkuC,SACAE,KAAAC,EAAA,SAAAgH,GACA/G,EAAAtuC,EAAA+hB,MAAAN,KAAAM,MAAAszB,MACO9G,EAAAC,IAEPyF,YAAA,SAAA7xD,GACAjJ,KAAAioC,SAAAh/B,GAEAk2D,WAAA,SAAAv/D,GACA,IAAAqoC,EAAAjoC,KAAAioC,SAMA,YAJA7oC,IAAA6oC,EAAAroC,IACA2K,QAAAC,KAAA,0CAAA5K,GAGAqoC,EAAAroC,IAEAgpC,MAAA,SAAA4S,GACA,IAAAhT,EAAA,IAAAjqC,EAAAi9C,EAAAvZ,MAuCA,QAtCA7iC,IAAAo8C,EAAAhjB,OAAAgQ,EAAAhQ,KAAAgjB,EAAAhjB,WACAp5B,IAAAo8C,EAAA57C,OAAA4oC,EAAA5oC,KAAA47C,EAAA57C,WACAR,IAAAo8C,EAAA7wC,OAAA69B,EAAA79B,MAAAxB,OAAAqyC,EAAA7wC,YACAvL,IAAAo8C,EAAA4jB,YAAA52B,EAAA42B,UAAA5jB,EAAA4jB,gBACAhgE,IAAAo8C,EAAA6jB,YAAA72B,EAAA62B,UAAA7jB,EAAA6jB,gBACAjgE,IAAAo8C,EAAA8b,UAAA9uB,EAAA8uB,SAAAnuD,OAAAqyC,EAAA8b,eACAl4D,IAAAo8C,EAAA6b,UAAA7uB,EAAA6uB,SAAAluD,OAAAqyC,EAAA6b,eACAj4D,IAAAo8C,EAAA+b,YAAA/uB,EAAA+uB,UAAA/b,EAAA+b,gBACAn4D,IAAAo8C,EAAA8jB,WAAA92B,EAAA82B,SAAA9jB,EAAA8jB,eACAlgE,IAAAo8C,EAAA+jB,eAAA/2B,EAAA+2B,aAAA/jB,EAAA+jB,mBACAngE,IAAAo8C,EAAAgkB,iBAAAh3B,EAAAg3B,eAAAhkB,EAAAgkB,qBACApgE,IAAAo8C,EAAAvS,eAAAT,EAAAS,aAAAuS,EAAAvS,mBACA7pC,IAAAo8C,EAAAikB,UAAAj3B,EAAAi3B,QAAAjkB,EAAAikB,cACArgE,IAAAo8C,EAAA4b,WAAA5uB,EAAA4uB,SAAA5b,EAAA4b,eACAh4D,IAAAo8C,EAAAmf,OAAAnyB,EAAAmyB,KAAAnf,EAAAmf,WACAv7D,IAAAo8C,EAAAof,UAAApyB,EAAAoyB,QAAApf,EAAAof,cACAx7D,IAAAo8C,EAAAqf,cAAAryB,EAAAqyB,YAAArf,EAAAqf,kBACAz7D,IAAAo8C,EAAAkkB,YAAAl3B,EAAAk3B,UAAAlkB,EAAAkkB,gBACAtgE,IAAAo8C,EAAAmkB,YAAAn3B,EAAAm3B,UAAAnkB,EAAAmkB,gBACAvgE,IAAAo8C,EAAAokB,aAAAp3B,EAAAo3B,WAAApkB,EAAAokB,iBACAxgE,IAAAo8C,EAAAqkB,aAAAr3B,EAAAq3B,WAAArkB,EAAAqkB,iBACAzgE,IAAAo8C,EAAAskB,YAAAt3B,EAAAs3B,UAAAtkB,EAAAskB,gBACA1gE,IAAAo8C,EAAAukB,qBAAAv3B,EAAAu3B,mBAAAvkB,EAAAukB,yBAEA3gE,IAAAo8C,EAAAzwC,OAAAy9B,EAAAz9B,KAAAywC,EAAAzwC,WACA3L,IAAAo8C,EAAAwkB,kBAAAx3B,EAAAw3B,gBAAAxkB,EAAAwkB,sBAEA5gE,IAAAo8C,EAAA0Y,MAAA1rB,EAAA0rB,IAAAl0D,KAAAm/D,WAAA3jB,EAAA0Y,WAEA90D,IAAAo8C,EAAA8e,WACA9xB,EAAA8xB,SAAAt6D,KAAAm/D,WAAA3jB,EAAA8e,UACA9xB,EAAAqyB,aAAA,QAGAz7D,IAAAo8C,EAAAmd,UAAAnwB,EAAAmwB,QAAA34D,KAAAm/D,WAAA3jB,EAAAmd,eACAv5D,IAAAo8C,EAAAwd,YAAAxwB,EAAAwwB,UAAAxd,EAAAwd,gBACA55D,IAAAo8C,EAAAyd,YAAAzwB,EAAAywB,UAAAj5D,KAAAm/D,WAAA3jB,EAAAyd,iBAEA75D,IAAAo8C,EAAA8d,YAAA,CACA,IAAAA,EAAA9d,EAAA8d,aAEA,IAAA16D,MAAAkmC,QAAAw0B,KAEAA,EAAA,CAAAA,MAGA9wB,EAAA8wB,aAAA,IAAA/6D,EAAAme,SAAAvP,UAAAmsD,GAuBA,QApBAl6D,IAAAo8C,EAAAykB,kBAAAz3B,EAAAy3B,gBAAAjgE,KAAAm/D,WAAA3jB,EAAAykB,uBACA7gE,IAAAo8C,EAAA0kB,oBAAA13B,EAAA03B,kBAAA1kB,EAAA0kB,wBACA9gE,IAAAo8C,EAAA2kB,mBAAA33B,EAAA23B,iBAAA3kB,EAAA2kB,uBACA/gE,IAAAo8C,EAAAye,eAAAzxB,EAAAyxB,aAAAj6D,KAAAm/D,WAAA3jB,EAAAye,oBACA76D,IAAAo8C,EAAAoe,eAAApxB,EAAAoxB,aAAA55D,KAAAm/D,WAAA3jB,EAAAoe,oBACAx6D,IAAAo8C,EAAAoc,cAAApvB,EAAAovB,YAAA53D,KAAAm/D,WAAA3jB,EAAAoc,mBACAx4D,IAAAo8C,EAAA4kB,oBAAA53B,EAAA43B,kBAAA5kB,EAAA4kB,wBACAhhE,IAAAo8C,EAAA+d,cAAA/wB,EAAA+wB,YAAAv5D,KAAAm/D,WAAA3jB,EAAA+d,mBAEAn6D,IAAAo8C,EAAA6kB,SACA73B,EAAA63B,OAAArgE,KAAAm/D,WAAA3jB,EAAA6kB,QACA73B,EAAA83B,QAAA/hE,EAAAyF,wBAGA5E,IAAAo8C,EAAA+kB,eAAA/3B,EAAA+3B,aAAA/kB,EAAA+kB,mBACAnhE,IAAAo8C,EAAAyc,WAAAzvB,EAAAyvB,SAAAj4D,KAAAm/D,WAAA3jB,EAAAyc,gBACA74D,IAAAo8C,EAAAglB,oBAAAh4B,EAAAg4B,kBAAAhlB,EAAAglB,wBACAphE,IAAAo8C,EAAA8c,QAAA9vB,EAAA8vB,MAAAt4D,KAAAm/D,WAAA3jB,EAAA8c,aACAl5D,IAAAo8C,EAAAilB,iBAAAj4B,EAAAi4B,eAAAjlB,EAAAilB,qBAEArhE,IAAAo8C,EAAAxT,UACA,QAAA/iB,EAAA,EAAAjb,EAAAwxC,EAAAxT,UAAAlpC,OAAkDmmB,EAAAjb,EAAOib,IACzDujB,EAAAR,UAAA1L,KAAAt8B,KAAA4oC,MAAA4S,EAAAxT,UAAA/iB,KAIA,OAAAujB,KAQAjqC,EAAAmiE,aAAA,SAAA3L,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBACAh1D,KAAAq2D,YAAA,IAGAx2D,OAAAM,OAAA5B,EAAAmiE,aAAA/gE,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,KAAAr1D,KAAAq2D,cACAr2D,KAAAq2D,YAAAnB,EAAAiH,UAAA,EAAAjH,EAAAyL,YAAA,SAGA,IAAA95C,EAAA7mB,KACA,IAAAzB,EAAAg3D,UAAA1uC,EAAAkuC,SACAE,KAAAC,EAAA,SAAAgH,GACAr1C,EAAA+hB,MAAAN,KAAAM,MAAAszB,GAAA/G,IACOC,EAAAC,IAEP4H,eAAA,SAAAh0D,GACAjJ,KAAAq2D,YAAAptD,GAEAguD,eAAA,SAAAhuD,GACAjJ,KAAAk2D,YAAAjtD,GAEA2/B,MAAA,SAAA4S,EAAA2Z,GACA,IAAAptB,EAAA/nC,KAAA4gE,gBAAAplB,EAAAzT,YACAG,EAAAloC,KAAA6gE,YAAArlB,EAAAtT,OAAA,gBACA9oC,IAAA+1D,KAAAvuC,KAEAqhB,EAAAjoC,KAAA8gE,cAAAtlB,EAAAvT,SAAAC,GACAF,EAAAhoC,KAAA+gE,eAAAvlB,EAAAxT,UAAAC,GACArhB,EAAA5mB,KAAAghE,YAAAxlB,EAAA50B,OAAAmhB,EAAAC,GAUA,OARAwT,EAAAkB,aACA91B,EAAA81B,WAAA18C,KAAAw+D,gBAAAhjB,EAAAkB,kBAGAt9C,IAAAo8C,EAAAtT,QAAA,IAAAsT,EAAAtT,OAAAppC,aACAM,IAAA+1D,KAAAvuC,GAGAA,GAEAg6C,gBAAA,SAAAplB,GACA,IAAAzT,EAAA,GAEA,QAAA3oC,IAAAo8C,EAIA,IAHA,IAAAylB,EAAA,IAAA1iE,EAAAy+D,WACAkE,EAAA,IAAA3iE,EAAAugE,qBAEA75C,EAAA,EAAAjb,EAAAwxC,EAAA18C,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAgC,EACAQ,EAAA+zB,EAAAv2B,GAEA,OAAAwC,EAAAwa,MACA,oBACA,0BACAhb,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAA9K,MAAA8K,EAAA7K,OAAA6K,EAAA05C,cAAA15C,EAAA25C,gBACA,MAEA,kBACA,wBACA,mBAEAn6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAA9K,MAAA8K,EAAA7K,OAAA6K,EAAA45C,MAAA55C,EAAA05C,cAAA15C,EAAA25C,eAAA35C,EAAA65C,eACA,MAEA,qBACA,2BACAr6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAA85C,SAAA95C,EAAA+5C,WAAA/5C,EAAAg6C,aACA,MAEA,uBACA,6BACAx6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAi6C,UAAAj6C,EAAAk6C,aAAAl6C,EAAA7K,OAAA6K,EAAAm6C,eAAAn6C,EAAA25C,eAAA35C,EAAAo6C,UAAAp6C,EAAA+5C,WAAA/5C,EAAAg6C,aACA,MAEA,mBACA,yBACAx6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAA7K,OAAA6K,EAAAm6C,eAAAn6C,EAAA25C,eAAA35C,EAAAo6C,UAAAp6C,EAAA+5C,WAAA/5C,EAAAg6C,aACA,MAEA,qBACA,2BACAx6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAA05C,cAAA15C,EAAA25C,eAAA35C,EAAAq6C,SAAAr6C,EAAAs6C,UAAAt6C,EAAA+5C,WAAA/5C,EAAAg6C,aACA,MAEA,2BACA,0BACA,yBACA,0BACAx6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAAu6C,QACA,MAEA,mBACA,yBACA/6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAw6C,YAAAx6C,EAAAy6C,YAAAz6C,EAAA06C,cAAA16C,EAAA26C,YAAA36C,EAAA+5C,WAAA/5C,EAAAg6C,aACA,MAEA,oBACA,0BACAx6C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAA46C,KAAA56C,EAAAm6C,eAAAn6C,EAAA66C,gBAAA76C,EAAA86C,KACA,MAEA,wBACA,8BACAt7C,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAAzF,OAAAyF,EAAA46C,KAAA56C,EAAA66C,gBAAA76C,EAAAm6C,eAAAn6C,EAAA9d,EAAA8d,EAAA7d,GACA,MAEA,oBACA,0BACAqd,EAAA,IAAA1oB,EAAAkpB,EAAAwa,MAAAxa,EAAA1C,OAAA0C,EAAA85C,SAAA95C,EAAAq6C,SAAAr6C,EAAAs6C,WACA,MAEA,qBACA96C,EAAAi6C,EAAAt4B,MAAAnhB,GACA,MAEA,eACAR,EAAAg6C,EAAAr4B,MAAAnhB,OAAAznB,KAAAq2D,aAAApvC,SACA,MAEA,QACA1c,QAAAC,KAAA,kDAAAid,EAAAwa,KAAA,KACA,SAGAhb,EAAAuR,KAAA/Q,EAAA+Q,UACAp5B,IAAAqoB,EAAA7nB,OAAAqnB,EAAArnB,KAAA6nB,EAAA7nB,MACAmoC,EAAAtgB,EAAA+Q,MAAAvR,EAIA,OAAA8gB,GAEAg5B,eAAA,SAAAvlB,EAAAvT,GACA,IAAAD,EAAA,GAEA,QAAA5oC,IAAAo8C,EAAA,CACA,IAAA8Z,EAAA,IAAA/2D,EAAAm4D,eACApB,EAAAwF,YAAA7yB,GAEA,QAAAhjB,EAAA,EAAAjb,EAAAwxC,EAAA18C,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAujB,EAAA8sB,EAAA1sB,MAAA4S,EAAAv2B,IACA+iB,EAAAQ,EAAAhQ,MAAAgQ,GAIA,OAAAR,GAEAw2B,gBAAA,SAAAhjB,GAGA,IAFA,IAAAkB,EAAA,GAEAz3B,EAAA,EAAqBA,EAAAu2B,EAAA18C,OAAiBmmB,IAAA,CACtC,IAAAkwB,EAAA52C,EAAA48C,cAAAvS,MAAA4S,EAAAv2B,IACAy3B,EAAApgB,KAAA6Y,GAGA,OAAAuH,GAEAmkB,YAAA,SAAArlB,EAAA2Z,GACA,IAAAtuC,EAAA7mB,KACAkoC,EAAA,GAEA,SAAAs6B,EAAAtN,GAEA,OADAruC,EAAAkuC,QAAAmG,UAAAhG,GACAI,EAAAL,KAAAC,EAAA,WACAruC,EAAAkuC,QAAAqG,QAAAlG,KAIA,QAAA91D,IAAAo8C,KAAA18C,OAAA,GACA,IAAAi2D,EAAA,IAAAx2D,EAAAkgE,eAAAtJ,GACAG,EAAA,IAAA/2D,EAAA+9D,YAAAvH,GACAO,EAAA2B,eAAAj3D,KAAAk2D,aAEA,QAAAjxC,EAAA,EAAAjb,EAAAwxC,EAAA18C,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAs3C,EAAA/gB,EAAAv2B,GACAs8B,EAAA,4BAAAre,KAAAq5B,EAAArH,KAAAqH,EAAArH,IAAAruC,EAAAwvC,YAAAkG,EAAArH,IACAhtB,EAAAq0B,EAAA/jC,MAAAgqC,EAAAjhB,IAIA,OAAArZ,GAEA44B,cAAA,SAAAtlB,EAAAtT,GACA,SAAAu6B,EAAAx5D,GACA,wBAAAA,KACAsB,QAAAC,KAAA,uEAAAvB,GACA1K,EAAA0K,IAGA,IAAAg/B,EAAA,GAEA,QAAA7oC,IAAAo8C,EACA,QAAAv2B,EAAA,EAAAjb,EAAAwxC,EAAA18C,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAwC,EAAA+zB,EAAAv2B,QAEA7lB,IAAAqoB,EAAA80C,OACAhyD,QAAAC,KAAA,+CAAAid,EAAA+Q,WAGAp5B,IAAA8oC,EAAAzgB,EAAA80C,QACAhyD,QAAAC,KAAA,sCAAAid,EAAA80C,OAGA,IAAAlL,EAAA,IAAA9yD,EAAAmkE,QAAAx6B,EAAAzgB,EAAA80C,QACAlL,EAAA9nB,aAAA,EACA8nB,EAAA74B,KAAA/Q,EAAA+Q,UACAp5B,IAAAqoB,EAAA7nB,OAAAyxD,EAAAzxD,KAAA6nB,EAAA7nB,WACAR,IAAAqoB,EAAAk7C,UAAAtR,EAAAsR,QAAAF,EAAAh7C,EAAAk7C,eACAvjE,IAAAqoB,EAAApa,QAAAgkD,EAAAhkD,OAAAF,UAAAsa,EAAApa,aACAjO,IAAAqoB,EAAAmvC,QAAAvF,EAAAuF,OAAAzpD,UAAAsa,EAAAmvC,aAEAx3D,IAAAqoB,EAAAovC,OACAxF,EAAA6F,MAAAuL,EAAAh7C,EAAAovC,KAAA,IACAxF,EAAA8F,MAAAsL,EAAAh7C,EAAAovC,KAAA,UAGAz3D,IAAAqoB,EAAAqpC,YAAAO,EAAAP,UAAA2R,EAAAh7C,EAAAqpC,iBACA1xD,IAAAqoB,EAAAopC,YAAAQ,EAAAR,UAAA4R,EAAAh7C,EAAAopC,iBACAzxD,IAAAqoB,EAAAqvC,aAAAzF,EAAAyF,WAAArvC,EAAAqvC,iBACA13D,IAAAqoB,EAAAm7C,QAAAvR,EAAAuR,MAAAn7C,EAAAm7C,OACA36B,EAAAxgB,EAAA+Q,MAAA64B,EAIA,OAAAppB,GAEA+4B,YAAA,WACA,IAAA7gD,EAAA,IAAA5hB,EAAA8hB,QACA,gBAAAoH,EAAAsgB,EAAAC,GACA,IAAAphB,EAEA,SAAAi8C,EAAAjjE,GAKA,YAJAR,IAAA2oC,EAAAnoC,IACA2K,QAAAC,KAAA,yCAAA5K,GAGAmoC,EAAAnoC,GAGA,SAAAkjE,EAAAljE,GACA,QAAAR,IAAAQ,EAMA,YAJAR,IAAA4oC,EAAApoC,IACA2K,QAAAC,KAAA,yCAAA5K,GAGAooC,EAAApoC,GAGA,OAAA6nB,EAAAwa,MACA,YACArb,EAAA,IAAAroB,EAAAwkE,MACA,MAEA,wBACAn8C,EAAA,IAAAroB,EAAAimC,kBAAA/c,EAAAmJ,IAAAnJ,EAAAoJ,OAAApJ,EAAAgJ,KAAAhJ,EAAAiJ,UACAtxB,IAAAqoB,EAAA+qC,QAAA5rC,EAAA4rC,MAAA/qC,EAAA+qC,YACApzD,IAAAqoB,EAAAgqC,OAAA7qC,EAAA6qC,KAAAhqC,EAAAgqC,WACAryD,IAAAqoB,EAAAgrC,YAAA7rC,EAAA6rC,UAAAhrC,EAAAgrC,gBACArzD,IAAAqoB,EAAAirC,aAAA9rC,EAAA8rC,WAAAjrC,EAAAirC,iBACAtzD,IAAAqoB,EAAAiqC,OAAA9qC,EAAA8qC,KAAA7xD,OAAAM,OAAA,GAAuEsnB,EAAAiqC,OACvE,MAEA,yBACA9qC,EAAA,IAAAroB,EAAAkmC,mBAAAhd,EAAA4I,KAAA5I,EAAA6I,MAAA7I,EAAA+I,IAAA/I,EAAA8I,OAAA9I,EAAAgJ,KAAAhJ,EAAAiJ,KACA,MAEA,mBACA9J,EAAA,IAAAroB,EAAA41D,aAAA1sC,EAAA9c,MAAA8c,EAAAksC,WACA,MAEA,uBACA/sC,EAAA,IAAAroB,EAAA61D,iBAAA3sC,EAAA9c,MAAA8c,EAAAksC,WACA,MAEA,iBACA/sC,EAAA,IAAAroB,EAAAm2D,WAAAjtC,EAAA9c,MAAA8c,EAAAksC,UAAAlsC,EAAAvD,SAAAuD,EAAAosC,OACA,MAEA,gBACAjtC,EAAA,IAAAroB,EAAAq2D,UAAAntC,EAAA9c,MAAA8c,EAAAksC,UAAAlsC,EAAAvD,SAAAuD,EAAAtP,MAAAsP,EAAAqsC,SAAArsC,EAAAosC,OACA,MAEA,sBACAjtC,EAAA,IAAAroB,EAAAi2D,gBAAA/sC,EAAA9c,MAAA8c,EAAAmsC,YAAAnsC,EAAAksC,WACA,MAEA,WACA,IAAA1sC,EAAA47C,EAAAp7C,EAAAR,UACAuhB,EAAAs6B,EAAAr7C,EAAA+gB,UAGA5hB,EADAK,EAAAk2B,OAAAl2B,EAAAk2B,MAAAr+C,OAAA,EACA,IAAAP,EAAAykE,YAAA/7C,EAAAuhB,GAEA,IAAAjqC,EAAAulC,KAAA7c,EAAAuhB,GAGA,MAEA,UACA5hB,EAAA,IAAAroB,EAAAylC,IACA,MAEA,WACApd,EAAA,IAAAroB,EAAAwlC,KAAA8+B,EAAAp7C,EAAAR,UAAA67C,EAAAr7C,EAAA+gB,UAAA/gB,EAAAmwB,MACA,MAEA,iBACA,aACAhxB,EAAA,IAAAroB,EAAA0lC,OAAA4+B,EAAAp7C,EAAAR,UAAA67C,EAAAr7C,EAAA+gB,WACA,MAEA,aACA5hB,EAAA,IAAAroB,EAAA4lC,OAAA2+B,EAAAr7C,EAAA+gB,WACA,MAEA,YACA5hB,EAAA,IAAAroB,EAAA0kE,MACA,MAEA,QACAr8C,EAAA,IAAAroB,EAAAwmC,SAoBA,GAjBAne,EAAA4R,KAAA/Q,EAAA+Q,UACAp5B,IAAAqoB,EAAA7nB,OAAAgnB,EAAAhnB,KAAA6nB,EAAA7nB,WAEAR,IAAAqoB,EAAAtH,QACAA,EAAAhT,UAAAsa,EAAAtH,QACAA,EAAA6P,UAAApJ,EAAAU,SAAAV,EAAAzP,WAAAyP,EAAAsI,cAEA9vB,IAAAqoB,EAAAH,UAAAV,EAAAU,SAAAna,UAAAsa,EAAAH,eACAloB,IAAAqoB,EAAA0d,UAAAve,EAAAue,SAAAh4B,UAAAsa,EAAA0d,eACA/lC,IAAAqoB,EAAAyH,OAAAtI,EAAAsI,MAAA/hB,UAAAsa,EAAAyH,aAGA9vB,IAAAqoB,EAAAge,aAAA7e,EAAA6e,WAAAhe,EAAAge,iBACArmC,IAAAqoB,EAAAie,gBAAA9e,EAAA8e,cAAAje,EAAAie,oBACAtmC,IAAAqoB,EAAAgc,UAAA7c,EAAA6c,QAAAhc,EAAAgc,cACArkC,IAAAqoB,EAAAoe,WAAAjf,EAAAif,SAAApe,EAAAoe,eAEAzmC,IAAAqoB,EAAAkc,SACA,QAAAkF,KAAAphB,EAAAkc,SACA/c,EAAAra,IAAAvM,KAAAghE,YAAAv5C,EAAAkc,SAAAkF,GAAAd,EAAAC,IAIA,WAAAvgB,EAAAwa,KAGA,IAFA,IAAAihC,EAAAz7C,EAAAy7C,OAEAl5D,EAAA,EAAyBA,EAAAk5D,EAAApkE,OAAmBkL,IAAA,CAC5C,IAAAm5D,EAAAD,EAAAl5D,QAGA5K,KAFAypC,EAAAjiB,EAAAqgB,oBAAA,OAAAk8B,EAAAv8C,UAGAA,EAAAw8C,SAAAv6B,EAAAs6B,EAAAj/C,UAKA,OAAA0C,GAtIA,KA+IAroB,EAAAk4D,cAAA,SAAA1B,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAAk4D,cAAA92D,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAhE,EAAA,IAAA9yD,EAAAmkE,QACApN,EAAA,IAAA/2D,EAAA+9D,YAAAt8D,KAAA+0D,SAcA,OAbAO,EAAA2B,eAAAj3D,KAAAk2D,aACAZ,EAAAyG,QAAA/7D,KAAAuhD,MACA+T,EAAAL,KAAAC,EAAA,SAAAqH,GAEA,IAAA8G,EAAAnO,EAAAoO,OAAA,wBAAApO,EAAAoO,OAAA,sBACAjS,EAAAT,OAAAyS,EAAA9kE,EAAA8H,UAAA9H,EAAA+H,WACA+qD,EAAAkL,QACAlL,EAAA9nB,aAAA,OAEAnqC,IAAA+1D,GACAA,EAAA9D,IAEO+D,EAAAC,GACPhE,GAEA4F,eAAA,SAAAhuD,GAEA,OADAjJ,KAAAk2D,YAAAjtD,EACAjJ,MAEA+7D,QAAA,SAAA9yD,GAEA,OADAjJ,KAAAuhD,KAAAt4C,EACAjJ,QAQAzB,EAAAglE,kBAAA,SAAAxO,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAn1D,OAAAM,OAAA5B,EAAAglE,kBAAA5jE,UAAA,CACAs1D,KAAA,SAAAuO,EAAArO,EAAAC,EAAAC,GACA,IAAAhE,EAAA,IAAA9yD,EAAAklE,YACAnO,EAAA,IAAA/2D,EAAA+9D,YAAAt8D,KAAA+0D,SACAO,EAAA2B,eAAAj3D,KAAAk2D,aACAZ,EAAAyG,QAAA/7D,KAAAuhD,MACA,IAAAmiB,EAAA,EAEA,SAAA/M,EAAA1xC,GACAqwC,EAAAL,KAAAuO,EAAAv+C,GAAA,SAAAs3C,GACAlL,EAAAnpB,OAAAjjB,GAAAs3C,EAGA,MAFAmH,IAGArS,EAAA9nB,aAAA,EACA4rB,KAAA9D,UAESjyD,EAAAi2D,GAGT,QAAApwC,EAAA,EAAqBA,EAAAu+C,EAAA1kE,SAAiBmmB,EACtC0xC,EAAA1xC,GAGA,OAAAosC,GAEA4F,eAAA,SAAAhuD,GAEA,OADAjJ,KAAAk2D,YAAAjtD,EACAjJ,MAEA+7D,QAAA,SAAA9yD,GAEA,OADAjJ,KAAAuhD,KAAAt4C,EACAjJ,QAUAzB,EAAAolE,kBAAAplE,EAAAqlE,oBAAA,SAAA7O,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBAEAh1D,KAAA6jE,QAAA,MAGAhkE,OAAAM,OAAA5B,EAAAqlE,oBAAAjkE,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAqxD,EAAA,IAAA9yD,EAAAulE,YACAxO,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SAwCA,OAvCAO,EAAAE,gBAAA,eACAF,EAAAL,KAAAC,EAAA,SAAA/rC,GACA,IAAA46C,EAAAl9C,EAAAg9C,QAAA16C,GAEA46C,SAEA3kE,IAAA2kE,EAAAxH,MACAlL,EAAAkL,MAAAwH,EAAAxH,WACSn9D,IAAA2kE,EAAAt8C,OACT4pC,EAAAkL,MAAA5/C,MAAAonD,EAAApnD,MACA00C,EAAAkL,MAAA3/C,OAAAmnD,EAAAnnD,OACAy0C,EAAAkL,MAAA90C,KAAAs8C,EAAAt8C,MAGA4pC,EAAA6F,WAAA93D,IAAA2kE,EAAA7M,MAAA6M,EAAA7M,MAAA34D,EAAA0G,oBACAosD,EAAA8F,WAAA/3D,IAAA2kE,EAAA5M,MAAA4M,EAAA5M,MAAA54D,EAAA0G,oBACAosD,EAAAR,eAAAzxD,IAAA2kE,EAAAlT,UAAAkT,EAAAlT,UAAAtyD,EAAA+G,aACA+rD,EAAAP,eAAA1xD,IAAA2kE,EAAAjT,UAAAiT,EAAAjT,UAAAvyD,EAAAiH,yBACA6rD,EAAAyF,gBAAA13D,IAAA2kE,EAAAjN,WAAAiN,EAAAjN,WAAA,OAEA13D,IAAA2kE,EAAAnT,SACAS,EAAAT,OAAAmT,EAAAnT,aAGAxxD,IAAA2kE,EAAA9hC,OACAovB,EAAApvB,KAAA8hC,EAAA9hC,WAGA7iC,IAAA2kE,EAAAC,UACA3S,EAAA2S,QAAAD,EAAAC,SAGA,IAAAD,EAAAE,cACA5S,EAAAP,UAAAvyD,EAAA+G,cAGA+rD,EAAA9nB,aAAA,EACA4rB,KAAA9D,EAAA0S,KACO3O,EAAAC,GACPhE,KAUA9yD,EAAA2lE,wBAAA,SAAAnP,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBAEAh1D,KAAA6jE,QAAA,MAGAhkE,OAAAM,OAAA5B,EAAA2lE,wBAAAvkE,UAAA,CACAs1D,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAkoC,EAAA,GACAmpB,EAAA,IAAA9yD,EAAA4lE,kBACA9S,EAAAkL,MAAAr0B,EACA,IAAAotB,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SAIA,SAAA4B,EAAA1xC,GACAqwC,EAAAL,KAAAC,EAAAjwC,GAAA,SAAAkE,GACA,IAAAi7C,EAAAv9C,EAAAg9C,QAAA16C,GAAA,GAEA+e,EAAAjjB,GAAA,CACAtI,MAAAynD,EAAAznD,MACAC,OAAAwnD,EAAAxnD,OACAg0C,OAAAwT,EAAAxT,OACAoT,QAAAI,EAAAJ,SAIA,KAFAN,GAAA,KAGA,IAAAU,EAAAH,cAAA5S,EAAAP,UAAAvyD,EAAA+G,cACA+rD,EAAAT,OAAAwT,EAAAxT,OACAS,EAAA9nB,aAAA,EACA4rB,KAAA9D,KAES+D,EAAAC,GAGT,GAxBAC,EAAAyG,QAAA/7D,KAAAuhD,MACA+T,EAAAE,gBAAA,eAuBA52D,MAAAkmC,QAAAowB,GAGA,IAFA,IAAAwO,EAAA,EAEAz+C,EAAA,EAAAC,EAAAgwC,EAAAp2D,OAAwCmmB,EAAAC,IAAQD,EAChD0xC,EAAA1xC,QAIAqwC,EAAAL,KAAAC,EAAA,SAAA/rC,GACA,IAAAi7C,EAAAv9C,EAAAg9C,QAAA16C,GAAA,GAEA,GAAAi7C,EAAAC,UAGA,IAFA,IAAAr4B,EAAAo4B,EAAAJ,QAAAllE,OAAAslE,EAAAH,YAEAxnD,EAAA,EAA2BA,EAAAuvB,EAAWvvB,IAAA,CACtCyrB,EAAAzrB,GAAA,CACAunD,QAAA,IAGA,QAAA/+C,EAAA,EAA6BA,EAAAm/C,EAAAH,YAA0Bh/C,IACvDijB,EAAAzrB,GAAAunD,QAAA1nC,KAAA8nC,EAAAJ,QAAAvnD,EAAA2nD,EAAAH,YAAAh/C,IACAijB,EAAAzrB,GAAAm0C,OAAAwT,EAAAxT,OACA1oB,EAAAzrB,GAAAE,MAAAynD,EAAAznD,MACAurB,EAAAzrB,GAAAG,OAAAwnD,EAAAxnD,YAIAy0C,EAAAkL,MAAA5/C,MAAAynD,EAAAznD,MACA00C,EAAAkL,MAAA3/C,OAAAwnD,EAAAxnD,OACAy0C,EAAA2S,QAAAI,EAAAJ,QAGA,IAAAI,EAAAH,cACA5S,EAAAP,UAAAvyD,EAAA+G,cAGA+rD,EAAAT,OAAAwT,EAAAxT,OACAS,EAAA9nB,aAAA,EACA4rB,KAAA9D,IACS+D,EAAAC,GAGT,OAAAhE,GAEA0K,QAAA,SAAA9yD,GAEA,OADAjJ,KAAAuhD,KAAAt4C,EACAjJ,QASAzB,EAAA+lE,SAAA,WACAzkE,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAgmE,oBAEAvkE,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAAiiC,KAAA,WACAjiC,KAAAwkE,KAAA,EACAxkE,KAAAykE,QAAA,EACAzkE,KAAAo3D,SAAA74D,EAAA4D,eACAnC,KAAA26D,KAAAp8D,EAAAmD,UACA1B,KAAAy/D,QAAAlhE,EAAAuD,cAEA9B,KAAAipC,aAAA1qC,EAAAwD,SAEA/B,KAAA46D,QAAA,EACA56D,KAAA66D,aAAA,EACA76D,KAAA0kE,SAAAnmE,EAAA0E,eACAjD,KAAA2kE,SAAApmE,EAAA2E,uBACAlD,KAAA4kE,cAAArmE,EAAAiE,YACAxC,KAAA6kE,cAAA,KACA7kE,KAAA8kE,cAAA,KACA9kE,KAAA+kE,mBAAA,KACA/kE,KAAAglE,UAAAzmE,EAAAoF,eACA3D,KAAA2/D,WAAA,EACA3/D,KAAA4/D,YAAA,EACA5/D,KAAAilE,eAAA,KACAjlE,KAAAklE,aAAA,EACAllE,KAAA6/D,YAAA,EACA7/D,KAAAuwC,UAAA,KAEAvwC,KAAAmlE,eAAA,EACAnlE,KAAAolE,oBAAA,EACAplE,KAAAqlE,mBAAA,EACArlE,KAAA0/D,UAAA,EACA1/D,KAAAslE,oBAAA,EACAtlE,KAAAulE,SAAA,EAEAvlE,KAAAyjC,SAAA,EACAzjC,KAAAwlE,cAAA,GAGAjnE,EAAA+lE,SAAA3kE,UAAA,CACAqJ,YAAAzK,EAAA+lE,SAEA/6B,kBACA,OAAAvpC,KAAAwlE,cAGAj8B,gBAAAtgC,IACA,IAAAA,GAAAjJ,KAAAsX,SACAtX,KAAAwlE,aAAAv8D,GAGAw8D,UAAA,SAAArmC,GACA,QAAAhgC,IAAAggC,EAEA,QAAAuJ,KAAAvJ,EAAA,CACA,IAAAsmC,EAAAtmC,EAAAuJ,GAEA,QAAAvpC,IAAAsmE,EAAA,CAKA,IAAAC,EAAA3lE,KAAA2oC,QAEAvpC,IAAAumE,EAKAA,aAAApnE,EAAAmK,MACAi9D,EAAA78D,IAAA48D,GACSC,aAAApnE,EAAA+a,SAAAosD,aAAAnnE,EAAA+a,QACTqsD,EAAAz8D,KAAAw8D,GAGA1lE,KAAA2oC,GAFS,aAAAA,EAETtpC,OAAAqmE,GAEAA,EAZAn7D,QAAAC,KAAA,SAAAxK,KAAAiiC,KAAA,MAAA0G,EAAA,8CAPAp+B,QAAAC,KAAA,oBAAAm+B,EAAA,+BAuBAf,OAAA,SAAAC,GACA,IAAA+9B,OAAAxmE,IAAAyoC,EAEA+9B,IACA/9B,EAAA,CACAI,SAAA,GACAC,OAAA,KAIA,IAAAzgB,EAAA,CACA0gB,SAAA,CACAC,QAAA,IACAnG,KAAA,WACAoG,UAAA,oBAwDA,SAAAI,EAAAC,GACA,IAAAtJ,EAAA,GAEA,QAAAuJ,KAAAD,EAAA,CACA,IAAAjhB,EAAAihB,EAAAC,UACAlhB,EAAA0gB,SACA/I,EAAA9C,KAAA7U,GAGA,OAAA2X,EAGA,GAhEA3X,EAAA+Q,KAAAx4B,KAAAw4B,KACA/Q,EAAAwa,KAAAjiC,KAAAiiC,KACA,KAAAjiC,KAAAJ,OAAA6nB,EAAA7nB,KAAAI,KAAAJ,MACAI,KAAA2K,iBAAApM,EAAAmK,QAAA+e,EAAA9c,MAAA3K,KAAA2K,MAAAe,eACAtM,IAAAY,KAAAo/D,YAAA33C,EAAA23C,UAAAp/D,KAAAo/D,gBACAhgE,IAAAY,KAAAq/D,YAAA53C,EAAA43C,UAAAr/D,KAAAq/D,WACAr/D,KAAAs3D,oBAAA/4D,EAAAmK,QAAA+e,EAAA6vC,SAAAt3D,KAAAs3D,SAAA5rD,UACA1L,KAAAq3D,oBAAA94D,EAAAmK,QAAA+e,EAAA4vC,SAAAr3D,KAAAq3D,SAAA3rD,eACAtM,IAAAY,KAAAu3D,YAAA9vC,EAAA8vC,UAAAv3D,KAAAu3D,WACAv3D,KAAAk0D,eAAA31D,EAAAmkE,UAAAj7C,EAAAysC,IAAAl0D,KAAAk0D,IAAAtsB,OAAAC,GAAArP,MACAx4B,KAAAs6D,oBAAA/7D,EAAAmkE,UAAAj7C,EAAA6yC,SAAAt6D,KAAAs6D,SAAA1yB,OAAAC,GAAArP,MACAx4B,KAAAi4D,oBAAA15D,EAAAmkE,UAAAj7C,EAAAwwC,SAAAj4D,KAAAi4D,SAAArwB,OAAAC,GAAArP,MAEAx4B,KAAA24D,mBAAAp6D,EAAAmkE,UACAj7C,EAAAkxC,QAAA34D,KAAA24D,QAAA/wB,OAAAC,GAAArP,KACA/Q,EAAAuxC,UAAAh5D,KAAAg5D,WAGAh5D,KAAAi5D,qBAAA16D,EAAAmkE,UACAj7C,EAAAwxC,UAAAj5D,KAAAi5D,UAAArxB,OAAAC,GAAArP,KACA/Q,EAAA6xC,YAAAt5D,KAAAs5D,YAAAhsD,WAGAtN,KAAAigE,2BAAA1hE,EAAAmkE,UACAj7C,EAAAw4C,gBAAAjgE,KAAAigE,gBAAAr4B,OAAAC,GAAArP,KACA/Q,EAAAy4C,kBAAAlgE,KAAAkgE,kBACAz4C,EAAA04C,iBAAAngE,KAAAmgE,kBAGAngE,KAAAi6D,wBAAA17D,EAAAmkE,UAAAj7C,EAAAwyC,aAAAj6D,KAAAi6D,aAAAryB,OAAAC,GAAArP,MACAx4B,KAAA45D,wBAAAr7D,EAAAmkE,UAAAj7C,EAAAmyC,aAAA55D,KAAA45D,aAAAhyB,OAAAC,GAAArP,MACAx4B,KAAA43D,uBAAAr5D,EAAAmkE,UAAAj7C,EAAAmwC,YAAA53D,KAAA43D,YAAAhwB,OAAAC,GAAArP,MACAx4B,KAAAu5D,uBAAAh7D,EAAAmkE,UAAAj7C,EAAA8xC,YAAAv5D,KAAAu5D,YAAA3xB,OAAAC,GAAArP,MAEAx4B,KAAAqgE,kBAAA9hE,EAAAmkE,UACAj7C,EAAA44C,OAAArgE,KAAAqgE,OAAAz4B,OAAAC,GAAArP,KACA/Q,EAAA84C,aAAAvgE,KAAAugE,mBAGAnhE,IAAAY,KAAA+K,OAAA0c,EAAA1c,KAAA/K,KAAA+K,WACA3L,IAAAY,KAAAggE,kBAAAv4C,EAAAu4C,gBAAAhgE,KAAAggE,iBACAhgE,KAAAo3D,WAAA74D,EAAA4D,iBAAAslB,EAAA2vC,SAAAp3D,KAAAo3D,UACAp3D,KAAAy/D,UAAAlhE,EAAAuD,gBAAA2lB,EAAAg4C,QAAAz/D,KAAAy/D,SACAz/D,KAAA26D,OAAAp8D,EAAAmD,YAAA+lB,EAAAkzC,KAAA36D,KAAA26D,MACA36D,KAAAipC,eAAA1qC,EAAAwD,WAAA0lB,EAAAwhB,aAAAjpC,KAAAipC,cACAjpC,KAAA46D,QAAA,IAAAnzC,EAAAmzC,QAAA56D,KAAA46D,UACA,IAAA56D,KAAA66D,cAAApzC,EAAAozC,YAAA76D,KAAA66D,aACA76D,KAAA0/D,UAAA,IAAAj4C,EAAAi4C,UAAA1/D,KAAA0/D,YACA,IAAA1/D,KAAAslE,qBAAA79C,EAAA69C,mBAAAtlE,KAAAslE,qBACA,IAAAtlE,KAAA8/D,YAAAr4C,EAAAq4C,UAAA9/D,KAAA8/D,WACA9/D,KAAA+/D,mBAAA,IAAAt4C,EAAAs4C,mBAAA//D,KAAA+/D,oBAcA6F,EAAA,CACA,IAAA39B,EAAAQ,EAAAZ,EAAAI,UACAC,EAAAO,EAAAZ,EAAAK,QACAD,EAAAnpC,OAAA,IAAA2oB,EAAAwgB,YACAC,EAAAppC,OAAA,IAAA2oB,EAAAygB,UAGA,OAAAzgB,GAEAvc,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GACAT,KAAAJ,KAAAa,EAAAb,KACAI,KAAAwkE,IAAA/jE,EAAA+jE,IACAxkE,KAAAykE,OAAAhkE,EAAAgkE,OACAzkE,KAAAo3D,SAAA32D,EAAA22D,SACAp3D,KAAA26D,KAAAl6D,EAAAk6D,KACA36D,KAAAy/D,QAAAh/D,EAAAg/D,QACAz/D,KAAAipC,aAAAxoC,EAAAwoC,aACAjpC,KAAA46D,QAAAn6D,EAAAm6D,QACA56D,KAAA66D,YAAAp6D,EAAAo6D,YACA76D,KAAA0kE,SAAAjkE,EAAAikE,SACA1kE,KAAA2kE,SAAAlkE,EAAAkkE,SACA3kE,KAAA4kE,cAAAnkE,EAAAmkE,cACA5kE,KAAA6kE,cAAApkE,EAAAokE,cACA7kE,KAAA8kE,cAAArkE,EAAAqkE,cACA9kE,KAAA+kE,mBAAAtkE,EAAAskE,mBACA/kE,KAAAglE,UAAAvkE,EAAAukE,UACAhlE,KAAA2/D,UAAAl/D,EAAAk/D,UACA3/D,KAAA4/D,WAAAn/D,EAAAm/D,WACA5/D,KAAA6/D,WAAAp/D,EAAAo/D,WACA7/D,KAAAuwC,UAAA9vC,EAAA8vC,UACAvwC,KAAAmlE,cAAA1kE,EAAA0kE,cACAnlE,KAAAolE,oBAAA3kE,EAAA2kE,oBACAplE,KAAAqlE,mBAAA5kE,EAAA4kE,mBACArlE,KAAA0/D,UAAAj/D,EAAAi/D,UACA1/D,KAAAslE,mBAAA7kE,EAAA6kE,mBACAtlE,KAAAulE,SAAA9kE,EAAA8kE,SACAvlE,KAAAyjC,QAAAhjC,EAAAgjC,QACAzjC,KAAAklE,YAAAzkE,EAAAykE,YACA,IAAAW,EAAAplE,EAAAwkE,eACAa,EAAA,KAEA,UAAAD,EAAA,CACA,IAAAh5C,EAAAg5C,EAAA/mE,OACAgnE,EAAA,IAAAlnE,MAAAiuB,GAEA,QAAA5H,EAAA,EAAuBA,IAAA4H,IAAS5H,EAChC6gD,EAAA7gD,GAAA4gD,EAAA5gD,GAAA/Z,QAKA,OADAlL,KAAAilE,eAAAa,EACA9lE,MAEAsX,OAAA,WACAtX,KAAA0iC,cAAA,CACAT,KAAA,YAGAgQ,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,cAIApiC,OAAAM,OAAA5B,EAAA+lE,SAAA3kE,UAAApB,EAAAwjC,gBAAApiC,WACApB,EAAAgmE,gBAAA,EAgBAhmE,EAAAwnE,kBAAA,SAAAj1B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UACA1I,KAAAgmE,UAAA,EACAhmE,KAAAimE,QAAA,QACAjmE,KAAAkmE,SAAA,QACAlmE,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAAwnE,kBAAApmE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAwnE,kBAAApmE,UAAAqJ,YAAAzK,EAAAwnE,kBAEAxnE,EAAAwnE,kBAAApmE,UAAAuJ,KAAA,SAAAzI,GAMA,OALAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAgmE,UAAAvlE,EAAAulE,UACAhmE,KAAAimE,QAAAxlE,EAAAwlE,QACAjmE,KAAAkmE,SAAAzlE,EAAAylE,SACAlmE,MAmBAzB,EAAA4nE,mBAAA,SAAAr1B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,qBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UACA1I,KAAAgmE,UAAA,EACAhmE,KAAAkvB,MAAA,EACAlvB,KAAAomE,SAAA,EACApmE,KAAAqmE,QAAA,EACArmE,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAA4nE,mBAAAxmE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAA4nE,mBAAAxmE,UAAAqJ,YAAAzK,EAAA4nE,mBAEA5nE,EAAA4nE,mBAAAxmE,UAAAuJ,KAAA,SAAAzI,GAOA,OANAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAgmE,UAAAvlE,EAAAulE,UACAhmE,KAAAkvB,MAAAzuB,EAAAyuB,MACAlvB,KAAAomE,SAAA3lE,EAAA2lE,SACApmE,KAAAqmE,QAAA5lE,EAAA4lE,QACArmE,MAqCAzB,EAAA+nE,kBAAA,SAAAx1B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UAEA1I,KAAAk0D,IAAA,KACAl0D,KAAAs4D,MAAA,KACAt4D,KAAAygE,eAAA,EACAzgE,KAAAu5D,YAAA,KACAv5D,KAAAs6D,SAAA,KACAt6D,KAAAqgE,OAAA,KACArgE,KAAAsgE,QAAA/hE,EAAAyF,kBACAhE,KAAAugE,aAAA,EACAvgE,KAAAumE,gBAAA,IACAvmE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwmE,iBAAA,QACAxmE,KAAAymE,kBAAA,QACAzmE,KAAA0mE,UAAA,EACA1mE,KAAAksC,cAAA,EACAlsC,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAA+nE,kBAAA3mE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAA+nE,kBAAA3mE,UAAAqJ,YAAAzK,EAAA+nE,kBAEA/nE,EAAA+nE,kBAAA3mE,UAAAuJ,KAAA,SAAAzI,GAkBA,OAjBAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAs4D,MAAA73D,EAAA63D,MACAt4D,KAAAygE,eAAAhgE,EAAAggE,eACAzgE,KAAAu5D,YAAA94D,EAAA84D,YACAv5D,KAAAs6D,SAAA75D,EAAA65D,SACAt6D,KAAAqgE,OAAA5/D,EAAA4/D,OACArgE,KAAAsgE,QAAA7/D,EAAA6/D,QACAtgE,KAAAugE,aAAA9/D,EAAA8/D,aACAvgE,KAAAumE,gBAAA9lE,EAAA8lE,gBACAvmE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,KAAAwmE,iBAAA/lE,EAAA+lE,iBACAxmE,KAAAymE,kBAAAhmE,EAAAgmE,kBACAzmE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,MA2BAzB,EAAAooE,kBAAA,SAAA71B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA4mE,aAAAroE,EAAAiK,kBACAxI,KAAA0mE,UAAA,EACA1mE,KAAAksC,cAAA,EACAlsC,KAAAk0D,IAAA,KACAl0D,KAAAs6D,SAAA,KACAt6D,KAAAigE,gBAAA,KACAjgE,KAAAkgE,kBAAA,EACAlgE,KAAAmgE,iBAAA,EACAngE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwkE,KAAA,EACAxkE,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAAooE,kBAAAhnE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAooE,kBAAAhnE,UAAAqJ,YAAAzK,EAAAooE,kBAEApoE,EAAAooE,kBAAAhnE,UAAAuJ,KAAA,SAAAzI,GAYA,OAXAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA4mE,aAAAnmE,EAAAmmE,aACA5mE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAs6D,SAAA75D,EAAA65D,SACAt6D,KAAAigE,gBAAAx/D,EAAAw/D,gBACAjgE,KAAAkgE,kBAAAz/D,EAAAy/D,kBACAlgE,KAAAmgE,iBAAA1/D,EAAA0/D,iBACAngE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,MA0CAzB,EAAAsoE,oBAAA,SAAA/1B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,sBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UAEA1I,KAAAk0D,IAAA,KACAl0D,KAAAi4D,SAAA,KACAj4D,KAAAwgE,kBAAA,EACAxgE,KAAAs4D,MAAA,KACAt4D,KAAAygE,eAAA,EACAzgE,KAAAs3D,SAAA,IAAA/4D,EAAAmK,MAAA,GACA1I,KAAAogE,kBAAA,EACApgE,KAAA43D,YAAA,KACA53D,KAAAu5D,YAAA,KACAv5D,KAAAs6D,SAAA,KACAt6D,KAAAqgE,OAAA,KACArgE,KAAAsgE,QAAA/hE,EAAAyF,kBACAhE,KAAAugE,aAAA,EACAvgE,KAAAumE,gBAAA,IACAvmE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwmE,iBAAA,QACAxmE,KAAAymE,kBAAA,QACAzmE,KAAA0mE,UAAA,EACA1mE,KAAAksC,cAAA,EACAlsC,KAAAmsC,cAAA,EACAnsC,KAAAylE,UAAA30B,IAGAvyC,EAAAsoE,oBAAAlnE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAsoE,oBAAAlnE,UAAAqJ,YAAAzK,EAAAsoE,oBAEAtoE,EAAAsoE,oBAAAlnE,UAAAuJ,KAAA,SAAAzI,GAwBA,OAvBAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAi4D,SAAAx3D,EAAAw3D,SACAj4D,KAAAwgE,kBAAA//D,EAAA+/D,kBACAxgE,KAAAs4D,MAAA73D,EAAA63D,MACAt4D,KAAAygE,eAAAhgE,EAAAggE,eACAzgE,KAAAs3D,SAAApuD,KAAAzI,EAAA62D,UACAt3D,KAAA43D,YAAAn3D,EAAAm3D,YACA53D,KAAAogE,kBAAA3/D,EAAA2/D,kBACApgE,KAAAu5D,YAAA94D,EAAA84D,YACAv5D,KAAAs6D,SAAA75D,EAAA65D,SACAt6D,KAAAqgE,OAAA5/D,EAAA4/D,OACArgE,KAAAsgE,QAAA7/D,EAAA6/D,QACAtgE,KAAAugE,aAAA9/D,EAAA8/D,aACAvgE,KAAAumE,gBAAA9lE,EAAA8lE,gBACAvmE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,KAAAwmE,iBAAA/lE,EAAA+lE,iBACAxmE,KAAAymE,kBAAAhmE,EAAAgmE,kBACAzmE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,KAAAmsC,aAAA1rC,EAAA0rC,aACAnsC,MAeAzB,EAAAuoE,mBAAA,SAAAh2B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,KAAA8wC,GACA9wC,KAAAiiC,KAAA,qBACAjiC,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwkE,KAAA,EACAxkE,KAAAykE,QAAA,EACAzkE,KAAAksC,cAAA,EACAlsC,KAAAylE,UAAA30B,IAGAvyC,EAAAuoE,mBAAAnnE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAuoE,mBAAAnnE,UAAAqJ,YAAAzK,EAAAuoE,mBAEAvoE,EAAAuoE,mBAAAnnE,UAAAuJ,KAAA,SAAAzI,GAIA,OAHAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,MAsDAzB,EAAAwoE,kBAAA,SAAAj2B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UAEA1I,KAAAq3D,SAAA,IAAA94D,EAAAmK,MAAA,SACA1I,KAAAu3D,UAAA,GACAv3D,KAAAk0D,IAAA,KACAl0D,KAAAi4D,SAAA,KACAj4D,KAAAwgE,kBAAA,EACAxgE,KAAAs4D,MAAA,KACAt4D,KAAAygE,eAAA,EACAzgE,KAAAs3D,SAAA,IAAA/4D,EAAAmK,MAAA,GACA1I,KAAAogE,kBAAA,EACApgE,KAAA43D,YAAA,KACA53D,KAAA24D,QAAA,KACA34D,KAAAg5D,UAAA,EACAh5D,KAAAi5D,UAAA,KACAj5D,KAAAs5D,YAAA,IAAA/6D,EAAAme,QAAA,KACA1c,KAAAigE,gBAAA,KACAjgE,KAAAkgE,kBAAA,EACAlgE,KAAAmgE,iBAAA,EACAngE,KAAAu5D,YAAA,KACAv5D,KAAAs6D,SAAA,KACAt6D,KAAAqgE,OAAA,KACArgE,KAAAsgE,QAAA/hE,EAAAyF,kBACAhE,KAAAugE,aAAA,EACAvgE,KAAAumE,gBAAA,IACAvmE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwmE,iBAAA,QACAxmE,KAAAymE,kBAAA,QACAzmE,KAAA0mE,UAAA,EACA1mE,KAAAksC,cAAA,EACAlsC,KAAAmsC,cAAA,EACAnsC,KAAAylE,UAAA30B,IAGAvyC,EAAAwoE,kBAAApnE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAwoE,kBAAApnE,UAAAqJ,YAAAzK,EAAAwoE,kBAEAxoE,EAAAwoE,kBAAApnE,UAAAuJ,KAAA,SAAAzI,GAiCA,OAhCAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAq3D,SAAAnuD,KAAAzI,EAAA42D,UACAr3D,KAAAu3D,UAAA92D,EAAA82D,UACAv3D,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAi4D,SAAAx3D,EAAAw3D,SACAj4D,KAAAwgE,kBAAA//D,EAAA+/D,kBACAxgE,KAAAs4D,MAAA73D,EAAA63D,MACAt4D,KAAAygE,eAAAhgE,EAAAggE,eACAzgE,KAAAs3D,SAAApuD,KAAAzI,EAAA62D,UACAt3D,KAAA43D,YAAAn3D,EAAAm3D,YACA53D,KAAAogE,kBAAA3/D,EAAA2/D,kBACApgE,KAAA24D,QAAAl4D,EAAAk4D,QACA34D,KAAAg5D,UAAAv4D,EAAAu4D,UACAh5D,KAAAi5D,UAAAx4D,EAAAw4D,UACAj5D,KAAAs5D,YAAApwD,KAAAzI,EAAA64D,aACAt5D,KAAAigE,gBAAAx/D,EAAAw/D,gBACAjgE,KAAAkgE,kBAAAz/D,EAAAy/D,kBACAlgE,KAAAmgE,iBAAA1/D,EAAA0/D,iBACAngE,KAAAu5D,YAAA94D,EAAA84D,YACAv5D,KAAAs6D,SAAA75D,EAAA65D,SACAt6D,KAAAqgE,OAAA5/D,EAAA4/D,OACArgE,KAAAsgE,QAAA7/D,EAAA6/D,QACAtgE,KAAAugE,aAAA9/D,EAAA8/D,aACAvgE,KAAAumE,gBAAA9lE,EAAA8lE,gBACAvmE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,KAAAwmE,iBAAA/lE,EAAA+lE,iBACAxmE,KAAAymE,kBAAAhmE,EAAAgmE,kBACAzmE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,KAAAmsC,aAAA1rC,EAAA0rC,aACAnsC,MAuDAzB,EAAAyoE,qBAAA,SAAAl2B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAinE,QAAA,CACAC,SAAA,IAEAlnE,KAAAiiC,KAAA,uBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UAEA1I,KAAAo/D,UAAA,GACAp/D,KAAAq/D,UAAA,GACAr/D,KAAAk0D,IAAA,KACAl0D,KAAAi4D,SAAA,KACAj4D,KAAAwgE,kBAAA,EACAxgE,KAAAs4D,MAAA,KACAt4D,KAAAygE,eAAA,EACAzgE,KAAAs3D,SAAA,IAAA/4D,EAAAmK,MAAA,GACA1I,KAAAogE,kBAAA,EACApgE,KAAA43D,YAAA,KACA53D,KAAA24D,QAAA,KACA34D,KAAAg5D,UAAA,EACAh5D,KAAAi5D,UAAA,KACAj5D,KAAAs5D,YAAA,IAAA/6D,EAAAme,QAAA,KACA1c,KAAAigE,gBAAA,KACAjgE,KAAAkgE,kBAAA,EACAlgE,KAAAmgE,iBAAA,EACAngE,KAAAi6D,aAAA,KACAj6D,KAAA45D,aAAA,KACA55D,KAAAs6D,SAAA,KACAt6D,KAAAqgE,OAAA,KACArgE,KAAAmnE,gBAAA,EACAnnE,KAAAumE,gBAAA,IACAvmE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwmE,iBAAA,QACAxmE,KAAAymE,kBAAA,QACAzmE,KAAA0mE,UAAA,EACA1mE,KAAAksC,cAAA,EACAlsC,KAAAmsC,cAAA,EACAnsC,KAAAylE,UAAA30B,IAGAvyC,EAAAyoE,qBAAArnE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAyoE,qBAAArnE,UAAAqJ,YAAAzK,EAAAyoE,qBAEAzoE,EAAAyoE,qBAAArnE,UAAAuJ,KAAA,SAAAzI,GAoCA,OAnCAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAinE,QAAA,CACAC,SAAA,IAEAlnE,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAo/D,UAAA3+D,EAAA2+D,UACAp/D,KAAAq/D,UAAA5+D,EAAA4+D,UACAr/D,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAi4D,SAAAx3D,EAAAw3D,SACAj4D,KAAAwgE,kBAAA//D,EAAA+/D,kBACAxgE,KAAAs4D,MAAA73D,EAAA63D,MACAt4D,KAAAygE,eAAAhgE,EAAAggE,eACAzgE,KAAAs3D,SAAApuD,KAAAzI,EAAA62D,UACAt3D,KAAA43D,YAAAn3D,EAAAm3D,YACA53D,KAAAogE,kBAAA3/D,EAAA2/D,kBACApgE,KAAA24D,QAAAl4D,EAAAk4D,QACA34D,KAAAg5D,UAAAv4D,EAAAu4D,UACAh5D,KAAAi5D,UAAAx4D,EAAAw4D,UACAj5D,KAAAs5D,YAAApwD,KAAAzI,EAAA64D,aACAt5D,KAAAigE,gBAAAx/D,EAAAw/D,gBACAjgE,KAAAkgE,kBAAAz/D,EAAAy/D,kBACAlgE,KAAAmgE,iBAAA1/D,EAAA0/D,iBACAngE,KAAAi6D,aAAAx5D,EAAAw5D,aACAj6D,KAAA45D,aAAAn5D,EAAAm5D,aACA55D,KAAAs6D,SAAA75D,EAAA65D,SACAt6D,KAAAqgE,OAAA5/D,EAAA4/D,OACArgE,KAAAmnE,gBAAA1mE,EAAA0mE,gBACAnnE,KAAAumE,gBAAA9lE,EAAA8lE,gBACAvmE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,KAAAwmE,iBAAA/lE,EAAA+lE,iBACAxmE,KAAAymE,kBAAAhmE,EAAAgmE,kBACAzmE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,KAAAmsC,aAAA1rC,EAAA0rC,aACAnsC,MAYAzB,EAAA6oE,qBAAA,SAAAt2B,GACAvyC,EAAAyoE,qBAAApmE,KAAAZ,MACAA,KAAAinE,QAAA,CACAI,SAAA,IAEArnE,KAAAiiC,KAAA,uBACAjiC,KAAAugE,aAAA,GAEAvgE,KAAAsnE,UAAA,EACAtnE,KAAAunE,mBAAA,EACAvnE,KAAAylE,UAAA30B,IAGAvyC,EAAA6oE,qBAAAznE,UAAAE,OAAA6/B,OAAAnhC,EAAAyoE,qBAAArnE,WACApB,EAAA6oE,qBAAAznE,UAAAqJ,YAAAzK,EAAA6oE,qBAEA7oE,EAAA6oE,qBAAAznE,UAAAuJ,KAAA,SAAAzI,GAQA,OAPAlC,EAAAyoE,qBAAArnE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAinE,QAAA,CACAI,SAAA,IAEArnE,KAAAugE,aAAA9/D,EAAA8/D,aACAvgE,KAAAsnE,UAAA7mE,EAAA6mE,UACAtnE,KAAAunE,mBAAA9mE,EAAA8mE,mBACAvnE,MAQAzB,EAAAipE,cAAA,SAAAx/B,GACAhoC,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAiiC,KAAA,gBACAjiC,KAAAgoC,uBAAAppC,MAAAopC,EAAA,GACAhoC,KAAAyjC,SAAA,GAGAllC,EAAAipE,cAAA7nE,UAAA,CACAqJ,YAAAzK,EAAAipE,cACA5/B,OAAA,SAAAC,GAaA,IAZA,IAAAvnC,EAAA,CACA6nC,SAAA,CACAC,QAAA,IACAnG,KAAA,WACAoG,UAAA,oBAEA7P,KAAAx4B,KAAAw4B,KACAyJ,KAAAjiC,KAAAiiC,KACA+F,UAAA,IAEAA,EAAAhoC,KAAAgoC,UAEA/iB,EAAA,EAAAjb,EAAAg+B,EAAAlpC,OAA2CmmB,EAAAjb,EAAOib,IAAA,CAClD,IAAAujB,EAAAR,EAAA/iB,GAAA2iB,OAAAC,UACAW,EAAAL,SACA7nC,EAAA0nC,UAAA1L,KAAAkM,GAIA,OADAloC,EAAAmjC,QAAAzjC,KAAAyjC,QACAnjC,GAEA4K,MAAA,WAGA,IAFA,IAAAs9B,EAAA,IAAAxoC,KAAAgJ,YAEAic,EAAA,EAAqBA,EAAAjlB,KAAAgoC,UAAAlpC,OAA2BmmB,IAChDujB,EAAAR,UAAA1L,KAAAt8B,KAAAgoC,UAAA/iB,GAAA/Z,SAIA,OADAs9B,EAAA/E,QAAAzjC,KAAAyjC,QACA+E,IAkBAjqC,EAAAkpE,eAAA,SAAA32B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,iBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UACA1I,KAAAk0D,IAAA,KACAl0D,KAAA+K,KAAA,EACA/K,KAAAggE,iBAAA,EACAhgE,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAAkpE,eAAA9nE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAkpE,eAAA9nE,UAAAqJ,YAAAzK,EAAAkpE,eAEAlpE,EAAAkpE,eAAA9nE,UAAAuJ,KAAA,SAAAzI,GAMA,OALAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAA+K,KAAAtK,EAAAsK,KACA/K,KAAAggE,gBAAAv/D,EAAAu/D,gBACAhgE,MAyBAzB,EAAAmpE,eAAA,SAAA52B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,iBACAjiC,KAAAinE,QAAA,GACAjnE,KAAAs/D,SAAA,GACAt/D,KAAAu/D,aAAA,gGACAv/D,KAAAw/D,eAAA,iEACAx/D,KAAAgmE,UAAA,EACAhmE,KAAA8/D,WAAA,EACA9/D,KAAA+/D,mBAAA,EACA//D,KAAAwkE,KAAA,EAEAxkE,KAAAykE,QAAA,EAEAzkE,KAAA2nE,UAAA,EAEA3nE,KAAA0mE,UAAA,EAEA1mE,KAAAksC,cAAA,EAEAlsC,KAAAmsC,cAAA,EAEAnsC,KAAA4nE,WAAA,CACAC,aAAA,EAEAC,WAAA,EAEAC,aAAA,EAEAC,kBAAA,GAKAhoE,KAAAioE,uBAAA,CACAt9D,MAAA,QACA4iC,GAAA,MACAE,IAAA,OAEAztC,KAAAkoE,yBAAA9oE,OAEAA,IAAA0xC,SACA1xC,IAAA0xC,EAAAzpB,YACA9c,QAAA2U,MAAA,2FAGAlf,KAAAylE,UAAA30B,KAIAvyC,EAAAmpE,eAAA/nE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAmpE,eAAA/nE,UAAAqJ,YAAAzK,EAAAmpE,eAEAnpE,EAAAmpE,eAAA/nE,UAAAuJ,KAAA,SAAAzI,GAcA,OAbAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAAw/D,eAAA/+D,EAAA++D,eACAx/D,KAAAu/D,aAAA9+D,EAAA8+D,aACAv/D,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAzK,EAAA6+D,UACAt/D,KAAAinE,QAAAxmE,EAAAwmE,QACAjnE,KAAA8/D,UAAAr/D,EAAAq/D,UACA9/D,KAAA+/D,mBAAAt/D,EAAAs/D,mBACA//D,KAAAykE,OAAAhkE,EAAAgkE,OACAzkE,KAAA2nE,SAAAlnE,EAAAknE,SACA3nE,KAAA0mE,SAAAjmE,EAAAimE,SACA1mE,KAAAksC,aAAAzrC,EAAAyrC,aACAlsC,KAAAmsC,aAAA1rC,EAAA0rC,aACAnsC,KAAA4nE,WAAAnnE,EAAAmnE,WACA5nE,MAGAzB,EAAAmpE,eAAA/nE,UAAAioC,OAAA,SAAAC,GACA,IAAApgB,EAAAlpB,EAAA+lE,SAAA3kE,UAAAioC,OAAAhnC,KAAAZ,KAAA6nC,GAIA,OAHApgB,EAAA63C,SAAAt/D,KAAAs/D,SACA73C,EAAA83C,aAAAv/D,KAAAu/D,aACA93C,EAAA+3C,eAAAx/D,KAAAw/D,eACA/3C,GAQAlpB,EAAA6pE,kBAAA,SAAAt3B,GACAvyC,EAAAmpE,eAAA9mE,KAAAZ,KAAA8wC,GACA9wC,KAAAiiC,KAAA,qBAGA1jC,EAAA6pE,kBAAAzoE,UAAAE,OAAA6/B,OAAAnhC,EAAAmpE,eAAA/nE,WACApB,EAAA6pE,kBAAAzoE,UAAAqJ,YAAAzK,EAAA6pE,kBAeA7pE,EAAA8pE,eAAA,SAAAv3B,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,iBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UACA1I,KAAAk0D,IAAA,KACAl0D,KAAAmlC,SAAA,EACAnlC,KAAAwkE,KAAA,EACAxkE,KAAAykE,QAAA,EACAzkE,KAAAylE,UAAA30B,IAGAvyC,EAAA8pE,eAAA1oE,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAA8pE,eAAA1oE,UAAAqJ,YAAAzK,EAAA8pE,eAEA9pE,EAAA8pE,eAAA1oE,UAAAuJ,KAAA,SAAAzI,GAKA,OAJAlC,EAAA+lE,SAAA3kE,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2K,MAAAzB,KAAAzI,EAAAkK,OACA3K,KAAAk0D,IAAAzzD,EAAAyzD,IACAl0D,KAAAmlC,SAAA1kC,EAAA0kC,SACAnlC,MAQAzB,EAAA+pE,eAAA,WACA/pE,EAAAmpE,eAAA9mE,KAAAZ,KAAA,CACAs/D,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,QACA3N,QAAA,CACA3xD,MAAA,MAGAs2D,aAAAhhE,EAAAiqE,YAAA,YACAhJ,eAAAjhE,EAAAiqE,YAAA,cAEAxoE,KAAAykE,QAAA,EACAzkE,KAAA66D,aAAA,EACAh7D,OAAAukC,iBAAApkC,KAAA,CACA46D,QAAA,CACAx1B,YAAA,EACArlC,IAAA,WACA,OAAAC,KAAAs/D,SAAA1E,QAAA3xD,OAEAH,IAAA,SAAAG,GACAjJ,KAAAs/D,SAAA1E,QAAA3xD,aAMA1K,EAAA+pE,eAAA3oE,UAAAE,OAAA6/B,OAAAnhC,EAAAmpE,eAAA/nE,WACApB,EAAA+pE,eAAA3oE,UAAAqJ,YAAAzK,EAAA+pE,eAQA/pE,EAAAmkE,QAAA,SAAAnG,EAAAoG,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,EAAA2R,GACA5oE,OAAAC,eAAAE,KAAA,MACAiJ,MAAA1K,EAAAmqE,mBAEA1oE,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAAJ,KAAA,GACAI,KAAA2oE,WAAA,GACA3oE,KAAAu8D,WAAAn9D,IAAAm9D,IAAAh+D,EAAAmkE,QAAAkG,cACA5oE,KAAAgkE,QAAA,GACAhkE,KAAA2iE,aAAAvjE,IAAAujE,IAAApkE,EAAAmkE,QAAAmG,gBACA7oE,KAAAk3D,WAAA93D,IAAA83D,IAAA34D,EAAA0G,oBACAjF,KAAAm3D,WAAA/3D,IAAA+3D,IAAA54D,EAAA0G,oBACAjF,KAAA6wD,eAAAzxD,IAAAyxD,IAAAtyD,EAAA+G,aACAtF,KAAA8wD,eAAA1xD,IAAA0xD,IAAAvyD,EAAAiH,yBACAxF,KAAA82D,gBAAA13D,IAAA03D,IAAA,EACA92D,KAAA4wD,YAAAxxD,IAAAwxD,IAAAryD,EAAA+H,WACAtG,KAAAiiC,UAAA7iC,IAAA6iC,IAAA1jC,EAAAkH,iBACAzF,KAAAqN,OAAA,IAAA9O,EAAAme,QAAA,KACA1c,KAAA42D,OAAA,IAAAr4D,EAAAme,QAAA,KACA1c,KAAAoxD,iBAAA,EACApxD,KAAA8oE,kBAAA,EACA9oE,KAAA4iE,OAAA,EACA5iE,KAAA+oE,gBAAA,EAMA/oE,KAAAyoE,cAAArpE,IAAAqpE,IAAAlqE,EAAAyJ,eACAhI,KAAAooC,QAAA,EACApoC,KAAA80C,SAAA,MAGAv2C,EAAAmkE,QAAAkG,mBAAAxpE,EACAb,EAAAmkE,QAAAmG,gBAAAtqE,EAAAiG,UACAjG,EAAAmkE,QAAA/iE,UAAA,CACAqJ,YAAAzK,EAAAmkE,QAEAn5B,gBAAAtgC,IACA,IAAAA,GAAAjJ,KAAAooC,WAGAl9B,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GAkBA,OAjBAT,KAAAu8D,MAAA97D,EAAA87D,MACAv8D,KAAAgkE,QAAAvjE,EAAAujE,QAAAp4D,MAAA,GACA5L,KAAA2iE,QAAAliE,EAAAkiE,QACA3iE,KAAAk3D,MAAAz2D,EAAAy2D,MACAl3D,KAAAm3D,MAAA12D,EAAA02D,MACAn3D,KAAA6wD,UAAApwD,EAAAowD,UACA7wD,KAAA8wD,UAAArwD,EAAAqwD,UACA9wD,KAAA82D,WAAAr2D,EAAAq2D,WACA92D,KAAA4wD,OAAAnwD,EAAAmwD,OACA5wD,KAAAiiC,KAAAxhC,EAAAwhC,KACAjiC,KAAAqN,OAAAnE,KAAAzI,EAAA4M,QACArN,KAAA42D,OAAA1tD,KAAAzI,EAAAm2D,QACA52D,KAAAoxD,gBAAA3wD,EAAA2wD,gBACApxD,KAAA8oE,iBAAAroE,EAAAqoE,iBACA9oE,KAAA4iE,MAAAniE,EAAAmiE,MACA5iE,KAAA+oE,gBAAAtoE,EAAAsoE,gBACA/oE,KAAAyoE,SAAAhoE,EAAAgoE,SACAzoE,MAEA4nC,OAAA,SAAAC,GACA,QAAAzoC,IAAAyoC,EAAAI,SAAAjoC,KAAAw4B,MACA,OAAAqP,EAAAI,SAAAjoC,KAAAw4B,MAsBA,IAAAl4B,EAAA,CACA6nC,SAAA,CACAC,QAAA,IACAnG,KAAA,UACAoG,UAAA,kBAEA7P,KAAAx4B,KAAAw4B,KACA54B,KAAAI,KAAAJ,KACA+iE,QAAA3iE,KAAA2iE,QACA/L,OAAA,CAAA52D,KAAA42D,OAAAl3D,EAAAM,KAAA42D,OAAAjgD,GACAtJ,OAAA,CAAArN,KAAAqN,OAAA3N,EAAAM,KAAAqN,OAAAsJ,GACAkgD,KAAA,CAAA72D,KAAAk3D,MAAAl3D,KAAAm3D,OACArG,UAAA9wD,KAAA8wD,UACAD,UAAA7wD,KAAA6wD,UACAiG,WAAA92D,KAAA82D,WACA8L,MAAA5iE,KAAA4iE,OAGA,QAAAxjE,IAAAY,KAAAu8D,MAAA,CAEA,IAAAA,EAAAv8D,KAAAu8D,WAEAn9D,IAAAm9D,EAAA/jC,OACA+jC,EAAA/jC,KAAAj6B,EAAAgB,KAAA84B,qBAGAj5B,IAAAyoC,EAAAK,OAAAq0B,EAAA/jC,QACAqP,EAAAK,OAAAq0B,EAAA/jC,MAAA,CACAA,KAAA+jC,EAAA/jC,KACA08B,IAhDA,SAAAqH,GACA,IAAAyM,EAWA,YATA5pE,IAAAm9D,EAAA0M,UACAD,EAAAzM,IAEAyM,EAAAxM,SAAAC,gBAAA,0CACA9/C,MAAA4/C,EAAA5/C,MACAqsD,EAAApsD,OAAA2/C,EAAA3/C,OACAosD,EAAAE,WAAA,MAAAC,UAAA5M,EAAA,IAAAA,EAAA5/C,MAAA4/C,EAAA3/C,SAGAosD,EAAArsD,MAAA,MAAAqsD,EAAApsD,OAAA,KACAosD,EAAAC,UAAA,iBAEAD,EAAAC,UAAA,aAiCAG,CAAA7M,KAIAj8D,EAAAi8D,QAAA/jC,KAIA,OADAqP,EAAAI,SAAAjoC,KAAAw4B,MAAAl4B,EACAA,GAEA2xC,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,aAGAonC,YAAA,SAAA97B,GACA,GAAAvtC,KAAA2iE,UAAApkE,EAAAiG,UAAA,CAIA,GAHA+oC,EAAA1gC,SAAA7M,KAAA42D,QACArpB,EAAAhhC,IAAAvM,KAAAqN,QAEAkgC,EAAA7tC,EAAA,GAAA6tC,EAAA7tC,EAAA,EACA,OAAAM,KAAAk3D,OACA,KAAA34D,EAAAyG,eACAuoC,EAAA7tC,EAAA6tC,EAAA7tC,EAAAH,KAAAiK,MAAA+jC,EAAA7tC,GACA,MAEA,KAAAnB,EAAA0G,oBACAsoC,EAAA7tC,EAAA6tC,EAAA7tC,EAAA,MACA,MAEA,KAAAnB,EAAA2G,uBACA,IAAA3F,KAAAia,IAAAja,KAAAiK,MAAA+jC,EAAA7tC,GAAA,GACA6tC,EAAA7tC,EAAAH,KAAAqe,KAAA2vB,EAAA7tC,GAAA6tC,EAAA7tC,EAEA6tC,EAAA7tC,EAAA6tC,EAAA7tC,EAAAH,KAAAiK,MAAA+jC,EAAA7tC,GAOA,GAAA6tC,EAAA52B,EAAA,GAAA42B,EAAA52B,EAAA,EACA,OAAA3W,KAAAm3D,OACA,KAAA54D,EAAAyG,eACAuoC,EAAA52B,EAAA42B,EAAA52B,EAAApX,KAAAiK,MAAA+jC,EAAA52B,GACA,MAEA,KAAApY,EAAA0G,oBACAsoC,EAAA52B,EAAA42B,EAAA52B,EAAA,MACA,MAEA,KAAApY,EAAA2G,uBACA,IAAA3F,KAAAia,IAAAja,KAAAiK,MAAA+jC,EAAA52B,GAAA,GACA42B,EAAA52B,EAAApX,KAAAqe,KAAA2vB,EAAA52B,GAAA42B,EAAA52B,EAEA42B,EAAA52B,EAAA42B,EAAA52B,EAAApX,KAAAiK,MAAA+jC,EAAA52B,GAOA3W,KAAA4iE,QACAr1B,EAAA52B,EAAA,EAAA42B,EAAA52B,MAIA9W,OAAAM,OAAA5B,EAAAmkE,QAAA/iE,UAAApB,EAAAwjC,gBAAApiC,WACApB,EAAAmqE,eAAA,EAMAnqE,EAAA+qE,aAAA,SAAA3sD,EAAAC,EAAAqlB,EAAA0gC,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAgG,GACAv4D,EAAAmkE,QAAA9hE,KAAAZ,KAAA,KAAA2iE,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAvyD,EAAAmI,YAAAu7B,EAAA60B,GACA92D,KAAAu8D,MAAA,CACA5/C,QACAC,UAEA5c,KAAAiiC,UAAA7iC,IAAA6iC,IAAA1jC,EAAAqH,kBACA5F,KAAA6wD,eAAAzxD,IAAAyxD,IAAAtyD,EAAA4G,cACAnF,KAAA8wD,eAAA1xD,IAAA0xD,IAAAvyD,EAAA4G,cACAnF,KAAA4iE,OAAA,EACA5iE,KAAAoxD,iBAAA,GAGA7yD,EAAA+qE,aAAA3pE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAA+qE,aAAA3pE,UAAAqJ,YAAAzK,EAAA+qE,aAMA/qE,EAAAgrE,cAAA,SAAAP,EAAArG,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,GACAv4D,EAAAmkE,QAAA9hE,KAAAZ,KAAAgpE,EAAArG,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,GACA92D,KAAAupC,aAAA,GAGAhrC,EAAAgrE,cAAA5pE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAAgrE,cAAA5pE,UAAAqJ,YAAAzK,EAAAgrE,cAMAhrE,EAAAklE,YAAA,SAAAv7B,EAAAy6B,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,EAAA2R,GACAvgC,OAAA9oC,IAAA8oC,IAAA,GACAy6B,OAAAvjE,IAAAujE,IAAApkE,EAAAkG,sBACAlG,EAAAmkE,QAAA9hE,KAAAZ,KAAAkoC,EAAAy6B,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,EAAA2R,GACAzoE,KAAA4iE,OAAA,GAGArkE,EAAAklE,YAAA9jE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAAklE,YAAA9jE,UAAAqJ,YAAAzK,EAAAklE,YACA5jE,OAAAC,eAAAvB,EAAAklE,YAAA9jE,UAAA,UACAI,IAAA,WACA,OAAAC,KAAAu8D,OAEAzzD,IAAA,SAAAG,GACAjJ,KAAAu8D,MAAAtzD,KAQA1K,EAAA4lE,kBAAA,SAAAH,EAAArnD,EAAAC,EAAAg0C,EAAA3uB,EAAA0gC,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAgG,EAAA2R,GACAlqE,EAAAmkE,QAAA9hE,KAAAZ,KAAA,KAAA2iE,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,EAAA2R,GACAzoE,KAAAu8D,MAAA,CACA5/C,QACAC,UAEA5c,KAAAgkE,UAGAhkE,KAAA4iE,OAAA,EAGA5iE,KAAAoxD,iBAAA,GAGA7yD,EAAA4lE,kBAAAxkE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAA4lE,kBAAAxkE,UAAAqJ,YAAAzK,EAAA4lE,kBAMA5lE,EAAAulE,YAAA,SAAAr8C,EAAA9K,EAAAC,EAAAg0C,EAAA3uB,EAAA0gC,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAgG,EAAA2R,GACAlqE,EAAAmkE,QAAA9hE,KAAAZ,KAAA,KAAA2iE,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,EAAA2R,GACAzoE,KAAAu8D,MAAA,CACA90C,OACA9K,QACAC,UAEA5c,KAAA6wD,eAAAzxD,IAAAyxD,IAAAtyD,EAAA4G,cACAnF,KAAA8wD,eAAA1xD,IAAA0xD,IAAAvyD,EAAA4G,cACAnF,KAAA4iE,OAAA,EACA5iE,KAAAoxD,iBAAA,GAGA7yD,EAAAulE,YAAAnkE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAAulE,YAAAnkE,UAAAqJ,YAAAzK,EAAAulE,YAMAvlE,EAAAirE,aAAA,SAAAC,EAAA9G,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,GACAv4D,EAAAmkE,QAAA9hE,KAAAZ,KAAAypE,EAAA9G,EAAAzL,EAAAC,EAAAtG,EAAAC,EAAAF,EAAA3uB,EAAA60B,GACA92D,KAAAoxD,iBAAA,EACA,IAAAvqC,EAAA7mB,MAEA,SAAAsX,IACAoyD,sBAAApyD,GAEAmyD,EAAAE,YAAAF,EAAAG,oBACA/iD,EAAA0iB,aAAA,GAIAjyB,IAGA/Y,EAAAirE,aAAA7pE,UAAAE,OAAA6/B,OAAAnhC,EAAAmkE,QAAA/iE,WACApB,EAAAirE,aAAA7pE,UAAAqJ,YAAAzK,EAAAirE,aAMAjrE,EAAA0kE,MAAA,WACA1kE,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,SAGA1jC,EAAA0kE,MAAAtjE,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAA0kE,QAOA1kE,EAAA0lC,OAAA,SAAAhd,EAAAuhB,GACAjqC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,SACAjiC,KAAAinB,cAAA7nB,IAAA6nB,IAAA,IAAA1oB,EAAA6oB,eACApnB,KAAAwoC,cAAAppC,IAAAopC,IAAA,IAAAjqC,EAAAkpE,eAAA,CACA98D,MAAA,SAAApL,KAAAm5B,YAIAn6B,EAAA0lC,OAAAtkC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAA0lC,OACAP,QAAA,WACA,IAAAmmC,EAAA,IAAAtrE,EAAA8hB,QACAkR,EAAA,IAAAhzB,EAAA6yB,IACAxJ,EAAA,IAAArpB,EAAA0pB,OACA,gBAAAqb,EAAAC,GACA,IAAA3c,EAAA5mB,KACAinB,EAAAjnB,KAAAinB,SACAxG,EAAAzgB,KAAAygB,YACAyjB,EAAAZ,EAAAO,OAAAI,OAAAC,UAKA,GAHA,OAAAjd,EAAAyP,gBAAAzP,EAAA0P,wBACA/O,EAAA1e,KAAA+d,EAAAyP,gBACA9O,EAAArI,aAAAkB,IACA,IAAA6iB,EAAA/R,IAAA7J,iBAAAE,GAAA,CAEAiiD,EAAArpD,WAAAC,GACA8Q,EAAAroB,KAAAo6B,EAAA/R,KAAAhS,aAAAsqD,GACA,IAAAC,EAAA5lC,IAAAlkC,KAAAkvB,MAAAxvB,EAAAM,KAAAkvB,MAAAvY,EAAA3W,KAAAkvB,MAAAtY,GAAA,GACAmzD,EAAAD,IACAxiD,EAAA,IAAA/oB,EAAA+a,QAqBA,GAAA2N,aAAA1oB,EAAA6oB,eAAA,CACA,IAAA7mB,EAAA0mB,EAAA1mB,MAEA6sC,EADAnmB,EAAAI,WACAC,SAAAla,MAEA,UAAA7M,EAGA,IAFA,IAAAypC,EAAAzpC,EAAA6M,MAEA6X,EAAA,EAAAC,EAAA8kB,EAAAlrC,OAAgDmmB,EAAAC,EAAQD,IAAA,CACxD,IAAAhL,EAAA+vB,EAAA/kB,GACAqC,EAAAna,UAAAigC,EAAA,EAAAnzB,GACA+vD,EAAA1iD,EAAArN,OAGA,CAAAgL,EAAA,UAAAjb,EAAAojC,EAAAtuC,OAAA,EAAqDmmB,EAAAjb,EAAOib,IAC5DqC,EAAAna,UAAAigC,EAAA,EAAAnoB,GACA+kD,EAAA1iD,EAAArC,QAIA,KAAAkC,EAAAF,EAAAE,SAEA,IAAAlC,EAAA,EAAAjb,EAAAmd,EAAAroB,OAA8CmmB,EAAAjb,EAAOib,IACrD+kD,EAAA7iD,EAAAlC,OA1CA,SAAA+kD,EAAAxlD,EAAAjkB,GACA,IAAA0pE,EAAA14C,EAAAG,kBAAAlN,GAEA,GAAAylD,EAAAF,EAAA,CACA,IAAAG,EAAA34C,EAAA5M,oBAAAH,GACA0lD,EAAA3qD,aAAAkB,GACA,IAAAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAAgsD,GACA,GAAAhmD,EAAAof,EAAA7S,MAAAvM,EAAAof,EAAA5S,IAAA,OACA6S,EAAAjH,KAAA,CACApY,WACAimD,cAAA5qE,KAAAkM,KAAAw+D,GACAzlD,MAAA0lD,EAAAh/D,QACA3K,QACAwsC,KAAA,KACAnmB,cAnCA,GAoEA1b,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAinB,SAAAjnB,KAAAwoC,UAAAt/B,KAAAlJ,SAQAzB,EAAAwlC,KAAA,SAAA9c,EAAAuhB,EAAAoP,GACA,OAAAA,EAEA,OADArtC,QAAAC,KAAA,mGACA,IAAAjM,EAAA6rE,aAAAnjD,EAAAuhB,GAGAjqC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,OACAjiC,KAAAinB,cAAA7nB,IAAA6nB,IAAA,IAAA1oB,EAAA6oB,eACApnB,KAAAwoC,cAAAppC,IAAAopC,IAAA,IAAAjqC,EAAAwnE,kBAAA,CACAp7D,MAAA,SAAApL,KAAAm5B,YAIAn6B,EAAAwlC,KAAApkC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAwlC,KACAL,QAAA,WACA,IAAAmmC,EAAA,IAAAtrE,EAAA8hB,QACAkR,EAAA,IAAAhzB,EAAA6yB,IACAxJ,EAAA,IAAArpB,EAAA0pB,OACA,gBAAAqb,EAAAC,GACA,IAAAgN,EAAAjN,EAAAgB,cACA+lC,EAAA95B,IACAtpB,EAAAjnB,KAAAinB,SACAxG,EAAAzgB,KAAAygB,YAKA,GAHA,OAAAwG,EAAAyP,gBAAAzP,EAAA0P,wBACA/O,EAAA1e,KAAA+d,EAAAyP,gBACA9O,EAAArI,aAAAkB,IACA,IAAA6iB,EAAA/R,IAAA7J,iBAAAE,GAAA,CAEAiiD,EAAArpD,WAAAC,GACA8Q,EAAAroB,KAAAo6B,EAAA/R,KAAAhS,aAAAsqD,GACA,IAAAS,EAAA,IAAA/rE,EAAA+a,QACAixD,EAAA,IAAAhsE,EAAA+a,QACAkxD,EAAA,IAAAjsE,EAAA+a,QACAmxD,EAAA,IAAAlsE,EAAA+a,QACAoxD,EAAA1qE,gBAAAzB,EAAA6rE,aAAA,IAEA,GAAAnjD,aAAA1oB,EAAA6oB,eAAA,CACA,IAAA7mB,EAAA0mB,EAAA1mB,MAEA6sC,EADAnmB,EAAAI,WACAC,SAAAla,MAEA,UAAA7M,EAGA,IAFA,IAAAypC,EAAAzpC,EAAA6M,MAEA6X,EAAA,EAAAjb,EAAAggC,EAAAlrC,OAAA,EAAmDmmB,EAAAjb,EAAOib,GAAAylD,EAAA,CAC1D,IAAAzwD,EAAA+vB,EAAA/kB,GACApc,EAAAmhC,EAAA/kB,EAAA,GAIA,GAHAqlD,EAAAn9D,UAAAigC,EAAA,EAAAnzB,GACAswD,EAAAp9D,UAAAigC,EAAA,EAAAvkC,KACA0oB,EAAAI,oBAAA24C,EAAAC,EAAAE,EAAAD,GACAH,GACAI,EAAAlrD,aAAAvf,KAAAygB,cAEAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAAusD,IACAnnC,EAAA7S,MAAAvM,EAAAof,EAAA5S,KACA6S,EAAAjH,KAAA,CACApY,WAGAM,MAAAgmD,EAAAt/D,QAAAqU,aAAAvf,KAAAygB,aACAlgB,MAAA0kB,EACA8nB,KAAA,KACA49B,UAAA,KACA/jD,OAAA5mB,YAIA,IAAAilB,EAAA,EAAAjb,EAAAojC,EAAAtuC,OAAA,IAAyDmmB,EAAAjb,EAAOib,GAAAylD,EAAA,CAIhE,GAHAJ,EAAAn9D,UAAAigC,EAAA,EAAAnoB,GACAslD,EAAAp9D,UAAAigC,EAAA,EAAAnoB,EAAA,KACAsM,EAAAI,oBAAA24C,EAAAC,EAAAE,EAAAD,GACAH,GACAI,EAAAlrD,aAAAvf,KAAAygB,cAEAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAAusD,IACAnnC,EAAA7S,MAAAvM,EAAAof,EAAA5S,KACA6S,EAAAjH,KAAA,CACApY,WAGAM,MAAAgmD,EAAAt/D,QAAAqU,aAAAvf,KAAAygB,aACAlgB,MAAA0kB,EACA8nB,KAAA,KACA49B,UAAA,KACA/jD,OAAA5mB,aAIS,GAAAinB,aAAA1oB,EAAA2oB,SACT,KAAAC,EAAAF,EAAAE,SACAyjD,EAAAzjD,EAAAroB,OAEA,IAAAmmB,EAAA,EAAyBA,EAAA2lD,EAAA,EAAoB3lD,GAAAylD,EAAA,CAC7C,IAIAxmD,EAHA,KADAqN,EAAAI,oBAAAxK,EAAAlC,GAAAkC,EAAAlC,EAAA,GAAAwlD,EAAAD,GACAH,GACAI,EAAAlrD,aAAAvf,KAAAygB,cAEAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAAusD,IACAnnC,EAAA7S,MAAAvM,EAAAof,EAAA5S,KACA6S,EAAAjH,KAAA,CACApY,WAGAM,MAAAgmD,EAAAt/D,QAAAqU,aAAAvf,KAAAygB,aACAlgB,MAAA0kB,EACA8nB,KAAA,KACA49B,UAAA,KACA/jD,OAAA5mB,WA9FA,GAoGAkL,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAinB,SAAAjnB,KAAAwoC,UAAAt/B,KAAAlJ,SAQAzB,EAAA6rE,aAAA,SAAAnjD,EAAAuhB,GACAjqC,EAAAwlC,KAAAnjC,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAiiC,KAAA,gBAGA1jC,EAAA6rE,aAAAzqE,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwlC,KAAApkC,WAAA,CACAqJ,YAAAzK,EAAA6rE,eAUA7rE,EAAAulC,KAAA,SAAA7c,EAAAuhB,GACAjqC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,OACAjiC,KAAAinB,cAAA7nB,IAAA6nB,IAAA,IAAA1oB,EAAA6oB,eACApnB,KAAAwoC,cAAAppC,IAAAopC,IAAA,IAAAjqC,EAAA+nE,kBAAA,CACA37D,MAAA,SAAApL,KAAAm5B,WAEA14B,KAAA6qE,SAAAtsE,EAAAsJ,kBACA7H,KAAA8qE,sBAGAvsE,EAAAulC,KAAAnkC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAulC,KACAinC,YAAA,SAAA9hE,GACAjJ,KAAA6qE,SAAA5hE,GAEAC,KAAA,SAAAzI,GAGA,OAFAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA6qE,SAAApqE,EAAAoqE,SACA7qE,MAEA8qE,mBAAA,WACA,QAAA1rE,IAAAY,KAAAinB,SAAAilB,cAAAlsC,KAAAinB,SAAAilB,aAAAptC,OAAA,GACAkB,KAAAgrE,iBAAA,EACAhrE,KAAAirE,sBAAA,GACAjrE,KAAAkrE,sBAAA,GAEA,QAAAzgE,EAAA,EAAA0gE,EAAAnrE,KAAAinB,SAAAilB,aAAAptC,OAA+D2L,EAAA0gE,EAAQ1gE,IACvEzK,KAAAirE,sBAAA3uC,KAAA,GACAt8B,KAAAkrE,sBAAAlrE,KAAAinB,SAAAilB,aAAAzhC,GAAA7K,MAAA6K,IAIA2gE,0BAAA,SAAAxrE,GACA,YAAAR,IAAAY,KAAAkrE,sBAAAtrE,GACAI,KAAAkrE,sBAAAtrE,IAGA2K,QAAAC,KAAA,sDAAA5K,EAAA,iCACA,IAEA8jC,QAAA,WACA,IAAAmmC,EAAA,IAAAtrE,EAAA8hB,QACAkR,EAAA,IAAAhzB,EAAA6yB,IACAxJ,EAAA,IAAArpB,EAAA0pB,OACAmmB,EAAA,IAAA7vC,EAAA+a,QACA+0B,EAAA,IAAA9vC,EAAA+a,QACAg1B,EAAA,IAAA/vC,EAAA+a,QACA+xD,EAAA,IAAA9sE,EAAA+a,QACAgyD,EAAA,IAAA/sE,EAAA+a,QACAiyD,EAAA,IAAAhtE,EAAA+a,QACAkyD,EAAA,IAAAjtE,EAAAme,QACA+uD,EAAA,IAAAltE,EAAAme,QACAgvD,EAAA,IAAAntE,EAAAme,QACAivD,EAAA,IAAAptE,EAAA+a,QACAsyD,EAAA,IAAArtE,EAAA+a,QACAuyD,EAAA,IAAAttE,EAAA+a,QAEA,SAAAwyD,EAAAtnD,EAAAuQ,EAAAC,EAAAC,EAAA82C,EAAAt+B,EAAAu+B,GAMA,OALAztE,EAAAg+B,SAAAE,mBAAAjY,EAAAuQ,EAAAC,EAAAC,EAAA02C,GACAI,EAAAj/D,eAAA6+D,EAAAjsE,GACA+tC,EAAA3gC,eAAA6+D,EAAAh1D,GACAq1D,EAAAl/D,eAAA6+D,EAAA/0D,GACAm1D,EAAAx/D,IAAAkhC,GAAAlhC,IAAAy/D,GACAD,EAAA7gE,QAGA,SAAA+gE,EAAArlD,EAAA0c,EAAA/R,EAAAwiB,EAAAC,EAAAC,EAAAzvB,GACA,IACAgkB,EAAA5hB,EAAA4hB,SAQA,WANAA,EAAAmyB,OAAAp8D,EAAAoD,SACA4vB,EAAAwC,kBAAAkgB,EAAAD,EAAAD,GAAA,EAAAvvB,GAEA+M,EAAAwC,kBAAAggB,EAAAC,EAAAC,EAAAzL,EAAAmyB,OAAAp8D,EAAAqD,WAAA4iB,IAGA,YACAqnD,EAAA3iE,KAAAsb,GACAqnD,EAAAtsD,aAAAqH,EAAAnG,aACA,IAAAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAA2tD,GACA,OAAA3nD,EAAAof,EAAA7S,MAAAvM,EAAAof,EAAA5S,IAAA,KACA,CACAxM,WACAM,MAAAqnD,EAAA3gE,QACA0b,UAIA,SAAAslD,EAAAtlD,EAAA0c,EAAA/R,EAAA6b,EAAAE,EAAArzB,EAAApR,EAAAqE,GACAkhC,EAAAjhC,UAAAigC,EAAA,EAAAnzB,GACAo0B,EAAAlhC,UAAAigC,EAAA,EAAAvkC,GACAylC,EAAAnhC,UAAAigC,EAAA,EAAAlgC,GACA,IAAAi/D,EAAAF,EAAArlD,EAAA0c,EAAA/R,EAAA6c,EAAAC,EAAAC,EAAAs9B,GAcA,OAZAO,IACA7+B,IACAk+B,EAAAr+D,UAAAmgC,EAAA,EAAArzB,GACAwxD,EAAAt+D,UAAAmgC,EAAA,EAAAzkC,GACA6iE,EAAAv+D,UAAAmgC,EAAA,EAAApgC,GACAi/D,EAAA5+B,GAAAu+B,EAAAF,EAAAx9B,EAAAC,EAAAC,EAAAk9B,EAAAC,EAAAC,IAGAS,EAAAp/B,KAAA,IAAAxuC,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAA3O,EAAAg+B,SAAA/a,OAAA4sB,EAAAC,EAAAC,IACA69B,EAAAxB,UAAA1wD,GAGAkyD,EAGA,gBAAA7oC,EAAAC,GACA,IAiBA+J,EAAA6+B,EAjBAllD,EAAAjnB,KAAAinB,SACAuhB,EAAAxoC,KAAAwoC,SACA/nB,EAAAzgB,KAAAygB,YACA,QAAArhB,IAAAopC,IAEA,OAAAvhB,EAAAyP,gBAAAzP,EAAA0P,wBACA/O,EAAA1e,KAAA+d,EAAAyP,gBACA9O,EAAArI,aAAAkB,IACA,IAAA6iB,EAAA/R,IAAA7J,iBAAAE,KAEAiiD,EAAArpD,WAAAC,GACA8Q,EAAAroB,KAAAo6B,EAAA/R,KAAAhS,aAAAsqD,GAEA,OAAA5iD,EAAAslB,cACA,IAAAhb,EAAA1L,cAAAoB,EAAAslB,eAKA,GAAAtlB,aAAA1oB,EAAA6oB,eAAA,CACA,IAAAnN,EAAApR,EAAAqE,EACA3M,EAAA0mB,EAAA1mB,MACA8mB,EAAAJ,EAAAI,WACA+lB,EAAA/lB,EAAAC,SAAAla,MAMA,QAJAhO,IAAAioB,EAAAkmB,KACAD,EAAAjmB,EAAAkmB,GAAAngC,OAGA,OAAA7M,EAGA,IAFA,IAAAypC,EAAAzpC,EAAA6M,MAEA6X,EAAA,EAAAjb,EAAAggC,EAAAlrC,OAA+CmmB,EAAAjb,EAAOib,GAAA,EACtDhL,EAAA+vB,EAAA/kB,GACApc,EAAAmhC,EAAA/kB,EAAA,GACA/X,EAAA88B,EAAA/kB,EAAA,IACAknD,EAAAD,EAAAlsE,KAAAsjC,EAAA/R,EAAA6b,EAAAE,EAAArzB,EAAApR,EAAAqE,MAGAi/D,EAAAxB,UAAAprE,KAAAiK,MAAAyb,EAAA,GAEAse,EAAAjH,KAAA6vC,SAIA,IAAAlnD,EAAA,EAAAjb,EAAAojC,EAAAtuC,OAAiDmmB,EAAAjb,EAAOib,GAAA,GAIxDknD,EAAAD,EAAAlsE,KAAAsjC,EAAA/R,EAAA6b,EAAAE,EAHArzB,EAAAgL,EAAA,EACApc,EAAAoR,EAAA,EACA/M,EAAA+M,EAAA,MAIAkyD,EAAA5rE,MAAA0Z,EAEAspB,EAAAjH,KAAA6vC,SAIS,GAAAllD,aAAA1oB,EAAA2oB,SAAA,CACT,IAAAklD,EAAAC,EAAAC,EACAC,EAAA/jC,aAAAjqC,EAAAipE,cACAx/B,GAAA,IAAAukC,EAAA/jC,EAAAR,UAAA,KACA7gB,EAAAF,EAAAE,SACA6kB,EAAA/kB,EAAA+kB,MACAC,EAAAhlB,EAAAglB,cAAA,GACAA,EAAAntC,OAAA,IAAAwuC,EAAArB,GAEA,QAAAxvB,EAAA,EAAA0xB,EAAAnC,EAAAltC,OAA4C2d,EAAA0xB,EAAQ1xB,IAAA,CACpD,IAAAswB,EAAAf,EAAAvvB,GACA+vD,GAAA,IAAAD,EAAAvkC,EAAA+E,EAAAhE,eAAAP,EACA,QAAAppC,IAAAotE,EAAA,CAKA,GAJAJ,EAAAjlD,EAAA4lB,EAAA9yB,GACAoyD,EAAAllD,EAAA4lB,EAAAlkC,GACAyjE,EAAAnlD,EAAA4lB,EAAA7/B,IAEA,IAAAs/D,EAAAtgC,aAAA,CACA,IAAAA,EAAAjlB,EAAAilB,aACAugC,EAAAzsE,KAAAirE,sBACA78B,EAAAtlC,IAAA,OACAulC,EAAAvlC,IAAA,OACAwlC,EAAAxlC,IAAA,OAEA,QAAAe,EAAA,EAAA6iE,EAAAxgC,EAAAptC,OAAuD+K,EAAA6iE,EAAQ7iE,IAAA,CAC/D,IAAA8iE,EAAAF,EAAA5iE,GACA,OAAA8iE,EAAA,CACA,IAAAC,EAAA1gC,EAAAriC,GAAAsd,SACAinB,EAAAlxB,gBAAAmuD,EAAAluD,WAAAyvD,EAAA7/B,EAAA9yB,GAAAmyD,GAAAO,GACAt+B,EAAAnxB,gBAAAouD,EAAAnuD,WAAAyvD,EAAA7/B,EAAAlkC,GAAAwjE,GAAAM,GACAr+B,EAAApxB,gBAAAquD,EAAApuD,WAAAyvD,EAAA7/B,EAAA7/B,GAAAo/D,GAAAK,IAGAv+B,EAAA7hC,IAAA6/D,GACA/9B,EAAA9hC,IAAA8/D,GACA/9B,EAAA/hC,IAAA+/D,GACAF,EAAAh+B,EACAi+B,EAAAh+B,EACAi+B,EAAAh+B,EAKA,GAFA69B,EAAAF,EAAAjsE,KAAAsjC,EAAA/R,EAAA66C,EAAAC,EAAAC,EAAAV,GAEA,CACA,GAAAt+B,EAAA,CACA,IAAAu/B,EAAAv/B,EAAA7wB,GACA+uD,EAAAtiE,KAAA2jE,EAAA,IACApB,EAAAviE,KAAA2jE,EAAA,IACAnB,EAAAxiE,KAAA2jE,EAAA,IACAV,EAAA5+B,GAAAu+B,EAAAF,EAAAQ,EAAAC,EAAAC,EAAAd,EAAAC,EAAAC,GAGAS,EAAAp/B,OACAo/B,EAAAxB,UAAAluD,EACA8mB,EAAAjH,KAAA6vC,QAtLA,GA4LAjhE,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAinB,SAAAjnB,KAAAwoC,UAAAt/B,KAAAlJ,SAUAzB,EAAAuuE,KAAA,SAAAC,GACAxuE,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,OACAjiC,KAAA+sE,QAGAxuE,EAAAuuE,KAAAntE,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAuuE,KACA5jE,KAAA,SAAAzI,GAGA,OAFAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA+sE,KAAAtsE,EAAAssE,KACA/sE,QAWAzB,EAAAyuE,SAAA,SAAA7vB,EAAA8vB,EAAAC,GAOA,GANAltE,KAAAktE,sBAAA9tE,IAAA8tE,KACAltE,KAAAmtE,eAAA,IAAA5uE,EAAA8hB,QAEA88B,KAAA,GACAn9C,KAAAm9C,QAAAvxC,MAAA,GAEA5L,KAAAktE,iBAAA,CAOA,IAAAniE,EAAAxL,KAAAkM,KAAA,EAAAzL,KAAAm9C,MAAAr+C,QAEAiM,EAAAxM,EAAAgB,KAAA06B,eAAA16B,KAAAqe,KAAA7S,IACAA,EAAAxL,KAAA2M,IAAAnB,EAAA,GACA/K,KAAAotE,iBAAAriE,EACA/K,KAAAqtE,kBAAAtiE,EACA/K,KAAAstE,aAAA,IAAAnlD,aAAAnoB,KAAAotE,iBAAAptE,KAAAqtE,kBAAA,GAEArtE,KAAAutE,YAAA,IAAAhvE,EAAAulE,YAAA9jE,KAAAstE,aAAAttE,KAAAotE,iBAAAptE,KAAAqtE,kBAAA9uE,EAAA+H,WAAA/H,EAAAwH,gBAEA/F,KAAAstE,aAAA,IAAAnlD,aAAA,GAAAnoB,KAAAm9C,MAAAr+C,QAIA,QAAAM,IAAA6tE,EACAjtE,KAAAwtE,yBAEA,GAAAxtE,KAAAm9C,MAAAr+C,SAAAmuE,EAAAnuE,OACAkB,KAAAitE,eAAArhE,MAAA,OACO,CACPrB,QAAAC,KAAA,mDACAxK,KAAAitE,aAAA,GAEA,QAAApkE,EAAA,EAAA4kE,EAAAztE,KAAAm9C,MAAAr+C,OAA+C+J,EAAA4kE,EAAQ5kE,IACvD7I,KAAAitE,aAAA3wC,KAAA,IAAA/9B,EAAA8hB,WAMAxgB,OAAAM,OAAA5B,EAAAyuE,SAAArtE,UAAA,CACA6tE,kBAAA,WACAxtE,KAAAitE,aAAA,GAEA,QAAApkE,EAAA,EAAA4kE,EAAAztE,KAAAm9C,MAAAr+C,OAA6C+J,EAAA4kE,EAAQ5kE,IAAA,CACrD,IAAA8Q,EAAA,IAAApb,EAAA8hB,QAEArgB,KAAAm9C,MAAAt0C,IACA8Q,EAAA6G,WAAAxgB,KAAAm9C,MAAAt0C,GAAA4X,aAGAzgB,KAAAitE,aAAA3wC,KAAA3iB,KAGA+zD,KAAA,WAGA,IAFA,IAAA3iB,EAEAliD,EAAA,EAAA4kE,EAAAztE,KAAAm9C,MAAAr+C,OAA6C+J,EAAA4kE,EAAQ5kE,KACrDkiD,EAAA/qD,KAAAm9C,MAAAt0C,KAGAkiD,EAAAtqC,YAAAD,WAAAxgB,KAAAitE,aAAApkE,IAKA,IAAAA,EAAA,EAAA4kE,EAAAztE,KAAAm9C,MAAAr+C,OAA6C+J,EAAA4kE,EAAQ5kE,KACrDkiD,EAAA/qD,KAAAm9C,MAAAt0C,MAGAkiD,EAAA9lB,kBAAA1mC,EAAAuuE,MACA/hB,EAAA5qC,OAAAK,WAAAuqC,EAAA9lB,OAAAxkB,aACAsqC,EAAA5qC,OAAAtT,SAAAk+C,EAAAtqC,cAEAsqC,EAAA5qC,OAAAjX,KAAA6hD,EAAAtqC,aAGAsqC,EAAA5qC,OAAA6P,UAAA+6B,EAAAzjC,SAAAyjC,EAAA5zC,WAAA4zC,EAAA77B,SAIA5X,OAAA,WACA,IAAAq2D,EAAA,IAAApvE,EAAA8hB,QACA,kBAEA,QAAAxX,EAAA,EAAA4kE,EAAAztE,KAAAm9C,MAAAr+C,OAA+C+J,EAAA4kE,EAAQ5kE,IAAA,CAEvD,IAAAsX,EAAAngB,KAAAm9C,MAAAt0C,GAAA7I,KAAAm9C,MAAAt0C,GAAA4X,YAAAzgB,KAAAmtE,eACAQ,EAAArtD,iBAAAH,EAAAngB,KAAAitE,aAAApkE,IACA8kE,EAAArgE,QAAAtN,KAAAstE,aAAA,GAAAzkE,GAGA7I,KAAAktE,mBACAltE,KAAAutE,YAAAhkC,aAAA,IAZA,GAgBAr+B,MAAA,WACA,WAAA3M,EAAAyuE,SAAAhtE,KAAAm9C,MAAAn9C,KAAAitE,aAAAjtE,KAAAktE,qBAUA3uE,EAAAykE,YAAA,SAAA/7C,EAAAuhB,EAAA0kC,GACA3uE,EAAAulC,KAAAljC,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAiiC,KAAA,cACAjiC,KAAA4tE,SAAA,WACA5tE,KAAA6tE,WAAA,IAAAtvE,EAAA8hB,QACArgB,KAAA8tE,kBAAA,IAAAvvE,EAAA8hB,QAIA,IAAA88B,EAAA,GAEA,GAAAn9C,KAAAinB,eAAA7nB,IAAAY,KAAAinB,SAAAk2B,MAAA,CAGA,IAFA,IAAA4N,EAAAgjB,EAEAllE,EAAA,EAAA4kE,EAAAztE,KAAAinB,SAAAk2B,MAAAr+C,OAAsD+J,EAAA4kE,IAAQ5kE,EAC9DklE,EAAA/tE,KAAAinB,SAAAk2B,MAAAt0C,GACAkiD,EAAA,IAAAxsD,EAAAuuE,KAAA9sE,MACAm9C,EAAA7gB,KAAAyuB,GACAA,EAAAnrD,KAAAmuE,EAAAnuE,KACAmrD,EAAAzjC,SAAAna,UAAA4gE,EAAAC,KACAjjB,EAAA5zC,WAAAhK,UAAA4gE,EAAAE,WACA7uE,IAAA2uE,EAAAG,KAAAnjB,EAAA77B,MAAA/hB,UAAA4gE,EAAAG,KAGA,IAAArlE,EAAA,EAAA4kE,EAAAztE,KAAAinB,SAAAk2B,MAAAr+C,OAAsD+J,EAAA4kE,IAAQ5kE,GAG9D,KAFAklE,EAAA/tE,KAAAinB,SAAAk2B,MAAAt0C,IAEAo8B,QAAA,OAAA8oC,EAAA9oC,aAAA7lC,IAAA+9C,EAAA4wB,EAAA9oC,QACAkY,EAAA4wB,EAAA9oC,QAAA14B,IAAA4wC,EAAAt0C,IAEA7I,KAAAuM,IAAA4wC,EAAAt0C,IAKA7I,KAAAmuE,uBACAnuE,KAAA8mB,mBAAA,GACA9mB,KAAA0oD,KAAA,IAAAnqD,EAAAyuE,SAAA7vB,OAAA/9C,EAAA8tE,GAAAltE,KAAAygB,cAGAliB,EAAAykE,YAAArjE,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAulC,KAAAnkC,WAAA,CACAqJ,YAAAzK,EAAAykE,YACAta,KAAA,SAAAS,EAAA0kB,GACA7tE,KAAAmpD,gBAEA/pD,IAAAyuE,IACA7tE,KAAA8mB,mBAAA,GACA9mB,KAAAmpD,SAAAqkB,oBACAK,EAAA7tE,KAAAygB,aAGAzgB,KAAA6tE,WAAA3kE,KAAA2kE,GACA7tE,KAAA8tE,kBAAAttD,WAAAqtD,IAEAH,KAAA,WACA1tE,KAAAmpD,SAAAukB,QAEAS,qBAAA,WACA,GAAAnuE,KAAAinB,oBAAA1oB,EAAA2oB,SACA,QAAAjC,EAAA,EAAuBA,EAAAjlB,KAAAinB,SAAAmlB,YAAAttC,OAAsCmmB,IAAA,CAC7D,IAAAmpD,EAAApuE,KAAAinB,SAAAmlB,YAAAnnB,IACAiK,EAAA,EAAAk/C,EAAApwD,qBAEA6G,IACAupD,EAAAthE,eAAAoiB,GAEAk/C,EAAAtlE,IAAA,cAGO,GAAA9I,KAAAinB,oBAAA1oB,EAAA6oB,eACP,KAAAinD,EAAA,IAAA9vE,EAAAikB,QACA8rD,EAAAtuE,KAAAinB,SAAAI,WAAAinD,WAEA,IAAArpD,EAAA,EAAuBA,EAAAqpD,EAAAhlC,MAAsBrkB,IAAA,CAK7C,IAAAiK,EAJAm/C,EAAA3uE,EAAA4uE,EAAAllD,KAAAnE,GACAopD,EAAA13D,EAAA23D,EAAAjlD,KAAApE,GACAopD,EAAAz3D,EAAA03D,EAAAhlD,KAAArE,GACAopD,EAAAx3D,EAAAy3D,EAAAjkC,KAAAplB,IACAiK,EAAA,EAAAm/C,EAAArwD,qBAEA6G,IACAwpD,EAAAvhE,eAAAoiB,GAEAm/C,EAAAvlE,IAAA,SAGAwlE,EAAA/jC,QAAAtlB,EAAAopD,EAAA3uE,EAAA2uE,EAAA13D,EAAA03D,EAAAz3D,EAAAy3D,EAAAx3D,MAIAiQ,kBAAA,SAAA6gB,GACAppC,EAAAulC,KAAAnkC,UAAAmnB,kBAAAlmB,KAAAZ,MAAA,GAEA,aAAAA,KAAA4tE,SACA5tE,KAAA8tE,kBAAAttD,WAAAxgB,KAAAygB,aACO,aAAAzgB,KAAA4tE,SACP5tE,KAAA8tE,kBAAAttD,WAAAxgB,KAAA6tE,YAEAtjE,QAAAC,KAAA,4CAAAxK,KAAA4tE,WAGA1iE,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAinB,SAAAjnB,KAAAwoC,SAAAxoC,KAAAmpD,SAAA+jB,kBAAAhkE,KAAAlJ,SAUAzB,EAAAylC,IAAA,WACAzlC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,MACApiC,OAAAukC,iBAAApkC,KAAA,CACAkjE,OAAA,CACA99B,YAAA,EACAn8B,MAAA,OAKA1K,EAAAylC,IAAArkC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAylC,IACA96B,KAAA,SAAAzI,GACAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GAAA,GAGA,IAFA,IAAAyiE,EAAAziE,EAAAyiE,OAEAj+C,EAAA,EAAAjb,EAAAk5D,EAAApkE,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAk+C,EAAAD,EAAAj+C,GACAjlB,KAAAojE,SAAAD,EAAAv8C,OAAA1b,QAAAi4D,EAAAj/C,UAGA,OAAAlkB,MAEAojE,SAAA,SAAAx8C,EAAA1C,QACA9kB,IAAA8kB,MAAA,GACAA,EAAA3kB,KAAAia,IAAA0K,GAGA,IAFA,IAAAg/C,EAAAljE,KAAAkjE,OAEAl5D,EAAA,EAAqBA,EAAAk5D,EAAApkE,UACrBolB,EAAAg/C,EAAAl5D,GAAAka,UADwCla,KAMxCk5D,EAAAzgC,OAAAz4B,EAAA,GACAka,WACA0C,WAEA5mB,KAAAuM,IAAAqa,IAEA2nD,qBAAA,SAAArqD,GAGA,IAFA,IAAAg/C,EAAAljE,KAAAkjE,OAEAj+C,EAAA,EAAAjb,EAAAk5D,EAAApkE,OAAwCmmB,EAAAjb,KACxCka,EAAAg/C,EAAAj+C,GAAAf,UAD+Ce,KAM/C,OAAAi+C,EAAAj+C,EAAA,GAAA2B,QAEA8c,QAAA,WACA,IAAA8qC,EAAA,IAAAjwE,EAAA+a,QACA,gBAAAgqB,EAAAC,GACAirC,EAAAvsD,sBAAAjiB,KAAAygB,aACA,IAAAyD,EAAAof,EAAA/R,IAAAF,OAAAnT,WAAAswD,GACAxuE,KAAAuuE,qBAAArqD,GAAAwf,QAAAJ,EAAAC,IALA,GAQAjsB,OAAA,WACA,IAAA6B,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACA,gBAAA8G,GACA,IAAA8iD,EAAAljE,KAAAkjE,OAEA,GAAAA,EAAApkE,OAAA,GACAqa,EAAA8I,sBAAA7B,EAAAK,aACAhC,EAAAwD,sBAAAjiB,KAAAygB,aACA,IAAAyD,EAAA/K,EAAA+E,WAAAO,GACAykD,EAAA,GAAAt8C,OAAA6c,SAAA,EAEA,QAAAxe,EAAA,EAAAjb,EAAAk5D,EAAApkE,OAA4CmmB,EAAAjb,GAC5Cka,GAAAg/C,EAAAj+C,GAAAf,SADmDe,IAEnDi+C,EAAAj+C,EAAA,GAAA2B,OAAA6c,SAAA,EACAy/B,EAAAj+C,GAAA2B,OAAA6c,SAAA,EAMA,KAAgBxe,EAAAjb,EAAOib,IACvBi+C,EAAAj+C,GAAA2B,OAAA6c,SAAA,IAtBA,GA2BAmE,OAAA,SAAAC,GACA,IAAApgB,EAAAlpB,EAAAwmC,SAAAplC,UAAAioC,OAAAhnC,KAAAZ,KAAA6nC,GACApgB,EAAAb,OAAAs8C,OAAA,GAGA,IAFA,IAAAA,EAAAljE,KAAAkjE,OAEAj+C,EAAA,EAAAjb,EAAAk5D,EAAApkE,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAk+C,EAAAD,EAAAj+C,GACAwC,EAAAb,OAAAs8C,OAAA5mC,KAAA,CACA1V,OAAAu8C,EAAAv8C,OAAA4R,KACAtU,SAAAi/C,EAAAj/C,WAIA,OAAAuD,KASAlpB,EAAA4lC,OAAA,SAAAqE,GACAjqC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,SACAjiC,KAAAwoC,cAAAppC,IAAAopC,IAAA,IAAAjqC,EAAA8pE,gBAGA9pE,EAAA4lC,OAAAxkC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAA4lC,OACAT,QAAA,WACA,IAAA8qC,EAAA,IAAAjwE,EAAA+a,QACA,gBAAAgqB,EAAAC,GACAirC,EAAAvsD,sBAAAjiB,KAAAygB,aACA,IAAAwD,EAAAqf,EAAA/R,IAAAG,kBAAA88C,GAGAvqD,EAFAjkB,KAAAkvB,MAAAxvB,EAAAM,KAAAkvB,MAAAvY,EAAA,GAMA4sB,EAAAjH,KAAA,CACApY,SAAA3kB,KAAAkM,KAAAwY,GACAO,MAAAxkB,KAAAsnB,SACAylB,KAAA,KACAnmB,OAAA5mB,QAfA,GAmBAkL,MAAA,WACA,WAAAlL,KAAAgJ,YAAAhJ,KAAAwoC,UAAAt/B,KAAAlJ,SASAzB,EAAAkwE,UAAA,SAAApd,EAAAtmD,EAAAmZ,EAAAkzC,EAAAzsD,GACApM,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAA0uE,WAAA,GACA1uE,KAAA2uE,eAAA,IAAApwE,EAAA+a,QACAtZ,KAAA4uE,0BAAAxvE,OAEAA,IAAAiyD,GACArxD,KAAAuM,IAAA8kD,EAAAtmD,EAAAmZ,EAAAkzC,EAAAzsD,IAIApM,EAAAkwE,UAAA9uE,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WAAA,CACAqJ,YAAAzK,EAAAkwE,UACAvlE,KAAA,SAAAzI,GACAlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,GACAT,KAAA2uE,eAAAzlE,KAAAzI,EAAAkuE,gBACA3uE,KAAA4uE,qBAAAnuE,EAAAmuE,qBAEA,QAAA3pD,EAAA,EAAAjb,EAAAvJ,EAAAiuE,WAAA5vE,OAAmDmmB,EAAAjb,EAAOib,IAC1DjlB,KAAA0uE,WAAApyC,KAAA77B,EAAAiuE,WAAAzpD,IAGA,OAAAjlB,MAEAuM,IAAA,SAAA8kD,EAAAtmD,EAAAmZ,EAAAkzC,EAAAzsD,EAAAiwD,QACAx7D,IAAA2L,OAAA,QACA3L,IAAA8kB,MAAA,QACA9kB,IAAAw7D,MAAA,QACAx7D,IAAAuL,MAAA,IAAApM,EAAAmK,MAAA,gBACAtJ,IAAAg4D,MAAA74D,EAAA4D,gBACA+hB,EAAA3kB,KAAAsL,IAAAqZ,EAAA3kB,KAAA2M,IAAA,EAAAgY,IACAlkB,KAAA0uE,WAAApyC,KAAA,CACA+0B,UAEAtmD,OAEAmZ,WAEAxkB,EAAA,EACAiX,EAAA,EACAC,EAAA,EAEAsY,MAAA,EAEAiW,SAAA,EAEAy1B,UAEAjwD,QAEAysD,cASAyX,iBAAA,WACA,IAAApyD,EAEAqyD,EADA3gC,EAAAnuC,KAAA0uE,WAAA5vE,OAEAiwE,EAAA,GAAA/uE,KAAA2uE,eAAAjvE,EACAsvE,EAAA,GAAAhvE,KAAA2uE,eAAAh4D,EAEA,IAAA8F,EAAA,EAAiBA,EAAA0xB,EAAQ1xB,KACzBqyD,EAAA9uE,KAAA0uE,WAAAjyD,IACA/c,EAAAM,KAAA2uE,eAAAjvE,EAAAqvE,EAAAD,EAAA5qD,SACA4qD,EAAAn4D,EAAA3W,KAAA2uE,eAAAh4D,EAAAq4D,EAAAF,EAAA5qD,SACA4qD,EAAAG,eAAAH,EAAApvE,EAAAH,KAAA0e,GAAA,IACA6wD,EAAA3pC,UAAA,KAAA2pC,EAAAG,eAAAH,EAAA3pC,aASA5mC,EAAAwkE,MAAA,WACAxkE,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAiiC,KAAA,QACAjiC,KAAAkvE,WAAA,KACAlvE,KAAAwkE,IAAA,KACAxkE,KAAAmvE,iBAAA,KACAnvE,KAAAovE,YAAA,GAGA7wE,EAAAwkE,MAAApjE,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAAwkE,MAAApjE,UAAAqJ,YAAAzK,EAAAwkE,MAEAxkE,EAAAwkE,MAAApjE,UAAAuJ,KAAA,SAAAzI,EAAA+iC,GAOA,OANAjlC,EAAAwmC,SAAAplC,UAAAuJ,KAAAtI,KAAAZ,KAAAS,EAAA+iC,GACA,OAAA/iC,EAAAyuE,aAAAlvE,KAAAkvE,WAAAzuE,EAAAyuE,WAAAhkE,SACA,OAAAzK,EAAA+jE,MAAAxkE,KAAAwkE,IAAA/jE,EAAA+jE,IAAAt5D,SACA,OAAAzK,EAAA0uE,mBAAAnvE,KAAAmvE,iBAAA1uE,EAAA0uE,iBAAAjkE,SACAlL,KAAAovE,WAAA3uE,EAAA2uE,WACApvE,KAAAslC,iBAAA7kC,EAAA6kC,iBACAtlC,MASAzB,EAAA8wE,IAAA,SAAA1kE,EAAA8lB,EAAAC,GACA1wB,KAAAJ,KAAA,GACAI,KAAA2K,MAAA,IAAApM,EAAAmK,MAAAiC,GACA3K,KAAAywB,UAAArxB,IAAAqxB,IAAA,EACAzwB,KAAA0wB,SAAAtxB,IAAAsxB,IAAA,KAGAnyB,EAAA8wE,IAAA1vE,UAAAuL,MAAA,WACA,WAAA3M,EAAA8wE,IAAArvE,KAAA2K,MAAAe,SAAA1L,KAAAywB,KAAAzwB,KAAA0wB,MASAnyB,EAAA+wE,QAAA,SAAA3kE,EAAA4kE,GACAvvE,KAAAJ,KAAA,GACAI,KAAA2K,MAAA,IAAApM,EAAAmK,MAAAiC,GACA3K,KAAAuvE,aAAAnwE,IAAAmwE,IAAA,OAGAhxE,EAAA+wE,QAAA3vE,UAAAuL,MAAA,WACA,WAAA3M,EAAA+wE,QAAAtvE,KAAA2K,MAAAe,SAAA1L,KAAAuvE,UAIAhxE,EAAAiqE,YAAA,GAEAjqE,EAAAiqE,YAAA,qGAEAjqE,EAAAiqE,YAAA,sFAEAjqE,EAAAiqE,YAAA,8FAEAjqE,EAAAiqE,YAAA,4bAEAjqE,EAAAiqE,YAAA,4GAEAjqE,EAAAiqE,YAAA,wDAEAjqE,EAAAiqE,YAAA,6DAEAjqE,EAAAiqE,YAAA,o+HAEAjqE,EAAAiqE,YAAA,+0BAEAjqE,EAAAiqE,YAAA,kOAEAjqE,EAAAiqE,YAAA,2NAEAjqE,EAAAiqE,YAAA,kJAEAjqE,EAAAiqE,YAAA,mJAEAjqE,EAAAiqE,YAAA,yEAEAjqE,EAAAiqE,YAAA,yEAEAjqE,EAAAiqE,YAAA,qEAEAjqE,EAAAiqE,YAAA,mEAEAjqE,EAAAiqE,YAAA,0yDAEAjqE,EAAAiqE,YAAA,unIAEAjqE,EAAAiqE,YAAA,2IAEAjqE,EAAAiqE,YAAA,wKAEAjqE,EAAAiqE,YAAA,gLAEAjqE,EAAAiqE,YAAA,oOAEAjqE,EAAAiqE,YAAA,+FAEAjqE,EAAAiqE,YAAA,kxFAEAjqE,EAAAiqE,YAAA,6EAEAjqE,EAAAiqE,YAAA,slDAEAjqE,EAAAiqE,YAAA,woBAEAjqE,EAAAiqE,YAAA,oPAEAjqE,EAAAiqE,YAAA,qhBAEAjqE,EAAAiqE,YAAA,6cAEAjqE,EAAAiqE,YAAA,iMAEAjqE,EAAAiqE,YAAA,iJAEAjqE,EAAAiqE,YAAA,wHAEAjqE,EAAAiqE,YAAA,mqEAEAjqE,EAAAiqE,YAAA,okOAEAjqE,EAAAiqE,YAAA,8NAEAjqE,EAAAiqE,YAAA,szCAEAjqE,EAAAiqE,YAAA,ukBAEAjqE,EAAAiqE,YAAA,iyGAEAjqE,EAAAiqE,YAAA,krGAEAjqE,EAAAiqE,YAAA,yJAEAjqE,EAAAiqE,YAAA,oKAEAjqE,EAAAiqE,YAAA,gKAEAjqE,EAAAiqE,YAAA,wRAEAjqE,EAAAiqE,YAAA,mKAEAjqE,EAAAiqE,YAAA,uEAEAjqE,EAAAiqE,YAAA,2NAEAjqE,EAAAiqE,YAAA,8GAEAjqE,EAAAiqE,YAAA,+LAEAjqE,EAAAiqE,YAAA,gGAEAjqE,EAAAiqE,YAAA,mWAEAjqE,EAAAiqE,YAAA,mMAEAjqE,EAAAiqE,YAAA,6rBAEAjqE,EAAAiqE,YAAA,6IAEAjqE,EAAAiqE,YAAA,uhBAEAjqE,EAAAiqE,YAAA,wnBAEAjqE,EAAAiqE,YAAA,6yCAEAjqE,EAAAiqE,YAAA,2GAEAjqE,EAAAiqE,YAAA,qNAEAjqE,EAAAiqE,YAAA,+LAEAjqE,EAAAiqE,YAAA,gGAEAjqE,EAAAiqE,YAAA,8hNAEAjqE,EAAAiqE,YAAA,ggBAEAjqE,EAAAiqE,YAAA,kiBAEAjqE,EAAAiqE,YAAA,uqCAEAjqE,EAAAiqE,YAAA,kPAEAjqE,EAAAiqE,YAAA,2kCAEAjqE,EAAAiqE,YAAA,sYAEAjqE,EAAAiqE,YAAA,gYAEAjqE,EAAAiqE,YAAA,+MAEAjqE,EAAAiqE,YAAA,6FAEAjqE,EAAAiqE,YAAA,oHAEAjqE,EAAAiqE,YAAA,86BAEAjqE,EAAAiqE,YAAA,sGAEAjqE,EAAAiqE,YAAA,2HAEAjqE,EAAAiqE,YAAA,wFAEAjqE,EAAAiqE,YAAA,kRAEAjqE,EAAAiqE,YAAA,gTAEAjqE,EAAAiqE,YAAA,uSAEAjqE,EAAAiqE,YAAA,iTAMAjqE,EAAA4pE,cAAA,CACA/4B,MAAA,SAAAkwB,GAGA,IAFA,IAAAkQ,EAAA,GAEAvyC,EAAA,EAAqBA,EAAAqiC,EAAAxgE,OAAqBm+B,IAAA,CAC1C,IAAAhT,EAAAjqB,KAAAkL,MAAAo0D,EAAAriC,IAEA,QAAAtzB,KAAAsgB,EACAulD,EAAA7lE,GAAAsgB,EAAAtgB,GAIA,OAAA6lE,GAEAtkE,MAAA,SAAAukE,GACA,IAAAC,EAAA,GAEA,QAAAzyC,KAAAwyC,EAGA,QAAA9lE,KAFA+lE,EAAAzyC,GAAA,GAEAwyC,EAAAxyC,GAAA,CACA,IAAA0yC,EAAAF,EAAAxyC,GAAAtzB,GAEAgmE,aAAApxE,EAAAmK,OAAAinE,aAAApxE,EAAAme,SAAAizD,aAAApxE,EAAA+a,SAAAq2D,aAAApxE,EAAAikB,SAAAmtD,aAAApxE,EAAA2pB,SAAAynD,aAAApxE,EAAA8hB,SAAAsvD,aAAApxE,EAAAmkE,QACAgN,EAAAzyC,GAAAtzB,GAAAgmE,EAAAzkE,QACWtM,MAAAkmC,QAAA6qC,GACXD,EAAAzyC,GAAAtzB,GAAAgmE,EAAA/jE,QAEA8jE,EAAAzyC,GAAAtzB,GAAAgmE,EAKA,OAAAD,IAQAnxE,EAAAgqE,YAAA,CACAqH,OAAA,CACAC,QAAA,CACA5mE,MAAA,IAAA1K,EAAAmK,MAAA,WAEAkyD,QAAA,CACA3xD,MAAA,GAEAirD,IAAA,CACAjrD,MAAA,MAEA6mE,aAAA,CACA7mE,MAAA,IAAA1K,EAAAikB,QAAA,UAEA+2C,YAAA,CACAtwD,MAAA,MAEAqxD,SAAA,CACArxD,MAAA,MAEAo3D,OAAA,CACAp3D,MAAA,MAEA8mE,WAAA,CACA9mE,OAAA,GAEAs3D,aAAA,CACAt3D,MAAA,GAEAs9D,gBAAA,CACAt9D,MAAA,MAGA+mE,MAAA,CACA1X,MAAA,CACArvD,MAAA,MAEAw3D,eAAA,CACAx3D,MAAA,IAGAgnE,SAAA,CACAhY,SAAA,CACAhvD,MAAA,MAEAu3D,kBAAA,CACAv3D,MAAA,IAGAinE,YAAA,CACAtY,YAAA,CACA3uD,MAAA,OAGAknE,QAAA,CACAxX,QAAA,CACA1vD,MAAA,MAEA+vD,UAAA,CACA/vD,MAAA,IAGAmnE,UAAA,CACAnX,UAAA,CACAhwD,MAAA,MAEAqwD,YAAA,CACArwD,MAAA,IAAA1K,EAAAme,QAAA,OAGA2zD,gBAAA,CACApQ,gBAAA,CACAh3D,MAAA,MAEAi3D,kBAAA,CACAj3D,MAAA,GAEAk3D,iBAAA,CACAl3D,MAAA,IAGAqnE,aAAA,CACArW,aAAA,CACAhxD,MAAA,OAGAsnE,aAAA,CACA3W,aAAA,CACA3wD,MAAA,OAGAu7D,IAAA,CACAgM,WAAA,CACAvnE,MAAA,OAEAwnE,QAAA,CACAxnE,MAAA,GAEAynE,OAAA,CACAznE,MAAA,KAEA0nE,SAAA,CACA1nE,MAAA,IAAA1K,EAAAmK,MAAA,YAGA+7D,OAAA,CACAmM,kBAAA,CACA3nE,MAAA,IAEA4nE,kBAAA,CACA5nE,MAAA,GACA6nE,WAAA,CACAx/C,UAAA,GACA3mB,MAAA,GACA0pD,OAAA,GACA0c,WAAA,GACAC,aAAA,GACAC,cAAA,KAGAC,qBAAA,CACAjoE,MAAA,IAEAkoE,wBAAA,CACAloE,MAAA,IAEAmoE,WAAA,CACAnoE,MAAA,GACA6nE,WAAA,CACAnmE,MAAA,GACA2c,SAAA,GACAgK,UAAA,GACApN,SAAA,GACAmtD,QAAA,GACAC,YAAA,GACAzd,MAAA,GACAQ,OAAA,GACA0c,WAAA,GACAC,aAAA,GACAC,cAAA,KAGAM,cAAA,CACAtoE,MAAA,IAEAuoE,iBAAA,CACAvoE,MAAA,IAEAwoE,YAAA,CACAxoE,MAAA,GACA6nE,WAAA,CACAnmE,MAAA,GACA2c,SAAA,GACAusC,MAAA,GACA3vC,SAAA,GACAmwC,OAAA,GACA0c,WAAA,GACAC,aAAA,GACAC,cAAA,KAGAS,eAAA,CACAzoE,MAAA,IAEA0oE,kBAAA,CACA1oE,MAAA,IAEA2oE,iBAAA,CACA3oE,MAAA,GACA6nE,WAAA,CACAx/C,UAAA,GACAmjC,SAAA,GACAb,YAAA,MAIA7uC,OAAA,CACA8qD,QAAA,CACA5mE,MAAA,IAAA1K,EAAAmK,MAAA,WAEAkyD,QAAA,CACA3xD,MAAA,GAEA8B,KAAA,CACA9B,MAAA,GAEAimB,MAAA,CACAjmB,MAAA,GAEAirD,IAAA,CACAjrD,MAAA,MAEA6mE,aAAA,CACA7mE,MAAA,IAAA1K,EAAAikB,QAAA,YAKAjkB,EAAAiqE,YAAA,qRAEAjqE,EAAAiqE,YAAA,yMAEAjqE,EAAAiqE,YAAA,4vBAEAjqE,EAAAiqE,YAAA,+hBAEAjqE,EAAAiqE,YAAA,iTAEAjqE,EAAAiqE,YAAA,gcAEAjqE,EAAAiqE,YAAA,sYAEAjqE,EAAAiqE,YAAA,6MAEAjqE,EAAAiqE,YAAA,qzBAEAjqE,EAAAiqE,YAAA,6eAEAjqE,EAAAiqE,YAAA,61CAEAjqE,EAAAiqE,YAAA,i0BAEAjqE,EAAAiqE,YAAA,yjEAEAjqE,EAAAiqE,YAAA,whCAEAjqE,EAAAiqE,YAAA,8zDAEAjqE,EAAAiqE,YAAA,ioCAEAjqE,EAAAiqE,YAAA,opEAEAjqE,EAAAiqE,YAAA,knCAEAjqE,EAAAiqE,YAAA,gVAEAjqE,EAAAiqE,YAAA,2YAEAjqE,EAAAiqE,YAAA,syBAEAjqE,EAAAiqE,YAAA,mkBAEAjqE,EAAAiqE,YAAA,kSAEAjqE,EAAAiqE,YAAA,wLAUAjqE,EAAAszE,UAAA,CACAC,MAAA,CACAxS,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,MAAAhqE,EAAAgqE,YAAA,MACAhJ,aAAAhhE,EAAAiqE,YAAA,eACAhJ,eAAAjhE,EAAAiqE,YAAA,gBAEAuJ,QAAA,CACAzS,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,MAAAhqE,EAAAgqE,YAAA,SAAAhqE,EAAAgqE,YAAA,YAAAhqE,EAAAgqE,YAAA,IAAAhqE,EAAAgqE,YAAA,QACAjR,SAAA,CACAruD,MAAA,IAAA1K,EAAAmK,MAAA,OAGA62D,aAAAhhE,EAAAiqE,YAAA,iBACAhJ,eAAAjhE,EAAAiqE,YAAA,kBAEAwJ,MAAA,CACA1S,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,MAAAhqE,EAAAgqE,YAAA,SAAAhqE,EAAAgqE,YAAA,YAAAhqE,EAAAgqE,YAAA,QAAAhqE,EAAAgqE,YAAA,UAAAhqE,EAAAgqE,YAAA,gBAAAhqE,EAAAgqE,YAAA,IAAAhqE,EAAAgqE,YAAA,QACAjR,SAAA,CACAruD,MAAA,IAAA1K,EAAAmK,MAAA,IAEA2uD,SAAA,CACApuD,MAAA,IAAA1K,EAAAmK,MAAA,UAEA6uD,UAAA,CACAtuD,MAAA,OAGAs2D,aAAAhhE,EAAAiqE,YAAA,eACAhJ,eAAAjhE,EAAAiqE,YAAA,gBAEAyJ,SAAA,CACA3S,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,MAAAhqE,EAAAgqE,YAAA,SAAAhqE,EAAAgqE,YAAA,YAAAhqE,EAAAgqE,YAAA,QAAAhqE,EAAAgqE,YAAA,UAAAhqE,EAAAgqE,YAAA,gBAAAhqE,EAAAgqE,YAAA,aAAAhqE,EAAAgqE,YAAA,aAAAhqE,EAAAgqE,YAAA,IAAAhqE,EAAAgqE,YAAA,QACAjR,SAAA,CACAruD,MAAA,IAAA1K,EAAAmK,MAAA,IAEA02D,UAAA,CACAn2D,MAAA,IAEAo2D,UAAA,CACAp2D,MAAA,GAEAk+D,gBAAA,CACAl+D,MAAA,MAIAs2D,aAAAhhE,EAAAiqE,YAAA,kBACAhJ,eAAAjhE,EAAAiqE,YAAA,mBAEAzjD,OAAA,CACAu6C,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,MACAhJ,aAAAhhE,EAAAiqE,YAAA,YACAhJ,eAAAjhE,EAAAiqE,YAAA,aAEA0J,OAAA,CACA5S,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,KACAr5C,MAAA,CACAjmB,MAAA,GAEAm9D,SAAA,CACAn9D,MAAA,GAEAkpE,UAAA,CACAlpE,MAAA,MAGAs2D,aAAAhhE,EAAAiqE,YAAA,gBACAhJ,eAAAjhE,EAAAiqE,YAAA,iBAEAnH,MAAA,CACA/B,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAgqE,YAAA,OAAAhqE,EAAAgqE,YAAA,kBACAhJ,aAAAhhE,EAAAiqE,YAAA,WACAhJ,eAAAjhE,EAAAiqE,YAAA,YAEAhnD,OAAA,CACA89C,SAAA,CACA1E,QAAA,CACA3xD,MAAA,IAGAs2D,aAAAhhE,EAAAiqE,YAAA,YACAhJ,eAAAjhE,EAAAiqE,YAAA,aAMA4J,KAAA,CACA9S,SAAA,CACA+S,MAAA,CACAppE,MAAA,MAEAqpE,MAAA,CACArpE,OAAA,GAEA2xD,QAAA,CACA3xD,MAAA,IAGAs2D,aAAAhhE,EAAAiqE,YAAA,UACAhJ,eAAAjhE,EAAAiqE,YAAA,WAMA+J,SAAA,CACAjT,SAAA,CACAkT,UAAA,CACAvpE,MAAA,MAEAqpE,MAAA,CACArpE,OAAA,IAGAs2D,aAAAhhE,EAAAiqE,YAAA,cACAhJ,eAAAjhE,EAAAiqE,YAAA,eAEAiK,aAAA,CACAnT,SAAA,CACAoT,SAAA,CACAzpE,MAAA,IAAA1K,EAAA+a,UAGAimD,aAAAhhE,EAAAiqE,YAAA,kBACAhJ,eAAAjhE,EAAAiqE,YAAA,oBAGAjqE,EAAAszE,UAAA,UACAvS,SAAA/gE,EAAA4pE,cAAA/4B,MAAA,CAAA7wC,EAAAszE,UAAA,SAAAvS,SAAA,CACAgI,UAAA,CACAr+D,MAAA,GAEAs+D,mBAAA,CACAt+D,MAAA,MAGAs2D,aAAAhhE,EAAAiqE,YAAA,kBACAhJ,eAAAjhE,EAAAiqE,YAAA,mBAWAjqE,EAAAo0E,cAAA,SAAA7hC,GACAvmC,QAAAwvB,IAAA,sBAAAx7B,EAAAY,UAGA,IAAAyzE,OAAAxzE,KAFA0xC,KAAA,IAEAk4B,OAAAl4B,EAAAk4B,OAAAxM,SAAAC,gBAAA,yCACAoW,OAAAzzE,IAAA0xC,EAAAib,QAAAjb,EAAAib,QAAA,KACA+mB,OAAA1zE,IAAA0xC,EAAA9jC,OAAA8jC,EAAA9jC,MACA+lE,OAAA3zE,IAAA0xC,EAAAuwB,OAAAvwB,EAAAuwB,MACA2R,OAAA5zE,IAAA0xC,EAAAmiC,SAAAniC,EAAAmiC,QACAC,OAAA9zE,IAAA0xC,EAAAqiC,WAAAriC,EAAAqiC,UACAC,OAAAh0E,IAAA0xC,EAAAw0B,oBAAAx0B,EAAAw0B,mBACA+N,OAAAj0E,IAAA0xC,EAAAwiC,uBAAAxiC,EAAAwiC,sBAEA7O,EAAA,GACA8O,EAAA,GACAC,GAAA,EACAC,EAAA,GACAC,GAAA,EACAjH,EAAA,IAAAtkD,aAAA,GACAwrD,EAAA,GACAjF,EAAA,GAEA1uE,KAAA4zE,WAAAhB,EACA5yE,KAAA+rD,QAAA,KAEA/rD,KAAA6zE,WAAA,EACA7zE,KAAA8zE,gBAAA,EACA9zE,KAAA+zE,gBAAA,EACA/zE,KAAAg0E,kBAAA,EAEAh0E,KAAAi0E,aAAA,EAEAj0E,KAAAilE,eAAA,GACAjlE,KAAAk0E,sBAAA,EAEAl0E,KAAAoL,YAAA,EAEApL,KAAAm0E,YAAA,EACAn0E,KAAAo0E,aAAA,EAEAp0E,KAAAq0E,yBAAA,EAEAr0E,KAAAs0E,YAAA/1E,EAAA6F,kBACApE,KAAAu0E,oBAAA,EACAv0E,KAAAw0E,sBAAA,EAEAx0E,KAAAy0E,gBAAA,EACAz0E,KAAA00E,gBAAA,EAEA,IAiEAC,EAjEAC,EAAA50E,KAEA60E,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,GAAA,EACAC,EAAA,GACAC,EAAA,KACAC,EAAA,IAAA52E,EAAAikB,QACA4yD,EAAA,KACAC,EAAA,IAAA92E,EAAAikB,QAEA8yD,EAAA,EAEAC,EAAA,IAAAh3E,EAAAmK,MAAA,GACA8sE,EAAA,EACAC,EAAA7C,EAAAj2D,MACA+4D,EAAA9C,EAAAh2D,OACA+4D,EAAA,EACAC,EAAA,IAAAr3E,EAAAikB,QAAA,IAAAizD,EAAAC,GACAG,GAAA,EACAC,EAAA,IAAAv3E,EAAAikB,QAAA,IAAAizD,EAAAC,GAEAK,EAAA,IAAAx3E,EAAAs2B,QAEAmhD,EAAA,IAAAz3E,EAAA03E,cACAC,GAAA,EACAC,GAAA,EACAC,EAAA,IAAA73E,EAAA0pB,OAEAouD,EAAA,IAAA93E,EAAA8hB,QACAi2D,EAAA,IAAA/3E,EAAA+a,QAEAi9D,EAAA,CACAzkC,KAAA,GACA0kC,QAAA,QACAC,YAAA,GACAvF,qBAAA,GACAC,wBAAA,GACAuF,KAAA,GACAnF,cAAA,GACAC,iBAAA,GACAhtD,MAAA,GACAktD,eAAA,GACAC,kBAAA,GACAgF,KAAA,GACAC,QAAA,IAGAC,EAAA,CACAC,MAAA,EACA3vD,SAAA,EACA6kB,MAAA,EACAjnB,OAAA,GAGA/kB,KAAA+2E,KAAA,CACAxlB,OAAAslB,EACAG,OAAA,CACAjvC,WAAA,EACAE,SAAA,GAEAgvC,SAAA,MAKA,IACA,IAAA5vD,EAAA,CACAra,MAAA8lE,EACAzR,MAAA0R,EACAE,QAAAD,EACAG,UAAAD,EACA5N,mBAAA8N,EACAE,sBAAAD,GAIA,WAFAsB,EAAA9B,GAAAD,EAAA1J,WAAA,QAAA7hD,IAAAurD,EAAA1J,WAAA,qBAAA7hD,IAGA,aAAAurD,EAAA1J,WAAA,SACA,8DAEA,qCAKA9pE,IAAAu1E,EAAAuC,2BACAvC,EAAAuC,yBAAA,WACA,OACAC,SAAA,EACAC,SAAA,EACA7mC,UAAA,KAKAqiC,EAAA5wC,iBAAA,mBAAAq1C,IAAA,GACK,MAAAn4D,IACL3U,QAAA2U,MAAA,wBAAAA,IAGA,IAAA0oD,EAAA,IAAArpE,EAAA+4E,gBAAA3C,GACA/M,EAAA7nE,IAAA,uBACA6nE,EAAA7nE,IAAA,qBACA6nE,EAAA7nE,IAAA,4BACA6nE,EAAA7nE,IAAA,0BACA6nE,EAAA7nE,IAAA,iCACA6nE,EAAA7nE,IAAA,4BACA6nE,EAAA7nE,IAAA,0BAEA6nE,EAAA7nE,IAAA,4BACAxB,EAAA6oB,eAAAqtB,SAAA,YAGA,IAAA8iC,EAAA,IAAAh5E,EAAAi5E,kBAAA7C,EAAA/M,EAAA92B,GACA2mC,EAAA,IAAAl5E,EAAAm5E,WAAA/C,EAAA/M,EAAA+P,IACA7G,EAAA,IAAAvyE,EAAAq5E,gBACA3vC,EAAA,IAAA1pC,EAAAs5E,cAAAlD,EAAA/M,EAAA6P,EAAA3G,EAAAyG,EAAAI,GAAA33E,KAAA+2E,MACAlyC,EAAA,IAAAtmC,EAAAu5E,aAAAnD,EAAA7D,EAAA9wE,KAAA+2E,MACAgB,GAAA,IAAAx5E,EAAAy5E,cAAAh4E,KAAAu3E,GACAU,GAAA,IAAA15E,EAAA25E,YACAl4E,KAAA+2E,KAAAE,SAAAc,GAAAd,SACA,IAAAkB,GAAA,IAAA55E,EAAA65E,oBAAAzD,EAAA/M,EAAAiP,GACAwB,GAAA,IAAA95E,EAAA+5E,2BAAA3D,EAAA/M,EAAAiP,GAEA0B,GAAA,IAAAh6E,EAAAkmC,oBAAA,cACA+zC,GAAA,IAAAj6E,EAAAimC,kBACAi0C,GAAA,IAAAl6E,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,SAAAn6E,EAAA+nE,kBAAA,CACA3G,WAAA,EACAC,YAAA,EACA4E,KAAA,KAEAmU,GAAAp6E,EAAAszE,UAAA,KACA+G,GAAA,IAAAr6E,EAAAulC,KAAA,IAAAvlC,EAAAs6E,kBAAA,WAAAt6E,EAAAmpE,eAAA,CACApI,SAAAqZ,GAAArZ,SACAC,aAAAoZ,GAAApZ,aACAC,eAAAmZ,GAAAnZ,eACA7E,KAAAp8D,EAAAoD,SACAg+D,WAAA,EACAC,YAAA,EACA4E,KAAA,KAGA,SAAAsU,KACA,cAAAhE,EAAAa,EAAA,EAGA,SAAAoD,GAAApwE,EAAAC,EAAAC,EAAAoR,IACA,IAAAm5D,IACAzqE,GAAAsR,EACArR,GAAAqR,EACApR,GAAAoR,GAGAw9D,EAAAuB,WAAArwE,EAAAC,EAAAC,EAAAoR,GAGA,SAAAg/D,KACAxB,EAAAyB,OACAzB,EAAA0B,QAAAhE,EAAAjsE,KAAA0sE,GAAA9oE,eAAA6oE,IACA8B,EAAA2B,SAAA/D,EAAAnsE,KAAA4sE,GAAAhpE,eAAA6oE,IACAoD,GAAAxD,EAAA5sE,EAAA4sE,EAAA3sE,EAAA2sE,EAAA1sE,EAAA2sE,GAGA,SAAA6D,KACAxE,EAAA,KACAK,EAAA,KACAD,EAAA,GACAD,GAAA,EACAyC,EAAArgC,QAGA6hC,KACAj5E,KAAA+rD,QAAA4oB,EACA30E,KAAAu3E,eACAv3E,KAAA4nE,aACA5nE,KAAA8wE,aACA9wE,KAAAy3E,QAEA,IAAA6B,GAAA,IAAA/6E,EAAAg7E,eAAAv5E,KAAAu2E,EAAA1xC,EAAA0yC,GACAv3E,KAAAs5E,aAEA,IAAAE,GAAA,IAAAj7E,EAAAk7E,aAAAz5E,KAAA2zE,GACA+F,GAAA,IAAAn7E,EAAAo7E,gBAAA35E,KAAA0uE,GA6HA,SAAA2I,GAAA10C,GACAA,EAAAi3C,iBACAP,KACAJ,KACAnI,EAAAjb,QAGA,SAAAgkB,GAAAl3C,GACA,IAAA6F,EAAA7F,EAAAviC,OACAooC,EAAAjG,oBAAA,UAAAs3C,IAKA,SAAArxC,GACAsxC,GAAAtxC,GACAsoC,EAAAiJ,OAAAvxC,GANAwxC,CAAAxxC,GASA,SAAAsxC,GAAAtxC,GACA,IAAAyxC,EAAAnJ,EAAA/wE,IAAAyoC,GAAA0xC,QACA1xC,EAAA0xC,aAAA96E,OAEAA,IAAA66E,GACAlC,GAAAoC,eAAAF,GAyUA,SAAAG,GAAAngE,EAAApR,GACA,OAAAtJ,KAAAia,IAAA3Q,EAAA,IAAAtJ,KAAAia,IAAAS,EAAA,IAGA,SAAAogE,GAAApgE,EAAApR,GACA,OAAAoR,EAAA2M,OAAAgf,cAAA/8B,EAAA+d,OAAAgf,YACA3rB,EAAA2M,OAAAgf,YAAA/8B,EAAA+d,OAAAgf,YACO3rB,EAAAuuB,SAAA0xC,SAAArxE,EAAA2/B,SAAA0xC,SAAAjgE,EAAAuuB,SAAA0xC,UAAArxE,EAAA2/B,SAAA0xC,QACPjgE,EAAAuuB,SAAA0xC,QAAAlzC,GAAAn+B,EAAA2/B,SAAA0xC,QAAAlzC,GACO/sB,EAAAuuB,SAAAxB,KAAAn+B,EAAA2/B,SAAAxB,GACP/sB,EAAAuuB,SAAAxB,GAAAn+B,EAAA2/B,SAAAxB,GACO/sB,EAAArD,IAAA/N,EAAA+N,EACPqD,EAAArD,EAAA/N,EAAA+N,EAEAqD,EAAA+sB,GAAAn+B,EAAAm+B,GAIA,SAAAszC,GAAArgE,EAAApR,GACA,OAAAoR,EAAA2M,OAAAgf,cAAA/8B,EAAA+d,OAAAgf,YACA3rB,EAAA2M,OAAAgf,YAAA/8B,EAAA+d,OAAAgf,YAGA3rB,EAAArD,IAAA/N,EAAA+N,EACA/N,EAAA+N,EAAAqD,EAAArD,EAEAqD,EAAA+sB,GAAAn+B,EAAAm+B,GAmHA,SAAAuzC,GAAA3zD,EAAAK,EAAAuhB,EAAA5xB,EAAAm3B,GACA,IAAA3gC,EAAA7M,EAEAioC,EAAAqyB,aACAztD,EAAAqmE,EACAlzE,IAAAmzE,IAEAtmE,EAAAmmE,EACAhzE,IAAAizE,GAIA,IAAAgH,EAAAptE,EAAA7M,QAEAnB,IAAAo7E,GACAA,EAAAxzC,GAAApgB,EAAAogB,GACAwzC,EAAA5zD,SACA4zD,EAAAvzD,WACAuzD,EAAAhyC,WACAgyC,EAAA5jE,EAAA0/D,EAAA1/D,EACA4jE,EAAAzsC,UAEAysC,EAAA,CACAxzC,GAAApgB,EAAAogB,GACApgB,SACAK,WACAuhB,WACA5xB,EAAA0/D,EAAA1/D,EACAm3B,SAGA3gC,EAAAkvB,KAAAk+C,IAwBA,SAAAC,GAAA7yD,GACA,IAAAmuD,EAAAruD,iBAAAE,GAAA,SACA,IAAA8yD,EAAA1E,EAAA0E,UACA,OAAAA,EAAA,SACA,IAAAtlD,EAAAw/C,EAAA3P,eACAnmD,EAAA8I,EAAA9I,OACA67D,GAAA/yD,EAAA5F,OACAiD,EAAA,EAEA,GAEA,GAAAmQ,EAAAnQ,GAAAc,gBAAAjH,GAAA67D,EAAA,iBACO11D,IAAAy1D,GAEP,SAmEA,SAAAE,GAAAC,EAAAz6D,EAAAokD,EAAA2K,GACA,QAAAlqD,EAAA,EAAAjb,EAAA6wE,EAAA/7E,OAA4CmmB,EAAAjb,EAAOib,IAAA,CACnD,IAAAu1D,EAAAK,EAAA51D,GACA2B,EAAA4zD,EAAA5zD,OACAK,EAAAuzD,EAAAvzD,SACAuhB,OAAAppC,IAAA+vE,EAAAqL,EAAAhyC,SAAA2mC,EACAphC,EAAAysC,EAAAzsC,MAIA,GAHAnnB,EAAAye,gBAAA/kB,iBAAAF,EAAA8vC,mBAAAtpC,EAAAnG,aACAmG,EAAAmR,aAAA5N,gBAAAvD,EAAAye,iBAEAze,aAAAroB,EAAAu8E,sBAAA,CACAC,GAAAvyC,GACA,IAAA0xC,EAAAc,GAAA56D,EAAAokD,EAAAh8B,EAAA5hB,GACAquD,EAAA,GACAruD,EAAA2qC,OAAA,SAAA3qC,GACAguD,EAAAqG,sBAAAr0D,EAAAszD,EAAA1xC,UAGAosC,EAAAsG,mBAAA96D,EAAAokD,EAAAv9C,EAAAuhB,EAAA5hB,EAAAmnB,IAsGA,SAAAgtC,GAAAvyC,GACAA,EAAAmyB,OAAAp8D,EAAAqD,WAAA61E,EAAA10C,OAAA4xC,EAAAwG,WAA0E1D,EAAAx0C,QAAA0xC,EAAAwG,WAC1E1D,EAAA2D,aAAA5yC,EAAAmyB,OAAAp8D,EAAAoD,WAEA,IAAA6mC,EAAAqyB,YACA4c,EAAA4D,YAAA7yC,EAAA4uB,SAAA5uB,EAAAo8B,cAAAp8B,EAAAk8B,SAAAl8B,EAAAm8B,SAAAn8B,EAAAu8B,mBAAAv8B,EAAAq8B,cAAAr8B,EAAAs8B,cAAAt8B,EAAA88B,oBAEAmS,EAAA4D,YAAA98E,EAAA2D,YAGAu1E,EAAA6D,aAAA9yC,EAAAw8B,WACAyS,EAAA8D,aAAA/yC,EAAAm3B,WACA8X,EAAA+D,cAAAhzC,EAAAo3B,YACA6X,EAAAgE,cAAAjzC,EAAAq3B,YACA4X,EAAAiE,iBAAAlzC,EAAA28B,cAAA38B,EAAA48B,oBAAA58B,EAAA68B,oBAGA,SAAA2V,GAAA56D,EAAAokD,EAAAh8B,EAAA5hB,GACA0uD,EAAA,EACA,IAAAqG,EAAA7K,EAAA/wE,IAAAyoC,GAEA,GAAA0tC,EAAA,CACA,GAAAC,GAAA/1D,IAAA80D,EAAA,CACA,IAAA0G,EAAAx7D,IAAA80D,GAAA1sC,EAAAxB,KAAAguC,EAIAgB,EAAA6F,SAAArzC,EAAAy8B,eAAAz8B,EAAA08B,YAAA9kD,EAAAu7D,EAAAC,QAGAx8E,IAAAu8E,EAAAG,mBAAAH,EAAAG,oBAAA9F,EAAA0E,YACAlyC,EAAAe,aAAA,QAIAnqC,IAAAu8E,EAAAzB,UACA1xC,EAAAe,aAAA,QAGAnqC,IAAAu8E,EAAAI,YAAAJ,EAAAI,aAAAxF,EAAAzkC,OACAtJ,EAAAe,aAAA,GAGAf,EAAAe,eA5IA,SAAAf,EAAAg8B,EAAA59C,GACA,IAAA+0D,EAAA7K,EAAA/wE,IAAAyoC,GACAsI,EAAAinC,GAAAiE,cAAAxzC,EAAA+tC,EAAA/R,EAAAwR,EAAA0E,UAAA9zD,GACAq1D,EAAAlE,GAAAmE,eAAA1zC,EAAAsI,GACAopC,EAAAyB,EAAAzB,QACAiC,GAAA,EAEA,QAAA/8E,IAAA86E,EAEA1xC,EAAAxG,iBAAA,UAAA63C,SACO,GAAAK,EAAA+B,SAEPnC,GAAAtxC,OACO,SAAAppC,IAAA0xC,EAAAsrC,SAEP,OAGAD,GAAA,EAGA,GAAAA,EAAA,CACA,GAAArrC,EAAAsrC,SAAA,CACA,IAAAC,EAAA99E,EAAAszE,UAAA/gC,EAAAsrC,UACAT,EAAAW,cAAA,CACA18E,KAAA4oC,EAAAvG,KACAq9B,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,UACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,qBAGAmc,EAAAW,cAAA,CACA18E,KAAA4oC,EAAAvG,KACAq9B,SAAA92B,EAAA82B,SACAC,aAAA/2B,EAAA+2B,aACAC,eAAAh3B,EAAAg3B,gBAIAh3B,EAAA8zC,cAAAX,EAAAW,cACApC,EAAAnC,GAAAwE,eAAA/zC,EAAAsI,EAAAmrC,GACAN,EAAAzB,UACA1xC,EAAA0xC,UAGA,IAAA7yD,EAAA6yD,EAAAsC,gBAEA,GAAAh0C,EAAA0D,aAAA,CACA1D,EAAAi0C,yBAAA,EAEA,QAAAx3D,EAAA,EAAuBA,EAAA2vD,EAAAH,gBAA2BxvD,IAClDoC,EAAA,cAAApC,IAAA,GACAujB,EAAAi0C,2BAKA,GAAAj0C,EAAA2D,aAGA,IAFA3D,EAAAk0C,yBAAA,EAEAz3D,EAAA,EAAuBA,EAAA2vD,EAAAF,gBAA2BzvD,IAClDoC,EAAA,cAAApC,IAAA,GACAujB,EAAAk0C,2BAKA,IAAApd,EAAAqc,EAAAW,cAAAhd,UAEA92B,aAAAjqC,EAAAmpE,gBAAAl/B,aAAAjqC,EAAA6pE,qBAAA,IAAA5/B,EAAAm/B,WACAgU,EAAAG,kBAAA9F,EAAA0E,UACApb,EAAA2F,eAAA+Q,EAAA2G,SAGAn0C,EAAAi8B,SAEAkX,EAAAI,WAAAxF,EAAAzkC,KAEAwtB,EAAAsR,kBAAA3nE,MAAAstE,EAAAC,QACAlX,EAAAuR,kBAAA5nE,MAAAstE,EAAAE,YACAnX,EAAA8R,WAAAnoE,MAAAstE,EAAAG,KACApX,EAAAmS,YAAAxoE,MAAAstE,EAAA/xD,MACA86C,EAAAsS,iBAAA3oE,MAAAstE,EAAAI,KACArX,EAAA4R,qBAAAjoE,MAAAstE,EAAArF,qBACA5R,EAAA6R,wBAAAloE,MAAAstE,EAAApF,wBACA7R,EAAAiS,cAAAtoE,MAAAstE,EAAAhF,cACAjS,EAAAkS,iBAAAvoE,MAAAstE,EAAA/E,iBACAlS,EAAAoS,eAAAzoE,MAAAstE,EAAA7E,eACApS,EAAAqS,kBAAA1oE,MAAAstE,EAAA5E,mBAGA,IAAAiL,EAAAjB,EAAAzB,QAAA2C,cACAC,EAAAv+E,EAAAw+E,cAAAC,aAAAJ,EAAAK,IAAA3d,GACAqc,EAAAmB,eACAnB,EAAAuB,gBAAA3+E,EAAAw+E,cAAAI,aAAAL,EAAAxd,GA+CA8d,CAAA50C,EAAAg8B,EAAA59C,GACA4hB,EAAAe,aAAA,GAGA,IA+UA+1B,EAAAr2D,EA/UAo0E,GAAA,EACAC,GAAA,EACAC,GAAA,EACArD,EAAAyB,EAAAzB,QACAsD,EAAAtD,EAAA2C,cACAY,EAAA9B,EAAAW,cAAAhd,SAgBA,GAdA4a,EAAAlzC,KAAA6tC,IACAF,EAAA+I,WAAAxD,WAEArF,EAAAqF,EAAAlzC,GACAq2C,GAAA,EACAC,GAAA,EACAC,GAAA,GAGA/0C,EAAAxB,KAAAguC,IACAA,EAAAxsC,EAAAxB,GACAs2C,GAAA,GAGAD,GAAAj9D,IAAA80D,EAAA,CAmBA,GAlBAsI,EAAA10E,IAAA6rE,EAAAv0D,EAAA,oBAEAm3D,EAAAoG,wBACAH,EAAA70B,SAAAgsB,EAAA,mBAAAp1E,KAAAw6B,IAAA3Z,EAAAsQ,IAAA,GAAAnxB,KAAAy6B,MAGA5Z,IAAA80D,IACAA,EAAA90D,EAIAk9D,GAAA,EAEAC,GAAA,GAKA/0C,aAAAjqC,EAAAmpE,gBAAAl/B,aAAAjqC,EAAAwoE,mBAAAv+B,aAAAjqC,EAAAyoE,sBAAAx+B,EAAA63B,OAAA,CACA,IAAAud,EAAAJ,EAAAtpB,IAAA2pB,oBAEAz+E,IAAAw+E,GACAA,EAAAj1B,SAAAgsB,EAAA2B,EAAAr0D,sBAAA7B,EAAAK,eAIA+nB,aAAAjqC,EAAAwoE,mBAAAv+B,aAAAjqC,EAAAsoE,qBAAAr+B,aAAAjqC,EAAA+nE,mBAAA99B,aAAAjqC,EAAAyoE,sBAAAx+B,aAAAjqC,EAAAmpE,gBAAAl/B,EAAAk+B,WACA8W,EAAA70B,SAAAgsB,EAAA,aAAAv0D,EAAA8vC,oBAGAstB,EAAA10E,IAAA6rE,EAAAC,EAAA,uBACA4I,EAAA10E,IAAA6rE,EAAAC,EAAA,yBAMA,GAAApsC,EAAAk+B,SAAA,CACA8W,EAAAM,YAAAnJ,EAAA/tD,EAAA,cACA42D,EAAAM,YAAAnJ,EAAA/tD,EAAA,qBACA,IAAAuiC,EAAAviC,EAAAuiC,SAEAA,IACAouB,EAAAwG,qBAAA50B,EAAA+jB,kBACAsQ,EAAA10E,IAAA6rE,EAAAxrB,EAAA,eACAq0B,EAAA10E,IAAA6rE,EAAAxrB,EAAA,oBACAq0B,EAAA10E,IAAA6rE,EAAAxrB,EAAA,sBAEAq0B,EAAAM,YAAAnJ,EAAAxrB,EAAA,iBAKAm0B,IACA90C,EAAAi8B,SAmQAx7D,EA3PAs0E,GA2PAje,EA3PAme,GA4PA7M,kBAAArnC,YAAAtgC,EACAq2D,EAAAuR,kBAAAtnC,YAAAtgC,EACAq2D,EAAAmS,YAAAloC,YAAAtgC,EACAq2D,EAAA8R,WAAA7nC,YAAAtgC,EACAq2D,EAAAsS,iBAAAroC,YAAAtgC,GA5PAu7D,GAAAh8B,EAAAg8B,KAiJA,SAAAlF,EAAAkF,GACAlF,EAAAqR,SAAA1nE,MAAAu7D,EAAA75D,MAEA65D,aAAAjmE,EAAA8wE,KACA/P,EAAAmR,QAAAxnE,MAAAu7D,EAAA/zC,KACA6uC,EAAAoR,OAAAznE,MAAAu7D,EAAA9zC,KACO8zC,aAAAjmE,EAAA+wE,UACPhQ,EAAAkR,WAAAvnE,MAAAu7D,EAAA+K,SAvJAyO,CAAAP,EAAAjZ,IAGAh8B,aAAAjqC,EAAA+nE,mBAAA99B,aAAAjqC,EAAAsoE,qBAAAr+B,aAAAjqC,EAAAwoE,mBAAAv+B,aAAAjqC,EAAAyoE,sBAAAx+B,aAAAjqC,EAAAooE,oBAiDA,SAAArH,EAAA92B,GACA82B,EAAA1E,QAAA3xD,MAAAu/B,EAAAoyB,QACA0E,EAAAuQ,QAAA5mE,MAAAu/B,EAAA79B,MAEA69B,EAAA8uB,UACAgI,EAAAhI,SAAAruD,MAAAC,KAAAs/B,EAAA8uB,UAAAxqD,eAAA07B,EAAA43B,mBAGAd,EAAApL,IAAAjrD,MAAAu/B,EAAA0rB,IACAoL,EAAA/F,YAAAtwD,MAAAu/B,EAAA+wB,YACA+F,EAAAhF,SAAArxD,MAAAu/B,EAAA8xB,SAEA9xB,EAAA8vB,QACAgH,EAAAhH,MAAArvD,MAAAu/B,EAAA8vB,MACAgH,EAAAmB,eAAAx3D,MAAAu/B,EAAAi4B,gBAUA,IAAAwd,EAEAz1C,EAAA0rB,IACA+pB,EAAAz1C,EAAA0rB,IACO1rB,EAAA+wB,YACP0kB,EAAAz1C,EAAA+wB,YACO/wB,EAAAy3B,gBACPge,EAAAz1C,EAAAy3B,gBACOz3B,EAAAywB,UACPglB,EAAAz1C,EAAAywB,UACOzwB,EAAAmwB,QACPslB,EAAAz1C,EAAAmwB,QACOnwB,EAAAyxB,aACPgkB,EAAAz1C,EAAAyxB,aACOzxB,EAAAoxB,aACPqkB,EAAAz1C,EAAAoxB,aACOpxB,EAAA8xB,SACP2jB,EAAAz1C,EAAA8xB,SACO9xB,EAAAovB,cACPqmB,EAAAz1C,EAAAovB,aAGA,QAAAx4D,IAAA6+E,EAAA,CAEAA,aAAA1/E,EAAA2/E,oBACAD,IAAA5sB,SAGA,IAAAhkD,EAAA4wE,EAAA5wE,OACAupD,EAAAqnB,EAAArnB,OACA0I,EAAAwQ,aAAA7mE,MAAAH,IAAAuE,EAAA3N,EAAA2N,EAAAsJ,EAAAigD,EAAAl3D,EAAAk3D,EAAAjgD,GAGA2oD,EAAAe,OAAAp3D,MAAAu/B,EAAA63B,OAKAf,EAAAyQ,WAAA9mE,MAAAu/B,EAAA63B,kBAAA9hE,EAAAklE,aAAA,IACAnE,EAAAiB,aAAAt3D,MAAAu/B,EAAA+3B,aACAjB,EAAAiH,gBAAAt9D,MAAAu/B,EAAA+9B,gBAhHA4X,CAAAV,EAAAj1C,GAIAA,aAAAjqC,EAAAwnE,kBACAqY,GAAAX,EAAAj1C,GACSA,aAAAjqC,EAAA4nE,oBACTiY,GAAAX,EAAAj1C,GAiHA,SAAA82B,EAAA92B,GACA82B,EAAA8G,SAAAn9D,MAAAu/B,EAAA49B,SACA9G,EAAA6S,UAAAlpE,MAAAu/B,EAAA49B,SAAA59B,EAAA69B,QACA/G,EAAApwC,MAAAjmB,MAAAu/B,EAAAtZ,MAnHAmvD,CAAAZ,EAAAj1C,IACSA,aAAAjqC,EAAAkpE,eAqHT,SAAAnI,EAAA92B,GAOA,GANA82B,EAAAuQ,QAAA5mE,MAAAu/B,EAAA79B,MACA20D,EAAA1E,QAAA3xD,MAAAu/B,EAAAoyB,QACA0E,EAAAv0D,KAAA9B,MAAAu/B,EAAAz9B,KAAA4qE,EACArW,EAAApwC,MAAAjmB,MAAA,GAAA2pE,EAAA0L,aACAhf,EAAApL,IAAAjrD,MAAAu/B,EAAA0rB,IAEA,OAAA1rB,EAAA0rB,IAAA,CACA,IAAA7mD,EAAAm7B,EAAA0rB,IAAA7mD,OACAupD,EAAApuB,EAAA0rB,IAAA0C,OACA0I,EAAAwQ,aAAA7mE,MAAAH,IAAAuE,EAAA3N,EAAA2N,EAAAsJ,EAAAigD,EAAAl3D,EAAAk3D,EAAAjgD,IA9HA4nE,CAAAd,EAAAj1C,GACSA,aAAAjqC,EAAAsoE,oBA4IT,SAAAvH,EAAA92B,GACAA,EAAAyvB,WACAqH,EAAArH,SAAAhvD,MAAAu/B,EAAAyvB,SACAqH,EAAAkB,kBAAAv3D,MAAAu/B,EAAAg4B,mBAGAh4B,EAAAovB,cACA0H,EAAA1H,YAAA3uD,MAAAu/B,EAAAovB,aAlJA4mB,CAAAf,EAAAj1C,GACSA,aAAAjqC,EAAAwoE,kBAqJT,SAAAzH,EAAA92B,GACA82B,EAAAjI,SAAApuD,MAAAu/B,EAAA6uB,SACAiI,EAAA/H,UAAAtuD,MAAA1J,KAAA2M,IAAAs8B,EAAA+uB,UAAA,MAEA/uB,EAAAyvB,WACAqH,EAAArH,SAAAhvD,MAAAu/B,EAAAyvB,SACAqH,EAAAkB,kBAAAv3D,MAAAu/B,EAAAg4B,mBAGAh4B,EAAAovB,cACA0H,EAAA1H,YAAA3uD,MAAAu/B,EAAAovB,aAGApvB,EAAAmwB,UACA2G,EAAA3G,QAAA1vD,MAAAu/B,EAAAmwB,QACA2G,EAAAtG,UAAA/vD,MAAAu/B,EAAAwwB,WAGAxwB,EAAAywB,YACAqG,EAAArG,UAAAhwD,MAAAu/B,EAAAywB,UACAqG,EAAAhG,YAAArwD,MAAAC,KAAAs/B,EAAA8wB,cAGA9wB,EAAAy3B,kBACAX,EAAAW,gBAAAh3D,MAAAu/B,EAAAy3B,gBACAX,EAAAY,kBAAAj3D,MAAAu/B,EAAA03B,kBACAZ,EAAAa,iBAAAl3D,MAAAu/B,EAAA23B,kBA9KAse,CAAAhB,EAAAj1C,GACSA,aAAAjqC,EAAA6oE,qBA4NT,SAAA9H,EAAA92B,GACA82B,EAAAgI,UAAAr+D,MAAAu/B,EAAA8+B,UACAhI,EAAAiI,mBAAAt+D,MAAAu/B,EAAA++B,mBACAmX,GAAApf,EAAA92B,GA9NAm2C,CAAAlB,EAAAj1C,GACSA,aAAAjqC,EAAAyoE,qBACT0X,GAAAjB,EAAAj1C,GACSA,aAAAjqC,EAAAooE,kBACTn+B,EAAAy3B,kBACAwd,EAAAxd,gBAAAh3D,MAAAu/B,EAAAy3B,gBACAwd,EAAAvd,kBAAAj3D,MAAAu/B,EAAA03B,kBACAud,EAAAtd,iBAAAl3D,MAAAu/B,EAAA23B,kBAES33B,aAAAjqC,EAAAuoE,qBACT2W,EAAA7iB,QAAA3xD,MAAAu/B,EAAAoyB,SAGAr8D,EAAAw+E,cAAA6B,OAAAjK,EAAAgH,EAAAmB,aAAAW,EAAA7I,IAIA4I,EAAA10E,IAAA6rE,EAAA/tD,EAAA,mBACA42D,EAAA10E,IAAA6rE,EAAA/tD,EAAA,gBACA42D,EAAA70B,SAAAgsB,EAAA,cAAA/tD,EAAAnG,aAEA,IAAAo+D,EAAAlD,EAAAuB,gBAOA,OALA,OAAA2B,IACAtgF,EAAAw+E,cAAA+B,YAAAD,EAAApB,EAAA72D,EAAAxG,GACA7hB,EAAAw+E,cAAA6B,OAAAjK,EAAAkK,EAAApB,EAAA7I,IAGAsF,EAuEA,SAAAkE,GAAA9e,EAAA92B,GACA82B,EAAAuQ,QAAA5mE,MAAAu/B,EAAA79B,MACA20D,EAAA1E,QAAA3xD,MAAAu/B,EAAAoyB,QA2EA,SAAA8jB,GAAApf,EAAA92B,GACA82B,EAAAF,UAAAn2D,MAAAu/B,EAAA42B,UACAE,EAAAD,UAAAp2D,MAAAu/B,EAAA62B,UAEA72B,EAAAyxB,eACAqF,EAAArF,aAAAhxD,MAAAu/B,EAAAyxB,cAGAzxB,EAAAoxB,eACA0F,EAAA1F,aAAA3wD,MAAAu/B,EAAAoxB,cAGApxB,EAAAyvB,WACAqH,EAAArH,SAAAhvD,MAAAu/B,EAAAyvB,SACAqH,EAAAkB,kBAAAv3D,MAAAu/B,EAAAg4B,mBAGAh4B,EAAAovB,cACA0H,EAAA1H,YAAA3uD,MAAAu/B,EAAAovB,aAGApvB,EAAAmwB,UACA2G,EAAA3G,QAAA1vD,MAAAu/B,EAAAmwB,QACA2G,EAAAtG,UAAA/vD,MAAAu/B,EAAAwwB,WAGAxwB,EAAAywB,YACAqG,EAAArG,UAAAhwD,MAAAu/B,EAAAywB,UACAqG,EAAAhG,YAAArwD,MAAAC,KAAAs/B,EAAA8wB,cAGA9wB,EAAAy3B,kBACAX,EAAAW,gBAAAh3D,MAAAu/B,EAAAy3B,gBACAX,EAAAY,kBAAAj3D,MAAAu/B,EAAA03B,kBACAZ,EAAAa,iBAAAl3D,MAAAu/B,EAAA23B,kBAGA33B,EAAA63B,SAEAf,EAAA6H,gBAAAl+D,MAAAu/B,EAAA2+B,iBA8UA,SAAAwQ,GAAAhuE,GACA,IAAAo1E,EACA,GAAAp1E,IAAApL,EAAAyG,eAAA,OAAA2vE,EAAAqK,OACA,GAAAr1E,IAAApL,EAAA0G,oBAAA,OAAA0vE,EAAAsK,cACA,GAAAt1E,IAAApL,EAAA2G,uBAAA,OAAAyvE,EAAAuK,gBACA,GAAAv1E,IAAApL,EAAA4G,cAAA,OAAAwvE,EAAAwK,QACA,GAAAx1E,IAAApL,EAAA6G,2BAAA,OAAAuvE,EAAAyK,uBACA,GAAAz1E,IAAApL,EAAA8G,0BAAA,OAAAsvE,EAAA0K,sBACA,GAAA11E,IAAApL,EAAA+G,aAAA,OAAAqvE,EAAA2K,OACA,GAAA31E,IAAApL,EAAAgH,0BAAA,OAAAovE,EAAA4K,sBACA,GAAA51E,IAAApL,EAAAiH,yBAAA,OAAAmvE,EAAA6K,qBACA,GAAA71E,IAAApL,EAAAkH,iBAAA,OAAAkvE,EAAA8K,cACA,GAAA91E,IAAApL,EAAA0H,sBAAA,OAAA0uE,EAAA+K,uBACA,GAAA/1E,IAAApL,EAAA2H,sBAAA,OAAAyuE,EAAAgL,uBACA,GAAAh2E,IAAApL,EAAA4H,qBAAA,OAAAwuE,EAAAiL,qBACA,GAAAj2E,IAAApL,EAAAmH,SAAA,OAAAivE,EAAAkL,KACA,GAAAl2E,IAAApL,EAAAoH,UAAA,OAAAgvE,EAAAmL,MACA,GAAAn2E,IAAApL,EAAAqH,kBAAA,OAAA+uE,EAAAoL,eACA,GAAAp2E,IAAApL,EAAAsH,QAAA,OAAA8uE,EAAAqL,IACA,GAAAr2E,IAAApL,EAAAuH,gBAAA,OAAA6uE,EAAAsL,aACA,GAAAt2E,IAAApL,EAAAwH,UAAA,OAAA4uE,EAAAuL,MAGA,WAFAnB,EAAAnX,EAAA7nE,IAAA,4BAGA4J,IAAApL,EAAAyH,cAAA,OAAA+4E,EAAAoB,eAGA,GAAAx2E,IAAApL,EAAA6H,YAAA,OAAAuuE,EAAAyL,MACA,GAAAz2E,IAAApL,EAAA8H,UAAA,OAAAsuE,EAAA0L,IACA,GAAA12E,IAAApL,EAAA+H,WAAA,OAAAquE,EAAA2L,KACA,GAAA32E,IAAApL,EAAAgI,gBAAA,OAAAouE,EAAA4L,UACA,GAAA52E,IAAApL,EAAAiI,qBAAA,OAAAmuE,EAAA6L,gBACA,GAAA72E,IAAApL,EAAAmI,YAAA,OAAAiuE,EAAA8L,gBACA,GAAA92E,IAAApL,EAAAiE,YAAA,OAAAmyE,EAAA+L,SACA,GAAA/2E,IAAApL,EAAAkE,iBAAA,OAAAkyE,EAAAgM,cACA,GAAAh3E,IAAApL,EAAAmE,wBAAA,OAAAiyE,EAAAiM,sBACA,GAAAj3E,IAAApL,EAAAsE,WAAA,OAAA8xE,EAAAkM,KACA,GAAAl3E,IAAApL,EAAAuE,UAAA,OAAA6xE,EAAAmM,IACA,GAAAn3E,IAAApL,EAAAwE,eAAA,OAAA4xE,EAAAoM,UACA,GAAAp3E,IAAApL,EAAAyE,uBAAA,OAAA2xE,EAAAqM,oBACA,GAAAr3E,IAAApL,EAAA0E,eAAA,OAAA0xE,EAAAsM,UACA,GAAAt3E,IAAApL,EAAA2E,uBAAA,OAAAyxE,EAAAuM,oBACA,GAAAv3E,IAAApL,EAAA4E,eAAA,OAAAwxE,EAAAwM,UACA,GAAAx3E,IAAApL,EAAA6E,uBAAA,OAAAuxE,EAAAyM,oBACA,GAAAz3E,IAAApL,EAAA8E,eAAA,OAAAsxE,EAAA0M,UACA,GAAA13E,IAAApL,EAAA+E,uBAAA,OAAAqxE,EAAA2M,oBACA,GAAA33E,IAAApL,EAAAgF,uBAAA,OAAAoxE,EAAA4M,mBAGA,WAFAxC,EAAAnX,EAAA7nE,IAAA,kCAEA,CACA,GAAA4J,IAAApL,EAAAoI,qBAAA,OAAAo4E,EAAAyC,6BACA,GAAA73E,IAAApL,EAAAqI,sBAAA,OAAAm4E,EAAA0C,8BACA,GAAA93E,IAAApL,EAAAsI,sBAAA,OAAAk4E,EAAA2C,8BACA,GAAA/3E,IAAApL,EAAAuI,sBAAA,OAAAi4E,EAAA4C,8BAKA,WAFA5C,EAAAnX,EAAA7nE,IAAA,mCAEA,CACA,GAAA4J,IAAApL,EAAAwI,wBAAA,OAAAg4E,EAAA6C,gCACA,GAAAj4E,IAAApL,EAAAyI,wBAAA,OAAA+3E,EAAA8C,gCACA,GAAAl4E,IAAApL,EAAA0I,yBAAA,OAAA83E,EAAA+C,iCACA,GAAAn4E,IAAApL,EAAA2I,yBAAA,OAAA63E,EAAAgD,iCAKA,WAFAhD,EAAAnX,EAAA7nE,IAAA,mCAGA4J,IAAApL,EAAA4I,gBAAA,OAAA43E,EAAAiD,0BAKA,WAFAjD,EAAAnX,EAAA7nE,IAAA,qBAEA,CACA,GAAA4J,IAAApL,EAAAoE,YAAA,OAAAo8E,EAAAkD,QACA,GAAAt4E,IAAApL,EAAAqE,YAAA,OAAAm8E,EAAAmD,QAGA,SAznDAliF,KAAAkpE,WAAA,WACA,OAAAyL,GAGA30E,KAAAmiF,qBAAA,WACA,OAAAxN,EAAAwN,wBAGAniF,KAAAoiF,iBAAA,WACAxa,EAAA7nE,IAAA,sBAAAsiF,eAGAriF,KAAAsiF,iBAAA,WACA,OAAA/K,EAAA+K,oBAGAtiF,KAAAuiF,aAAA,WACA,OAAAhL,EAAAhnC,WAGAvwC,KAAAwiF,cAAA,WACA,OAAA7M,GAGA31E,KAAAyiF,cAAA,SAAAx5E,QACA7J,IAAA6J,IACA0sE,EAAA1sE,EACAjJ,KAAA0iF,QAAA5M,EAAAl/D,EAAAk/D,EAAAj/D,GAAA,KAGA7W,KAAA2iF,QAAA,WACA,OACAhmE,MAAA84D,EACA74D,OAAA84D,IAIA11E,KAAA0iF,QAAA,SAAA/lE,EAAAC,EAAAgmE,GACAnN,EAAA94D,EACA+4D,EAAA94D,EACAg2D,EAAAj2D,QAAAg5D,EACA/C,EAAAh2D,SAAA+4D,GAEA,IAAAiN,IACAhQ,EAAAzoE,MAAAwS,QAAA,KACAi2D,EAAAzoE,MAAAyS,SAAA,MAGA5c,KAAA6iF,YAAA,IAAAlmE,EAAAC,IAGA5c,KAAA6iF,YAAA,SAAAnjF,EAAAiX,EAAAgG,EAAAC,GACA66D,EAAA2B,SAAAtD,EAAAhtE,IAAApJ,EAAAiX,EAAAgG,EAAAC,KAGA5c,KAAA8iF,WAAA,SAAApjF,EAAAiX,EAAAgG,EAAAC,GACA66D,EAAA0B,QAAAvD,EAAA9sE,IAAApJ,EAAAiX,EAAAgG,EAAAC,KAGA5c,KAAA+iF,eAAA,SAAAC,GACAvL,EAAAsL,eAAAlN,EAAAmN,IAIAhjF,KAAAijF,cAAA,WACA,OAAA1N,GAGAv1E,KAAAkjF,cAAA,SAAAv4E,EAAAqC,GACAuoE,EAAAzsE,IAAA6B,GAEA6qE,OAAAp2E,IAAA4N,IAAA,EACA+rE,GAAAxD,EAAA5sE,EAAA4sE,EAAA3sE,EAAA2sE,EAAA1sE,EAAA2sE,IAGAx1E,KAAAmjF,cAAA,WACA,OAAA3N,GAGAx1E,KAAAojF,cAAA,SAAAp2E,GACAwoE,EAAAxoE,EACA+rE,GAAAxD,EAAA5sE,EAAA4sE,EAAA3sE,EAAA2sE,EAAA1sE,EAAA2sE,IAGAx1E,KAAA61D,MAAA,SAAAlrD,EAAA02D,EAAA4R,GACA,IAAAoQ,EAAA,QACAjkF,IAAAuL,QAAA04E,GAAA1O,EAAA2O,wBACAlkF,IAAAiiE,QAAAgiB,GAAA1O,EAAA4O,wBACAnkF,IAAA6zE,QAAAoQ,GAAA1O,EAAA6O,oBAEA7O,EAAA9e,MAAAwtB,IAGArjF,KAAAg5E,WAAA,WACAh5E,KAAA61D,OAAA,UAGA71D,KAAAyjF,WAAA,WACAzjF,KAAA61D,OAAA,UAGA71D,KAAA0jF,aAAA,WACA1jF,KAAA61D,OAAA,UAGA71D,KAAA2jF,YAAA,SAAA5yB,EAAApmD,EAAA02D,EAAA4R,GACAjzE,KAAAwxD,gBAAAT,GACA/wD,KAAA61D,MAAAlrD,EAAA02D,EAAA4R,IAIAjzE,KAAAq5E,gBAEAr5E,KAAAiyC,QAAA,WACAwhC,EAAA,GACAC,GAAA,EACAH,EAAA,GACAC,GAAA,EAEAZ,EAAArwC,oBAAA,mBAAA80C,IAAA,IAiCAr3E,KAAAi7E,sBAAA,SAAAr0D,EAAAszD,EAAA1xC,GACAivC,EAAAmM,iBACA,IAAAC,EAAA/S,EAAA/wE,IAAA6mB,GACAA,EAAAk9D,eAAAD,EAAAv8D,WAAAu8D,EAAAv8D,SAAAqtD,EAAAoP,gBACAn9D,EAAAo9D,aAAAH,EAAAriE,SAAAqiE,EAAAriE,OAAAmzD,EAAAoP,gBACAn9D,EAAAq9D,SAAAJ,EAAAt2C,KAAAs2C,EAAAt2C,GAAAonC,EAAAoP,gBACAn9D,EAAAs9D,YAAAL,EAAAl5E,QAAAk5E,EAAAl5E,MAAAgqE,EAAAoP,gBACA,IAAA18D,EAAA6yD,EAAAsC,gBAYA,GAVA51D,EAAAk9D,eACAnP,EAAAwP,WAAAxP,EAAAyP,aAAAP,EAAAv8D,UAEAqtD,EAAA0P,WAAA1P,EAAAyP,aAAAx9D,EAAA09D,cAAA3P,EAAA4P,cAEA9M,EAAA+M,gBAAAn9D,EAAAC,UAEAqtD,EAAA8P,oBAAAp9D,EAAAC,SAAA,EAAAqtD,EAAAuL,OAAA,QAGAt5D,EAAAo9D,WAAA,CAGA,GAFArP,EAAAwP,WAAAxP,EAAAyP,aAAAP,EAAAriE,QAEA,sBAAAgnB,EAAAvG,MAAA,yBAAAuG,EAAAvG,MAAA,yBAAAuG,EAAAvG,MAAAuG,EAAAi3B,UAAAlhE,EAAAsD,YACA,QAAAojB,EAAA,EAAAjb,EAAA,EAAA4c,EAAA0iB,MAA+CrkB,EAAAjb,EAAOib,GAAA,GACtD,IAAA7X,EAAAwZ,EAAA89D,YACAC,GAAAv3E,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,MACA2/D,GAAAx3E,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,MACA4/D,GAAAz3E,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,GAAA7X,EAAA6X,EAAA,MACA7X,EAAA6X,EAAA,GAAA0/D,EACAv3E,EAAA6X,EAAA,GAAA2/D,EACAx3E,EAAA6X,EAAA,GAAA4/D,EACAz3E,EAAA6X,EAAA,GAAA0/D,EACAv3E,EAAA6X,EAAA,GAAA2/D,EACAx3E,EAAA6X,EAAA,GAAA4/D,EACAz3E,EAAA6X,EAAA,GAAA0/D,EACAv3E,EAAA6X,EAAA,GAAA2/D,EACAx3E,EAAA6X,EAAA,GAAA4/D,EAIAlQ,EAAA0P,WAAA1P,EAAAyP,aAAAx9D,EAAA89D,YAAA/P,EAAA4P,cAEA9M,EAAA+M,gBAAAn9D,EAAA7F,QAEAmzD,EAAA8P,oBAAAp9D,EAAA7F,OAAA,EAAAmzD,EAAAuL,OAAA,OAGAt5D,EAAAq9D,QAAAz7C,EAAA0rB,MACAygB,EAAAwP,WAAAxP,EAAAyP,aAAAP,EAAAt2C,IAEAonC,EAAA0P,WAAA1P,EAAAyP,aAAAx9D,EAAAk+D,QAAAnQ,EAAA4P,cAEA9M,EAAA+M,gBAAAn9D,EAAAkmB,IAEAonC,EAAA8P,oBAAAp9D,EAAAkmB,GAAA,EAAAonC,EAAAuL,OAAA,QAGAt5D,EAAAs9D,WAAA17C,EAAAS,eAAA1qC,EAAAwD,WACA4yE,EAAAwP,WAAAxP,EAAAyP,aAAAP,EAAAl5E,OAEAgqE,EAAA0P,WAAA1P,EAAAyP,aAAAx9D,EAAAm+D,WAAApQ,EAAA4P,cAEA9M,EAAA+M,gBAAAn9D,EAAA1c,OAEAgqE,EAAA8P,oBAAAp9D,EAAA1c,MAAA,EAAAgqE,EAAAuL,OAAA,QAGAzI,EAAAuN,0BAEArQ,EAAAsQ,WAAAtQ,EAAAuQ,UAAA,EAAAt+D,EAAA0iB,OAEA1iB,EAAA0iB,MAAA,GAGAtpC,KAAAk7E,mBAAA,SAAA96D,EAAAokD,EAAAv9C,EAAAuhB,EAAA5hB,EAAAmnB,GACAgtC,GAAAvyC,GACA,IAAA0xC,EAAAc,GAAA56D,EAAAokD,EAAAh8B,EAAA5hB,GACAu+D,GAAA,EACAC,EAAAn+D,EAAA+f,GAAA,IAAAkzC,EAAAlzC,GAAA,IAAAwB,EAAAs3B,UAEAslB,IAAAnQ,IACAA,EAAAmQ,EACAD,GAAA,GAIA,IAAAla,EAAArkD,EAAAqkD,sBAEA,QAAA7rE,IAAA6rE,EAAA,CAGA,IAFA,IAAAoa,EAAA,GAEApgE,EAAA,EAAAjb,EAAAihE,EAAAnsE,OAAyDmmB,EAAAjb,EAAOib,IAAA,CAChE,IAAA0nD,EAAA1B,EAAAhmD,GACAogE,EAAA/oD,KAAA,CAAAqwC,EAAA1nD,IAGAogE,EAAA1gD,KAAAy1C,IAEAiL,EAAAvmF,OAAA,IACAumF,EAAAvmF,OAAA,GAGA,IAAAi0C,EAAA9rB,EAAA8rB,gBAEA,IAAA9tB,EAAA,EAAAjb,EAAAq7E,EAAAvmF,OAAoDmmB,EAAAjb,EAAOib,IAAA,CAC3D0nD,EAAA0Y,EAAApgE,GAGA,GAFAwnD,EAAAxnD,GAAA0nD,EAAA,GAEA,IAAAA,EAAA,IACA,IAAApsE,EAAAosE,EAAA,IACA,IAAAnkC,EAAA0D,cAAA6G,EAAAzrB,UAAAL,EAAAksB,aAAA,cAAAluB,EAAA8tB,EAAAzrB,SAAA/mB,KACA,IAAAioC,EAAA2D,cAAA4G,EAAAvxB,QAAAyF,EAAAksB,aAAA,cAAAluB,EAAA8tB,EAAAvxB,OAAAjhB,SAEA,IAAAioC,EAAA0D,cAAAjlB,EAAAosB,gBAAA,cAAApuB,IACA,IAAAujB,EAAA2D,cAAAllB,EAAAosB,gBAAA,cAAApuB,GAIAi1D,EAAA2C,cAAAl0B,SAAAgsB,EAAA,wBAAAlI,GACA0Y,GAAA,EAIA5kF,EAAA0mB,EAAA1mB,MAAA,IAOA2wD,EANA5pC,EAAAL,EAAAI,WAAAC,UAEA,IAAAkhB,EAAAs3B,YACAv/D,EAAAskC,EAAAygD,sBAAAr+D,IAKA,OAAA1mB,GACA2wD,EAAAmnB,IACAnlC,SAAA3yC,GAEA2wD,EAAAinB,GAGAgN,KAqEA,SAAA38C,EAAA0xC,EAAAjzD,EAAAs+D,GACA,IAAAxG,EAEA,GAAA93D,aAAA1oB,EAAAm2C,yBAGA,QAFAqqC,EAAAnX,EAAA7nE,IAAA,2BAIA,YADAwK,QAAA2U,MAAA,uJAKA9f,IAAAmmF,MAAA,GACA9N,EAAAmM,iBACA,IAAA4B,EAAAv+D,EAAAI,WACAo+D,EAAAvL,EAAAsC,gBACAkJ,EAAAl9C,EAAAy/B,uBAEA,QAAAroE,KAAA6lF,EAAA,CACA,IAAAE,EAAAF,EAAA7lF,GAEA,GAAA+lF,GAAA,GACA,IAAAC,EAAAJ,EAAA5lF,GAEA,QAAAR,IAAAwmF,EAAA,CACA,IAAA3jD,EAAA0yC,EAAAuL,MACA9yE,EAAAw4E,EAAAx4E,MACA+7B,EAAAy8C,EAAAz8C,WAEA/7B,aAAA+a,aACA8Z,EAAA0yC,EAAAuL,MACa9yE,aAAAo+B,aACbjhC,QAAAC,KAAA,gDACa4C,aAAA69B,YACbhJ,EAAA0yC,EAAAoL,eACa3yE,aAAA29B,WACb9I,EAAA0yC,EAAAmL,MACa1yE,aAAAi+B,YACbpJ,EAAA0yC,EAAAsL,aACa7yE,aAAA+9B,WACblJ,EAAA0yC,EAAAqL,IACa5yE,aAAAq9B,UACbxI,EAAA0yC,EAAAkL,KACazyE,aAAAu9B,aACb1I,EAAA0yC,EAAA8K,eAGA,IAAA10E,EAAA66E,EAAAhnE,SACAuK,EAAA0b,EAAAghD,mBAAAD,GAEA,GAAAA,aAAArnF,EAAAipB,2BAAA,CACA,IAAAC,EAAAm+D,EAAAn+D,KACAF,EAAAE,EAAAF,OACAla,EAAAu4E,EAAAv4E,OAEAoa,aAAAlpB,EAAAstC,4BACA4rC,EAAAqO,0BAAAH,EAAAl+D,EAAAkkB,iBAAAozC,QAEA3/E,IAAA6nB,EAAA0tB,oBACA1tB,EAAA0tB,kBAAAltB,EAAAkkB,iBAAAlkB,EAAA6hB,QAGAmuC,EAAA+M,gBAAAmB,GAGAhR,EAAAwP,WAAAxP,EAAAyP,aAAAj7D,GAEAwrD,EAAA8P,oBAAAkB,EAAA56E,EAAAk3B,EAAAkH,EAAA5hB,EAAAE,EAAAra,MAAA24C,mBAAAw/B,EAAAh+D,EAAAla,GAAAoa,EAAAra,MAAA24C,wBAEA6/B,aAAArnF,EAAAmtC,0BACA+rC,EAAAqO,0BAAAH,EAAAC,EAAAj6C,iBAAAozC,QAEA3/E,IAAA6nB,EAAA0tB,oBACA1tB,EAAA0tB,kBAAAixC,EAAAj6C,iBAAAi6C,EAAAt8C,QAGAmuC,EAAA+M,gBAAAmB,GAGAhR,EAAAwP,WAAAxP,EAAAyP,aAAAj7D,GAEAwrD,EAAA8P,oBAAAkB,EAAA56E,EAAAk3B,EAAAkH,EAAA,EAAAo8C,EAAAx6E,EAAA66E,EAAAx4E,MAAA24C,wBAEW,QAAA3mD,IAAAsmF,EAAA,CACX,IAAAz8E,EAAAy8E,EAAA9lF,GAEA,QAAAR,IAAA6J,EACA,OAAAA,EAAAnK,QACA,OACA61E,EAAAoR,gBAAAJ,EAAA18E,GAEA,MAEA,OACA0rE,EAAAqR,gBAAAL,EAAA18E,GAEA,MAEA,OACA0rE,EAAAsR,gBAAAN,EAAA18E,GAEA,MAEA,QACA0rE,EAAAuR,gBAAAP,EAAA18E,MAQAwuE,EAAAuN,0BApLAmB,CAAA39C,EAAA0xC,EAAAjzD,GAEA,OAAA1mB,GACAo0E,EAAAwP,WAAAxP,EAAAyR,qBAAAvhD,EAAAghD,mBAAAtlF,KAKA,IACA8lF,EAAAxhE,IAEA,OAAAtkB,EACA8lF,EAAA9lF,EAAA+oC,WACOlqC,IAAAkoB,IACP++D,EAAA/+D,EAAAgiB,OAGA,IAAAg9C,EAAAr/D,EAAA+rB,UAAAlvB,MACAyiE,EAAAt/D,EAAA+rB,UAAA1J,MACAk9C,EAAA,OAAAz4C,IAAAjqB,MAAA,EACA2iE,EAAA,OAAA14C,IAAAzE,MAAAzkB,IACA6hE,EAAAnnF,KAAA2M,IAbA,EAaAo6E,EAAAE,GACAG,EAAApnF,KAAAsL,IAdA,EAcAw7E,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,EACAG,EAAArnF,KAAA2M,IAAA,EAAAy6E,EAAAD,EAAA,GAEA,GAAA9/D,aAAAroB,EAAAulC,KACA,QAAA0E,EAAAs3B,UACA2X,EAAAoP,aAAAr+C,EAAAu3B,mBAAA+Y,MACA5nB,EAAA41B,QAAAnS,EAAAoS,YAEA,OAAAngE,EAAAikD,UACA,KAAAtsE,EAAAsJ,kBACAqpD,EAAA41B,QAAAnS,EAAAuQ,WACA,MAEA,KAAA3mF,EAAAuJ,sBACAopD,EAAA41B,QAAAnS,EAAAqS,gBACA,MAEA,KAAAzoF,EAAAwJ,oBACAmpD,EAAA41B,QAAAnS,EAAAsS,mBAIO,GAAArgE,aAAAroB,EAAAwlC,KAAA,CACP,IAAAmjD,EAAA1+C,EAAAw9B,eACA5mE,IAAA8nF,MAAA,GAEAzP,EAAAoP,aAAAK,EAAApO,MAEAlyD,aAAAroB,EAAA6rE,aACAlZ,EAAA41B,QAAAnS,EAAAoS,OAEA71B,EAAA41B,QAAAnS,EAAAwS,iBAEOvgE,aAAAroB,EAAA0lC,QACPitB,EAAA41B,QAAAnS,EAAAyS,QAGAngE,aAAA1oB,EAAAm2C,wBACAztB,EAAA0tB,kBAAA,GACAuc,EAAAm2B,gBAAApgE,EAAAy/D,EAAAE,GAGA11B,EAAAK,OAAAm1B,EAAAE,IAuJA5mF,KAAAuxD,OAAA,SAAAJ,EAAA/wC,EAAA2wC,EAAAu2B,GACA,GAAAlnE,aAAA7hB,EAAA0xD,UAAA,GAKA,IAAAuU,EAAArT,EAAAqT,IAEAyQ,EAAA,GACAD,GAAA,EACAE,EAAA,MAEA,IAAA/jB,EAAAie,YAAAje,EAAArqC,oBAEA,OAAA1G,EAAA6kB,QAAA7kB,EAAA0G,oBACA1G,EAAA8vC,mBAAA1vC,WAAAJ,EAAAK,aAEA41D,EAAA/1D,iBAAAF,EAAAG,iBAAAH,EAAA8vC,oBAEA6lB,EAAAxgD,cAAA8gD,GAEA5R,EAAA3lE,OAAA,EACA00E,GAAA,EACAE,GAAA,EACAC,EAAA70E,OAAA,EACA4vE,EAAA5vE,OAAA,EACAq3E,EAAAn2E,KAAAk0E,qBACAgC,EAAAF,EAAAkD,KAAAl5E,KAAAilE,eAAAkR,EAAA/1D,GA2JA,SAAAmnE,EAAA3gE,EAAAxG,GACA,QAAAwG,EAAA6c,QAAA,OAEA,GAAA7c,EAAAuc,OAAAD,KAAA9iB,EAAA+iB,QACA,GAAAvc,aAAAroB,EAAAm1D,MACA+Q,EAAAnoC,KAAA1V,QACS,GAAAA,aAAAroB,EAAA4lC,QACT,IAAAvd,EAAA+e,gBAAA,KAlCA9O,EAkCAjQ,EAjCAwvD,EAAAt3D,OAAAhW,IAAA,OAEAstE,EAAAp0D,OAAA,kBAEAo0D,EAAA72D,aAAAsX,EAAApW,aAEAg6D,GAAArE,KA4BAzC,EAAAr3C,KAAA1V,QAES,GAAAA,aAAAroB,EAAAkwE,UACTC,EAAApyC,KAAA1V,QACS,GAAAA,aAAAroB,EAAAu8E,uBACT,IAAAlG,EAAAX,cACAqC,EAAAr0D,sBAAA2E,EAAAnG,aAEA61D,EAAA92D,gBAAA62D,IAGAkE,GAAA3zD,EAAA,KAAAA,EAAA4hB,SAAA8tC,EAAA1/D,EAAA,WACS,IAAAgQ,aAAAroB,EAAAulC,MAAAld,aAAAroB,EAAAwlC,MAAAnd,aAAAroB,EAAA0lC,UACTrd,aAAAroB,EAAAykE,aACAp8C,EAAAuiC,SAAA7xC,UAGA,IAAAsP,EAAA+e,gBAAA,IA7DA,SAAA/e,GACA,IAAAK,EAAAL,EAAAK,SACA,OAAAA,EAAAyP,gBAAAzP,EAAA0P,wBAIA,OAFAy/C,EAAAltE,KAAA+d,EAAAyP,gBAAAnX,aAAAqH,EAAAnG,aAEAg6D,GAAArE,GAuDAoR,CAAA5gE,IAAA,CACA,IAAA4hB,EAAA5hB,EAAA4hB,SAEA,QAAAA,EAAA/E,QAAA,EACA,IAAAmxC,EAAAX,cACAqC,EAAAr0D,sBAAA2E,EAAAnG,aAEA61D,EAAA92D,gBAAA62D,IAGA,IAAApvD,EAAA4d,EAAAvtB,OAAAsP,GAEA,GAAA4hB,aAAAjqC,EAAAipE,cAIA,IAHA,IAAA15B,EAAA7mB,EAAA6mB,OACA9F,EAAAQ,EAAAR,UAEA/iB,EAAA,EAAAjb,EAAA8jC,EAAAhvC,OAAkDmmB,EAAAjb,EAAOib,IAAA,CACzD,IAAA8oB,EAAAD,EAAA7oB,GACAwiE,EAAAz/C,EAAA+F,EAAAhF,gBAEA,IAAA0+C,EAAAhkD,SACA82C,GAAA3zD,EAAAK,EAAAwgE,EAAAnR,EAAA1/D,EAAAm3B,QAIAwsC,GAAA3zD,EAAAK,EAAAuhB,EAAA8tC,EAAA1/D,EAAA,OA7EA,IAAAigB,EAoFA,IAAA8M,EAAA/c,EAAA+c,SAEA,QAAA1e,EAAA,EAAAjb,EAAA25B,EAAA7kC,OAA0CmmB,EAAAjb,EAAOib,IACjDsiE,EAAA5jD,EAAA1e,GAAA7E,GAtNAmnE,CAAAp2B,EAAA/wC,GACAmzD,EAAAz0E,OAAA00E,EAAA,EACAC,EAAA30E,OAAA40E,EAAA,GAEA,IAAAkB,EAAAX,cACAV,EAAA5uC,KAAA01C,IACA5G,EAAA9uC,KAAA21C,KAIApE,GAAAF,EAAA0R,eAgtBA,SAAAjjB,GAGA,IAFA,IAAAkjB,EAAA,EAEA1iE,EAAA,EAAAjb,EAAAy6D,EAAA3lE,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAsvC,EAAAkQ,EAAAx/C,GAEAsvC,EAAA9uB,aACA8wC,EAAAK,QAAA+Q,KAAApzB,GAIAgiB,EAAAK,QAAA93E,OAAA6oF,EA1tBAC,CAAAnjB,GACA6U,GAAA/nB,OAAAJ,EAAA/wC,GA4tBA,SAAAqkD,EAAArkD,GACA,IAAApW,EACA69E,EACAtzB,EAIA5pD,EACAgpD,EACAzvC,EACAo1D,EANA3wE,EAAA,EACAC,EAAA,EACAC,EAAA,EAKAi/E,EAAA1nE,EAAA8vC,mBACA63B,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA,IAAAl+E,EAAA,EAAA69E,EAAApjB,EAAA3lE,OAAqCkL,EAAA69E,EAAQ79E,IAO7C,GANAuqD,EAAAkQ,EAAAz6D,GACAW,EAAA4pD,EAAA5pD,MACAgpD,EAAAY,EAAAZ,UACAzvC,EAAAqwC,EAAArwC,SACAo1D,EAAA/kB,EAAAF,QAAAE,EAAAF,OAAAH,IAAAK,EAAAF,OAAAH,IAAA7C,QAAA,KAEAkD,aAAAh2D,EAAA41D,aACAxrD,GAAAgC,EAAAhC,EAAAgrD,EACA/qD,GAAA+B,EAAA/B,EAAA+qD,EACA9qD,GAAA8B,EAAA9B,EAAA8qD,OACS,GAAAY,aAAAh2D,EAAA61D,iBAAA,CACT,IAAAkL,EAAA2Y,GAAAl4E,IAAAw0D,GACA+K,EAAA30D,MAAAzB,KAAAqrD,EAAA5pD,OAAAmC,eAAAynD,EAAAZ,WACA2L,EAAAhuC,UAAArP,sBAAAsyC,EAAA9zC,aAEA61D,EAAAr0D,sBAAAsyC,EAAAn0D,OAAAqgB,aAEA6+C,EAAAhuC,UAAA1kB,IAAA0pE,GACAhX,EAAAhuC,UAAA3Q,mBAAAmnE,GACAxoB,EAAAjL,OAAAE,EAAA9uB,WAEA8uB,EAAA9uB,aACA65B,EAAAyR,WAAAxc,EAAAF,OAAAL,KACAsL,EAAA0R,aAAAzc,EAAAF,OAAAryC,OACAs9C,EAAA2R,cAAA1c,EAAAF,OAAAJ,SAGAsiB,EAAArF,qBAAA6W,GAAAzO,EACA/C,EAAApF,wBAAA4W,GAAAxzB,EAAAF,OAAAl0C,OACAo2D,EAAAE,YAAAsR,KAAAzoB,OACS,GAAA/K,aAAAh2D,EAAAq2D,UAAA,CACT,IAAA0K,EAAA2Y,GAAAl4E,IAAAw0D,GACA+K,EAAAh4C,SAAArF,sBAAAsyC,EAAA9zC,aACA6+C,EAAAh4C,SAAA/H,aAAAuoE,GACAxoB,EAAA30D,MAAAzB,KAAAyB,GAAAmC,eAAA6mD,GACA2L,EAAAp7C,WACAo7C,EAAAhuC,UAAArP,sBAAAsyC,EAAA9zC,aAEA61D,EAAAr0D,sBAAAsyC,EAAAn0D,OAAAqgB,aAEA6+C,EAAAhuC,UAAA1kB,IAAA0pE,GACAhX,EAAAhuC,UAAA3Q,mBAAAmnE,GACAxoB,EAAA+R,QAAA9xE,KAAAkY,IAAA88C,EAAAp8C,OACAmnD,EAAAgS,YAAA/xE,KAAAkY,IAAA88C,EAAAp8C,OAAA,EAAAo8C,EAAAT,WACAwL,EAAAzL,MAAA,IAAAU,EAAArwC,SAAA,EAAAqwC,EAAAV,MACAyL,EAAAjL,OAAAE,EAAA9uB,WAEA8uB,EAAA9uB,aACA65B,EAAAyR,WAAAxc,EAAAF,OAAAL,KACAsL,EAAA0R,aAAAzc,EAAAF,OAAAryC,OACAs9C,EAAA2R,cAAA1c,EAAAF,OAAAJ,SAGAsiB,EAAAhF,cAAA0W,GAAA3O,EACA/C,EAAA/E,iBAAAyW,GAAA1zB,EAAAF,OAAAl0C,OACAo2D,EAAAG,KAAAuR,KAAA3oB,OACS,GAAA/K,aAAAh2D,EAAAm2D,WAAA,CACT,IAAA4K,EAAA2Y,GAAAl4E,IAAAw0D,GACA+K,EAAAh4C,SAAArF,sBAAAsyC,EAAA9zC,aACA6+C,EAAAh4C,SAAA/H,aAAAuoE,GACAxoB,EAAA30D,MAAAzB,KAAAqrD,EAAA5pD,OAAAmC,eAAAynD,EAAAZ,WACA2L,EAAAp7C,SAAAqwC,EAAArwC,SACAo7C,EAAAzL,MAAA,IAAAU,EAAArwC,SAAA,EAAAqwC,EAAAV,MACAyL,EAAAjL,OAAAE,EAAA9uB,WAEA8uB,EAAA9uB,aACA65B,EAAAyR,WAAAxc,EAAAF,OAAAL,KACAsL,EAAA0R,aAAAzc,EAAAF,OAAAryC,OACAs9C,EAAA2R,cAAA1c,EAAAF,OAAAJ,SAGAsiB,EAAA7E,eAAAsW,GAAA1O,OAEAl6E,IAAAm3E,EAAA5E,kBAAAqW,KACAzR,EAAA5E,kBAAAqW,GAAA,IAAAzpF,EAAA8hB,SAKAi2D,EAAAr0D,sBAAAsyC,EAAA9zC,aAAA1C,SAEAw4D,EAAA5E,kBAAAqW,GAAAn/D,WAAAmG,YAAAsnD,GAEAC,EAAA/xD,MAAAwjE,KAAA1oB,OACS,GAAA/K,aAAAh2D,EAAAi2D,gBAAA,CACT,IAAA8K,EAAA2Y,GAAAl4E,IAAAw0D,GACA+K,EAAAhuC,UAAArP,sBAAAsyC,EAAA9zC,aACA6+C,EAAAhuC,UAAA3Q,mBAAAmnE,GACAxoB,EAAAhuC,UAAA5X,YACA4lD,EAAA7K,SAAAvrD,KAAAqrD,EAAA5pD,OAAAmC,eAAA6mD,GACA2L,EAAA1L,YAAA1qD,KAAAqrD,EAAAX,aAAA9mD,eAAA6mD,GACA4iB,EAAAI,KAAAuR,KAAA5oB,EAIAiX,EAAAC,QAAA,GAAA7tE,EACA4tE,EAAAC,QAAA,GAAA5tE,EACA2tE,EAAAC,QAAA,GAAA3tE,EACA0tE,EAAAE,YAAA33E,OAAAipF,EACAxR,EAAAG,KAAA53E,OAAAmpF,EACA1R,EAAA/xD,MAAA1lB,OAAAkpF,EACAzR,EAAAI,KAAA73E,OAAAopF,EACA3R,EAAAzkC,KAAAi2C,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,IAAA3R,EAAAK,QAAA93E,OAn1BAqpF,CAAA1jB,EAAArkD,GACA81D,GAAAF,EAAAoS,aAEAvR,EAAAC,MAAA,EACAD,EAAA1vD,SAAA,EACA0vD,EAAA7qC,MAAA,EACA6qC,EAAA9xD,OAAA,OAEA3lB,IAAA2xD,IACAA,EAAA,MAGA/wD,KAAAwxD,gBAAAT,GAEA,IAAAme,EAAA/d,EAAA+d,WA6BA,GA3BA,OAAAA,EACA6J,GAAAxD,EAAA5sE,EAAA4sE,EAAA3sE,EAAA2sE,EAAA1sE,EAAA2sE,GACOtG,aAAA3wE,EAAAmK,OACPqwE,GAAA7J,EAAAvmE,EAAAumE,EAAAtmE,EAAAsmE,EAAArmE,EAAA,IAGA7I,KAAA6zE,WAAAyT,IACAtnF,KAAA61D,MAAA71D,KAAA8zE,eAAA9zE,KAAA+zE,eAAA/zE,KAAAg0E,kBAGA9E,aAAA3wE,EAAAklE,aACA+U,GAAAj4D,iBAAArX,KAAAkX,EAAAG,kBACAi4D,GAAA/3D,YAAA0K,gBAAA/K,EAAAK,aACA+3D,GAAAtoB,mBAAA1vC,WAAAg4D,GAAA/3D,aACAm4D,GAAApwC,SAAA82B,SAAA,MAAAr2D,MAAAimE,EACA0J,GAAAvzC,gBAAA/kB,iBAAAk4D,GAAAtoB,mBAAA0oB,GAAAn4D,aACAokB,EAAAvtB,OAAAshE,IAEAhE,EAAAsG,mBAAA1C,GAAA,KAAAI,GAAA3xD,SAAA2xD,GAAApwC,SAAAowC,GAAA,OACO1J,aAAA3wE,EAAAmkE,UACP+V,GAAAjwC,SAAA0rB,IAAAgb,EACArqC,EAAAvtB,OAAAmhE,IAEA7D,EAAAsG,mBAAA3C,GAAA,KAAAE,GAAAxxD,SAAAwxD,GAAAjwC,SAAAiwC,GAAA,OAIAtnB,EAAAge,iBAAA,CACA,IAAAA,EAAAhe,EAAAge,iBACAyL,GAAArH,EAAAnzD,EAAAokD,EAAA2K,GACAyL,GAAAnH,EAAArzD,EAAAokD,EAAA2K,QAGAsI,EAAA4D,YAAA98E,EAAA2D,YACA04E,GAAArH,EAAAnzD,EAAAokD,GAEAoW,GAAAnH,EAAArzD,EAAAokD,GAIAgV,GAAAjoB,OAAAJ,EAAA/wC,GACAs5D,GAAAnoB,OAAAJ,EAAA/wC,EAAAi1D,GAEAtkB,GACA9oB,EAAAogD,yBAAAt3B,GAIA0mB,EAAA8D,cAAA,GACA9D,EAAA+D,eAAA,GACA/D,EAAAgE,eAAA,QAzGAlxE,QAAA2U,MAAA,2EA83BAlf,KAAAsoF,eAAA,SAAAC,EAAAC,GACA/Q,EAAAgR,YAAAF,GACA9Q,EAAA2D,aAAAoN,IAAAjqF,EAAA8C,uBAeArB,KAAA0oF,iBAXA,WACA,IAAAC,EAAArT,EAOA,OALAqT,GAAApR,EAAAqR,aACAr+E,QAAAC,KAAA,gCAAAm+E,EAAA,+CAAApR,EAAAqR,aAGAtT,GAAA,EACAqT,GAKA3oF,KAAA6oF,aAAA,WACA,IAAAC,GAAA,EAEA,gBAAAz3B,EAAA03B,GACA13B,aAAA9yD,EAAA2/E,oBACA4K,IACAv+E,QAAAC,KAAA,gHACAs+E,GAAA,GAGAz3B,aAGAppB,EAAA4gD,aAAAx3B,EAAA03B,IAbA,GAiBA/oF,KAAAgpF,WAAA,WACA,IAAAF,GAAA,EACA,gBAAAz3B,EAAA03B,GACAD,IACAv+E,QAAAC,KAAA,6EACAs+E,GAAA,GAGA7gD,EAAA4gD,aAAAx3B,EAAA03B,IARA,GAYA/oF,KAAAipF,eAAA,WACA,IAAAH,GAAA,EACA,gBAAAz3B,EAAA03B,GAEA13B,aAAA9yD,EAAAyyD,wBACA83B,IACAv+E,QAAAC,KAAA,uHACAs+E,GAAA,GAGAz3B,aAKAA,aAAA9yD,EAAAklE,aAAA7kE,MAAAkmC,QAAAusB,EAAAkL,QAAA,IAAAlL,EAAAkL,MAAAz9D,OAGAmpC,EAAAghD,eAAA53B,EAAA03B,GAGA9gD,EAAAihD,sBAAA73B,EAAA03B,IArBA,GA0BA/oF,KAAAmpF,uBAAA,WACA,OAAArU,GAGA90E,KAAAwxD,gBAAA,SAAAT,GACA+jB,EAAA/jB,EAEAA,QAAA3xD,IAAA0xE,EAAA/wE,IAAAgxD,GAAAq4B,oBACAnhD,EAAAohD,kBAAAt4B,GAGA,IACAu4B,EADAC,EAAAx4B,aAAAxyD,EAAAyyD,sBAGA,GAAAD,EAAA,CACA,IAAAy4B,EAAA1Y,EAAA/wE,IAAAgxD,GAGAu4B,EADAC,EACAC,EAAAJ,mBAAAr4B,EAAAO,gBAEAk4B,EAAAJ,mBAGAjU,EAAAjsE,KAAA6nD,EAAAooB,SAEA/D,EAAArkB,EAAA04B,YAEApU,EAAAnsE,KAAA6nD,EAAAqoB,eAEAkQ,EAAA,KAEAnU,EAAAjsE,KAAA0sE,GAAA9oE,eAAA6oE,GAEAP,EAAAS,EAEAR,EAAAnsE,KAAA4sE,GAAAhpE,eAAA6oE,GAaA,GAVAZ,IAAAuU,IACA3U,EAAA+U,gBAAA/U,EAAAgV,YAAAL,GAEAvU,EAAAuU,GAGA7R,EAAA0B,QAAAhE,GACAsC,EAAAsL,eAAA3N,GACAqC,EAAA2B,SAAA/D,GAEAkU,EAAA,CACA,IAAAK,EAAA9Y,EAAA/wE,IAAAgxD,EAAAM,SAEAsjB,EAAAkV,qBAAAlV,EAAAgV,YAAAhV,EAAAmV,kBAAAnV,EAAAoV,4BAAAh5B,EAAAO,eAAAs4B,EAAAI,eAAAj5B,EAAAk5B,qBAIAjqF,KAAAkqF,uBAAA,SAAAn5B,EAAArxD,EAAAiX,EAAAgG,EAAAC,EAAAuM,GACA,GAAA4nC,aAAAxyD,EAAA2/E,qBAAA,GAKA,IAAAoL,EAAAxY,EAAA/wE,IAAAgxD,GAAAq4B,mBAEA,GAAAE,EAAA,CACA,IAAAa,GAAA,EAEAb,IAAAvU,IACAJ,EAAA+U,gBAAA/U,EAAAgV,YAAAL,GAEAa,GAAA,GAGA,IACA,IAAA94B,EAAAN,EAAAM,QAEA,GAAAA,EAAAT,SAAAryD,EAAA+H,YAAAqxE,GAAAtmB,EAAAT,UAAA+jB,EAAA/uD,aAAA+uD,EAAAyV,kCAEA,YADA7/E,QAAA2U,MAAA,6GAIA,GAAAmyC,EAAApvB,OAAA1jC,EAAAkH,kBAAAkyE,GAAAtmB,EAAApvB,QAAA0yC,EAAA/uD,aAAA+uD,EAAA0V,kCAAAh5B,EAAApvB,OAAA1jC,EAAAwH,YAAA6hE,EAAA7nE,IAAA,+BAAAsxD,EAAApvB,OAAA1jC,EAAAyH,gBAAA4hE,EAAA7nE,IAAA,gCAEA,YADAwK,QAAA2U,MAAA,uHAIAy1D,EAAA2V,uBAAA3V,EAAAgV,eAAAhV,EAAA4V,qBAEA7qF,GAAA,GAAAA,GAAAqxD,EAAAp0C,SAAAhG,GAAA,GAAAA,GAAAo6C,EAAAn0C,UACA+3D,EAAA6V,WAAA9qF,EAAAiX,EAAAgG,EAAAC,EAAA+6D,GAAAtmB,EAAAT,QAAA+mB,GAAAtmB,EAAApvB,MAAA9Y,GAGA5e,QAAA2U,MAAA,8GAES,QACTirE,GACAxV,EAAA+U,gBAAA/U,EAAAgV,YAAA5U,UAtCAxqE,QAAA2U,MAAA,8FA4IA3gB,EAAA2/E,kBAAA,SAAAvhE,EAAAC,EAAA+zC,GACA3wD,KAAAw4B,KAAAj6B,EAAAgB,KAAA84B,eACAr4B,KAAA2c,QACA3c,KAAA4c,SACA5c,KAAAm5E,QAAA,IAAA56E,EAAAikB,QAAA,IAAA7F,EAAAC,GACA5c,KAAAypF,aAAA,EACAzpF,KAAAo5E,SAAA,IAAA76E,EAAAikB,QAAA,IAAA7F,EAAAC,QAEAxd,KADAuxD,KAAA,IACAG,YAAAH,EAAAG,UAAAvyD,EAAA+G,cACAtF,KAAAqxD,QAAA,IAAA9yD,EAAAmkE,aAAAtjE,SAAAuxD,EAAAuG,MAAAvG,EAAAwG,MAAAxG,EAAAE,UAAAF,EAAAG,UAAAH,EAAAC,OAAAD,EAAA1uB,KAAA0uB,EAAAmG,WAAAnG,EAAA8X,UACAzoE,KAAAyqF,iBAAArrF,IAAAuxD,EAAA85B,aAAA95B,EAAA85B,YACAzqF,KAAA0qF,mBAAAtrF,IAAAuxD,EAAA+5B,eAAA/5B,EAAA+5B,cACA1qF,KAAA2qF,aAAA,MAGA9qF,OAAAM,OAAA5B,EAAA2/E,kBAAAv+E,UAAApB,EAAAwjC,gBAAApiC,UAAA,CACA+iF,QAAA,SAAA/lE,EAAAC,GACA5c,KAAA2c,WAAA3c,KAAA4c,aACA5c,KAAA2c,QACA3c,KAAA4c,SACA5c,KAAAiyC,WAGAjyC,KAAAo5E,SAAAtwE,IAAA,IAAA6T,EAAAC,GACA5c,KAAAm5E,QAAArwE,IAAA,IAAA6T,EAAAC,IAEA1R,MAAA,WACA,WAAAlL,KAAAgJ,aAAAE,KAAAlJ,OAEAkJ,KAAA,SAAAzI,GAQA,OAPAT,KAAA2c,MAAAlc,EAAAkc,MACA3c,KAAA4c,OAAAnc,EAAAmc,OACA5c,KAAAo5E,SAAAlwE,KAAAzI,EAAA24E,UACAp5E,KAAAqxD,QAAA5wD,EAAA4wD,QAAAnmD,QACAlL,KAAAyqF,YAAAhqF,EAAAgqF,YACAzqF,KAAA0qF,cAAAjqF,EAAAiqF,cACA1qF,KAAA2qF,aAAAlqF,EAAAkqF,aACA3qF,MAEAiyC,QAAA,WACAjyC,KAAA0iC,cAAA,CACAT,KAAA,eASA1jC,EAAAyyD,sBAAA,SAAAr0C,EAAAC,EAAA+zC,GACApyD,EAAA2/E,kBAAAt9E,KAAAZ,KAAA2c,EAAAC,EAAA+zC,GACA3wD,KAAAsxD,eAAA,EAEAtxD,KAAAiqF,kBAAA,GAGA1rF,EAAAyyD,sBAAArxD,UAAAE,OAAA6/B,OAAAnhC,EAAA2/E,kBAAAv+E,WACApB,EAAAyyD,sBAAArxD,UAAAqJ,YAAAzK,EAAAyyD,sBAMAzyD,EAAA65E,oBAAA,SAAAzD,EAAA/M,EAAAiP,GACA,IAAAj/B,EAsCA53C,KAAA8mF,QApCA,SAAA79E,GACA2uC,EAAA3uC,GAoCAjJ,KAAAuxD,OAjCA,SAAAztC,EAAAwlB,GACAqrC,EAAAsQ,WAAArtC,EAAA9zB,EAAAwlB,GAEAutC,EAAAC,QACAD,EAAA1vD,UAAAmiB,EACAsO,IAAA+8B,EAAAuQ,YAAArO,EAAA7qC,OAAA1C,EAAA,IA6BAtpC,KAAAqnF,gBA1BA,SAAApgE,GACA,IAAA83D,EAAAnX,EAAA7nE,IAAA,0BAEA,UAAAg/E,EAAA,CAKA,IAAAz3D,EAAAL,EAAAI,WAAAC,SACAgiB,EAAA,EAEAhiB,aAAA/oB,EAAAipB,4BACA8hB,EAAAhiB,EAAAG,KAAA6hB,MACAy1C,EAAA6L,yBAAAhzC,EAAA,EAAAtO,EAAAriB,EAAA0tB,qBAEArL,EAAAhiB,EAAAgiB,MACAy1C,EAAA6L,yBAAAhzC,EAAA,EAAAtO,EAAAriB,EAAA0tB,oBAGAkiC,EAAAC,QACAD,EAAA1vD,UAAAmiB,EAAAriB,EAAA0tB,kBACAiD,IAAA+8B,EAAAuQ,YAAArO,EAAA7qC,OAAA/kB,EAAA0tB,kBAAArL,EAAA,QAjBA/+B,QAAA2U,MAAA,oIA0BA3gB,EAAA03E,cAAA,WACA,IAAApvD,EAAA7mB,KACA6qF,EAAA,KACAC,EAAA,EACA5W,GAAA,EACA6W,GAAA,EACAjjE,EAAA,IAAAvpB,EAAA82B,MACA21D,EAAA,IAAAzsF,EAAA2pB,QACAy0D,EAAA,CACA1zE,MAAA,KACAsgC,aAAA,GAmDA,SAAA0hD,IACAtO,EAAA1zE,QAAA4hF,IACAlO,EAAA1zE,MAAA4hF,EACAlO,EAAApzC,YAAAuhD,EAAA,GAGAjkE,EAAA6zD,UAAAoQ,EAGA,SAAAI,EAAA91D,EAAAhV,EAAA5E,EAAA2vE,GACA,IAAAC,EAAA,OAAAh2D,IAAAt2B,OAAA,EACAusF,EAAA,KAEA,OAAAD,EAAA,CAGA,GAFAC,EAAA1O,EAAA1zE,OAEA,IAAAkiF,GAAA,OAAAE,EAAA,CACA,IAAAC,EAAA9vE,EAAA,EAAA4vE,EACAtD,EAAA1nE,EAAA8vC,mBACA86B,EAAA7gE,gBAAA29D,IAEA,OAAAuD,KAAAvsF,OAAAwsF,KACAD,EAAA,IAAAljE,aAAAmjE,IAGA,QAAArmE,EAAA,EAAAsmE,EAAA/vE,EAAyCyJ,IAAAmmE,IAAenmE,EAAAsmE,GAAA,EACxDzjE,EAAA5e,KAAAksB,EAAAnQ,IAAA1F,aAAAuoE,EAAAkD,GACAljE,EAAAtG,OAAAlU,QAAA+9E,EAAAE,GACAF,EAAAE,EAAA,GAAAzjE,EAAAC,SAIA40D,EAAA1zE,MAAAoiF,EACA1O,EAAApzC,aAAA,EAIA,OADA1iB,EAAA6zD,UAAA0Q,EACAC,EAtFArrF,KAAA28E,UACA38E,KAAA06E,UAAA,EAEA16E,KAAAk5E,KAAA,SAAA9jD,EAAAo2D,EAAAprE,GACA,IAAAyxB,EAAA,IAAAzc,EAAAt2B,QAAA0sF,GAEA,IAAAV,GAAA5W,EAIA,OAHAA,EAAAsX,EACAX,EAAAK,EAAA91D,EAAAhV,EAAA,GACA0qE,EAAA11D,EAAAt2B,OACA+yC,GAGA7xC,KAAA0nF,aAAA,WACAqD,GAAA,EACAG,EAAA,OAGAlrF,KAAAooF,WAAA,WACA2C,GAAA,EACAE,KAGAjrF,KAAA67E,SAAA,SAAAzmD,EAAA8vC,EAAA9kD,EAAAsoB,EAAA+iD,GACA,IAAAvX,GAAA,OAAA9+C,GAAA,IAAAA,EAAAt2B,QAAAisF,IAAA7lB,EAEA6lB,EAEAG,EAAA,MAEAD,QAEO,CACP,IAAAS,EAAAX,EAAA,EAAAD,EACAa,EAAA,EAAAD,EACAL,EAAA3iD,EAAAkjD,eAAA,KACAjP,EAAA1zE,MAAAoiF,EAEAA,EAAAH,EAAA91D,EAAAhV,EAAAurE,EAAAF,GAEA,QAAAxmE,EAAA,EAAuBA,IAAA0mE,IAAe1mE,EACtComE,EAAApmE,GAAA4lE,EAAA5lE,GAGAyjB,EAAAkjD,cAAAP,EACArrF,KAAA06E,WAAAgR,KAkDAntF,EAAA+5E,2BAAA,SAAA3D,EAAA/M,EAAAiP,GACA,IAAAj/B,EAMA3V,EAAAl3B,EAkCA/K,KAAA8mF,QAtCA,SAAA79E,GACA2uC,EAAA3uC,GAsCAjJ,KAAAkzC,SAjCA,SAAA3yC,GACAA,EAAA6M,iBAAAi+B,aAAAu8B,EAAA7nE,IAAA,2BACAkiC,EAAA0yC,EAAAsL,aACAl1E,EAAA,IAEAk3B,EAAA0yC,EAAAoL,eACAh1E,EAAA,IA4BA/K,KAAAuxD,OAxBA,SAAAztC,EAAAwlB,GACAqrC,EAAAkX,aAAAj0C,EAAAtO,EAAArH,EAAAne,EAAA/Y,GAEA8rE,EAAAC,QACAD,EAAA1vD,UAAAmiB,EACAsO,IAAA+8B,EAAAuQ,YAAArO,EAAA7qC,OAAA1C,EAAA,IAoBAtpC,KAAAqnF,gBAjBA,SAAApgE,EAAAnD,EAAAwlB,GACA,IAAAy1C,EAAAnX,EAAA7nE,IAAA,0BAEA,OAAAg/E,GAKAA,EAAA+M,2BAAAl0C,EAAAtO,EAAArH,EAAAne,EAAA/Y,EAAAkc,EAAA0tB,mBACAkiC,EAAAC,QACAD,EAAA1vD,UAAAmiB,EAAAriB,EAAA0tB,kBACAiD,IAAA+8B,EAAAuQ,YAAArO,EAAA7qC,OAAA/kB,EAAA0tB,kBAAArL,EAAA,IAPA/+B,QAAA2U,MAAA,oIAqBA3gB,EAAA+4E,gBAAA,SAAAyU,GACA,IAAAnkB,EAAA,GAEA5nE,KAAAD,IAAA,SAAAH,GACA,QAAAR,IAAAwoE,EAAAhoE,GACA,OAAAgoE,EAAAhoE,GAGA,IAAAm/E,EAEA,OAAAn/E,GACA,0BACAm/E,EAAAgN,EAAAC,aAAA,wBAAAD,EAAAC,aAAA,4BAAAD,EAAAC,aAAA,8BACA,MAEA,qCACAjN,EAAAgN,EAAAC,aAAA,mCAAAD,EAAAC,aAAA,uCAAAD,EAAAC,aAAA,yCACA,MAEA,oCACAjN,EAAAgN,EAAAC,aAAA,kCAAAD,EAAAC,aAAA,sCAAAD,EAAAC,aAAA,wCACA,MAEA,qCACAjN,EAAAgN,EAAAC,aAAA,mCAAAD,EAAAC,aAAA,yCACA,MAEA,oCACAjN,EAAAgN,EAAAC,aAAA,iCACA,MAEA,QACAjN,EAAAgN,EAAAC,aAAApsF,GAQA,OALA,OAAAm/E,GACAx0E,QAAAC,KAAA,wBAAA5K,EAAA,6BAGAgoE,EAAAhoE,GAAAm/E,EACAA,IAKAxgF,EAAAi5E,kBAAA,SAAAuU,EAAAnkB,EAAA92B,GACA,IAAAm7C,EAeA,SAAAC,EAAA37C,GACA,aAAAA,EAAA,CACA,GAAAw7C,EAAA7U,yBAAA6U,EAAAI,cAAAJ,EAAAK,YAAA77C,UAAA,GAAAw7C,EAAA7U,yBAAA6U,EAAAM,gBAAAN,EAAAK,YAAA77C,UAAA,EACA,cAGAA,EAAA,UAGA,kBAAAA,GACAw7C,EAAA7U,yBAAA6U,EAAAI,cAAAJ,EAAAO,cAAA/7C,UAAA,GAAAw7C,EAAA7U,yBAAA6U,EAAAM,gBAAAN,EAAAO,cAAA/7C,UAAA,EACA,UAIA,OAGAvwC,KAAAsiF,iBA/BA,WACA,QAAAljF,IAAA6sF,EAAA,OAAAA,EACA,IAAAlN,EAAAnX,EAAA7nE,IAAA,kCAQA,OALAksF,EADA,OAAAlN,EACAgN,EAAAnmE,aAAAm5D,EAAAwN,gCAEA,GAyBAvsF,KAAAksF,kBACAlsF,KAAAuwC,eAAAnxC,IAAA0xC,EAAAP,UAAAO,EAAAP,UAAA,QACAvwC,KAAA29E,4BAAAv+E,IAAA0xC,EAAA6sC,wBAAA7sC,EAAA6sC,uBACA39E,KAAA4oF,YAAAmD,EAAAnmE,aAAAmmE,EAAAS,yBACAxsF,KAAAysF,kBAAAV,EAAAnmE,aAAAmmE,EAAAW,gCACA1sF,KAAA2sF,eAAAZ,EAAAnmE,aAAAmmE,EAAAa,kBACA5sF,KAAA6sF,eAAAd,EAAAnmE,aAAAmmE,EAAAe,2BACA9sF,KAAA+sF,cAAAhB,EAAAnmE,aAAAmmE,EAAAiB,oBACAhtF,KAAAitF,kBAAAlB,EAAAnmE,aAAAmmE,EAAAmB,4BACAltF,KAAAmtF,YAAApB,EAAAnmE,aAAAmmE,EAAAqB,qBACAptF,KAAAqtF,oBAAAtB,EAAAnmE,aAAAmmE,EAAAuB,8BACAttF,KAAAutF,eAAAvtF,KAAAysF,kBAAA,EACAzsF,KAAAwtF,wBAAA5lB,EAAA7nE,IAAA,qBACAC,KAAA+9E,oBAAA/9E,KAAAutF,gBAAAvtF,KAAAwtF,sBAEA,IAAAC,EAAAvB,EAAAlsF,KAAAuwC,WAEAk9C,IAAAztF,KAAAuwC,YACAhmC,QAAAC,KAAA,uBAAAxK,KAAAuwC,UAAA,uBAAAk9C,EAAA,YACAztF,KAAAuwC,UAAAk9C,GAGAztF,KAAA29E,yBACA39E,KAAA29E,yBAAA/V,EAAA7nE,IAAA,oBASAxB,EAAAmvF,gBAAA,SAAA3B,EAAAjb,EAAAiG,GACA,IAAAhvC,EAAA,GA2BA,SAAA4lD,EAAAhrD,GACA,IAAA1b,EAAA0b,EAAAviC,OACAwtF,EAAA7lD,EAAA9gB,EAAA+f,IAEA,OAAA4mD,EAAArtF,OACAstF,EAAAD,EAAArtF,OA0CA,SAAA8mB,GACA,QAAAznB,KAAAynB,EACAwmE,EAAAxmE,EAAAznB,IAzCAkuF,CAAAF,EAAAvmE,YACAJ,EAAAsb,oBAAA,UAAAorD,UACA5lD,EAAA9gB,EAAA+f,IAEA,IAAA+mD,EAAAjd,EAAA/wE,IAAAknB,GAEA8mE,EAAAjuB,WACA+tB,EAAAE,EAAAjuB,WAGAgR,EAAAiJ,OAAA9yD,GACA,IAAA+mE,EAAAld,EAAA/wE,IAAA6tF,GAEAI,EAAAluB,WACA+tB,EAAAG,EAAAluB,WAGAgR,EAAAiJ,OAAA6T,GAEA7W,EAAAC,OAAAjvC,aAWA,SAAA8lD,EAAAlvE,GACA,IAAAwK,EATA,SAAAxK,GACA,OAAAA,aAAApgB,EAAAipB,2BACAspD,EAAA/wE,IAAA4e,EAAA8I,MAAAwmE,cAGAnd,EAAA/wE,IAAA4e,GAAAsvE,cAIApI,CAAAlnE,QAEAvf,IAAA+pB,IACA4iE,EAAAmC,aAAA/kE,GAWA,SAAAxK,GACAA,aAAApgB,EAAAipB,2BACAspD,EAAAiJ,OAAAp7D,EAAA8I,MAEAqpD,EAAAiJ,OAAAp7D,GAdAwvE,CAAAxvE,IAkBA3e,KAAAD,IAtFA,SAAA6mB,GACA,IAOAgnE,EAPA3mE,EAAAL,EAAAK,SAEA,YAAA7nB,IAAA2oC,EAAA9gB,EAAA+f,IACAe,EAAA9gB,EAAA+f,KAGA/f,EAAA+a,iBAAA,UAAA2rD,GAGA1mE,aAAA1oB,EAAA6oB,eACAwmE,EAAA3mE,EACOA,aAAA1oB,EAAA2oB,gBACP9nB,IAAA6nB,EAAAmnE,kBACAnnE,EAAAmnE,iBAAA,IAAA7vF,EAAA6oB,gBAAAT,cAAAC,IAGAgnE,EAAA3mE,EAAAmnE,iBAGArmD,EAAA9gB,EAAA+f,IAAA4mD,EACA7W,EAAAC,OAAAjvC,aACA6lD,KAwEArvF,EAAA25E,YAAA,WACA,IAAAzT,EAAA,GAEAzkE,KAAAD,IAAA,SAAAw0D,GACA,QAAAn1D,IAAAqlE,EAAAlQ,EAAAvtB,IACA,OAAAy9B,EAAAlQ,EAAAvtB,IAGA,IAAAs4B,EAEA,OAAA/K,EAAAtyB,MACA,uBACAq9B,EAAA,CACAhuC,UAAA,IAAA/yB,EAAA+a,QACA3O,MAAA,IAAApM,EAAAmK,MACA2rD,QAAA,EACA0c,WAAA,EACAC,aAAA,EACAC,cAAA,IAAA1yE,EAAAme,SAEA,MAEA,gBACA4iD,EAAA,CACAh4C,SAAA,IAAA/oB,EAAA+a,QACAgY,UAAA,IAAA/yB,EAAA+a,QACA3O,MAAA,IAAApM,EAAAmK,MACAwb,SAAA,EACAmtD,QAAA,EACAC,YAAA,EACAzd,MAAA,EACAQ,QAAA,EACA0c,WAAA,EACAC,aAAA,EACAC,cAAA,IAAA1yE,EAAAme,SAEA,MAEA,iBACA4iD,EAAA,CACAh4C,SAAA,IAAA/oB,EAAA+a,QACA3O,MAAA,IAAApM,EAAAmK,MACAwb,SAAA,EACA2vC,MAAA,EACAQ,QAAA,EACA0c,WAAA,EACAC,aAAA,EACAC,cAAA,IAAA1yE,EAAAme,SAEA,MAEA,sBACA4iD,EAAA,CACAhuC,UAAA,IAAA/yB,EAAA+a,QACAm7C,SAAA,IAAAl2D,EAAAmK,MACAkrD,YAAA,IAAAr1D,EAAAmK,OAMA,OADA+7D,EAAAlQ,EAAAvtB,IAAAs4B,EACAA,IASA/gE,EAAAu5E,aAAA,SAAAiU,EAAAjb,EAAAiG,GACA,IAAAhvC,EAAA,IAAAxpC,EAAAmvF,gBAAA3B,EAAAjb,EAAAiG,GAmCA,SAAAsX,EAAA1vE,EAAA0sC,GACA,IAAA5jC,EAAA9I,aAAApgB,EAAAipB,2BAAA7I,EAAA8I,KAAA9I,EACA2vE,EAAAxd,EAAA/wE,IAAA0nB,QAEAroB,IAAAkvF,EAAAL,cAOA,SAAAK,EAAA7mE,EAAA4jC,GACAijC,EAAAL,cAAAlC,EAAAhI,eACAgI,EAAA5H,WAAA94B,EAAAijC,EAAAL,eACA,IAAAM,EAAA9mE,EAAA2hB,QAAA2iD,EAAAxH,aAAAwH,EAAAyC,YACAzC,EAAA1H,WAAAh5B,EAAA5jC,EAAAra,MAAAmhF,GACAD,EAAAlmD,QAAA3gB,EAAA2gB,QAXA27C,CAAAuK,EAAA7mE,EAAA4jC,GACOijC,EAAAlmD,UAAA3gB,EAAA2gB,SAaP,SAAAkmD,EAAA7mE,EAAA4jC,GACA0gC,EAAA5H,WAAA94B,EAAAijC,EAAAL,gBAEA,IAAAxmE,EAAA2hB,UAAA,IAAA3hB,EAAA4hB,YAAAC,MAEAyiD,EAAA0C,cAAApjC,EAAA,EAAA5jC,EAAAra,OACO,IAAAqa,EAAA4hB,YAAAC,MACP/+B,QAAA2U,MAAA,4KAEA6sE,EAAA0C,cAAApjC,EAAA5jC,EAAA4hB,YAAAh8B,OAAAoa,EAAAra,MAAA24C,kBAAAt+B,EAAAra,MAAAw4C,SAAAn+B,EAAA4hB,YAAAh8B,OAAAoa,EAAA4hB,YAAAh8B,OAAAoa,EAAA4hB,YAAAC,QACA7hB,EAAA4hB,YAAAC,MAAA,GAGAglD,EAAAlmD,QAAA3gB,EAAA2gB,QAzBAsmD,CAAAJ,EAAA7mE,EAAA4jC,GA+EA,SAAAsjC,EAAAC,EAAA30E,EAAApR,GACA,GAAAoR,EAAApR,EAAA,CACA,IAAAohB,EAAAhQ,EACAA,EAAApR,EACAA,EAAAohB,EAGA,IAAA4kE,EAAAD,EAAA30E,GAEA,YAAA7a,IAAAyvF,GACAD,EAAA30E,GAAA,CAAApR,IACA,IACO,IAAAgmF,EAAAxsD,QAAAx5B,KACPgmF,EAAAvyD,KAAAzzB,IACA,GAMA7I,KAAA6lF,mBAvEA,SAAAlnE,GACA,OAAAA,aAAApgB,EAAAipB,2BACAspD,EAAA/wE,IAAA4e,EAAA8I,MAAAwmE,cAGAnd,EAAA/wE,IAAA4e,GAAAsvE,eAmEAjuF,KAAAslF,sBAhEA,SAAAr+D,GACA,IAAA8mE,EAAAjd,EAAA/wE,IAAAknB,GAEA,QAAA7nB,IAAA2uF,EAAAjuB,UACA,OAAAiuB,EAAAjuB,UAGA,IAkBA1yD,EAlBA48B,EAAA,GACAzpC,EAAA0mB,EAAA1mB,MACA8mB,EAAAJ,EAAAI,WACAC,EAAAD,EAAAC,SAEA,UAAA/mB,EAIA,IAHA,IAAAquF,EAAA,GAGA3pE,EAAA,EAAAjb,GAFAoD,EAAA7M,EAAA6M,OAEAtO,OAAyCmmB,EAAAjb,EAAOib,GAAA,GAChD,IAAAhL,EAAA7M,EAAA6X,EAAA,GACApc,EAAAuE,EAAA6X,EAAA,GACA/X,EAAAE,EAAA6X,EAAA,GACA0pE,EAAAC,EAAA30E,EAAApR,IAAAmhC,EAAA1N,KAAAriB,EAAApR,GACA8lF,EAAAC,EAAA/lF,EAAAqE,IAAA88B,EAAA1N,KAAAzzB,EAAAqE,GACAyhF,EAAAC,EAAA1hF,EAAA+M,IAAA+vB,EAAA1N,KAAApvB,EAAA+M,QAKA,IAAAgL,EAAA,EAAAjb,GAFAoD,EAAAia,EAAAC,SAAAla,OAEAtO,OAAA,IAAiDmmB,EAAAjb,EAAOib,GAAA,EACxDhL,EAAAgL,EAAA,EACApc,EAAAoc,EAAA,EACA/X,EAAA+X,EAAA,EACA+kB,EAAA1N,KAAAriB,EAAApR,IAAAqE,IAAA+M,GAKA,IAAA60E,EAAAxnE,EAAAgiB,MAAA,MAAA+B,YAAAJ,YACAtsB,EAAA,IAAApgB,EAAA2qC,gBAAA,IAAA4lD,EAAA9kD,GAAA,GAGA,OAFAqkD,EAAA1vE,EAAAotE,EAAA3F,sBACA2H,EAAAjuB,UAAAnhD,EACAA,GAyBA3e,KAAAsX,OA7IA,SAAAsP,GAEA,IAAAK,EAAA8gB,EAAAhoC,IAAA6mB,GAEAA,EAAAK,oBAAA1oB,EAAA2oB,UACAD,EAAAwsB,iBAAA7sB,GAGA,IAAArmB,EAAA0mB,EAAA1mB,MACA8mB,EAAAJ,EAAAI,WAMA,QAAAznB,KAJA,OAAAW,GACA8tF,EAAA9tF,EAAAwrF,EAAA3F,sBAGA/+D,EACAgnE,EAAAhnE,EAAAznB,GAAAmsF,EAAA3H,cAIA,IAAArxC,EAAA9rB,EAAA8rB,gBAEA,QAAAnzC,KAAAmzC,EAGA,IAFA,IAAA3lC,EAAA2lC,EAAAnzC,GAEAqlB,EAAA,EAAAjb,EAAAoD,EAAAtO,OAAyCmmB,EAAAjb,EAAOib,IAChDopE,EAAAjhF,EAAA6X,GAAA8mE,EAAA3H,cAIA,OAAAn9D,IAmHA1oB,EAAAwwF,aAAA,WACA,IAAAC,EAAA,EAEA,SAAAC,EAAAxmB,GACA,OAAAA,GACA,KAAAlqE,EAAAyJ,eACA,6BAEA,KAAAzJ,EAAA0J,aACA,2BAEA,KAAA1J,EAAA4J,aACA,2BAEA,KAAA5J,EAAA8J,cACA,gCAEA,KAAA9J,EAAA+J,eACA,iCAEA,KAAA/J,EAAAgK,aACA,kCAEA,KAAAhK,EAAA2J,cACA,mDAEA,QACA,UAAAjJ,MAAA,yBAAAwpE,IAIA,SAAAymB,EAAAC,EAAA1mB,GACA,IAAA79D,EAAAqkF,EAAAxmB,GACA,cAAA0mB,EAAA,2BAAuDvkF,EAAA,cAAAA,EAAA,SAGvD,SAAAwkF,EAAAD,EAAA1mB,GACA,IAAA79D,EAAAqkF,EAAAxmB,GACA,cAAA0mB,EAAA,mCAAuDvkF,EAAA,GAAAA,EAAA,SAGvD,SAAAykF,EAAAF,EAAA7a,GACA,IAAAgb,EAEA,OAAAhb,GACA,KAAA/1E,EAAA6F,kBACAkrF,EAAA,SACA,MAEA,KAAA/wF,EAAA8F,oBACAirF,EAAA,WACA,MAEA,KAAA/wF,EAAA+F,sBACAgrF,EAAA,aACA,MAEA,KAAA/wF,EAAAgG,kBACA+qF,EAAA,kBACA,MAEA,QACA,UAAArwF,MAAA,4BAAAq1E,GAGA,cAAA6a,EAAA,2BAAuDG,EAAA,0BAmCvD,SAAAC,EAAAllF,GACA,WAAAA,EAGA,SAAAmlF,EAAAnlF,EAAAymC,GACA,OAAAzmC,EAAAolF,QAAA,kBAAA3+C,EAAA4+C,cAAAD,QAAA,mBAAA3+C,EAAA6+C,eAAAF,QAAA,oBAAA3+C,EAAA8+C,gBAAAH,QAAA,mBAAA3+C,EAAA++C,eAGA,SAAAC,EAAAzlF,GAaA,OAAAA,EAAAolF,QAZA,0BAEA,SAAAvvF,EAAA6vF,GACA,IAAAN,EAAAlxF,EAAAiqE,YAAAunB,GAEA,QAAA3wF,IAAAqwF,EACA,UAAAxwF,MAAA,6BAAA8wF,EAAA,KAGA,OAAAD,EAAAL,KAMA,SAAAO,EAAA3lF,GAaA,OAAAA,EAAAolF,QAZA,sEAEA,SAAAvvF,EAAA4jB,EAAAC,EAAAksE,GAGA,IAFA,IAAAC,EAAA,GAEAjrE,EAAAna,SAAAgZ,GAAqCmB,EAAAna,SAAAiZ,GAAmBkB,IACxDirE,GAAAD,EAAAR,QAAA,gBAAAxqE,EAAA,MAGA,OAAAirE,IAMA,gBAAAh/B,EAAA+qB,EAAAzzC,EAAAsI,GACA,IAAAi7C,EAAA76B,EAAAnF,QACA6b,EAAAp/B,EAAAo/B,WACAX,EAAAz+B,EAAAy+B,QACA1H,EAAA/2B,EAAA8zC,cAAA/c,aACAC,EAAAh3B,EAAA8zC,cAAA9c,eACA2wB,EAAA,uBAEAr/C,EAAAs/C,gBAAA7xF,EAAAiD,aACA2uF,EAAA,qBACOr/C,EAAAs/C,gBAAA7xF,EAAAkD,mBACP0uF,EAAA,2BAGA,IAAAE,EAAA,mBACAC,EAAA,yBACAC,EAAA,2BAEA,GAAAz/C,EAAAuvB,OAAA,CACA,OAAA73B,EAAA63B,OAAAsC,SACA,KAAApkE,EAAAkG,sBACA,KAAAlG,EAAAmG,sBACA2rF,EAAA,mBACA,MAEA,KAAA9xF,EAAAuG,wBACA,KAAAvG,EAAAwG,wBACAsrF,EAAA,sBACA,MAEA,KAAA9xF,EAAAoG,iCACA,KAAApG,EAAAqG,iCACAyrF,EAAA,sBACA,MAEA,KAAA9xF,EAAAsG,2BACAwrF,EAAA,qBAIA,OAAA7nD,EAAA63B,OAAAsC,SACA,KAAApkE,EAAAmG,sBACA,KAAAnG,EAAAqG,iCACA0rF,EAAA,yBAIA,OAAA9nD,EAAA83B,SACA,KAAA/hE,EAAAyF,kBACAusF,EAAA,2BACA,MAEA,KAAAhyF,EAAA0F,aACAssF,EAAA,sBACA,MAEA,KAAAhyF,EAAA2F,aACAqsF,EAAA,uBAKA,IAOAC,EAAAC,EAPAC,EAAAx/B,EAAA9lD,YAAA,EAAA8lD,EAAA9lD,YAAA,EAGAulF,EAzIA,SAAA/oB,EAAA92B,EAAA8/C,GAGA,MADA,EADAhpB,KAAA,IACAC,aAAA/2B,EAAA+/C,cAAA//C,EAAA6nB,SAAA7nB,EAAAmoB,WAAAnoB,EAAAggD,YAAA,sDAAAlpB,EAAAE,WAAAh3B,EAAA6sC,yBAAAiT,EAAA7wF,IAAA,6DAAA6nE,EAAAG,aAAA6oB,EAAA7wF,IAAA,qEAAA6nE,EAAAI,kBAAAl3B,EAAAuvB,SAAAuwB,EAAA7wF,IAAA,8EACA0tD,OAAA8hC,GAAA52D,KAAA,MAsIAo4D,CAAAnpB,EAAA92B,EAAAogB,EAAA0W,YACAopB,EApIA,SAAA/pB,GACA,IAAArrC,EAAA,GAEA,QAAAh8B,KAAAqnE,EAAA,CACA,IAAAh+D,EAAAg+D,EAAArnE,IACA,IAAAqJ,GACA2yB,EAAAU,KAAA,WAAA18B,EAAA,IAAAqJ,GAGA,OAAA2yB,EAAAjD,KAAA,MA2HAs4D,CAAAhqB,GAEAiT,EAAA6R,EAAAmF,gBAGA1oD,aAAAjqC,EAAA6pE,mBACAooB,EAAA,CAAAQ,GAAAvjC,OAAA8hC,GAAA52D,KAAA,MACA83D,EAAA,CAAAO,GAAAvjC,OAAA8hC,GAAA52D,KAAA,QAEA63D,EAAA,cAAA1/C,EAAAP,UAAA,UAAsE,aAAAO,EAAAP,UAAA,QAA+C,uBAAA/H,EAAA8zC,cAAA18E,KAAAoxF,EAAAlgD,EAAAqgD,uBAAA,qDAAAT,EAAA,qBAAA5/C,EAAAsgD,SAAAtgD,EAAAojB,IAAA,qBAAApjB,EAAAuvB,OAAA,wBAAAvvB,EAAAuvB,OAAA,WAAAiwB,EAAA,GAAAx/C,EAAAmnB,SAAA,0BAAAnnB,EAAAwnB,MAAA,uBAAAxnB,EAAA8mB,YAAA,6BAAA9mB,EAAA6nB,QAAA,yBAAA7nB,EAAAmoB,UAAA,2BAAAnoB,EAAAmvB,iBAAAnvB,EAAAqgD,uBAAA,iCAAArgD,EAAAyoB,YAAA,6BAAAzoB,EAAAmpB,aAAA,8BAAAnpB,EAAA8oB,aAAA,8BAAA9oB,EAAAwpB,SAAA,0BAAAxpB,EAAA7H,aAAA,uBAAA6H,EAAAggD,YAAA,yBAAAhgD,EAAA41B,SAAA,0BAAA51B,EAAAo8B,iBAAA,0BAAAp8B,EAAA5E,aAAA,8BAAA4E,EAAA3E,eAAA,IAAA2E,EAAAggD,YAAA,8BAAAhgD,EAAAugD,YAAA,0BAAAvgD,EAAAwgD,UAAA,uDAAAxgD,EAAAgrC,kBAAAhrC,EAAAygD,iBAAA,2BAAAzgD,EAAAygD,iBAAA,WAAApB,EAAA,GAAAr/C,EAAAkvB,gBAAA,iCAAAlvB,EAAA6sC,uBAAA,6BAAA7sC,EAAA6sC,wBAAAzsB,EAAA0W,WAAA7nE,IAAA,+EAAy2D,gCAAiC,iCAAkC,2BAA4B,6BAA8B,+BAAgC,2BAA4B,yBAA0B,qBAAsB,6CAA8C,oEAAsE,iCAAiC,iCAAiC,iCAAiC,+DAA8D,mCAAkC,mCAAkC,mCAAkC,6CAA4C,mCAAkC,mCAAkC,mCAAkC,wEAA0E,+BAA+B,eAAA0tD,OAAA8hC,GAAA52D,KAAA,MAC7zF83D,EAAA,CAAAE,EAAA,aAAA7/C,EAAAP,UAAA,UAA0F,aAAAO,EAAAP,UAAA,QAA+C,uBAAA/H,EAAA8zC,cAAA18E,KAAAoxF,EAAAlgD,EAAA4uB,UAAA,qBAAA5uB,EAAA4uB,UAAA,2BAAAgxB,EAAA5/C,EAAA0gD,QAAA1gD,EAAA0zB,IAAA,qBAAA1zB,EAAA0gD,QAAA1gD,EAAA2gD,OAAA,sBAAA3gD,EAAAojB,IAAA,qBAAApjB,EAAAuvB,OAAA,wBAAAvvB,EAAAuvB,OAAA,WAAAgwB,EAAA,GAAAv/C,EAAAuvB,OAAA,WAAAiwB,EAAA,GAAAx/C,EAAAuvB,OAAA,WAAAkwB,EAAA,GAAAz/C,EAAAmnB,SAAA,0BAAAnnB,EAAAwnB,MAAA,uBAAAxnB,EAAA8mB,YAAA,6BAAA9mB,EAAA6nB,QAAA,yBAAA7nB,EAAAmoB,UAAA,2BAAAnoB,EAAAyoB,YAAA,6BAAAzoB,EAAAmpB,aAAA,8BAAAnpB,EAAA8oB,aAAA,8BAAA9oB,EAAAwpB,SAAA,0BAAAxpB,EAAA7H,aAAA,uBAAA6H,EAAAggD,YAAA,yBAAAhgD,EAAAugD,YAAA,0BAAAvgD,EAAAwgD,UAAA,uDAAAxgD,EAAAgrC,kBAAAhrC,EAAAygD,iBAAA,2BAAAzgD,EAAAygD,iBAAA,WAAApB,EAAA,GAAAr/C,EAAAw0B,mBAAA,iCAAAx0B,EAAAujC,wBAAA,uCAAAvjC,EAAA6sC,uBAAA,6BAAA7sC,EAAA6sC,wBAAAzsB,EAAA0W,WAAA7nE,IAAA,mDAAA+wC,EAAAuvB,QAAAnP,EAAA0W,WAAA7nE,IAAA,kFAAk4D,+BAAgC+wC,EAAAwjC,cAAA/1E,EAAA4F,cAAA,0BAAA2sC,EAAAwjC,cAAA/1E,EAAA4F,cAAA5F,EAAAiqE,YAAA,6BAC3iE13B,EAAAwjC,cAAA/1E,EAAA4F,cAAAkrF,EAAA,cAAAv+C,EAAAwjC,aAAA,GAAAxjC,EAAA4gD,gBAAA5gD,EAAA6gD,aAAA7gD,EAAA8gD,gBAAA9gD,EAAA+gD,oBAAAtzF,EAAAiqE,YAAA,2BACA13B,EAAA6gD,YAAAzC,EAAA,mBAAAp+C,EAAA6gD,aAAA,GAAA7gD,EAAA8gD,eAAA1C,EAAA,sBAAAp+C,EAAA8gD,gBAAA,GAAA9gD,EAAA+gD,oBAAA3C,EAAA,2BAAAp+C,EAAA+gD,qBAAA,GAAA/gD,EAAA4gD,eAAAtC,EAAA,sBAAAt+C,EAAA4gD,gBAAA,GAAA5gD,EAAA81B,aAAA,yBAAAp+B,EAAAo+B,aAAA,SAAAnZ,OAAA8hC,GAAA52D,KAAA,OAIA4mC,EAAAiwB,EADAjwB,EAAAuwB,EAAAvwB,GACAzuB,GAEA0uB,EAAAgwB,EADAhwB,EAAAswB,EAAAtwB,GACA1uB,GAEAtI,aAAAjqC,EAAAmpE,kBAAA,IACAnI,EAAAywB,EAAAzwB,GACAC,EAAAwwB,EAAAxwB,IAGA,IAAAsyB,EAAAtB,EAAAjxB,EACAwyB,EAAAtB,EAAAjxB,EAGAwyB,EAAAzzF,EAAA0zF,YAAAlG,IAAAI,cAAA2F,GACAI,EAAA3zF,EAAA0zF,YAAAlG,IAAAM,gBAAA0F,GACAhG,EAAAoG,aAAAjY,EAAA8X,GACAjG,EAAAoG,aAAAjY,EAAAgY,QAEA9yF,IAAAopC,EAAA0/B,oBACA6jB,EAAAqG,mBAAAlY,EAAA,EAAA1xC,EAAA0/B,sBACO,IAAAp3B,EAAA5E,cAEP6/C,EAAAqG,mBAAAlY,EAAA,cAGA6R,EAAAsG,YAAAnY,GACA,IAoCAoY,EAWAC,EA/CAC,EAAAzG,EAAA0G,kBAAAvY,GACAwY,EAAA3G,EAAA4G,iBAAAX,GACAY,EAAA7G,EAAA4G,iBAAAT,GACAW,GAAA,EACAC,GAAA,EAiFA,OA9EA,IAAA/G,EAAAgH,oBAAA7Y,EAAA6R,EAAAiH,cACAH,GAAA,EACAtoF,QAAA2U,MAAA,qCAAA6sE,EAAAkH,WAAA,qBAAAlH,EAAAgH,oBAAA7Y,EAAA6R,EAAAmH,iBAAA,uBAAAV,EAAAE,EAAAE,IACO,KAAAJ,EACPjoF,QAAAC,KAAA,6CAAAgoF,GACO,KAAAE,GAAA,KAAAE,IACPE,GAAA,GAGAA,IACA9yF,KAAAmzF,YAAA,CACAN,WACArqD,WACAgqD,aACAjzB,aAAA,CACAxlC,IAAA24D,EACAU,OAAA5C,GAEAhxB,eAAA,CACAzlC,IAAA64D,EACAQ,OAAA3C,KAMA1E,EAAAsH,aAAArB,GACAjG,EAAAsH,aAAAnB,GAIAlyF,KAAA68E,YAAA,WAKA,YAJAz9E,IAAAkzF,IACAA,EAAA,IAAA/zF,EAAAw+E,cAAAgP,EAAA7R,EAAAhpB,IAGAohC,GAMAtyF,KAAAw8E,cAAA,WAKA,YAJAp9E,IAAAmzF,IACAA,EArNA,SAAAxG,EAAA7R,EAAAoZ,GAIA,IAHA,IAAAjsE,EAAA,GACAwF,EAAAk/D,EAAAgH,oBAAA7Y,EAAA6R,EAAAwH,mBAEAtuE,EAAA,EAAqBA,EAAA4H,EAAO5H,IAAA,CAC5B,IACArlB,EADAmsF,EAAAyH,gBAAAtZ,EAAAj1D,GACArlB,KAEAynB,EAAAznB,GAAAmsF,EAAA0H,kBAAAvZ,EAAAt6E,GAGA,OAAAynB,EA0MAqsE,CAAA3H,EAAA7R,IAGAqY,GAIAvyF,KAAA2zF,QAAA,WACA5H,EAAA6H,cAAA1Z,GACAl6E,KAAAk6E,aAAA96E,GAIAS,OAAAukC,iBAAApkC,KAAA,CACAs/D,SAAA,CACAv/D,IAAA,WAEA,OADAwK,QAAAC,KAAA,wDACAxK,KAAA68E,gBAGAx1D,WAAA,CACAtnB,IAAA,WAEA,OADAwK,QAAAC,KAAA,4DACAxK,KAAAw8E,oBAKAx8E,KAAAgnC,GAAAgoD,IACAhvF,KAAAi8E,OACAj8E,KAAA6zF,UAAA,EACA7zF,KAAAk6E,UACAl6E,KAAAu/D,aAAAyyB,EACAhyF,KAAAw/D,eAAA0yB,EACAlyF,MA7UA,GAkVAzB,EAAAy5E,cAAA,SAAA9mB,EAAAqmB,GACA,IAAAN,EAAA,GACA6c,EAAA,CACAntB,kBAAA,QACAG,mBAAA,SACAR,kBAAA,QACAO,oBAAA,UACAE,kBAAA,QACAC,qBAAA,WACAI,qBAAA,WACArB,kBAAA,QACAI,mBAAA,SACAsB,eAAA,UAEAssB,EAAA,srBA4BA,SAAAC,EAAA9/B,EAAA+/B,GACA,IAAAxrB,EAgBA,OAdAvU,EAEOA,aAAA31D,EAAAmkE,QACP+F,EAAAvU,EAAAuU,SACOvU,aAAA31D,EAAA2/E,oBACP3zE,QAAAC,KAAA,6HACAi+D,EAAAvU,EAAA7C,QAAAoX,UALAA,EAAAlqE,EAAAyJ,eASAygE,IAAAlqE,EAAAyJ,gBAAAisF,IACAxrB,EAAAlqE,EAAA2J,eAGAugE,EAGAzoE,KAAAg8E,cAAA,SAAAxzC,EAAAi8B,EAAAD,EAAA0vB,EAAAttE,GACA,IAAAw1D,EAAA0X,EAAAtrD,EAAAvG,MAGAmvD,EAlDA,SAAAxqE,GACA,GAAA2wD,EAAAwG,qBAAAn3D,KAAAuiC,UAAAviC,EAAAuiC,SAAA+jB,iBACA,YAQA,IAAAinB,EAAA5c,EAAA0V,kBAEAmE,EADA7xF,KAAAiK,OAAA2qF,EAAA,OAWA,YARA/0F,IAAAwnB,gBAAAroB,EAAAykE,cACAouB,EAAA7xF,KAAAsL,IAAA+b,EAAAuiC,SAAAhM,MAAAr+C,OAAAsyF,IAEAxqE,EAAAuiC,SAAAhM,MAAAr+C,QACAyL,QAAAC,KAAA,mCAAAoc,EAAAuiC,SAAAhM,MAAAr+C,OAAA,4BAAAsyF,EAAA,kCAIAA,EA4BAgD,CAAAxtE,GACA2pB,EAAA2gB,EAAAqxB,eAEA,OAAA/5C,EAAA+H,YACAA,EAAAgnC,EAAA2U,gBAAA1jD,EAAA+H,cAEA/H,EAAA+H,WACAhmC,QAAAC,KAAA,oCAAAg+B,EAAA+H,UAAA,uBAAAA,EAAA,YAIA,IAAA8jD,EAAAnjC,EAAAi4B,yBAqDA,MApDA,CACA/M,WACA7rC,YACA4gD,uBAAA5Z,EAAAgW,eACAmE,eAAAsC,EAAAK,IAAAhjC,QAAA,KAAAH,EAAAkjB,aACAlgB,MAAA1rB,EAAA0rB,IACAy9B,YAAAqC,EAAAxrD,EAAA0rB,IAAAhD,EAAAijB,YACA9T,SAAA73B,EAAA63B,OACAi0B,WAAA9rD,EAAA63B,QAAA73B,EAAA63B,OAAAsC,QACAivB,eAAAoC,EAAAxrD,EAAA63B,OAAAnP,EAAAijB,YACA0c,eAAAroD,EAAA63B,SAAA73B,EAAA63B,OAAAsC,UAAApkE,EAAAuG,yBAAA0jC,EAAA63B,OAAAsC,UAAApkE,EAAAwG,yBACAkzD,WAAAzvB,EAAAyvB,SACAK,QAAA9vB,EAAA8vB,MACAV,cAAApvB,EAAAovB,YACAi6B,oBAAAmC,EAAAxrD,EAAAovB,YAAA1G,EAAAijB,YACAxb,UAAAnwB,EAAAmwB,QACAM,YAAAzwB,EAAAywB,UACAgH,kBAAAz3B,EAAAy3B,gBACAhG,eAAAzxB,EAAAyxB,aACAL,eAAApxB,EAAAoxB,aACAL,cAAA/wB,EAAA+wB,YACAe,WAAA9xB,EAAA8xB,SACAgG,QAAA93B,EAAA83B,QACAr3B,aAAAT,EAAAS,aACAu7B,QACAgtB,OAAAhpD,EAAAg8B,IACAitB,OAAAjtB,aAAAjmE,EAAA+wE,QACAwhB,YAAAtoD,EAAAi3B,UAAAlhE,EAAAsD,YACAm+D,gBAAAx3B,EAAAw3B,gBACA2d,uBAAApG,EAAAoG,uBACAjX,SAAAl+B,EAAAk+B,SACA0qB,WACAlkB,iBAAAqK,EAAAwG,qBAAAn3D,KAAAuiC,UAAAviC,EAAAuiC,SAAA+jB,iBACAhhC,aAAA1D,EAAA0D,aACAC,aAAA3D,EAAA2D,aACAsoC,gBAAAvjB,EAAAujB,gBACAC,gBAAAxjB,EAAAwjB,gBACAgb,aAAAjrB,EAAAgS,YAAA33E,OACA8wF,eAAAnrB,EAAAjgD,MAAA1lB,OACA6wF,cAAAlrB,EAAAiS,KAAA53E,OACA+wF,cAAAprB,EAAAkS,KAAA73E,OACAg9E,kBAAAoY,EACA3C,iBAAArgC,EAAAooB,UAAAznC,SAAAjrB,EAAA8e,eAAA++B,EAAAmS,QAAA93E,OAAA,EACAsxF,cAAAl/B,EAAAooB,UAAAr3C,KACAqyC,YAAApjB,EAAAojB,YACAD,wBAAAnjB,EAAAmjB,wBACA/O,mBAAA98B,EAAA88B,mBACA5F,UAAAl3B,EAAAk3B,UACA2xB,YAAA7oD,EAAAmyB,OAAAp8D,EAAAqD,WACA0vF,UAAA9oD,EAAAmyB,OAAAp8D,EAAAoD,SACAilE,kBAAAxnE,IAAAopC,EAAAo+B,cAAAp+B,EAAAo+B,eAKA5mE,KAAAk8E,eAAA,SAAA1zC,EAAAsI,GACA,IAAA1jC,EAAA,GASA,GAPA0jC,EAAAsrC,SACAhvE,EAAAkvB,KAAAwU,EAAAsrC,WAEAhvE,EAAAkvB,KAAAkM,EAAAg3B,gBACApyD,EAAAkvB,KAAAkM,EAAA+2B,oBAGAngE,IAAAopC,EAAAy+B,QACA,QAAArnE,KAAA4oC,EAAAy+B,QACA75D,EAAAkvB,KAAA18B,GACAwN,EAAAkvB,KAAAkM,EAAAy+B,QAAArnE,IAIA,QAAAqlB,EAAA,EAAqBA,EAAA8uE,EAAAj1F,OAA2BmmB,IAChD7X,EAAAkvB,KAAAwU,EAAAijD,EAAA9uE,KAGA,OAAA7X,EAAAurB,QAGA34B,KAAAu8E,eAAA,SAAA/zC,EAAAsI,EAAAmrC,GAGA,IAFA,IAAA/B,EAEAvwE,EAAA,EAAA4qF,EAAAtd,EAAAn4E,OAA2C6K,EAAA4qF,EAAQ5qF,IAAA,CACnD,IAAAswE,EAAAhD,EAAAttE,GAEA,GAAAswE,EAAAgC,SAAA,IACA/B,EAAAD,GACA4Z,UACA,OASA,YALAz0F,IAAA86E,IACAA,EAAA,IAAA37E,EAAAwwF,aAAA79B,EAAA+qB,EAAAzzC,EAAAsI,GACAmmC,EAAA36C,KAAA49C,IAGAA,GAGAl6E,KAAAm6E,eAAA,SAAAD,GACA,SAAAA,EAAA2Z,UAAA,CAEA,IAAA5uE,EAAAgyD,EAAA50C,QAAA63C,GACAjD,EAAAhyD,GAAAgyD,IAAAn4E,OAAA,GACAm4E,EAAAx2B,MAEAy5B,EAAAyZ,YAKA3zF,KAAAi3E,YAQA14E,EAAAq5E,gBAAA,WACA,IAAA9G,EAAA,GAEA9wE,KAAAD,IAAA,SAAA6mB,GACA,IAAA4R,EAAA5R,EAAA4R,KACA07B,EAAA4c,EAAAt4C,GAOA,YALAp5B,IAAA80D,IACAA,EAAA,GACA4c,EAAAt4C,GAAA07B,GAGAA,GAGAl0D,KAAA+5E,OAAA,SAAAnzD,UACAkqD,EAAAlqD,EAAA4R,OAGAx4B,KAAA61D,MAAA,WACAib,EAAA,KAKAvyE,EAAA0zF,YAAA,WAWA,gBAAAlG,EAAA9pD,EAAA53B,GACA,IAAAgyE,EAAA0P,EAAAyI,aAAAvyD,GAcA,OAbA8pD,EAAA0I,aAAApY,EAAAhyE,GACA0hF,EAAA2I,cAAArY,IAEA,IAAA0P,EAAA4I,mBAAAtY,EAAA0P,EAAA6I,iBACArqF,QAAA2U,MAAA,+CAGA,KAAA6sE,EAAA4G,iBAAAtW,IACA9xE,QAAAC,KAAA,2CAAAy3B,IAAA8pD,EAAAI,cAAA,oBAAAJ,EAAA4G,iBAAAtW,GApBA,SAAAhyE,GAGA,IAFA,IAAAwqF,EAAAxqF,EAAAkuB,MAAA,MAEAtT,EAAA,EAAqBA,EAAA4vE,EAAA/1F,OAAkBmmB,IACvC4vE,EAAA5vE,KAAA,OAAA4vE,EAAA5vE,GAGA,OAAA4vE,EAAAl8D,KAAA,MAaAm8D,CAAAzqF,IAKAgyE,GA1BA,GAoCA99E,EAAAg7E,eAAA,SAAAwb,EAAAxe,EAAA5yB,EAAA4zB,GACA,IAAA5C,EAAAogB,EAAAhpC,QACAipC,EAAAD,EAAAtd,MACA1B,EAAA,IAAAx3E,EAAAs2B,QACAwhD,EAAA,IAAA93E,EAAA8hB,QACA40E,EAAA1e,EAAAK,QACAse,EAAA,IAAA32F,EAAAme,QACAy4E,EAAA,IAAA52F,EAAAme,QAAA66D,EAAAoV,eAAApV,EAAAoV,gBACAyI,EAAA,IAAA72F,EAAA+a,QACA+7E,EAAA,IAAA92F,EAAA+a,QACAg8E,EAAA,GACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GAAAF,EAAAC,GACAE,EAAA,IAAA92F,MAAA62F,GACAE,EAAA,IAAA/2F,MAAA62F,GACAG,EAAA,GAEAC,EAAA,KAAAt3F,EAAA+a,QAAA,WAAA/a,EAAA+a,SAAA,WAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,YAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,SACAw8E,EAAA,KAAAv3F,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,WAAA/a,EAAA+a,QAAA,SACAy8E,EAAA,KAAAx3F,EAAAikB,QAAA,IAAAjkB,EAAAikB,QAAA,IAAAjkB,EAAAikB,QAAA,IAAAjkB,EAAAikB,QAAA,IAAAjkB,EAAAikB,QAAA,IAAAjkB,EAAAikB,SAEAwzE,EAAA,IAAAz3F,EAAAooE,kBACAqvB,EAAApvB,aAAAroE,EAAAkK,iBACAutF,EAAAruB,UAAA,EAIA,IAHA,IAAAsuB,EAAA13F,EAAAszE,UAAA,aACAqkB,EAAA33F,EAAA4pE,cAAAj9D,MAAA+qF,EAAA32B,UAEAr6C,EAAA,EAAmBA,IAAAwwE,IAAiCxwE,EAAA,CACpD,IAAAkxE,EAAA,KAAAlxE,EAAAswE,GACAa,EAAA,KAAAnxE,EAAAuwE,GACAa,EAAAL,EAAA9qF,QACAmrF,EAAAnqD,aAAAiqD,EACAE,EAAA3vB,SAAA0vB,EACAV,EAAAzwE,GAAAoxE,EACA,IAAAC,EAAA,IAAA/3F,EAAAmpE,eAAA,CACAT,QAAA,CACAsvB,cAAA,IAEAj3B,SAAA42B,EACA32B,aAAA02B,EAAA12B,aACAC,eAAAy2B,EAAAz2B,eACAtzB,aAAAiqD,EACAzvB,SAAA0vB,EACAzuB,UAAA,IAEAguB,EAAA1wE,GAAAqxE,EAIA,IAAAzvE,EAAA7mB,KA8KA,SAAAw2F,EAAA5vE,EAAA4hB,EAAAiuD,EAAAC,GACA,IAAAzvE,EAAAL,EAAAK,SACA7C,EAAA,KACAuyE,EAAAjB,EACAkB,EAAAhwE,EAAAiwE,oBAOA,GALAJ,IACAE,EAAAhB,EACAiB,EAAAhwE,EAAAkwE,wBAGAF,EAiBAxyE,EAAAwyE,MAjBA,CACA,IAAAT,GAAA,EAEA3tD,EAAA0D,eACAjlB,aAAA1oB,EAAA6oB,eACA+uE,EAAAlvE,EAAA8rB,iBAAA9rB,EAAA8rB,gBAAAzrB,UAAAL,EAAA8rB,gBAAAzrB,SAAAxoB,OAAA,EACWmoB,aAAA1oB,EAAA2oB,WACXivE,EAAAlvE,EAAAilB,cAAAjlB,EAAAilB,aAAAptC,OAAA,IAIA,IAAAs3F,EAAAxvE,aAAAroB,EAAAykE,aAAAx6B,EAAAk+B,SACAqwB,EAAA,EACAZ,IAAAY,GAAAxB,GACAa,IAAAW,GAAAvB,GACApxE,EAAAuyE,EAAAI,GAKA,GAAAhC,EAAA7gB,uBAAA,IAAA1rC,EAAA08B,aAAA,IAAA18B,EAAAy8B,eAAAnmE,OAAA,CAGA,IAAAk4F,EAAA5yE,EAAAoU,KACAy+D,EAAAzuD,EAAAhQ,KACA0+D,EAAAtB,EAAAoB,QAEA53F,IAAA83F,IACAA,EAAA,GACAtB,EAAAoB,GAAAE,GAGA,IAAAC,EAAAD,EAAAD,QAEA73F,IAAA+3F,IACAA,EAAA/yE,EAAAlZ,QACAgsF,EAAAD,GAAAE,GAGA/yE,EAAA+yE,EAGA/yE,EAAAqf,QAAA+E,EAAA/E,QACArf,EAAA07C,UAAAt3B,EAAAs3B,UACA,IAAAnF,EAAAnyB,EAAAmyB,KAoBA,OAlBA9zC,EAAAuwE,mBAAAz8B,GAAAp8D,EAAAqD,aACA+4D,EAAAp8D,EAAAmD,WAGAmlB,EAAAwwE,qBACA18B,IAAAp8D,EAAAmD,UAAAi5D,EAAAp8D,EAAAoD,SAA4Dg5D,IAAAp8D,EAAAoD,WAAAg5D,EAAAp8D,EAAAmD,YAG5D0iB,EAAAu2C,OACAv2C,EAAA8gD,YAAA18B,EAAA08B,YACA9gD,EAAA6gD,eAAAz8B,EAAAy8B,eACA7gD,EAAA27C,mBAAAv3B,EAAAu3B,mBACA37C,EAAA4hD,UAAAx9B,EAAAw9B,UAEAywB,QAAAr3F,IAAAglB,EAAAk7C,SAAAoT,UACAtuD,EAAAk7C,SAAAoT,SAAAzpE,MAAAC,KAAAwtF,GAGAtyE,EAGA,SAAAmjE,EAAA3gE,EAAAxG,EAAAk3E,GACA,QAAA1wE,EAAA6c,QAAA,CAEA,GAAA7c,EAAAuc,OAAAD,KAAA9iB,EAAA+iB,UAAAvc,aAAAroB,EAAAulC,MAAAld,aAAAroB,EAAAwlC,MAAAnd,aAAAroB,EAAA0lC,QACA,GAAArd,EAAA6e,cAAA,IAAA7e,EAAA+e,gBAAA,IAAAowC,EAAAt/C,iBAAA7P,KAGA,IAFAA,EAAA4hB,SAEA/E,UACA7c,EAAAye,gBAAA/kB,iBAAAg3E,EAAApnC,mBAAAtpC,EAAAnG,aAEA60E,EAAAh5D,KAAA1V,IAOA,IAFA,IAAA+c,EAAA/c,EAAA+c,SAEA1e,EAAA,EAAAjb,EAAA25B,EAAA7kC,OAA0CmmB,EAAAjb,EAAOib,IACjDsiE,EAAA5jD,EAAA1e,GAAA7E,EAAAk3E,IA7QAt3F,KAAA6xC,SAAA,EACA7xC,KAAAovE,YAAA,EACApvE,KAAAupC,aAAA,EACAvpC,KAAAiiC,KAAA1jC,EAAAiD,aACAxB,KAAAq3F,oBAAA,EACAr3F,KAAAo3F,mBAAA,EAEAp3F,KAAAuxD,OAAA,SAAAJ,EAAA/wC,GACA,QAAAyG,EAAAgrB,WACA,IAAAhrB,EAAAuoD,aAAA,IAAAvoD,EAAA0iB,cACA,IAAA0rD,EAAAn2F,OAAA,CAWA,IAAAy4F,EAAAd,EATAzB,EAAAhc,WAAA,SAEAgc,EAAA/xD,QAAA0xC,EAAA6iB,OAEAxC,EAAAzZ,cAAA,GAEAyZ,EAAAjS,gBAAA,GAKA,QAAA99D,EAAA,EAAAC,EAAA+vE,EAAAn2F,OAAgDmmB,EAAAC,EAAQD,IAAA,CACxD,IAAAsvC,EAAA0gC,EAAAhwE,GACAovC,EAAAE,EAAAF,OAEA,QAAAj1D,IAAAi1D,EAAA,CAKA,IAAAijC,EAAAjjC,EAAAj0C,OAMA,GAJA80E,EAAAhsF,KAAAmrD,EAAAJ,SAEAihC,EAAArqF,IAAAsqF,GAEA5gC,aAAAh2D,EAAAm2D,WAAA,CACA6iC,EAAA,EACAd,GAAA,EACA,IAAAgB,EAAAvC,EAAAx1F,EACAg4F,EAAAxC,EAAAv+E,EAcAo/E,EAAA,GAAAjtF,IAAA,EAAA2uF,EAAAC,EAAAD,EAAAC,GAEA3B,EAAA,GAAAjtF,IAAA,EAAA4uF,EAAAD,EAAAC,GAEA3B,EAAA,GAAAjtF,IAAA,EAAA2uF,EAAAC,EAAAD,EAAAC,GAEA3B,EAAA,GAAAjtF,IAAA2uF,EAAAC,EAAAD,EAAAC,GAEA3B,EAAA,GAAAjtF,IAAA,EAAA2uF,EAAA,EAAAA,EAAAC,GAEA3B,EAAA,GAAAjtF,IAAA2uF,EAAA,EAAAA,EAAAC,GACAxC,EAAAx1F,GAAA,EACAw1F,EAAAv+E,GAAA,OAEA4gF,EAAA,EACAd,GAAA,EAGA,UAAApiC,EAAAH,IAAA,CACA,IAAAyjC,EAAA,CACA7mC,UAAAvyD,EAAA4G,cACA0rD,UAAAtyD,EAAA4G,cACAyrD,OAAAryD,EAAA+H,YAEA+tD,EAAAH,IAAA,IAAA31D,EAAA2/E,kBAAAgX,EAAAx1F,EAAAw1F,EAAAv+E,EAAAghF,GACAL,EAAA3lC,yBAGA0C,aAAA91D,EAAAs2D,iBACAR,EAAA/8C,OAAAi9C,GAGA,IAAA+kB,EAAAjlB,EAAAH,IACA0jC,EAAAvjC,EAAAl0C,OAEAk1E,EAAApzE,sBAAAsyC,EAAA9zC,aAEA62E,EAAAhwE,SAAApe,KAAAmsF,GAEAN,EAAAvjC,gBAAA8nB,GAEAyb,EAAAl/B,QAIA,QAAA9oB,EAAA,EAA0BA,EAAAwqD,EAAkBxqD,IAAA,CAC5C,GAAA0pD,EAAA,CACArB,EAAAlsF,KAAAouF,EAAAhwE,UAEA8tE,EAAA7oF,IAAAspF,EAAA9oD,IAEAuqD,EAAA1qE,GAAA1jB,KAAA4sF,EAAA/oD,IACAuqD,EAAA5qE,OAAA0oE,GACA,IAAAyC,EAAA9B,EAAAhpD,GAEAioD,EAAA5b,SAAAye,QAEAzC,EAAAnzE,sBAAAsyC,EAAAn0D,OAAAqgB,aAEA62E,EAAA5qE,OAAA0oE,GAGAkC,EAAAxwE,oBACAwwE,EAAApnC,mBAAA1vC,WAAA82E,EAAA72E,aAEAm3E,EAAA9uF,IAAA,uCACA8uF,EAAA/qF,SAAAyqF,EAAA/2E,kBACAq3E,EAAA/qF,SAAAyqF,EAAApnC,oBAEAmmB,EAAA/1D,iBAAAg3E,EAAA/2E,iBAAA+2E,EAAApnC,oBAEA6lB,EAAAxgD,cAAA8gD,GAGAif,EAAAx2F,OAAA,EACAyoF,EAAAp2B,EAAA/wC,EAAAk3E,GAGA,QAAAruE,EAAA,EAAA+jB,EAAAsoD,EAAAx2F,OAAkDmqB,EAAA+jB,EAAQ/jB,IAAA,CAC1D,IAAArC,EAAA0uE,EAAArsE,GAEAhC,EAAA08B,EAAArsC,OAAAsP,GAEA4hB,EAAA5hB,EAAA4hB,SAEA,GAAAA,aAAAjqC,EAAAipE,cAIA,IAHA,IAAA15B,EAAA7mB,EAAA6mB,OACA9F,EAAAQ,EAAAR,UAEA/M,EAAA,EAAA+W,EAAAlE,EAAAhvC,OAAiDm8B,EAAA+W,EAAQ/W,IAAA,CACzD,IAAA8S,EAAAD,EAAA7S,GACAwsD,EAAAz/C,EAAA+F,EAAAhF,eAEA,QAAA0+C,EAAAhkD,QAAA,CACA,IAAA4yD,EAAAG,EAAA5vE,EAAA6gE,EAAAgP,EAAApB,GAEAN,EAAA7Z,mBAAAoc,EAAA,KAAArwE,EAAAovE,EAAAzvE,EAAAmnB,QAGa,CACbsoD,EAAAG,EAAA5vE,EAAA4hB,EAAAiuD,EAAApB,GAEAN,EAAA7Z,mBAAAoc,EAAA,KAAArwE,EAAAovE,EAAAzvE,EAAA,cAlIArc,QAAAC,KAAA,wBAAA+pD,EAAA,kBAyIA,IAAAykB,EAAA+b,EAAA9R,gBACA6U,EAAA/C,EAAA5R,gBAEA4R,EAAA7R,cAAAlK,EAAA8e,GAEAjxE,EAAA0iB,aAAA,KA6GAhrC,EAAAm5E,WAAA,SAAAqU,EAAAnkB,EAAA+P,GACA,IAAA/C,EAAA50E,KAEAA,KAAA6jF,QAAA,CACAl5E,MAAA,IAAApM,EAAAw5F,iBAAAhM,EAAA/rF,MACAqhE,MAAA,IAAA9iE,EAAAy5F,iBAAAjM,EAAA/rF,MACAizE,QAAA,IAAA10E,EAAA05F,mBAAAlM,EAAA/rF,OAEA,IAAAk4F,EAAAnM,EAAAnmE,aAAAmmE,EAAAiB,oBACAmL,EAAA,IAAAxtD,WAAAutD,GACAE,EAAA,IAAAztD,WAAAutD,GACAG,EAAA,IAAA1tD,WAAAutD,GACA3gB,EAAA,GACA+gB,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,GAAA,EACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAxQ,EAAAmD,EAAAnmE,aAAAmmE,EAAAS,yBACA6M,EAAA,KACAC,EAAA,GACAC,EAAA,IAAAh7F,EAAAikB,QACAg3E,EAAA,IAAAj7F,EAAAikB,QAEA,SAAAi3E,EAAAx3D,EAAA7hC,EAAAkpC,GACA,IAAA7hB,EAAA,IAAAkjB,WAAA,GAEA0mB,EAAA06B,EAAA0N,gBACA1N,EAAA2N,YAAAz3D,EAAAovB,GACA06B,EAAA4N,cAAA13D,EAAA8pD,EAAA6N,mBAAA7N,EAAA5M,SACA4M,EAAA4N,cAAA13D,EAAA8pD,EAAA8N,mBAAA9N,EAAA5M,SAEA,QAAAl6D,EAAA,EAAqBA,EAAAqkB,EAAWrkB,IAChC8mE,EAAA+N,WAAA15F,EAAA6kB,EAAA,EAAA8mE,EAAAzL,KAAA,MAAAyL,EAAAzL,KAAAyL,EAAAtM,cAAAh4D,GAGA,OAAA4pC,EAGA,IAAA0oC,EAAA,GACAA,EAAAhO,EAAAiO,YAAAP,EAAA1N,EAAAiO,WAAAjO,EAAAiO,WAAA,GACAD,EAAAhO,EAAAkO,kBAAAR,EAAA1N,EAAAkO,iBAAAlO,EAAAhC,4BAAA,GAEA/pF,KAAAk5E,KAAA,WACAl5E,KAAAg5E,WAAA,SACAh5E,KAAAyjF,WAAA,GACAzjF,KAAA0jF,aAAA,GACA1jF,KAAA+iC,OAAAgpD,EAAAmO,YACAl6F,KAAAs7E,aAAA/8E,EAAAoF,gBACA3D,KAAAo7E,cAAA,GACAp7E,KAAAyoF,YAAAlqF,EAAA2C,cACAlB,KAAA+iC,OAAAgpD,EAAA5Q,WACAn7E,KAAA+iC,OAAAgpD,EAAAyL,OACAx3F,KAAAq7E,YAAA98E,EAAA4D,iBAGAnC,KAAA4jF,eAAA,WACA,QAAA3+D,EAAA,EAAAjb,EAAAmuF,EAAAr5F,OAA+CmmB,EAAAjb,EAAOib,IACtDkzE,EAAAlzE,GAAA,GAIAjlB,KAAAwkF,gBAAA,SAAA7lE,IACAw5E,EAAAx5E,GAAA,EAEA,IAAAy5E,EAAAz5E,KACAotE,EAAAoO,wBAAAx7E,GACAy5E,EAAAz5E,GAAA,GAGA,IAAA05E,EAAA15E,MACAipD,EAAA7nE,IAAA,0BACAq6F,yBAAAz7E,EAAA,GACA05E,EAAA15E,GAAA,IAIA3e,KAAA8lF,0BAAA,SAAAnnE,EAAAgtB,EAAAozC,GACAoZ,EAAAx5E,GAAA,EAEA,IAAAy5E,EAAAz5E,KACAotE,EAAAoO,wBAAAx7E,GACAy5E,EAAAz5E,GAAA,GAGA05E,EAAA15E,KAAAgtB,IACAozC,EAAAqb,yBAAAz7E,EAAAgtB,GACA0sD,EAAA15E,GAAAgtB,IAIA3rC,KAAAglF,wBAAA,WACA,QAAA//D,EAAA,EAAAjb,EAAAouF,EAAAt5F,OAAmDmmB,IAAAjb,IAASib,EAC5DmzE,EAAAnzE,KAAAkzE,EAAAlzE,KACA8mE,EAAAsO,yBAAAp1E,GACAmzE,EAAAnzE,GAAA,IAKAjlB,KAAA+iC,OAAA,SAAAiE,IACA,IAAAuwC,EAAAvwC,KACA+kD,EAAAhpD,OAAAiE,GACAuwC,EAAAvwC,IAAA,IAIAhnC,KAAAijC,QAAA,SAAA+D,IACA,IAAAuwC,EAAAvwC,KACA+kD,EAAA9oD,QAAA+D,GACAuwC,EAAAvwC,IAAA,IAIAhnC,KAAAs6F,4BAAA,WACA,UAAAhC,IACAA,EAAA,GAEA1wB,EAAA7nE,IAAA,mCAAA6nE,EAAA7nE,IAAA,kCAAA6nE,EAAA7nE,IAAA,kCAGA,IAFA,IAAAw6F,EAAAxO,EAAAnmE,aAAAmmE,EAAAyO,4BAEAv1E,EAAA,EAAyBA,EAAAs1E,EAAAz7F,OAAoBmmB,IAC7CqzE,EAAAh8D,KAAAi+D,EAAAt1E,IAKA,OAAAqzE,GAGAt4F,KAAAq7E,YAAA,SAAAjkB,EAAAwN,EAAAF,EAAAC,EAAAI,EAAAF,EAAAC,EAAAQ,GACA,GAAAlO,IAAA74D,EAAA2D,WAMA,OAHAlC,KAAAijC,QAAA8oD,EAAAyL,YACAe,EAAAnhC,GAHAp3D,KAAA+iC,OAAAgpD,EAAAyL,OAQApgC,IAAAmhC,GAAAjzB,IAAAwzB,IACA1hC,IAAA74D,EAAA6D,iBACAkjE,GACAymB,EAAA0O,sBAAA1O,EAAArL,SAAAqL,EAAArL,UACAqL,EAAA2O,kBAAA3O,EAAAjL,IAAAiL,EAAAjL,IAAAiL,EAAAjL,IAAAiL,EAAAjL,OAEAiL,EAAAnnB,cAAAmnB,EAAArL,UACAqL,EAAA4O,UAAA5O,EAAA9K,UAAA8K,EAAAjL,MAES1pB,IAAA74D,EAAA8D,oBACTijE,GACAymB,EAAA0O,sBAAA1O,EAAArL,SAAAqL,EAAArL,UACAqL,EAAA2O,kBAAA3O,EAAAlL,KAAAkL,EAAAlL,KAAAkL,EAAA/K,oBAAA+K,EAAA7K,uBAEA6K,EAAAnnB,cAAAmnB,EAAArL,UACAqL,EAAA4O,UAAA5O,EAAAlL,KAAAkL,EAAA/K,sBAES5pB,IAAA74D,EAAA+D,iBACTgjE,GACAymB,EAAA0O,sBAAA1O,EAAArL,SAAAqL,EAAArL,UACAqL,EAAA2O,kBAAA3O,EAAAlL,KAAAkL,EAAAhL,UAAAgL,EAAAlL,KAAAkL,EAAA9K,aAEA8K,EAAAnnB,cAAAmnB,EAAArL,UACAqL,EAAA4O,UAAA5O,EAAAlL,KAAAkL,EAAAhL,YAGAzb,GACAymB,EAAA0O,sBAAA1O,EAAArL,SAAAqL,EAAArL,UACAqL,EAAA2O,kBAAA3O,EAAAjL,IAAAiL,EAAA7K,oBAAA6K,EAAAjL,IAAAiL,EAAA7K,uBAEA6K,EAAA0O,sBAAA1O,EAAArL,SAAAqL,EAAArL,UACAqL,EAAA2O,kBAAA3O,EAAA9K,UAAA8K,EAAA7K,oBAAA6K,EAAAjL,IAAAiL,EAAA7K,sBAIAqX,EAAAnhC,EACA0hC,EAAAxzB,GAGAlO,IAAA74D,EAAAgE,gBACAwiE,KAAAH,EACAC,KAAAH,EACAI,KAAAH,EAEAC,IAAA4zB,GAAAzzB,IAAA4zB,IACA5M,EAAA0O,sBAAA9iB,EAAA/S,GAAA+S,EAAA5S,IACAyzB,EAAA5zB,EACA+zB,EAAA5zB,GAGAL,IAAA+zB,GAAA9zB,IAAA+zB,GAAA7zB,IAAA+zB,GAAA9zB,IAAA+zB,IACA9M,EAAA2O,kBAAA/iB,EAAAjT,GAAAiT,EAAAhT,GAAAgT,EAAA9S,GAAA8S,EAAA7S,IACA2zB,EAAA/zB,EACAg0B,EAAA/zB,EACAi0B,EAAA/zB,EACAg0B,EAAA/zB,KAGA0zB,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,OAKA74F,KAAAy7E,cAAA,SAAA5b,GACA7/D,KAAA6jF,QAAAl5E,MAAAiwF,QAAA/6B,IAGA7/D,KAAAu7E,aAAA,SAAA5b,GACA3/D,KAAA6jF,QAAAxiB,MAAAw5B,QAAAl7B,IAGA3/D,KAAAw7E,cAAA,SAAA5b,GACA5/D,KAAA6jF,QAAAxiB,MAAAu5B,QAAAh7B,IAGA5/D,KAAAs7E,aAAA,SAAAtW,GACAhlE,KAAA6jF,QAAAxiB,MAAAy5B,QAAA91B,IAGAhlE,KAAA+6F,eAAA,SAAAC,GACAh7F,KAAA6jF,QAAA5Q,QAAA4nB,QAAAG,IAGAh7F,KAAAi7F,gBAAA,SAAAC,GACAl7F,KAAA6jF,QAAA5Q,QAAA2nB,QAAAM,IAGAl7F,KAAAm7F,eAAA,SAAAC,EAAAC,EAAAC,GACAt7F,KAAA6jF,QAAA5Q,QAAA6nB,QAAAM,EAAAC,EAAAC,IAGAt7F,KAAAu7F,aAAA,SAAAC,EAAAC,EAAAC,GACA17F,KAAA6jF,QAAA5Q,QAAA0oB,MAAAH,EAAAC,EAAAC,IAIA17F,KAAAo7E,aAAA,SAAAkW,GACAyH,IAAAzH,IACAA,EACAvF,EAAA6P,UAAA7P,EAAA8P,IAEA9P,EAAA6P,UAAA7P,EAAA+P,KAGA/C,EAAAzH,IAIAtxF,KAAAyoF,YAAA,SAAAF,GACAA,IAAAhqF,EAAA0C,cACAjB,KAAA+iC,OAAAgpD,EAAA5Q,WAEAoN,IAAAyQ,IACAzQ,IAAAhqF,EAAA2C,aACA6qF,EAAAxD,SAAAwD,EAAAgQ,MACWxT,IAAAhqF,EAAA4C,cACX4qF,EAAAxD,SAAAwD,EAAAiQ,OAEAjQ,EAAAxD,SAAAwD,EAAAkQ,kBAIAj8F,KAAAijC,QAAA8oD,EAAA5Q,WAGA6d,EAAAzQ,GAGAvoF,KAAA6mF,aAAA,SAAAlqE,GACAA,IAAAs8E,IACAlN,EAAA7E,UAAAvqE,GACAs8E,EAAAt8E,IAIA3c,KAAA07E,iBAAA,SAAAvW,EAAA+2B,EAAAC,GACAh3B,GACAnlE,KAAA+iC,OAAAgpD,EAAAqQ,qBAEAlD,IAAAgD,GAAA/C,IAAAgD,IACApQ,EAAA5mB,cAAA+2B,EAAAC,GACAjD,EAAAgD,EACA/C,EAAAgD,IAGAn8F,KAAAijC,QAAA8oD,EAAAqQ,sBAIAp8F,KAAAq8F,eAAA,WACA,OAAAjD,GAGAp5F,KAAA+iF,eAAA,SAAA0G,GACA2P,EAAA3P,EAEAA,EACAzpF,KAAA+iC,OAAAgpD,EAAAuQ,cAEAt8F,KAAAijC,QAAA8oD,EAAAuQ,eAKAt8F,KAAAu8F,cAAA,SAAAC,QACAp9F,IAAAo9F,MAAAzQ,EAAA0Q,SAAA7T,EAAA,GAEAyQ,IAAAmD,IACAzQ,EAAAwQ,cAAAC,GACAnD,EAAAmD,IAIAx8F,KAAA05F,YAAA,SAAAgD,EAAAC,GACA,OAAAtD,GACAzkB,EAAA2nB,gBAGA,IAAAK,EAAAtD,EAAAD,QAEAj6F,IAAAw9F,IACAA,EAAA,CACA36D,UAAA7iC,EACAiyD,aAAAjyD,GAEAk6F,EAAAD,GAAAuD,GAGAA,EAAA36D,OAAAy6D,GAAAE,EAAAvrC,UAAAsrC,IACA5Q,EAAA2N,YAAAgD,EAAAC,GAAA5C,EAAA2C,IACAE,EAAA36D,KAAAy6D,EACAE,EAAAvrC,QAAAsrC,IAIA38F,KAAA68F,qBAAA,WACA,IACA9Q,EAAA8Q,qBAAA18C,MAAA4rC,EAAAvrF,WACO,MAAA0e,GACP3U,QAAA2U,WAIAlf,KAAA85F,WAAA,WACA,IACA/N,EAAA+N,WAAA35C,MAAA4rC,EAAAvrF,WACO,MAAA0e,GACP3U,QAAA2U,WAKAlf,KAAAg5E,WAAA,SAAArwE,EAAAC,EAAAC,EAAAoR,GACAja,KAAA6jF,QAAAl5E,MAAAmyF,SAAAn0F,EAAAC,EAAAC,EAAAoR,IAGAja,KAAAyjF,WAAA,SAAApiB,GACArhE,KAAA6jF,QAAAxiB,MAAAy7B,SAAAz7B,IAGArhE,KAAA0jF,aAAA,SAAAzQ,GACAjzE,KAAA6jF,QAAA5Q,QAAA6pB,SAAA7pB,IAIAjzE,KAAAm5E,QAAA,SAAAA,IACA,IAAAogB,EAAAtsF,OAAAksE,KACA4S,EAAA5S,UAAAz5E,EAAAy5E,EAAAxiE,EAAAwiE,EAAAviE,EAAAuiE,EAAAtiE,GACA0iF,EAAArwF,KAAAiwE,KAIAn5E,KAAAo5E,SAAA,SAAAA,IACA,IAAAogB,EAAAvsF,OAAAmsE,KACA2S,EAAA3S,WAAA15E,EAAA05E,EAAAziE,EAAAyiE,EAAAxiE,EAAAwiE,EAAAviE,GACA2iF,EAAAtwF,KAAAkwE,KAKAp5E,KAAAo3C,MAAA,WACA,QAAAnyB,EAAA,EAAqBA,EAAAmzE,EAAAt5F,OAA8BmmB,IACnD,IAAAmzE,EAAAnzE,KACA8mE,EAAAsO,yBAAAp1E,GACAmzE,EAAAnzE,GAAA,GAIAsyD,EAAA,GACA+gB,EAAA,KACAe,EAAA,KACAC,EAAA,GACAf,EAAA,KACAQ,EAAA,KACAC,EAAA,KACAh5F,KAAA6jF,QAAAl5E,MAAAysC,QACAp3C,KAAA6jF,QAAAxiB,MAAAjqB,QACAp3C,KAAA6jF,QAAA5Q,QAAA77B,UAIA74C,EAAAw5F,iBAAA,SAAAhM,EAAAtU,GACA,IAAAslB,GAAA,EACApyF,EAAA,IAAApM,EAAAikB,QACAw6E,EAAA,KACAC,EAAA,IAAA1+F,EAAAikB,QAEAxiB,KAAA46F,QAAA,SAAAsC,GACAF,IAAAE,GAAAH,IACAhR,EAAAmR,mBACAF,EAAAE,IAIAl9F,KAAAm9F,UAAA,SAAAC,GACAL,EAAAK,GAGAp9F,KAAA88F,SAAA,SAAAn0F,EAAAC,EAAAC,EAAAoR,GACAtP,EAAA7B,IAAAH,EAAAC,EAAAC,EAAAoR,IAEA,IAAAgjF,EAAAhwF,OAAAtC,KACAohF,EAAA/S,WAAArwE,EAAAC,EAAAC,EAAAoR,GACAgjF,EAAA/zF,KAAAyB,KAIA3K,KAAAo3C,MAAA,WACA2lD,GAAA,EACAC,EAAA,KACAC,EAAA,IAAA1+F,EAAAikB,UAIAjkB,EAAAy5F,iBAAA,SAAAjM,EAAAtU,GACA,IAAAslB,GAAA,EACAM,EAAA,KACAC,EAAA,KACAC,EAAA,KAEAv9F,KAAA66F,QAAA,SAAAl7B,GACAA,EACA8X,EAAA10C,OAAAgpD,EAAAmO,YAEAziB,EAAAx0C,QAAA8oD,EAAAmO,aAIAl6F,KAAA46F,QAAA,SAAA4C,GACAH,IAAAG,GAAAT,IACAhR,EAAAyR,aACAH,EAAAG,IAIAx9F,KAAA86F,QAAA,SAAA91B,GACA,GAAAs4B,IAAAt4B,EAAA,CACA,GAAAA,EACA,OAAAA,GACA,KAAAzmE,EAAAiF,WACAuoF,EAAA/mB,UAAA+mB,EAAA0R,OACA,MAEA,KAAAl/F,EAAAkF,YACAsoF,EAAA/mB,UAAA+mB,EAAA2R,QACA,MAEA,KAAAn/F,EAAAmF,UACAqoF,EAAA/mB,UAAA+mB,EAAA4R,MACA,MAEA,KAAAp/F,EAAAoF,eACAooF,EAAA/mB,UAAA+mB,EAAA6R,QACA,MAEA,KAAAr/F,EAAAqF,WACAmoF,EAAA/mB,UAAA+mB,EAAA8R,OACA,MAEA,KAAAt/F,EAAAsF,kBACAkoF,EAAA/mB,UAAA+mB,EAAA+R,QACA,MAEA,KAAAv/F,EAAAuF,aACAioF,EAAA/mB,UAAA+mB,EAAAgS,SACA,MAEA,KAAAx/F,EAAAwF,cACAgoF,EAAA/mB,UAAA+mB,EAAAiS,UACA,MAEA,QACAjS,EAAA/mB,UAAA+mB,EAAA6R,aAGA7R,EAAA/mB,UAAA+mB,EAAA6R,QAGAN,EAAAt4B,IAIAhlE,KAAAm9F,UAAA,SAAAC,GACAL,EAAAK,GAGAp9F,KAAA88F,SAAA,SAAAz7B,GACAk8B,IAAAl8B,IACA0qB,EAAAtI,WAAApiB,GACAk8B,EAAAl8B,IAIArhE,KAAAo3C,MAAA,WACA2lD,GAAA,EACAM,EAAA,KACAC,EAAA,KACAC,EAAA,OAIAh/F,EAAA05F,mBAAA,SAAAlM,EAAAtU,GACA,IAAAslB,GAAA,EACAkB,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KAEAx+F,KAAA66F,QAAA,SAAAG,GACAA,EACAvjB,EAAA10C,OAAAgpD,EAAA0S,cAEAhnB,EAAAx0C,QAAA8oD,EAAA0S,eAIAz+F,KAAA46F,QAAA,SAAAU,GACA2C,IAAA3C,GAAAyB,IACAhR,EAAAuP,eACA2C,EAAA3C,IAIAt7F,KAAA86F,QAAA,SAAAM,EAAAC,EAAAC,GACA4C,IAAA9C,GAAA+C,IAAA9C,GAAA+C,IAAA9C,IACAvP,EAAAqP,cAAAC,EAAAC,GACA4C,EAAA9C,EACA+C,EAAA9C,EACA+C,EAAA9C,IAIAt7F,KAAA27F,MAAA,SAAAH,EAAAC,EAAAC,GACA2C,IAAA7C,GAAA8C,IAAA7C,GAAA8C,IAAA7C,IACA3P,EAAA2S,UAAAlD,EAAAC,EAAAC,GACA2C,EAAA7C,EACA8C,EAAA7C,EACA8C,EAAA7C,IAIA17F,KAAAm9F,UAAA,SAAAC,GACAL,EAAAK,GAGAp9F,KAAA88F,SAAA,SAAA7pB,GACAurB,IAAAvrB,IACA8Y,EAAArI,aAAAzQ,GACAurB,EAAAvrB,IAIAjzE,KAAAo3C,MAAA,WACA2lD,GAAA,EACAkB,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,OASAjgG,EAAAs5E,cAAA,SAAAlD,EAAA/M,EAAA6P,EAAA3G,EAAAyG,EAAAI,EAAAZ,GACA,IAAA4nB,EAAA5nB,EAAAC,OAEA4nB,EAAA,qBAAAC,wBAAAlqB,aAAAkqB,uBAGA,SAAAC,EAAAviC,EAAAwiC,GACA,GAAAxiC,EAAA5/C,MAAAoiF,GAAAxiC,EAAA3/C,OAAAmiF,EAAA,CAGA,IAAA7vE,EAAA6vE,EAAAx/F,KAAA2M,IAAAqwD,EAAA5/C,MAAA4/C,EAAA3/C,QACAosD,EAAAxM,SAAAC,gBAAA,yCAMA,OALAuM,EAAArsD,MAAApd,KAAAiK,MAAA+yD,EAAA5/C,MAAAuS,GACA85C,EAAApsD,OAAArd,KAAAiK,MAAA+yD,EAAA3/C,OAAAsS,GACA85C,EAAAE,WAAA,MACAC,UAAA5M,EAAA,IAAAA,EAAA5/C,MAAA4/C,EAAA3/C,OAAA,IAAAosD,EAAArsD,MAAAqsD,EAAApsD,QACArS,QAAAC,KAAA,0CAAA+xD,EAAA5/C,MAAA,IAAA4/C,EAAA3/C,OAAA,iBAAAosD,EAAArsD,MAAA,IAAAqsD,EAAApsD,OAAA2/C,GACAyM,EAGA,OAAAzM,EAGA,SAAA1iC,EAAA0iC,GACA,OAAAh+D,EAAAgB,KAAAs6B,aAAA0iC,EAAA5/C,QAAApe,EAAAgB,KAAAs6B,aAAA0iC,EAAA3/C,QAwBA,SAAAoiF,EAAAviF,GACA,OAAAA,IAAAle,EAAA4G,eAAAsX,IAAAle,EAAA6G,4BAAAqX,IAAAle,EAAA8G,0BACAsvE,EAAAwK,QAGAxK,EAAA2K,OAIA,SAAA2f,EAAAt8D,GACA,IAAA0uB,EAAA1uB,EAAAviC,OACAixD,EAAA9uB,oBAAA,UAAA08D,GAaA,SAAA5tC,GACA,IAAAu4B,EAAA9Y,EAAA/wE,IAAAsxD,GAEA,GAAAA,EAAAkL,OAAAqtB,EAAAsV,0BAEAvqB,EAAAwqB,cAAAvV,EAAAsV,+BACO,CAEP,QAAA9/F,IAAAwqF,EAAAwV,YAAA,OAEAzqB,EAAAwqB,cAAAvV,EAAAI,gBAIAlZ,EAAAiJ,OAAA1oB,GA1BAguC,CAAAhuC,GACAstC,EAAA12D,WAGA,SAAAq3D,EAAA38D,GACA,IAAAouB,EAAApuB,EAAAviC,OACA2wD,EAAAxuB,oBAAA,UAAA+8D,GAuBA,SAAAvuC,GACA,IAAAy4B,EAAA1Y,EAAA/wE,IAAAgxD,GACA64B,EAAA9Y,EAAA/wE,IAAAgxD,EAAAM,SACA,IAAAN,EAAA,YAEA3xD,IAAAwqF,EAAAI,gBACArV,EAAAwqB,cAAAvV,EAAAI,gBAGAj5B,EAAA45B,cACA55B,EAAA45B,aAAA14C,UAGA,GAAA8e,aAAAxyD,EAAAyyD,sBACA,QAAA/rC,EAAA,EAAuBA,EAAA,EAAOA,IAC9B0vD,EAAA4qB,kBAAA/V,EAAAJ,mBAAAnkE,IAEAukE,EAAAgW,oBAAA7qB,EAAA8qB,mBAAAjW,EAAAgW,mBAAAv6E,SAGA0vD,EAAA4qB,kBAAA/V,EAAAJ,oBAEAI,EAAAgW,oBAAA7qB,EAAA8qB,mBAAAjW,EAAAgW,oBAGA1uB,EAAAiJ,OAAAhpB,EAAAM,SACAyf,EAAAiJ,OAAAhpB,GAhDA2uC,CAAA3uC,GACA4tC,EAAA12D,WAmDA,SAAA4gD,EAAAx3B,EAAA03B,GACA,IAAAa,EAAA9Y,EAAA/wE,IAAAsxD,GAEA,GAAAA,EAAAjpB,QAAA,GAAAwhD,EAAA+V,YAAAtuC,EAAAjpB,QAAA,CACA,IAAAm0B,EAAAlL,EAAAkL,MAEA,QAAAn9D,IAAAm9D,EACAhyD,QAAAC,KAAA,wEAAA6mD,OACS,SAAAkL,EAAAqjC,SAIT,YAkIA,SAAAhW,EAAAv4B,EAAA03B,QACA3pF,IAAAwqF,EAAAwV,cACAxV,EAAAwV,aAAA,EACA/tC,EAAArvB,iBAAA,UAAAi9D,GACArV,EAAAI,eAAArV,EAAA8kB,gBACAkF,EAAA12D,YAGAwvC,EAAA8kB,cAAA5nB,EAAA8nB,SAAA1T,GACAtR,EAAAiiB,YAAA/kB,EAAAqlB,WAAApQ,EAAAI,gBAEArV,EAAAkrB,YAAAlrB,EAAAmrB,oBAAAzuC,EAAAuR,OAEA+R,EAAAkrB,YAAAlrB,EAAAorB,+BAAA1uC,EAAAyX,kBAEA6L,EAAAkrB,YAAAlrB,EAAAqrB,iBAAA3uC,EAAA0X,iBAEA,IAAAxM,EAAAuiC,EAAAztC,EAAAkL,MAAAgb,EAAAoV,iBA7OA,SAAAt7B,GACA,OAAAA,EAAA6F,QAAA34D,EAAA0G,qBAAAosD,EAAA8F,QAAA54D,EAAA0G,qBACAosD,EAAAP,YAAAvyD,EAAA4G,eAAAksD,EAAAP,YAAAvyD,EAAA+G,cA6OA26F,CAAA5uC,KAAA,IAAAx3B,EAAA0iC,KACAA,EA9PA,SAAAA,GACA,GAAAA,aAAA2jC,kBAAA3jC,aAAA4jC,kBAAA,CACA,IAAAn3B,EAAAxM,SAAAC,gBAAA,yCAMA,OALAuM,EAAArsD,MAAApe,EAAAgB,KAAAu6B,kBAAAyiC,EAAA5/C,OACAqsD,EAAApsD,OAAAre,EAAAgB,KAAAu6B,kBAAAyiC,EAAA3/C,QACAosD,EAAAE,WAAA,MACAC,UAAA5M,EAAA,IAAAyM,EAAArsD,MAAAqsD,EAAApsD,QACArS,QAAAC,KAAA,mDAAA+xD,EAAA5/C,MAAA,IAAA4/C,EAAA3/C,OAAA,iBAAAosD,EAAArsD,MAAA,IAAAqsD,EAAApsD,OAAA2/C,GACAyM,EAGA,OAAAzM,EAmPA6jC,CAAA7jC,IAGA,IAAA8jC,EAAAxmE,EAAA0iC,GACA+jC,EAAA3oB,EAAAtmB,EAAAT,QACA2vC,EAAA5oB,EAAAtmB,EAAApvB,MACAu+D,EAAA7rB,EAAAqlB,WAAA3oC,EAAAgvC,GACA,IAAAI,EACAz8B,EAAA3S,EAAA2S,QAEA,GAAA3S,aAAA9yD,EAAA+qE,aAAA,CAEA,IAAAo3B,EAAA/rB,EAAA8L,gBAEA,GAAApvB,EAAApvB,OAAA1jC,EAAAwH,UAAA,CACA,IAAA64F,EAAA,UAAA3/F,MAAA,kDACAyhG,EAAA/rB,EAAAgsB,wBACS/B,IAET8B,EAAA/rB,EAAAisB,mBAGAnpB,EAAAqiB,WAAAnlB,EAAAqlB,WAAA,EAAA0G,EAAAnkC,EAAA5/C,MAAA4/C,EAAA3/C,OAAA,EAAA0jF,EAAAC,EAAA,WACO,GAAAlvC,aAAA9yD,EAAAulE,YAIP,GAAAE,EAAAllE,OAAA,GAAAuhG,EAAA,CACA,QAAAp7E,EAAA,EAAAC,EAAA8+C,EAAAllE,OAA8CmmB,EAAAC,EAAQD,IACtDw7E,EAAAz8B,EAAA/+C,GACAwyD,EAAAqiB,WAAAnlB,EAAAqlB,WAAA/0E,EAAAq7E,EAAAG,EAAA9jF,MAAA8jF,EAAA7jF,OAAA,EAAA0jF,EAAAC,EAAAE,EAAAh5E,MAGA4pC,EAAAD,iBAAA,OAEAqmB,EAAAqiB,WAAAnlB,EAAAqlB,WAAA,EAAAsG,EAAA/jC,EAAA5/C,MAAA4/C,EAAA3/C,OAAA,EAAA0jF,EAAAC,EAAAhkC,EAAA90C,WAEO,GAAA4pC,aAAA9yD,EAAA4lE,kBACP,QAAAl/C,EAAA,EAAAC,EAAA8+C,EAAAllE,OAA4CmmB,EAAAC,EAAQD,IACpDw7E,EAAAz8B,EAAA/+C,GAEAosC,EAAAT,SAAAryD,EAAA+H,YAAA+qD,EAAAT,SAAAryD,EAAA8H,UACAoxE,EAAA6iB,8BAAAj4D,QAAAi+D,IAAA,EACA7oB,EAAAolB,qBAAAloB,EAAAqlB,WAAA/0E,EAAAq7E,EAAAG,EAAA9jF,MAAA8jF,EAAA7jF,OAAA,EAAA6jF,EAAAh5E,MAEAld,QAAAC,KAAA,kGAGAitE,EAAAqiB,WAAAnlB,EAAAqlB,WAAA/0E,EAAAq7E,EAAAG,EAAA9jF,MAAA8jF,EAAA7jF,OAAA,EAAA0jF,EAAAC,EAAAE,EAAAh5E,WAQA,GAAAu8C,EAAAllE,OAAA,GAAAuhG,EAAA,CACA,QAAAp7E,EAAA,EAAAC,EAAA8+C,EAAAllE,OAA8CmmB,EAAAC,EAAQD,IACtDw7E,EAAAz8B,EAAA/+C,GACAwyD,EAAAqiB,WAAAnlB,EAAAqlB,WAAA/0E,EAAAq7E,IAAAC,EAAAE,GAGApvC,EAAAD,iBAAA,OAEAqmB,EAAAqiB,WAAAnlB,EAAAqlB,WAAA,EAAAsG,IAAAC,EAAAhkC,GAIAlL,EAAAD,iBAAAivC,GAAA1rB,EAAAksB,eAAAlsB,EAAAqlB,YACApQ,EAAA+V,UAAAtuC,EAAAjpB,QACAipB,EAAAvc,UAAAuc,EAAAvc,SAAAuc,GA7NAyvC,CAAAlX,EAAAv4B,EAAA03B,GAFAx+E,QAAAC,KAAA,yEAAA6mD,IAOAomB,EAAA8kB,cAAA5nB,EAAA8nB,SAAA1T,GACAtR,EAAAiiB,YAAA/kB,EAAAqlB,WAAApQ,EAAAI,gBAkFA,SAAAwW,EAAAO,EAAA1vC,EAAAgvC,GACA,IAAAthB,EA8BA,GA5BAshB,GACA1rB,EAAAglB,cAAAoH,EAAApsB,EAAAqsB,eAAArpB,EAAAtmB,EAAA6F,QAEAyd,EAAAglB,cAAAoH,EAAApsB,EAAAssB,eAAAtpB,EAAAtmB,EAAA8F,QAEAwd,EAAAglB,cAAAoH,EAAApsB,EAAAklB,mBAAAliB,EAAAtmB,EAAAR,YAEA8jB,EAAAglB,cAAAoH,EAAApsB,EAAAilB,mBAAAjiB,EAAAtmB,EAAAP,cAEA6jB,EAAAglB,cAAAoH,EAAApsB,EAAAqsB,eAAArsB,EAAAsK,eAEAtK,EAAAglB,cAAAoH,EAAApsB,EAAAssB,eAAAtsB,EAAAsK,eAEA5tB,EAAA6F,QAAA34D,EAAA0G,qBAAAosD,EAAA8F,QAAA54D,EAAA0G,qBACAsF,QAAAC,KAAA,gIAAA6mD,GAGAsjB,EAAAglB,cAAAoH,EAAApsB,EAAAklB,mBAAAmF,EAAA3tC,EAAAR,YAEA8jB,EAAAglB,cAAAoH,EAAApsB,EAAAilB,mBAAAoF,EAAA3tC,EAAAP,YAEAO,EAAAP,YAAAvyD,EAAA4G,eAAAksD,EAAAP,YAAAvyD,EAAA+G,cACAiF,QAAAC,KAAA,kIAAA6mD,IAIA0tB,EAAAnX,EAAA7nE,IAAA,kCAEA,CACA,GAAAsxD,EAAApvB,OAAA1jC,EAAAwH,WAAA,OAAA6hE,EAAA7nE,IAAA,mCACA,GAAAsxD,EAAApvB,OAAA1jC,EAAAyH,eAAA,OAAA4hE,EAAA7nE,IAAA,yCAEAsxD,EAAAyF,WAAA,GAAAga,EAAA/wE,IAAAsxD,GAAA6vC,uBACAvsB,EAAAwsB,cAAAJ,EAAAhiB,EAAAqiB,2BAAA7hG,KAAAsL,IAAAwmD,EAAAyF,WAAAygB,EAAA+K,qBAEAxR,EAAA/wE,IAAAsxD,GAAA6vC,oBAAA7vC,EAAAyF,aAoGA,SAAAuqC,EAAA/X,EAAAv4B,EAAAuwC,EAAAC,GACA,IAAAjB,EAAA3oB,EAAA5mB,EAAAM,QAAAT,QACA2vC,EAAA5oB,EAAA5mB,EAAAM,QAAApvB,MACAw1C,EAAAqiB,WAAAyH,EAAA,EAAAjB,EAAAvvC,EAAAp0C,MAAAo0C,EAAAn0C,OAAA,EAAA0jF,EAAAC,EAAA,MAEA5rB,EAAA+U,gBAAA/U,EAAAgV,YAAAL,GAEA3U,EAAAkV,qBAAAlV,EAAAgV,YAAA2X,EAAAC,EAAAzwB,EAAA/wE,IAAAgxD,EAAAM,SAAA24B,eAAA,GAEArV,EAAA+U,gBAAA/U,EAAAgV,YAAA,MAIA,SAAA6X,EAAAC,EAAA1wC,GACA4jB,EAAA+sB,iBAAA/sB,EAAAgtB,aAAAF,GAEA1wC,EAAA05B,cAAA15B,EAAA25B,eACA/V,EAAAitB,oBAAAjtB,EAAAgtB,aAAAhtB,EAAAisB,kBAAA7vC,EAAAp0C,MAAAo0C,EAAAn0C,QAEA+3D,EAAAktB,wBAAAltB,EAAAgV,YAAAhV,EAAAmtB,iBAAAntB,EAAAgtB,aAAAF,IACO1wC,EAAA05B,aAAA15B,EAAA25B,eACP/V,EAAAitB,oBAAAjtB,EAAAgtB,aAAAhtB,EAAAotB,cAAAhxC,EAAAp0C,MAAAo0C,EAAAn0C,QAEA+3D,EAAAktB,wBAAAltB,EAAAgV,YAAAhV,EAAAqtB,yBAAArtB,EAAAgtB,aAAAF,IAGA9sB,EAAAitB,oBAAAjtB,EAAAgtB,aAAAhtB,EAAAstB,MAAAlxC,EAAAp0C,MAAAo0C,EAAAn0C,QAGA+3D,EAAA+sB,iBAAA/sB,EAAAgtB,aAAA,MA6BA,SAAAO,EAAAnxC,GACA,IAAAy4B,EAAA1Y,EAAA/wE,IAAAgxD,GACAw4B,EAAAx4B,aAAAxyD,EAAAyyD,sBAEA,GAAAD,EAAA45B,aAAA,CACA,GAAApB,EAAA,UAAAtqF,MAAA,6DA9BA,SAAAqqF,EAAAv4B,GAEA,GADAA,aAAAxyD,EAAAyyD,sBACA,UAAA/xD,MAAA,4DAIA,GAFA01E,EAAA+U,gBAAA/U,EAAAgV,YAAAL,KAEAv4B,EAAA45B,wBAAApsF,EAAA+qE,cACA,UAAArqE,MAAA,uEAIA6xE,EAAA/wE,IAAAgxD,EAAA45B,cAAAX,gBAAAj5B,EAAA45B,aAAApuB,MAAA5/C,QAAAo0C,EAAAp0C,OAAAo0C,EAAA45B,aAAApuB,MAAA3/C,SAAAm0C,EAAAn0C,SACAm0C,EAAA45B,aAAApuB,MAAA5/C,MAAAo0C,EAAAp0C,MACAo0C,EAAA45B,aAAApuB,MAAA3/C,OAAAm0C,EAAAn0C,OACAm0C,EAAA45B,aAAAphD,aAAA,GAGAs/C,EAAA93B,EAAA45B,aAAA,GAEA,IAAAwX,EAAArxB,EAAA/wE,IAAAgxD,EAAA45B,cAAAX,eAEArV,EAAAkV,qBAAAlV,EAAAgV,YAAAhV,EAAAmtB,iBAAAntB,EAAAqlB,WAAAmI,EAAA,GAUAC,CAAA5Y,EAAAJ,mBAAAr4B,QAEA,GAAAw4B,EAAA,CACAC,EAAAgW,mBAAA,GAEA,QAAAv6E,EAAA,EAAyBA,EAAA,EAAOA,IAChC0vD,EAAA+U,gBAAA/U,EAAAgV,YAAAH,EAAAJ,mBAAAnkE,IAEAukE,EAAAgW,mBAAAv6E,GAAA0vD,EAAA0tB,qBACAb,EAAAhY,EAAAgW,mBAAAv6E,GAAA8rC,QAGA4jB,EAAA+U,gBAAA/U,EAAAgV,YAAAH,EAAAJ,oBAEAI,EAAAgW,mBAAA7qB,EAAA0tB,qBACAb,EAAAhY,EAAAgW,mBAAAzuC,GAIA4jB,EAAA+U,gBAAA/U,EAAAgV,YAAA,MAgEA3pF,KAAA6oF,eACA7oF,KAAAipF,eA7WA,SAAA53B,EAAA03B,GACA,IAAAa,EAAA9Y,EAAA/wE,IAAAsxD,GAEA,OAAAA,EAAAkL,MAAAz9D,OACA,GAAAuyD,EAAAjpB,QAAA,GAAAwhD,EAAA+V,YAAAtuC,EAAAjpB,QAAA,CACAwhD,EAAAsV,4BACA7tC,EAAArvB,iBAAA,UAAAi9D,GACArV,EAAAsV,0BAAAvqB,EAAA8kB,gBACAkF,EAAA12D,YAGAwvC,EAAA8kB,cAAA5nB,EAAA8nB,SAAA1T,GACAtR,EAAAiiB,YAAA/kB,EAAAslB,iBAAArQ,EAAAsV,2BAEAvqB,EAAAkrB,YAAAlrB,EAAAmrB,oBAAAzuC,EAAAuR,OAMA,IAJA,IAAA0/B,EAAAjxC,aAAA9yD,EAAA4lE,kBACAo+B,EAAAlxC,EAAAkL,MAAA,aAAAh+D,EAAAulE,YACA0+B,EAAA,GAEAv9E,EAAA,EAAyBA,EAAA,EAAOA,IAIhCu9E,EAAAv9E,GAHAq9E,GAAAC,EAGAA,EAAAlxC,EAAAkL,MAAAt3C,GAAAs3C,MAAAlL,EAAAkL,MAAAt3C,GAFA65E,EAAAztC,EAAAkL,MAAAt3C,GAAAsyD,EAAAsV,gBAMA,IACAwT,EAAAxmE,EADA2oE,EAAA,IAEAlC,EAAA3oB,EAAAtmB,EAAAT,QACA2vC,EAAA5oB,EAAAtmB,EAAApvB,MAGA,IAFAu+D,EAAA7rB,EAAAslB,iBAAA5oC,EAAAgvC,GAEAp7E,EAAA,EAAyBA,EAAA,EAAOA,IAChC,GAAAq9E,EAUA,IAHA,IAAA7B,EACAz8B,EAAAw+B,EAAAv9E,GAAA++C,QAEA/6C,EAAA,EAAA+jB,EAAAg3B,EAAAllE,OAAkDmqB,EAAA+jB,EAAQ/jB,IAC1Dw3E,EAAAz8B,EAAA/6C,GAEAooC,EAAAT,SAAAryD,EAAA+H,YAAA+qD,EAAAT,SAAAryD,EAAA8H,UACAoxE,EAAA6iB,8BAAAj4D,QAAAi+D,IAAA,EACA7oB,EAAAolB,qBAAAloB,EAAAoV,4BAAA9kE,EAAAgE,EAAAq3E,EAAAG,EAAA9jF,MAAA8jF,EAAA7jF,OAAA,EAAA6jF,EAAAh5E,MAEAld,QAAAC,KAAA,mGAGAitE,EAAAqiB,WAAAnlB,EAAAoV,4BAAA9kE,EAAAgE,EAAAq3E,EAAAG,EAAA9jF,MAAA8jF,EAAA7jF,OAAA,EAAA0jF,EAAAC,EAAAE,EAAAh5E,WAnBA86E,EACA9qB,EAAAqiB,WAAAnlB,EAAAoV,4BAAA9kE,EAAA,EAAAq7E,EAAAkC,EAAAv9E,GAAAtI,MAAA6lF,EAAAv9E,GAAArI,OAAA,EAAA0jF,EAAAC,EAAAiC,EAAAv9E,GAAAwC,MAEAgwD,EAAAqiB,WAAAnlB,EAAAoV,4BAAA9kE,EAAA,EAAAq7E,IAAAC,EAAAiC,EAAAv9E,IAsBAosC,EAAAD,iBAAAivC,GACA1rB,EAAAksB,eAAAlsB,EAAAslB,kBAGArQ,EAAA+V,UAAAtuC,EAAAjpB,QACAipB,EAAAvc,UAAAuc,EAAAvc,SAAAuc,QAEAomB,EAAA8kB,cAAA5nB,EAAA8nB,SAAA1T,GACAtR,EAAAiiB,YAAA/kB,EAAAslB,iBAAArQ,EAAAsV,4BAySAl/F,KAAAkpF,sBApSA,SAAA73B,EAAA03B,GACAtR,EAAA8kB,cAAA5nB,EAAA8nB,SAAA1T,GACAtR,EAAAiiB,YAAA/kB,EAAAslB,iBAAAnpB,EAAA/wE,IAAAsxD,GAAA24B,iBAmSAhqF,KAAAqpF,kBA/DA,SAAAt4B,GACA,IAAAy4B,EAAA1Y,EAAA/wE,IAAAgxD,GACA64B,EAAA9Y,EAAA/wE,IAAAgxD,EAAAM,SACAN,EAAA/uB,iBAAA,UAAAs9D,GACA1V,EAAAI,eAAArV,EAAA8kB,gBACAkF,EAAA12D,WACA,IAAAshD,EAAAx4B,aAAAxyD,EAAAyyD,sBACAyxC,EAAA5oE,EAAAk3B,GAEA,GAAAw4B,EAAA,CACAC,EAAAJ,mBAAA,GAEA,QAAAnkE,EAAA,EAAuBA,EAAA,EAAOA,IAC9BukE,EAAAJ,mBAAAnkE,GAAA0vD,EAAA+tB,yBAGAlZ,EAAAJ,mBAAAzU,EAAA+tB,oBAIA,GAAAnZ,EAAA,CAIA,IAHA9R,EAAAiiB,YAAA/kB,EAAAslB,iBAAArQ,EAAAI,gBACAwW,EAAA7rB,EAAAslB,iBAAAlpC,EAAAM,QAAAoxC,GAEAx9E,EAAA,EAAuBA,EAAA,EAAOA,IAC9Bo8E,EAAA7X,EAAAJ,mBAAAnkE,GAAA8rC,EAAA4jB,EAAAmV,kBAAAnV,EAAAoV,4BAAA9kE,GAGA8rC,EAAAM,QAAAD,iBAAAqxC,GAAA9tB,EAAAksB,eAAAlsB,EAAAslB,kBACAxiB,EAAAiiB,YAAA/kB,EAAAslB,iBAAA,WAEAxiB,EAAAiiB,YAAA/kB,EAAAqlB,WAAApQ,EAAAI,gBACAwW,EAAA7rB,EAAAqlB,WAAAjpC,EAAAM,QAAAoxC,GACApB,EAAA7X,EAAAJ,mBAAAr4B,EAAA4jB,EAAAmV,kBAAAnV,EAAAqlB,YACAjpC,EAAAM,QAAAD,iBAAAqxC,GAAA9tB,EAAAksB,eAAAlsB,EAAAqlB,YACAviB,EAAAiiB,YAAA/kB,EAAAqlB,WAAA,MAIAjpC,EAAA05B,aACAyX,EAAAnxC,IAwBA/wD,KAAAqoF,yBApBA,SAAAt3B,GACA,IAAAM,EAAAN,EAAAM,QAEA,GAAAA,EAAAD,iBAAAv3B,EAAAk3B,IAAAM,EAAAP,YAAAvyD,EAAA4G,eAAAksD,EAAAP,YAAAvyD,EAAA+G,aAAA,CACA,IAAAlF,EAAA2wD,aAAAxyD,EAAAyyD,sBAAA2jB,EAAAslB,iBAAAtlB,EAAAqlB,WAEA2C,EAAA7rB,EAAA/wE,IAAAsxD,GAAA24B,eAEAvS,EAAAiiB,YAAAt5F,EAAAu8F,GAEAhoB,EAAAksB,eAAAzgG,GAEAq3E,EAAAiiB,YAAAt5F,EAAA,SAmEA7B,EAAAw+E,cAAA,WAEA,IAAA4lB,EAAA,IAAApkG,EAAAmkE,QACAkgC,EAAA,IAAArkG,EAAAklE,YAEAo/B,EAAA,WACA7iG,KAAAi9E,IAAA,GACAj9E,KAAAk0D,IAAA,IAIA4uC,EAAA,GACAC,EAAA,GAMAC,EAAA,SAAA51F,EAAA61F,EAAAC,GACA,IAAAC,EAAA/1F,EAAA,GACA,GAAA+1F,GAAA,GAAAA,EAAA,SAAA/1F,EAGA,IAAAyf,EAAAo2E,EAAAC,EACAv6F,EAAAm6F,EAAAj2E,GAOA,QALAztB,IAAAuJ,IACAA,EAAA,IAAAwf,aAAA0E,GACAi2E,EAAAj2E,GAAAlkB,GAGA,IAAAs6F,EAAA,CACAE,EAAA71F,QAAA3E,EAAA,GAEA,QAAAsc,EAAA,EAAA5X,EAAA,EAAmC4X,IAAAg+E,IAAeh+E,EAClD5X,GAAA61F,EACA91F,EAAA6X,GAAA3X,QAAA3E,EAAA0E,GAIA,OAAA1E,GAGAy6F,EAAA,SAAAlyC,EAAArkC,GACA,IAAAlkB,EAAAo6F,EAAAl2E,QAEAztB,IAAAuJ,IACAA,EAAA,IAAAwiC,WAAAte,GACAk2E,EAAAl2E,GAAAlkB,GAGA,QAAAsc,EAAA,EAAqBA,IAAA4H,IAAS5H,EAC9Btc,EAAAsc,GAAAisC,EAAAw3B,mBAGA,OAAA//E,GAMA06F,EAAA,SAAAtX,EAAAlyE,GACAkyE,EAAAuX,UAAAtjG,KAAAujG,KAAA1pF,IAEA2pF,EAAA,SAAAzX,EAAAlyE,GACAkyE,EAAA0X,UAAAzjG,KAAAujG,KAAA1pF,IAGA6pF,EAAA,SAAA3X,EAAAlyE,QACAza,IAAAya,EAAAna,EAAAqsF,EAAA4X,WAAA3jG,KAAAujG,KAAA1pF,GAAyDkyE,EAAA6X,UAAA5jG,KAAAujG,KAAA1pF,EAAAna,EAAAma,EAAAlD,IAEzDktF,EAAA,SAAA9X,EAAAlyE,QACAza,IAAAya,EAAAna,EAAAqsF,EAAA+X,UAAA9jG,KAAAujG,KAAA1pF,EAAAna,EAAAma,EAAAlD,EAAAkD,EAAAjD,QAAoExX,IAAAya,EAAAlR,EAAAojF,EAAA+X,UAAA9jG,KAAAujG,KAAA1pF,EAAAlR,EAAAkR,EAAAjR,EAAAiR,EAAAhR,GAAmEkjF,EAAAgY,WAAA/jG,KAAAujG,KAAA1pF,IAEvImqF,EAAA,SAAAjY,EAAAlyE,QACAza,IAAAya,EAAAna,EAAAqsF,EAAAkY,WAAAjkG,KAAAujG,KAAA1pF,GAAyDkyE,EAAAmY,UAAAlkG,KAAAujG,KAAA1pF,EAAAna,EAAAma,EAAAlD,EAAAkD,EAAAjD,EAAAiD,EAAAhD,IAGzDstF,EAAA,SAAApY,EAAAlyE,GACAkyE,EAAAqY,iBAAApkG,KAAAujG,MAAA,EAAA1pF,EAAAtB,UAAAsB,IAEAwqF,EAAA,SAAAtY,EAAAlyE,GACAkyE,EAAAuY,iBAAAtkG,KAAAujG,MAAA,EAAA1pF,EAAAtB,UAAAsB,IAEA0qF,EAAA,SAAAxY,EAAAlyE,GACAkyE,EAAAyY,iBAAAxkG,KAAAujG,MAAA,EAAA1pF,EAAAtB,UAAAsB,IAGA4qF,EAAA,SAAA1Y,EAAAlyE,EAAAq3C,GACA,IAAAwzC,EAAAxzC,EAAAw3B,mBACAqD,EAAA0X,UAAAzjG,KAAAujG,KAAAmB,GACAxzC,EAAA23B,aAAAhvE,GAAA8oF,EAAA+B,IAEAC,EAAA,SAAA5Y,EAAAlyE,EAAAq3C,GACA,IAAAwzC,EAAAxzC,EAAAw3B,mBACAqD,EAAA0X,UAAAzjG,KAAAujG,KAAAmB,GACAxzC,EAAA+3B,eAAApvE,GAAA+oF,EAAA8B,IAGAE,EAAA,SAAA7Y,EAAAlyE,GACAkyE,EAAA8Y,WAAA7kG,KAAAujG,KAAA1pF,IAEAirF,EAAA,SAAA/Y,EAAAlyE,GACAkyE,EAAAgZ,WAAA/kG,KAAAujG,KAAA1pF,IAEAmrF,EAAA,SAAAjZ,EAAAlyE,GACAkyE,EAAAkZ,WAAAjlG,KAAAujG,KAAA1pF,IA+DAqrF,EAAA,SAAAnZ,EAAAlyE,GACAkyE,EAAAoZ,WAAAnlG,KAAAujG,KAAA1pF,IAEAurF,EAAA,SAAArZ,EAAAlyE,GACAkyE,EAAAsZ,WAAArlG,KAAAujG,KAAA1pF,IAGAyrF,EAAA,SAAAvZ,EAAAlyE,GACAkyE,EAAA4X,WAAA3jG,KAAAujG,KAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,KAEAw6F,EAAA,SAAAxZ,EAAAlyE,GACAkyE,EAAAgY,WAAA/jG,KAAAujG,KAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,KAEAy6F,EAAA,SAAAzZ,EAAAlyE,GACAkyE,EAAAkY,WAAAjkG,KAAAujG,KAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,KAGA06F,EAAA,SAAA1Z,EAAAlyE,GACAkyE,EAAAqY,iBAAApkG,KAAAujG,MAAA,EAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,KAEA26F,EAAA,SAAA3Z,EAAAlyE,GACAkyE,EAAAuY,iBAAAtkG,KAAAujG,MAAA,EAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,KAEA46F,EAAA,SAAA5Z,EAAAlyE,GACAkyE,EAAAyY,iBAAAxkG,KAAAujG,MAAA,EAAAP,EAAAnpF,EAAA7Z,KAAA+K,KAAA,MAGA66F,EAAA,SAAA7Z,EAAAlyE,EAAAq3C,GACA,IAAArkC,EAAAhT,EAAA/a,OACAq9F,EAAAiH,EAAAlyC,EAAArkC,GACAk/D,EAAAsZ,WAAArlG,KAAAujG,KAAApH,GAEA,QAAAl3E,EAAA,EAAqBA,IAAA4H,IAAS5H,EAC9BisC,EAAA23B,aAAAhvE,EAAAoL,IAAA09E,EAAAxG,EAAAl3E,KAGA4gF,EAAA,SAAA9Z,EAAAlyE,EAAAq3C,GACA,IAAArkC,EAAAhT,EAAA/a,OACAq9F,EAAAiH,EAAAlyC,EAAArkC,GACAk/D,EAAAsZ,WAAArlG,KAAAujG,KAAApH,GAEA,QAAAl3E,EAAA,EAAqBA,IAAA4H,IAAS5H,EAC9BisC,EAAA+3B,eAAApvE,EAAAoL,IAAA29E,EAAAzG,EAAAl3E,KAgEA6gF,EAAA,SAAA9+D,EAAA++D,EAAAxC,GACAvjG,KAAAgnC,KACAhnC,KAAAujG,OACAvjG,KAAA2oD,SAzKA,SAAA1mB,GACA,OAAAA,GACA,UACA,OAAAohE,EAGA,WACA,OAAAK,EAGA,WACA,OAAAG,EAGA,WACA,OAAAG,EAGA,WACA,OAAAG,EAGA,WACA,OAAAE,EAGA,WACA,OAAAE,EAGA,WACA,OAAAE,EAGA,WACA,OAAAE,EAGA,UACA,WACA,OAAAnB,EAGA,WACA,WACA,OAAAoB,EAGA,WACA,WACA,OAAAE,EAGA,WACA,WACA,OAAAE,GAkHAgB,CAAAD,EAAA9jE,OAEAgkE,EAAA,SAAAj/D,EAAA++D,EAAAxC,GACAvjG,KAAAgnC,KACAhnC,KAAAujG,OACAvjG,KAAA+K,KAAAg7F,EAAAh7F,KACA/K,KAAA2oD,SArEA,SAAA1mB,GACA,OAAAA,GACA,UACA,OAAAijE,EAGA,WACA,OAAAI,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,WACA,OAAAC,EAGA,UACA,WACA,OAAAT,EAGA,WACA,WACA,OAAAR,EAGA,WACA,WACA,OAAAE,EAGA,WACA,WACA,OAAAE,GAcAkB,CAAAH,EAAA9jE,OAEAkkE,EAAA,SAAAn/D,GACAhnC,KAAAgnC,KACA67D,EAAAjiG,KAAAZ,OAGAmmG,EAAAxmG,UAAAgpD,SAAA,SAAAojC,EAAA9iF,GAKA,IAFA,IAAAg0E,EAAAj9E,KAAAi9E,IAEAh4D,EAAA,EAAA4H,EAAAowD,EAAAn+E,OAAqCmmB,IAAA4H,IAAS5H,EAAA,CAC9C,IAAAgY,EAAAggD,EAAAh4D,GACAgY,EAAA0rB,SAAAojC,EAAA9iF,EAAAg0B,EAAA+J,OAMA,IAAAo/D,EAAA,2BASAC,EAAA,SAAAC,EAAAC,GACAD,EAAArpB,IAAA3gD,KAAAiqE,GACAD,EAAApyC,IAAAqyC,EAAAv/D,IAAAu/D,GAEAC,EAAA,SAAAT,EAAAxC,EAAA+C,GACA,IAAA/kD,EAAAwkD,EAAAnmG,KACA6mG,EAAAllD,EAAAziD,OAIA,IAFAsnG,EAAAnhD,UAAA,IAEa,CACb,IAAA/kD,EAAAkmG,EAAA17F,KAAA62C,GACAmlD,EAAAN,EAAAnhD,UACAje,EAAA9mC,EAAA,GACAymG,EAAA,MAAAzmG,EAAA,GACA0mG,EAAA1mG,EAAA,GAGA,GAFAymG,IAAA3/D,GAAA,QAEA5nC,IAAAwnG,GAAA,MAAAA,GAAAF,EAAA,IAAAD,EAAA,CAEAJ,EAAAC,OAAAlnG,IAAAwnG,EAAA,IAAAd,EAAA9+D,EAAA++D,EAAAxC,GAAA,IAAA0C,EAAAj/D,EAAA++D,EAAAxC,IACA,MAGA,IACAsD,EADAP,EAAApyC,IACAltB,QAEA5nC,IAAAynG,IACAA,EAAA,IAAAV,EAAAn/D,GACAq/D,EAAAC,EAAAO,IAGAP,EAAAO,IAKA9pB,EAAA,SAAAgP,EAAA7R,EAAAhpB,GACA2xC,EAAAjiG,KAAAZ,MACAA,KAAAkxD,WAGA,IAFA,IAAArkC,EAAAk/D,EAAAgH,oBAAA7Y,EAAA6R,EAAA+a,iBAEA7hF,EAAA,EAAqBA,IAAA4H,IAAS5H,EAAA,CAC9B,IAAA8xD,EAAAgV,EAAAgb,iBAAA7sB,EAAAj1D,GACAs8B,EAAAw1B,EAAAn3E,KACA2jG,EAAAxX,EAAAib,mBAAA9sB,EAAA34B,GACAilD,EAAAzvB,EAAAwsB,EAAAvjG,QA0EA,OAtEA+8E,EAAAp9E,UAAAgpD,SAAA,SAAAojC,EAAAnsF,EAAAqJ,GACA,IAAAg0B,EAAAj9B,KAAAk0D,IAAAt0D,QACAR,IAAA69B,KAAA0rB,SAAAojC,EAAA9iF,EAAAjJ,KAAAkxD,WAGA6rB,EAAAp9E,UAAAmJ,IAAA,SAAAijF,EAAAnlE,EAAAhnB,GACA,IAAAq9B,EAAAj9B,KAAAk0D,IAAAt0D,QACAR,IAAA69B,KAAA0rB,SAAAojC,EAAAnlE,EAAAhnB,GAAAI,KAAAkxD,WAGA6rB,EAAAp9E,UAAAm+E,YAAA,SAAAiO,EAAAnlE,EAAAhnB,GACA,IAAAia,EAAA+M,EAAAhnB,QACAR,IAAAya,GAAA7Z,KAAA2oD,SAAAojC,EAAAnsF,EAAAia,IAIAkjE,EAAA6B,OAAA,SAAAmN,EAAA9O,EAAA79C,EAAA8xB,GACA,QAAAjsC,EAAA,EAAA4H,EAAAowD,EAAAn+E,OAAqCmmB,IAAA4H,IAAS5H,EAAA,CAC9C,IAAAgY,EAAAggD,EAAAh4D,GACApL,EAAAulB,EAAAnC,EAAA+J,KAEA,IAAAntB,EAAA0vB,aAEAtM,EAAA0rB,SAAAojC,EAAAlyE,EAAA5Q,MAAAioD,KAKA6rB,EAAAC,aAAA,SAAAC,EAAA79C,GAGA,IAFA,IAAAz2B,EAAA,GAEAsc,EAAA,EAAA4H,EAAAowD,EAAAn+E,OAAqCmmB,IAAA4H,IAAS5H,EAAA,CAC9C,IAAAgY,EAAAggD,EAAAh4D,GACAgY,EAAA+J,MAAA5H,GAAAz2B,EAAA2zB,KAAAW,GAGA,OAAAt0B,GAGAo0E,EAAAI,aAAA,SAAAF,EAAA79C,GAKA,IAJA,IAAAz2B,EAAA,KACAkkB,EAAAowD,EAAAn+E,OACA+X,EAAA,EAEAoO,EAAA,EAAqBA,IAAA4H,IAAS5H,EAAA,CAC9B,IAAAgY,EAAAggD,EAAAh4D,GACApL,EAAAulB,EAAAnC,EAAA+J,IAEAntB,IAAA,IAAAA,EAAAuvB,SACA,OAAAzgC,MAAA,IACAA,EAAA2zB,KAAAW,KAGApmB,EAAAoO,IAAAg4D,EAAApmE,GAAAomB,KACApmB,GAKA,OADAA,EAAAgW,IAAAowD,EAAAn+E,OAAA+X,GACAlO,GAGAo0E,EAAA+B,YAAA,SAAA7B,EAAA79C,EAAAxY,EAAAxG,GACA,QAAA6E,EAAA,EAAA4H,EAAAowD,EAAAn+E,OAAqCmmB,IAAA4H,IAAS5H,EAAA,CAC9C,IAAApL,EAAAulB,EAAA69C,EAAAh4D,GAAA+hB,IACAvqB,EAAA5C,EAAAk7B,sBACA31C,IAAAqd,KAAA7b,KAAAiZ,EAAA+M,EAAAxG,KAIA28D,EAjbA,GA0bAx+E,EAAAo7E,gBAAA,SAAAzoB,EAAA+1C,GACA,IAEAC,EAAAC,EACA9qB,EAAAnC,EAAA7yD,EAAAi4C,EACA8nC,EAAAC,EAJAtb,EAAA76B,EAAAnF,QACA0rB,EAAAvmB,EAAAumB,MAKA,SAAAyB,IACA,IAAA/xD,EAAA,IAAAgB,aAAA,uCACA6jB,EAAA,IAAAf,YAAA,eAEAi8D,EAAAnb,EAAAhI,eACAojB,EAAApb,EAAAhI,eACAgI,EAAA5H,WAAA4H,EAAA3H,aAAA8iB,GACAnb,EAAA1H,WAAA0H,EAAA3H,aAAAj9D,EAAA4kE,EAAAyC,aACAzC,EAAA5H,WAAA4H,EAAA3F,qBAAA+gB,GACApb,EAAA1H,WAAA0H,EAAA3F,qBAAAp6C,EAAA+/C,EAAAyC,aAEA4Y,EAAArb,EAAA0N,gBACA4N,EAAAtb,EAAA0N,gBACAhiB,EAAAiiB,YAAA3N,EAAAiO,WAAAoN,GACArb,EAAA+N,WAAA/N,EAAAiO,WAAA,EAAAjO,EAAA1L,IAAA,QAAA0L,EAAA1L,IAAA0L,EAAAtM,cAAA,MACAsM,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAAiV,eAAAjV,EAAA9M,eACA8M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAAkV,eAAAlV,EAAA9M,eACA8M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAA8N,mBAAA9N,EAAA5M,SACA4M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAA6N,mBAAA7N,EAAA5M,SACA1H,EAAAiiB,YAAA3N,EAAAiO,WAAAqN,GACAtb,EAAA+N,WAAA/N,EAAAiO,WAAA,EAAAjO,EAAAzL,KAAA,QAAAyL,EAAAzL,KAAAyL,EAAAtM,cAAA,MACAsM,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAAiV,eAAAjV,EAAA9M,eACA8M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAAkV,eAAAlV,EAAA9M,eACA8M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAA8N,mBAAA9N,EAAA5M,SACA4M,EAAA4N,cAAA5N,EAAAiO,WAAAjO,EAAA6N,mBAAA7N,EAAA5M,SACA9C,EAAA,CACA9c,aAAA,gCAAoD,+BAAgC,sBAAuB,0BAA2B,kCAAmC,2BAA4B,qBAAsB,oBAAqB,6BAA8B,gBAAiB,YAAa,uBAAwB,2BAA4B,iEAAkE,6DAA8D,6DAA8D,6DAA8D,6DAA8D,6DAA8D,6DAA8D,6DAA8D,6DAA8D,2CAA4C,2CAA4C,2CAA4C,2CAA4C,uEAAwE,uEAAwE,IAAK,uFAAwF,KAAK5mC,KAAA,MACpzC6mC,eAAA,gCAAsD,yBAA0B,yBAA0B,sBAAuB,oBAAqB,6BAA8B,gBACpL,2BAAiC,6CACjC,kCAAwC,wCACxC,WAAiB,wCAAyC,sCAAuC,0BAA2B,6BAA8B,IAAK,KAAK7mC,KAAA,OAEpKuhD,EA0IA,SAAAmC,GACA,IAAAnC,EAAA6R,EAAAmF,gBACA1xB,EAAAusB,EAAAyI,aAAAzI,EAAAM,iBACA9sB,EAAAwsB,EAAAyI,aAAAzI,EAAAI,eACAiH,EAAA,aAAAliC,EAAAqxB,eAAA,YAQA,OAPAwJ,EAAA0I,aAAAj1B,EAAA4zB,EAAA/W,EAAA7c,gBACAusB,EAAA0I,aAAAl1B,EAAA6zB,EAAA/W,EAAA9c,cACAwsB,EAAA2I,cAAAl1B,GACAusB,EAAA2I,cAAAn1B,GACAwsB,EAAAoG,aAAAjY,EAAA1a,GACAusB,EAAAoG,aAAAjY,EAAA3a,GACAwsB,EAAAsG,YAAAnY,GACAA,EAtJAgX,CAAA7U,GACAh1D,EAAA,CACA0pB,OAAAg7C,EAAA0H,kBAAAvZ,EAAA,YACA3sC,GAAAw+C,EAAA0H,kBAAAvZ,EAAA,OAEA5a,EAAA,CACAgoC,WAAAvb,EAAAib,mBAAA9sB,EAAA,cACAhmB,IAAA63B,EAAAib,mBAAA9sB,EAAA,OACAqtB,aAAAxb,EAAAib,mBAAA9sB,EAAA,gBACAtf,QAAAmxB,EAAAib,mBAAA9sB,EAAA,WACAvvE,MAAAohF,EAAAib,mBAAA9sB,EAAA,SACAhrD,MAAA68D,EAAAib,mBAAA9sB,EAAA,SACA/0C,SAAA4mD,EAAAib,mBAAA9sB,EAAA,YACAstB,eAAAzb,EAAAib,mBAAA9sB,EAAA,mBAUAl6E,KAAAuxD,OAAA,SAAAJ,EAAA/wC,EAAAg5D,GACA,OAAA6tB,EAAAnoG,OAAA,CACA,IAAA2oG,EAAA,IAAAlpG,EAAA+a,QACAouF,EAAAtuB,EAAAviE,EAAAuiE,EAAAxiE,EACA+wF,EAAA,GAAAvuB,EAAAxiE,EACAgxF,EAAA,GAAAxuB,EAAAviE,EACA9L,EAAA,GAAAquE,EAAAviE,EACAqY,EAAA,IAAA3wB,EAAAme,QAAA3R,EAAA28F,EAAA38F,GACAy8F,EAAA,IAAAjpG,EAAA+a,QAAA,OACAuuF,EAAA,IAAAtpG,EAAAme,QAAA,KACAorF,EAAA,IAAAvpG,EAAAqmB,KACAkjF,EAAAj9F,IAAA/B,IAAA,KACAg/F,EAAA57F,IAAApD,IAAAswE,EAAAxiE,EAAA,GAAAwiE,EAAAviE,EAAA,SAEAzX,IAAA86E,GACAhB,IAGA6S,EAAArO,WAAAxD,GACAzC,EAAAmM,iBACAnM,EAAA+M,gBAAAn9D,EAAA0pB,QACA0mC,EAAA+M,gBAAAn9D,EAAAkmB,IACAkqC,EAAAuN,0BAGA+G,EAAA0X,UAAAnkC,EAAAioC,aAAA,GACAxb,EAAA0X,UAAAnkC,EAAApL,IAAA,GACA63B,EAAA5H,WAAA4H,EAAA3H,aAAA8iB,GACAnb,EAAAtH,oBAAAp9D,EAAA0pB,OAAA,EAAAg7C,EAAA7L,OAAA,QACA6L,EAAAtH,oBAAAp9D,EAAAkmB,GAAA,EAAAw+C,EAAA7L,OAAA,QACA6L,EAAA5H,WAAA4H,EAAA3F,qBAAA+gB,GACA1vB,EAAAx0C,QAAA8oD,EAAA5Q,WACA1D,EAAA+D,eAAA,GAEA,QAAAv2D,EAAA,EAAAjb,EAAAi9F,EAAAnoG,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/Cla,EAAA,GAAAquE,EAAAviE,EACAqY,EAAApmB,IAAAiC,EAAA28F,EAAA38F,GAEA,IAAA+jE,EAAAm4B,EAAAhiF,GAUA,GATAwiF,EAAA3+F,IAAAgmE,EAAAruD,YAAAlI,SAAA,IAAAu2D,EAAAruD,YAAAlI,SAAA,IAAAu2D,EAAAruD,YAAAlI,SAAA,KACAkvF,EAAAloF,aAAAa,EAAA8vC,oBACAu3C,EAAAjoF,gBAAAY,EAAAG,kBAEAinF,EAAAt+F,KAAAu+F,GAEAI,EAAAnoG,EAAA05E,EAAA15E,EAAA8nG,EAAA9nG,EAAAioG,IAAA,EACAE,EAAAlxF,EAAAyiE,EAAAziE,EAAA6wF,EAAA7wF,EAAAixF,IAAA,GAEA,IAAAE,EAAApiF,cAAAmiF,GAAA,CAEApwB,EAAA8kB,cAAAxQ,EAAA0Q,UACAhlB,EAAAiiB,YAAA3N,EAAAiO,WAAA,MACAviB,EAAA8kB,cAAAxQ,EAAAgc,UACAtwB,EAAAiiB,YAAA3N,EAAAiO,WAAAoN,GACArb,EAAAic,eAAAjc,EAAAiO,WAAA,EAAAjO,EAAA1L,IAAAwnB,EAAAnoG,EAAAmoG,EAAAlxF,EAAA,SAEAo1E,EAAA0X,UAAAnkC,EAAAgoC,WAAA,GACAvb,EAAA6X,UAAAtkC,EAAApwC,QAAAxvB,EAAAwvB,EAAAvY,GACAo1E,EAAA+X,UAAAxkC,EAAAkoC,iBAAA9nG,EAAA8nG,EAAA7wF,EAAA6wF,EAAA5wF,GACA6gE,EAAAx0C,QAAA8oD,EAAAyL,OACA/f,EAAA10C,OAAAgpD,EAAAmO,YACAnO,EAAAF,aAAAE,EAAA7G,UAAA,EAAA6G,EAAAhM,eAAA,GAEAtI,EAAA8kB,cAAAxQ,EAAA0Q,UACAhlB,EAAAiiB,YAAA3N,EAAAiO,WAAAqN,GACAtb,EAAAic,eAAAjc,EAAAiO,WAAA,EAAAjO,EAAAzL,KAAAunB,EAAAnoG,EAAAmoG,EAAAlxF,EAAA,SAEAo1E,EAAA0X,UAAAnkC,EAAAgoC,WAAA,GACA7vB,EAAAx0C,QAAA8oD,EAAAmO,YACAziB,EAAA8kB,cAAAxQ,EAAAgc,UACAtwB,EAAAiiB,YAAA3N,EAAAiO,WAAAoN,GACArb,EAAAF,aAAAE,EAAA7G,UAAA,EAAA6G,EAAAhM,eAAA,GAEAjR,EAAAH,eAAAzlE,KAAAs+F,GAEA14B,EAAAF,qBACAE,EAAAF,qBAAAE,GAEAA,EAAAD,mBAIAkd,EAAA0X,UAAAnkC,EAAAgoC,WAAA,GACA7vB,EAAA10C,OAAAgpD,EAAAyL,OAEA,QAAAvuE,EAAA,EAAA+jB,EAAA8hC,EAAAJ,WAAA5vE,OAAuDmqB,EAAA+jB,EAAQ/jB,IAAA,CAC/D,IAAA4N,EAAAi4C,EAAAJ,WAAAzlD,GAEA4N,EAAA+jC,QAAA,MAAA/jC,EAAA3H,MAAA,OACAs4E,EAAA9nG,EAAAm3B,EAAAn3B,EACA8nG,EAAA7wF,EAAAkgB,EAAAlgB,EACA6wF,EAAA5wF,EAAAigB,EAAAjgB,EACA7L,EAAA8rB,EAAA9rB,KAAA8rB,EAAA3H,MAAAkqD,EAAAviE,EACAqY,EAAAxvB,EAAAqL,EAAA28F,EACAx4E,EAAAvY,EAAA5L,EACAghF,EAAA+X,UAAAxkC,EAAAkoC,iBAAA9nG,EAAA8nG,EAAA7wF,EAAA6wF,EAAA5wF,GACAm1E,EAAA6X,UAAAtkC,EAAApwC,QAAAxvB,EAAAwvB,EAAAvY,GACAo1E,EAAAuX,UAAAhkC,EAAAn6B,SAAAtO,EAAAsO,UACA4mD,EAAAuX,UAAAhkC,EAAA1E,QAAA/jC,EAAA+jC,SACAmxB,EAAA+X,UAAAxkC,EAAA30D,MAAAksB,EAAAlsB,MAAAhC,EAAAkuB,EAAAlsB,MAAA/B,EAAAiuB,EAAAlsB,MAAA9B,GACA4uE,EAAA4D,YAAAxkD,EAAAugC,SAAAvgC,EAAA+tC,cAAA/tC,EAAA6tC,SAAA7tC,EAAA8tC,UACAzT,EAAA23B,aAAAhyD,EAAAw6B,QAAA,GACA06B,EAAAF,aAAAE,EAAA7G,UAAA,EAAA6G,EAAAhM,eAAA,MAOAtI,EAAA10C,OAAAgpD,EAAA5Q,WACA1D,EAAA10C,OAAAgpD,EAAAmO,YACAziB,EAAA+D,eAAA,GACAtqB,EAAAmoB,kBAyBA96E,EAAAk7E,aAAA,SAAAvoB,EAAAyiB,GACA,IAEAuzB,EAAAC,EACAjtB,EAAA7yD,EAAAi4C,EACAjO,EAJA06B,EAAA76B,EAAAnF,QACA0rB,EAAAvmB,EAAAumB,MAKAwwB,EAAA,IAAA1pG,EAAA+a,QACA4uF,EAAA,IAAA3pG,EAAAmY,WACAyxF,EAAA,IAAA5pG,EAAA+a,QAEA,SAAA4/D,IACA,IAAA/xD,EAAA,IAAAgB,aAAA,+CACA6jB,EAAA,IAAAf,YAAA,eACAi8D,EAAAnb,EAAAhI,eACAojB,EAAApb,EAAAhI,eACAgI,EAAA5H,WAAA4H,EAAA3H,aAAA8iB,GACAnb,EAAA1H,WAAA0H,EAAA3H,aAAAj9D,EAAA4kE,EAAAyC,aACAzC,EAAA5H,WAAA4H,EAAA3F,qBAAA+gB,GACApb,EAAA1H,WAAA0H,EAAA3F,qBAAAp6C,EAAA+/C,EAAAyC,aACAtU,EA2IA,WACA,IAAAA,EAAA6R,EAAAmF,gBACA3xB,EAAAwsB,EAAAyI,aAAAzI,EAAAI,eACA3sB,EAAAusB,EAAAyI,aAAAzI,EAAAM,iBAQA,OAPAN,EAAA0I,aAAAl1B,EAAA,cAAArO,EAAAqxB,eAAA,UAAsF,gCAAiC,iCAAkC,0BAA2B,sBAAuB,yBAA0B,wBAAyB,2BAA4B,qBAAsB,oBAAqB,gBAAiB,iCAAkC,2CAA4C,wBAAyB,iGAAkG,iGAAkG,sBAAuB,gEAAiE,uCAAwC,oDAAqD,+BAAgC,KAAK5pD,KAAA,OAC31BozD,EAAA0I,aAAAj1B,EAAA,cAAAtO,EAAAqxB,eAAA,UAAwF,sBAAuB,yBAA0B,yBAA0B,uBAAwB,yBAA0B,4BAA6B,yBAA0B,wBAAyB,2BAA4B,oBAAqB,gBAAiB,wCAAyC,wCAAyC,mEAAoE,uBAAwB,iDAAkD,yBAA0B,wBAAyB,oDAAqD,WAAY,+BAAgC,wEAAyE,kDAAmD,IAAK,mFAAoF,IAAK,KAAK5pD,KAAA,OAC17BozD,EAAA2I,cAAAn1B,GACAwsB,EAAA2I,cAAAl1B,GACAusB,EAAAoG,aAAAjY,EAAA3a,GACAwsB,EAAAoG,aAAAjY,EAAA1a,GACAusB,EAAAsG,YAAAnY,GACAA,EAtJAgX,GACA7pE,EAAA,CACAC,SAAAykE,EAAA0H,kBAAAvZ,EAAA,YACA3sC,GAAAw+C,EAAA0H,kBAAAvZ,EAAA,OAEA5a,EAAA,CACA8oC,SAAArc,EAAAib,mBAAA9sB,EAAA,YACAmuB,QAAAtc,EAAAib,mBAAA9sB,EAAA,WACA/0C,SAAA4mD,EAAAib,mBAAA9sB,EAAA,YACAhrD,MAAA68D,EAAAib,mBAAA9sB,EAAA,SACAvvE,MAAAohF,EAAAib,mBAAA9sB,EAAA,SACAhmB,IAAA63B,EAAAib,mBAAA9sB,EAAA,OACAtf,QAAAmxB,EAAAib,mBAAA9sB,EAAA,WACA70C,gBAAA0mD,EAAAib,mBAAA9sB,EAAA,mBACA35D,iBAAAwrE,EAAAib,mBAAA9sB,EAAA,oBACAouB,QAAAvc,EAAAib,mBAAA9sB,EAAA,WACA1J,WAAAub,EAAAib,mBAAA9sB,EAAA,cACAzJ,QAAAsb,EAAAib,mBAAA9sB,EAAA,WACAxJ,OAAAqb,EAAAib,mBAAA9sB,EAAA,UACAvJ,SAAAob,EAAAib,mBAAA9sB,EAAA,YACAxa,UAAAqsB,EAAAib,mBAAA9sB,EAAA,cAEA,IAAAlR,EAAAxM,SAAAC,gBAAA,yCACAuM,EAAArsD,MAAA,EACAqsD,EAAApsD,OAAA,EACA,IAAAmvC,EAAAid,EAAAE,WAAA,MACAnd,EAAAw8C,UAAA,QACAx8C,EAAAy8C,SAAA,UACAn3C,EAAA,IAAA9yD,EAAAmkE,QAAAsG,IACAz/B,aAAA,EA4HA,SAAA8wC,EAAApgE,EAAApR,GACA,OAAAoR,EAAA2rB,cAAA/8B,EAAA+8B,YACA3rB,EAAA2rB,YAAA/8B,EAAA+8B,YACO3rB,EAAArD,IAAA/N,EAAA+N,EACP/N,EAAA+N,EAAAqD,EAAArD,EAEA/N,EAAAm+B,GAAA/sB,EAAA+sB,GA/HAhnC,KAAAuxD,OAAA,SAAAJ,EAAA/wC,GACA,OAAAuzD,EAAA70E,OAAA,MAEAM,IAAA86E,GACAhB,IAGA6S,EAAArO,WAAAxD,GACAzC,EAAAmM,iBACAnM,EAAA+M,gBAAAn9D,EAAAC,UACAmwD,EAAA+M,gBAAAn9D,EAAAkmB,IACAkqC,EAAAuN,0BACAvN,EAAAx0C,QAAA8oD,EAAA5Q,WACA1D,EAAA10C,OAAAgpD,EAAAyL,OACAzL,EAAA5H,WAAA4H,EAAA3H,aAAA8iB,GACAnb,EAAAtH,oBAAAp9D,EAAAC,SAAA,EAAAykE,EAAA7L,OAAA,QACA6L,EAAAtH,oBAAAp9D,EAAAkmB,GAAA,EAAAw+C,EAAA7L,OAAA,QACA6L,EAAA5H,WAAA4H,EAAA3F,qBAAA+gB,GACApb,EAAAyY,iBAAAllC,EAAA/+C,kBAAA,EAAAH,EAAAG,iBAAAhI,UACAk/D,EAAA8kB,cAAAxQ,EAAA0Q,UACA1Q,EAAA0X,UAAAnkC,EAAApL,IAAA,GACA,IAAAu0C,EAAA,EACAC,EAAA,EACAlkC,EAAArT,EAAAqT,IAEAA,GACAunB,EAAA+X,UAAAxkC,EAAAqR,SAAAnM,EAAA75D,MAAAhC,EAAA67D,EAAA75D,MAAA/B,EAAA47D,EAAA75D,MAAA9B,GAEA27D,aAAAjmE,EAAA8wE,KACA0c,EAAAuX,UAAAhkC,EAAAmR,QAAAjM,EAAA/zC,MACAs7D,EAAAuX,UAAAhkC,EAAAoR,OAAAlM,EAAA9zC,KACAq7D,EAAA0X,UAAAnkC,EAAAgpC,QAAA,GACAG,EAAA,EACAC,EAAA,GACSlkC,aAAAjmE,EAAA+wE,UACTyc,EAAAuX,UAAAhkC,EAAAkR,WAAAhM,EAAA+K,SACAwc,EAAA0X,UAAAnkC,EAAAgpC,QAAA,GACAG,EAAA,EACAC,EAAA,KAGA3c,EAAA0X,UAAAnkC,EAAAgpC,QAAA,GACAG,EAAA,EACAC,EAAA,GAIA,QAAAzjF,EAAA,EAAAjb,EAAA2pE,EAAA70E,OAAyCmmB,EAAAjb,EAAOib,IAAA,EAChD4R,EAAA88C,EAAA1uD,IACAogB,gBAAA/kB,iBAAAF,EAAA8vC,mBAAAr5B,EAAApW,aACAoW,EAAAjgB,GAAAigB,EAAAwO,gBAAA9sB,SAAA,IAGAo7D,EAAAhvC,KAAA01C,GAEA,IAAAnrD,EAAA,GAEA,IAAAjK,EAAA,EAAAjb,EAAA2pE,EAAA70E,OAAyCmmB,EAAAjb,EAAOib,IAAA,CAChD,IAAA4R,EACA2R,GADA3R,EAAA88C,EAAA1uD,IACAujB,SACA,QAAAA,EAAA/E,QAAA,CACAsoD,EAAAuX,UAAAhkC,EAAAI,UAAAl3B,EAAAk3B,WACAqsB,EAAAyY,iBAAAllC,EAAAj6B,iBAAA,EAAAxO,EAAAwO,gBAAA9sB,UACAse,EAAApW,YAAAuP,UAAAi4E,EAAAC,EAAAC,GACAj5E,EAAA,GAAAi5E,EAAAzoG,EACAwvB,EAAA,GAAAi5E,EAAAxxF,EACA,IAAA2xF,EAAA,EAEAn3C,EAAAqT,KAAAh8B,EAAAg8B,MACA8jC,EAAAI,GAGAD,IAAAH,IACAvc,EAAA0X,UAAAnkC,EAAAgpC,WACAG,EAAAH,GAGA,OAAA9/D,EAAA0rB,KACA63B,EAAA6X,UAAAtkC,EAAA8oC,SAAA5/D,EAAA0rB,IAAA7mD,OAAA3N,EAAA8oC,EAAA0rB,IAAA7mD,OAAAsJ,GACAo1E,EAAA6X,UAAAtkC,EAAA+oC,QAAA7/D,EAAA0rB,IAAA0C,OAAAl3D,EAAA8oC,EAAA0rB,IAAA0C,OAAAjgD,KAEAo1E,EAAA6X,UAAAtkC,EAAA8oC,SAAA,KACArc,EAAA6X,UAAAtkC,EAAA+oC,QAAA,MAGAtc,EAAAuX,UAAAhkC,EAAA1E,QAAApyB,EAAAoyB,SACAmxB,EAAA+X,UAAAxkC,EAAA30D,MAAA69B,EAAA79B,MAAAhC,EAAA6/B,EAAA79B,MAAA/B,EAAA4/B,EAAA79B,MAAA9B,GACAkjF,EAAAuX,UAAAhkC,EAAAn6B,SAAAqD,EAAArD,UACA4mD,EAAA4X,WAAArkC,EAAApwC,SACAuoD,EAAA4D,YAAA7yC,EAAA4uB,SAAA5uB,EAAAo8B,cAAAp8B,EAAAk8B,SAAAl8B,EAAAm8B,UACA8S,EAAA8D,aAAA/yC,EAAAm3B,WACA8X,EAAA+D,cAAAhzC,EAAAo3B,YAEAp3B,EAAA0rB,IACAhD,EAAA23B,aAAArgD,EAAA0rB,IAAA,GAEAhD,EAAA23B,aAAAx3B,EAAA,GAGA06B,EAAAF,aAAAE,EAAA7G,UAAA,EAAA6G,EAAAhM,eAAA,IAIAtI,EAAA10C,OAAAgpD,EAAA5Q,WACAjqB,EAAAmoB,kBAiCAx5E,OAAAM,OAAA5B,EAAA,CACAoqG,MAAA,SAAA1uF,EAAApR,EAAAqE,EAAAuS,EAAA+B,EAAA7W,EAAAo+B,GAEA,OADAx+B,QAAAC,KAAA,wEACA,IAAAjM,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAAsU,EAAA7W,EAAAo+B,IAEA6/D,UAAA,EACAC,WAAA,EACAC,iBAAAvqG,EAAAipE,cACAnjC,WAAA,SAAApd,EAAAuhB,GAEA,OADAj+B,QAAAC,KAAA,sDACA,IAAAjM,EAAA0lC,OAAAhd,EAAAuhB,IAEAugE,SAAAxqG,EAAA4lC,OACA6kE,eAAA,SAAA/hF,EAAAuhB,GAEA,OADAj+B,QAAAC,KAAA,0DACA,IAAAjM,EAAA0lC,OAAAhd,EAAAuhB,IAEAygE,mBAAA,SAAAn4D,GAEA,OADAvmC,QAAAC,KAAA,sEACA,IAAAjM,EAAAkpE,eAAA32B,IAEAo4D,sBAAA,SAAAp4D,GAEA,OADAvmC,QAAAC,KAAA,yEACA,IAAAjM,EAAAkpE,eAAA32B,IAEAq4D,uBAAA,SAAAr4D,GAEA,OADAvmC,QAAAC,KAAA,0EACA,IAAAjM,EAAAkpE,eAAA32B,IAEAs4D,OAAA,SAAA1pG,EAAAiX,EAAAC,GAEA,OADArM,QAAAC,KAAA,6DACA,IAAAjM,EAAA+a,QAAA5Z,EAAAiX,EAAAC,MAIA/W,OAAAM,OAAA5B,EAAAqmB,KAAAjlB,UAAA,CACA80B,MAAA,WAEA,OADAlqB,QAAAC,KAAA,wDACAxK,KAAAulB,WAEA8jF,kBAAA,SAAA/jF,GAEA,OADA/a,QAAAC,KAAA,0EACAxK,KAAA6lB,cAAAP,MAGAzlB,OAAAM,OAAA5B,EAAA4nB,KAAAxmB,UAAA,CACA80B,MAAA,WAEA,OADAlqB,QAAAC,KAAA,wDACAxK,KAAAulB,WAEA8jF,kBAAA,SAAA/jF,GAEA,OADA/a,QAAAC,KAAA,0EACAxK,KAAA6lB,cAAAP,IAEAgkF,qBAAA,SAAA1hF,GAEA,OADArd,QAAAC,KAAA,gFACAxK,KAAA0nB,iBAAAE,MAGA/nB,OAAAM,OAAA5B,EAAA2pB,QAAAvoB,UAAA,CACA4pG,gBAAA,SAAAnoF,GAEA,OADA7W,QAAAC,KAAA,kGACA4W,EAAA/B,aAAArf,OAEAwpG,qBAAA,SAAAvvF,GAEA,OADA1P,QAAAC,KAAA,6GACAxK,KAAAgpB,oBAAA/O,MAGApa,OAAAM,OAAA5B,EAAA8hB,QAAA1gB,UAAA,CACA8pG,gBAAA,SAAAh/F,GAEA,OADAF,QAAAC,KAAA,0EACAxK,KAAA6qB,aAAApgB,IAEAy7B,0BAAA,SAAAt8B,GAEA,OADAW,QAAAC,KAAA,kGACAxK,KAAAujB,2BAAA3Z,IAEA2/F,gBAAA,SAAAnoF,GAEA,OADA7W,QAAAC,KAAA,sIACA4W,EAAA5B,gBAAAxf,OAEA0pG,gBAAA,SAAAtoF,GAEA,OADA7W,QAAAC,KAAA,kGACA4W,EAAA7B,aAAAvf,OAEAwpG,qBAAA,SAAAvvF,GAEA,OADA1P,QAAAC,KAAA,6GACAxK,KAAAgpB,oBAAA/O,IAEA0vF,WAAA,SAAA9vF,GACAtP,QAAAC,KAAA,oGACAqP,EAAA8G,mBAAA3gB,OAEA4pG,YAAA,SAAAxoF,GAEA,OADA7W,QAAAC,KAAA,8FACA4W,EAAA7B,aAAAvf,OAEAkmB,UAAA,SAAArM,GACAtP,QAAA2U,MAAA,kDAEAmnB,QAAA,SAAAluB,GACA5N,QAAA2U,MAAA,gDAEAonB,QAAA,SAAAnuB,GACA5N,QAAA2U,MAAA,gDAEAqnB,QAAA,SAAApuB,GACA5N,QAAA2U,MAAA,gDAEA2qF,aAAA,SAAA3xF,EAAAC,GACA5N,QAAA2U,MAAA,uDAGArf,OAAAM,OAAA5B,EAAA82B,MAAA11B,UAAA,CACAmqG,mBAAA,SAAA9lF,GAEA,OADAzZ,QAAAC,KAAA,6EACAxK,KAAAw3B,eAAAxT,MAGAnkB,OAAAM,OAAA5B,EAAAmY,WAAA/W,UAAA,CACA4pG,gBAAA,SAAAnoF,GAEA,OADA7W,QAAAC,KAAA,mHACA4W,EAAAjC,gBAAAnf,SAGAH,OAAAM,OAAA5B,EAAA6yB,IAAAzxB,UAAA,CACA0pG,kBAAA,SAAA/jF,GAEA,OADA/a,QAAAC,KAAA,yEACAxK,KAAA6lB,cAAAP,IAEAykF,oBAAA,SAAAjiF,GAEA,OADAvd,QAAAC,KAAA,6EACAxK,KAAA6nB,gBAAAC,IAEAwhF,qBAAA,SAAA1hF,GAEA,OADArd,QAAAC,KAAA,+EACAxK,KAAA0nB,iBAAAE,MAGA/nB,OAAAM,OAAA5B,EAAA+a,QAAA3Z,UAAA,CACAqqG,2BAAA,WACAz/F,QAAA2U,MAAA,8GAEA+qF,uBAAA,WACA1/F,QAAA2U,MAAA,sGAEAgrF,sBAAA,SAAAz/F,GAEA,OADAF,QAAAC,KAAA,yFACAxK,KAAAiiB,sBAAAxX,IAEA0/F,mBAAA,SAAA1/F,GAEA,OADAF,QAAAC,KAAA,mFACAxK,KAAAmiB,mBAAA1X,IAEA2/F,oBAAA,SAAA7pG,EAAA4f,GAEA,OADA5V,QAAAC,KAAA,qFACAxK,KAAAkiB,oBAAA/B,EAAA5f,MAIAV,OAAAM,OAAA5B,EAAAwmC,SAAAplC,UAAA,CACA0qG,eAAA,SAAAzqG,GAEA,OADA2K,QAAAC,KAAA,6EACAxK,KAAAknC,gBAAAtnC,IAEA0qG,YAAA,SAAArhG,GACAsB,QAAAC,KAAA,8EAEA0b,UAAA,SAAAhC,EAAAhM,GAEA,OADA3N,QAAAC,KAAA,kGACAxK,KAAAwmC,gBAAAtuB,EAAAgM,MAGArkB,OAAAukC,iBAAA7lC,EAAAwmC,SAAAplC,UAAA,CACA4qG,WAAA,CACAxqG,IAAA,WAEA,OADAwK,QAAAC,KAAA,uDACAxK,KAAAmlC,SAAAntB,OAEAlP,IAAA,SAAAG,GACAsB,QAAAC,KAAA,uDACAxK,KAAAmlC,SAAAntB,MAAA/O,IAGAuhG,cAAA,CACAzqG,IAAA,WACAwK,QAAAC,KAAA,kGAEA1B,IAAA,SAAAG,GACAsB,QAAAC,KAAA,qGAIA3K,OAAAukC,iBAAA7lC,EAAAylC,IAAArkC,UAAA,CACAklC,QAAA,CACA9kC,IAAA,WAEA,OADAwK,QAAAC,KAAA,oDACAxK,KAAAkjE,WAKA3kE,EAAAimC,kBAAA7kC,UAAA8qG,QAAA,SAAA73C,EAAAH,GACAloD,QAAAC,KAAA,oHACApL,IAAAqzD,IAAAzyD,KAAAyyD,aACAzyD,KAAA2yD,eAAAC,IAIA/yD,OAAAukC,iBAAA7lC,EAAAm1D,MAAA/zD,UAAA,CACA+qG,WAAA,CACA5hG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,gDAGAmgG,gBAAA,CACA7hG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAq0D,OAAAj0C,OAAAwQ,IAAA3nB,IAGA2hG,iBAAA,CACA9hG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8DACAxK,KAAAq0D,OAAAj0C,OAAAiQ,KAAApnB,IAGA4hG,kBAAA,CACA/hG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,gEACAxK,KAAAq0D,OAAAj0C,OAAAkQ,MAAArnB,IAGA6hG,gBAAA,CACAhiG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAq0D,OAAAj0C,OAAAoQ,IAAAvnB,IAGA8hG,mBAAA,CACAjiG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,kEACAxK,KAAAq0D,OAAAj0C,OAAAmQ,OAAAtnB,IAGA+hG,iBAAA,CACAliG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8DACAxK,KAAAq0D,OAAAj0C,OAAAqQ,KAAAxnB,IAGAgiG,gBAAA,CACAniG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAq0D,OAAAj0C,OAAAsQ,IAAAznB,IAGAiiG,oBAAA,CACApiG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,oHAGAumE,WAAA,CACAjoE,IAAA,SAAAG,GACAsB,QAAAC,KAAA,iDACAxK,KAAAq0D,OAAAL,KAAA/qD,IAGAkiG,eAAA,CACAriG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,oDAGA4gG,eAAA,CACAtiG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8DACAxK,KAAAq0D,OAAAJ,QAAAt3C,MAAA1T,IAGAoiG,gBAAA,CACAviG,IAAA,SAAAG,GACAsB,QAAAC,KAAA,gEACAxK,KAAAq0D,OAAAJ,QAAAr3C,OAAA3T,MAKApJ,OAAAukC,iBAAA7lC,EAAA2qC,gBAAAvpC,UAAA,CACAb,OAAA,CACAiB,IAAA,WAEA,OADAwK,QAAAC,KAAA,0EACAxK,KAAAoN,MAAAtO,WAIAe,OAAAM,OAAA5B,EAAA6oB,eAAAznB,UAAA,CACA2rG,SAAA,SAAA/qG,GACAgK,QAAAC,KAAA,sEACAxK,KAAAkzC,SAAA3yC,IAEAgrG,YAAA,SAAAznF,EAAAwlB,EAAAkiE,QACApsG,IAAAosG,GACAjhG,QAAAC,KAAA,wEAGAD,QAAAC,KAAA,4DACAxK,KAAAszC,SAAAxvB,EAAAwlB,IAEAmiE,eAAA,WACAlhG,QAAAC,KAAA,kEACAxK,KAAAuzC,eAEArE,gBAAA,WACA3kC,QAAAC,KAAA,+DAEAkhG,eAAA,WACAnhG,QAAAC,KAAA,gEAGA3K,OAAAukC,iBAAA7lC,EAAA6oB,eAAAznB,UAAA,CACAs/D,UAAA,CACAl/D,IAAA,WAEA,OADAwK,QAAA2U,MAAA,iEACAlf,KAAA8tC,SAGAoxB,QAAA,CACAn/D,IAAA,WAEA,OADAwK,QAAAC,KAAA,+DACAxK,KAAA8tC,WAKAjuC,OAAAukC,iBAAA7lC,EAAA+lE,SAAA3kE,UAAA,CACAgsG,WAAA,CACA5rG,IAAA,WACAwK,QAAAC,KAAA,SAAAxK,KAAAiiC,KAAA,oCAEAn5B,IAAA,SAAAG,GACAsB,QAAAC,KAAA,SAAAxK,KAAAiiC,KAAA,qCAGA2pE,QAAA,CACA7rG,IAAA,WAEA,OADAwK,QAAAC,KAAA,SAAAxK,KAAAiiC,KAAA,gCACA,IAAA1jC,EAAAmK,UAIA7I,OAAAukC,iBAAA7lC,EAAAwoE,kBAAApnE,UAAA,CACAksG,MAAA,CACA9rG,IAAA,WAEA,OADAwK,QAAAC,KAAA,8FACA,GAEA1B,IAAA,SAAAG,GACAsB,QAAAC,KAAA,gGAIA3K,OAAAukC,iBAAA7lC,EAAAmpE,eAAA/nE,UAAA,CACAkoE,YAAA,CACA9nE,IAAA,WAEA,OADAwK,QAAAC,KAAA,iFACAxK,KAAA4nE,WAAAC,aAEA/+D,IAAA,SAAAG,GACAsB,QAAAC,KAAA,kFACAxK,KAAA4nE,WAAAC,YAAA5+D,MAKA1K,EAAAwjC,gBAAApiC,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAA,CAEA12B,YAAAzK,EAAAwjC,gBACAoe,MAAA,SAAA//C,GACAmK,QAAAC,KAAA,uGACA3K,OAAAM,OAAAC,EAAAJ,SAEGzB,EAAAwjC,gBAAApiC,WAEHE,OAAAM,OAAA5B,EAAAo0E,cAAAhzE,UAAA,CACAmsG,sBAAA,WAEA,OADAvhG,QAAAC,KAAA,gGACAxK,KAAA4nE,WAAA7nE,IAAA,sBAEAgsG,0BAAA,WAEA,OADAxhG,QAAAC,KAAA,yGACAxK,KAAA4nE,WAAA7nE,IAAA,2BAEAisG,4BAAA,WAEA,OADAzhG,QAAAC,KAAA,6GACAxK,KAAA4nE,WAAA7nE,IAAA,6BAEAksG,8BAAA,WAEA,OADA1hG,QAAAC,KAAA,oHACAxK,KAAA4nE,WAAA7nE,IAAA,kCAEAmsG,+BAAA,WAEA,OADA3hG,QAAAC,KAAA,sHACAxK,KAAA4nE,WAAA7nE,IAAA,mCAEAosG,oBAAA,WAEA,OADA5hG,QAAAC,KAAA,6FACAxK,KAAA4nE,WAAA7nE,IAAA,qBAEAoxF,uBAAA,WACA,OAAAnxF,KAAAu3E,aAAAgW,gBAEA6e,wBAAA,WAEA,OADA7hG,QAAAC,KAAA,uGACAxK,KAAA4nE,WAAA7nE,IAAA,2BAEAssG,kBAAA,SAAArpB,GACAz4E,QAAAC,KAAA,uEACAxK,KAAA+iF,eAAAC,IAEA5F,aAAA,WACA7yE,QAAAC,KAAA,2DAEA8hG,aAAA,WACA/hG,QAAAC,KAAA,2DAEA+hG,cAAA,WACAhiG,QAAAC,KAAA,4DAEAgiG,gBAAA,WACAjiG,QAAAC,KAAA,gEAGA3K,OAAAukC,iBAAA7lC,EAAAo0E,cAAAhzE,UAAA,CACA4xF,iBAAA,CACAxxF,IAAA,WACA,OAAAC,KAAAs5E,UAAAznC,SAEA/oC,IAAA,SAAAG,GACAsB,QAAAC,KAAA,qEACAxK,KAAAs5E,UAAAznC,QAAA5oC,IAGAmnF,cAAA,CACArwF,IAAA,WACA,OAAAC,KAAAs5E,UAAAr3C,MAEAn5B,IAAA,SAAAG,GACAsB,QAAAC,KAAA,+DACAxK,KAAAs5E,UAAAr3C,KAAAh5B,IAGAwjG,kBAAA,CACA1sG,IAAA,WACA,OAAAC,KAAAs5E,UAAAiP,UAEAz/E,IAAA,SAAAG,GACAsB,QAAAC,KAAA,uEACAxK,KAAAs5E,UAAAiP,SAAAt/E,MAIApJ,OAAAukC,iBAAA7lC,EAAAg7E,eAAA55E,UAAA,CACA4oF,SAAA,CACAxoF,IAAA,WACA,OAAAC,KAAAq3F,mBAAA94F,EAAA4C,cAAA5C,EAAA2C,cAEA4H,IAAA,SAAAy/E,GACA,IAAAt/E,EAAAs/E,IAAAhqF,EAAA2C,aACAqJ,QAAAC,KAAA,0FAAAvB,EAAA,KACAjJ,KAAAq3F,mBAAApuF,MAKApJ,OAAAukC,iBAAA7lC,EAAA2/E,kBAAAv+E,UAAA,CACAu3D,MAAA,CACAn3D,IAAA,WAEA,OADAwK,QAAAC,KAAA,0DACAxK,KAAAqxD,QAAA6F,OAEApuD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,0DACAxK,KAAAqxD,QAAA6F,MAAAjuD,IAGAkuD,MAAA,CACAp3D,IAAA,WAEA,OADAwK,QAAAC,KAAA,0DACAxK,KAAAqxD,QAAA8F,OAEAruD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,0DACAxK,KAAAqxD,QAAA8F,MAAAluD,IAGA4nD,UAAA,CACA9wD,IAAA,WAEA,OADAwK,QAAAC,KAAA,kEACAxK,KAAAqxD,QAAAR,WAEA/nD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,kEACAxK,KAAAqxD,QAAAR,UAAA5nD,IAGA6nD,UAAA,CACA/wD,IAAA,WAEA,OADAwK,QAAAC,KAAA,kEACAxK,KAAAqxD,QAAAP,WAEAhoD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,kEACAxK,KAAAqxD,QAAAP,UAAA7nD,IAGA6tD,WAAA,CACA/2D,IAAA,WAEA,OADAwK,QAAAC,KAAA,oEACAxK,KAAAqxD,QAAAyF,YAEAhuD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,oEACAxK,KAAAqxD,QAAAyF,WAAA7tD,IAGAoE,OAAA,CACAtN,IAAA,WAEA,OADAwK,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAhkD,QAEAvE,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAhkD,OAAApE,IAGA2tD,OAAA,CACA72D,IAAA,WAEA,OADAwK,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAuF,QAEA9tD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAuF,OAAA3tD,IAGA2nD,OAAA,CACA7wD,IAAA,WAEA,OADAwK,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAT,QAEA9nD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4DACAxK,KAAAqxD,QAAAT,OAAA3nD,IAGAg5B,KAAA,CACAliC,IAAA,WAEA,OADAwK,QAAAC,KAAA,wDACAxK,KAAAqxD,QAAApvB,MAEAn5B,IAAA,SAAAG,GACAsB,QAAAC,KAAA,wDACAxK,KAAAqxD,QAAApvB,KAAAh5B,IAGAmoD,gBAAA,CACArxD,IAAA,WAEA,OADAwK,QAAAC,KAAA,8EACAxK,KAAAqxD,QAAAD,iBAEAtoD,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8EACAxK,KAAAqxD,QAAAD,gBAAAnoD,MAKApJ,OAAAM,OAAA5B,EAAAutD,MAAAnsD,UAAA,CACAs1D,KAAA,SAAAW,GACArrD,QAAAC,KAAA,yEACA,IAAAqc,EAAA7mB,KAKA,OAJA,IAAAzB,EAAAu2D,aACAG,KAAAW,EAAA,SAAAzsC,GACAtC,EAAAmmC,UAAA7jC,KAEAnpB,QAGAH,OAAAM,OAAA5B,EAAAwvD,cAAApuD,UAAA,CACA+sG,QAAA,SAAA92C,GAEA,OADArrD,QAAAC,KAAA,+DACAxK,KAAAquD,sBAIA9vD,EAAAouG,cAAA,CACAv9D,MAAA,SAAAw9D,EAAAr4D,EAAAlF,GAEA,IAAAlvB,EADA5V,QAAAC,KAAA,mIAGA+pC,aAAAh2C,EAAAulC,OACAyQ,EAAAjP,kBAAAiP,EAAA7M,eACAvnB,EAAAo0B,EAAAp0B,OACAo0B,IAAAttB,UAGA2lF,EAAAx9D,MAAAmF,EAAAp0B,EAAAkvB,IAEAvwB,OAAA,SAAAmI,GAEA,OADA1c,QAAAC,KAAA,6FACAyc,EAAAnI,WAGAvgB,EAAAsuG,WAAA,CACA32C,iBAAA92D,EACAu3D,YAAA,SAAAzB,EAAAyN,EAAAxN,EAAAE,GACA9qD,QAAAC,KAAA,wFACA,IAAA8qD,EAAA,IAAA/2D,EAAAk4D,cACAnB,EAAA2B,eAAAj3D,KAAAk2D,aACA,IAAA7E,EAAAiE,EAAAL,KAAAC,EAAAC,OAAA/1D,EAAAi2D,GAEA,OADAsN,IAAAtR,EAAAsR,WACAtR,GAEAy7C,gBAAA,SAAAtpC,EAAAb,EAAAxN,EAAAE,GACA9qD,QAAAC,KAAA,gGACA,IAAA8qD,EAAA,IAAA/2D,EAAAglE,kBACAjO,EAAA2B,eAAAj3D,KAAAk2D,aACA,IAAA7E,EAAAiE,EAAAL,KAAAuO,EAAArO,OAAA/1D,EAAAi2D,GAEA,OADAsN,IAAAtR,EAAAsR,WACAtR,GAEA07C,sBAAA,WACAxiG,QAAA2U,MAAA,0FAEA8tF,0BAAA,WACAziG,QAAA2U,MAAA,+FAIA3gB,EAAA0uG,UAAA,WACA1iG,QAAA2U,MAAA,0EAEAlf,KAAAktG,cAAA,SAAA9rF,EAAAhB,GACA7V,QAAAC,KAAA,8DACA4W,EAAAlB,QAAAE,IAGApgB,KAAAmtG,gBAAA,SAAA/rF,EAAAhB,GACA7V,QAAAC,KAAA,kEACA4W,EAAAV,UAAAN,IAGApgB,KAAAotG,WAAA,SAAAhsF,EAAAhB,GACA7V,QAAA2U,MAAA,sEAKA3gB,EAAA8uG,eAAA,WACA9iG,QAAA2U,MAAA,mFACAlf,KAAA4zE,WAAApX,SAAAC,gBAAA,yCAEAz8D,KAAA61D,MAAA,aAEA71D,KAAAuxD,OAAA,aAEAvxD,KAAAkjF,cAAA,aAEAljF,KAAA0iF,QAAA,cAQAnkF,EAAA+uG,WAAA,CACAC,uBAAA,SAAA1jG,EAAAirB,EAAAC,EAAAC,GACA,YAAAnrB,IAAAkrB,EAAAD,GAAA,EAAAjrB,GAAAmrB,EAAAD,IAGAy4E,mBAAA,SAAA3jG,EAAAirB,EAAAC,EAAAC,EAAAC,GACA,SAAAH,GAAA,EAAAjrB,IAAA,EAAAA,GAAA,EAAAkrB,GAAA,EAAAlrB,IAAA,EAAAA,GAAA,EAAAA,EAAAkrB,GAAA,EAAAlrB,GAAA,EAAAA,EAAAmrB,GAAA,EAAAnrB,GAAA,EAAAA,IAAAmrB,EAAA,EAAAnrB,IAAAorB,GAEAw4E,cAAA,SAAA5jG,EAAAirB,EAAAC,EAAAC,EAAAC,GAUA,OARA,EAAAprB,IAAA,EAAAA,GAEA,EAAAA,IAAA,EAAAA,EAAA,KAEA,EAAAA,IAAA,EAAAA,IAEA,EAAAA,IAAA,EAAAA,IAKA+wB,YAAA,SAAA9F,EAAAC,EAAAC,EAAAC,EAAAprB,GACA,IAAAkoB,EAAA,IAAAiD,EAAAF,GACA3b,EAAA,IAAA8b,EAAAF,GACA8F,EAAAhxB,IAEA,SAAAkrB,EAAA,EAAAC,EAAAjD,EAAA5Y,IADAtP,EAAAgxB,KACA,EAAA9F,EAAA,EAAAC,EAAA,EAAAjD,EAAA5Y,GAAA0hB,EAAA9I,EAAAloB,EAAAkrB,IAQAx2B,EAAAmvG,WAAA,CACAC,0BAAA,SAAA1mF,EAAA+gB,GAGA,IAFA,IAAA+F,EAAA,IAAAxvC,EAAA0kE,MAEAh+C,EAAA,EAAAjb,EAAAg+B,EAAAlpC,OAA2CmmB,EAAAjb,EAAOib,IAClD8oB,EAAAxhC,IAAA,IAAAhO,EAAAulC,KAAA7c,EAAA+gB,EAAA/iB,KAGA,OAAA8oB,GAEA6/D,OAAA,SAAA/kE,EAAA5D,EAAAksB,GACAtoB,EAAA/C,YAAAb,EAAAxkB,aACAwkB,EAAA6B,OAAA+B,GACAsoB,EAAA5kD,IAAAs8B,IAEAglE,OAAA,SAAAhlE,EAAAsoB,EAAAlsB,GACA,IAAAirB,EAAA,IAAA3xD,EAAA8hB,QACA6vC,EAAA1vC,WAAAykB,EAAAxkB,aACAooB,EAAA/C,YAAAoqB,GACAiB,EAAArqB,OAAA+B,GACA5D,EAAA14B,IAAAs8B,KAQAtqC,EAAAuvG,WAAA,CAEAvwE,KAAA,SAAAwwE,GAIA,IAHA,IAAAlhF,EAAAkhF,EAAAjvG,OACAmb,EAAA,EAEAtQ,EAAAkjB,EAAA,EAAAjjB,EAAA,EAAgCA,EAAAijB,EAAOljB,EAAAC,IACvCqQ,GAAA8zF,EAAApkG,GAAAjK,EAAAquG,EAAAnkG,GAAA+M,EAAAo3F,EAAAnkG,GAAAlK,EAAAquG,EAAApkG,GAAAgN,EAGA,SAAAsD,GAEA+zF,YAAA,WAcA,SAAAC,EAAAF,EAAA9wE,EAAApjB,EAAAhD,EAAAgW,EAAAqhF,GACA,IAAAvkG,EACAkX,EAAAC,EAAAE,EAAAC,EACAixC,EAAAC,EAAAg8C,EAAAC,EAQAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAEAC,EAAAC,EAHA,GANA/tF,EAAAktF,EAAAG,EAAAjxE,IAAAv9B,EACAohB,EAAAitF,EAAAG,EAAAjxE,IAAAtmB,EACAqK,EAAA+sF,EAAAG,EAAAr0F,IAAAna,EACAuhB,EAAA8sF,EAAAG,EAAAr0F,IAAAlD,EACAu7C,EAAA67C,EAAAG,EAAAr3F,IAAAnX,EACAyyD,EAAA47C,EAAAG,EAAAr3F,IAAAF,EACAtX,OAAAC,SAAA0hB,EAAAH,IAAAsxC,EAAArxC,IAAAG,EAAAH,IAAAoxC,EAAArxC,GAAA,SAWA,IAPAwtF,EAAAn8C,EAAAlxC,EACAstF,EAAAn8C,EAAAlxC,EACAstF,EAAA1tF,EAAAqxC,EACAs8C,EAAA1tF,EAAAqxC,EACAs8C,EAAAztF,EAAAH,EACA6tF,EAAAztF,EAAAH,EAEAnX,EAAA,EAAmBA,EAAAkjB,EAAOljB,IAG1B,GAFAwkG,EAAAJ,EAAAG,EAAAvkG,IAAAjK,EACA0uG,EAAAL,EAAAG,EAAAvkG,IAAAgN,IACAw3F,IAAAttF,GAAAutF,IAAAttF,GAAAqtF,IAAAntF,GAAAotF,IAAAntF,GAAAktF,IAAAj8C,GAAAk8C,IAAAj8C,KASAw8C,EAAAF,GAPAL,EAAAttF,GAOA4tF,GARAP,EAAAttF,GASA+tF,EAAAL,GAJAH,EAAAj8C,GAIAq8C,GALAL,EAAAj8C,GAGAm8C,GAJAD,EAAAntF,GAIAqtF,GALAH,EAAAntF,KAQA3hB,OAAAC,SAAAsvG,IAAAvvG,OAAAC,SAAAqvG,IAAAtvG,OAAAC,SAAA,SAGA,SAIA,gBAAAyuG,EAAA/jE,GACA,IAAAnd,EAAAkhF,EAAAjvG,OACA,GAAA+tB,EAAA,cACA,IAKAoQ,EAAApjB,EAAAhD,EALAuN,EAAA,GACA8pF,EAAA,GACAW,EAAA,GAKA,GAAAtwG,EAAAuvG,WAAAvwE,KAAAwwE,GAAA,EACA,IAAAl0F,EAAA,EAAqBA,EAAAgT,EAAOhT,IAC5Bq0F,EAAAr0F,UAGA,IAAAA,EAAA,EAAqBA,EAAAgT,EAAOhT,IAC5Bq0F,EAAAr0F,GAAAgT,EAAA,EAAAhT,EAIA,IAAAi1F,EAAAjiF,EAGAyc,EAAA,EAAAwlE,EAGA,IAAAj1F,EAAAi1F,EAAA,EAAwBA,EAAA,GAAQ,CAEhC,GAAAxlE,KAAA,EAMA,OADA/+B,QAAAC,KAAA,qEACAw/B,EAAA6kE,EACAzqF,EAiBA,GAXA0qF,IADA7xE,EAAApjB,KACAojB,EAAA,GAIA6xE,IADAj1F,EAAAojB,EAAA,KACApjB,EAAA,GAIAi1F,IADAj4F,EAAAgD,EAAA,KACAhD,EAAA,GAGAo3F,EAAAF,EAAA9wE,EAAApjB,EAAAhD,EAAAi4F,EAAAZ,GAAA,CACA,IAAAj0F,EAAApR,EAAAqE,EAAAnD,EAAAF,EAYA,IATAoQ,EAAAi0F,EAAAjxE,GACAp0B,EAAAqlG,EAAAr0F,GACA3M,EAAAghG,EAAAr3F,GAGAuN,EAAAkY,KAAA,CAAAyxE,EAAA9zF,GAAA8zF,EAAAllG,GAAAklG,EAAA7gG,KACA2hG,EAAAvyE,KAAA,CAAA4xE,EAAAjxE,GAAAixE,EAAAr0F,GAAAq0F,EAAAr3F,KAGA9M,EAAA8P,EAAAhQ,EAAAgQ,EAAA,EAAkChQ,EAAAilG,EAAQ/kG,IAAAF,IAC1CqkG,EAAAnkG,GAAAmkG,EAAArkG,GAMAy/B,EAAA,IAHAwlE,GAOA,OAAA9kE,EAAA6kE,EACAzqF,GArIA,GAwIA2qF,iBAAA,SAAAhB,EAAAiB,GACA,SAAAC,EAAAlqF,GACA,IAAA/a,EAAA+a,EAAAjmB,OAEAkL,EAAA,GAAA+a,EAAA/a,EAAA,GAAAiD,OAAA8X,EAAA,KACAA,EAAA07B,MAOA,SAAAyuD,EAAAC,EAAAC,EAAAC,GAEA,OAAAF,EAAAzvG,IAAA0vG,EAAA1vG,EACAyvG,EAAAzvG,EAAA0vG,EAAA1vG,EACAyvG,EAAAzvG,GAAA2vG,EAAA3vG,GAAA2vG,EAAA3vG,GAAA0vG,EAAA1vG,EAEA0vG,EAAA1vG,GAAA2vG,EAAA3vG,GAAA2vG,EAAA3vG,GAAAyvG,EAAAzvG,EAGAyvG,EAAAx4F,EAAAy4F,EAAAz4F,EACAw4F,EAAAx4F,GAAA04F,EAAA14F,GAAA04F,EAAA14F,GAAAy4F,EAAAz4F,EAEAy4F,EAAAz4F,GAAA04F,EAAA14F,GAAA04F,EAAA14F,GAAAw4F,EAAAx4F,EAKA,SAAA24F,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAJ,EAAA9vG,EAAA6vG,EAAA7vG,EACAmwG,EAAAL,EAAA74F,EAAA44F,EAAA54F,EACAm5F,EAAAJ,EAAAhwG,EAAA+vG,EAAA/vG,EACAqwG,EAAAL,EAAA/4F,EAAA84F,EAAA94F,EACAq5F,EAAAT,EAAA7vG,EAAA+vG,EAAA/vG,EACAuwG,EAAAV,EAAA54F,EAAA84F,EAAA94F,EACAu5F,EAAAL,EAAAC,EAAAF,EAAAG,EACAI,EAAAN,EAAAG,EAAAJ,EAAAK,EAEA,GAAA1wG,KAAAia,IAAA02F,GAAA7wG,OAAAC,QAAA,CAEA,IAAA8wG,EAEA,GAAAF,EAAA,GACA,GAAAC,EAAA,GAAAA,EAAAD,EAAA,SAEA,IADAE,EAAAL,EAAAC,EAAAF,EAAAG,GACA,GAAAG,EAAAF,EAAA,aACW,CACX,GAAAC,EAAA,GAAAA,EAAAD,EAAA,SAEA,IADAE,EAAAL,EAAAC,EAAAF,EAAAG,GACA,GAAAG,EAAAF,EAAA,SAKA,OAAAE,EACA,OAAAT,GAAA,IAAAQ,OAAAD,EACA,CAAAX,GADA,GAIA,GAAAa,IAAAF,EACA,OAAAP,GAAA,IAAAQ,OAAAD,EACA,CAAAV,GADA,GAKA,OAAAW,EAAA,OAAAV,GACA,GAAAU,IAAAD,EAAA,OAAAR,GAEA,IAAAW,EAAAD,EAAAF,EACA,QACAxwG,EAAA6vG,EAAA7vG,EAAA2wG,EAAAT,EACAj5F,EAAA44F,EAAA54F,EAAA05F,EAAAR,IAIA,OAAAM,GAAAJ,EAAAC,IAAAF,EAAAG,EAAA,SAEA,IA0BAK,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EA3BAC,EAAA,IAAAlB,GAAA,IAAAC,EAEAkB,EAAA,IAAAjB,GAAA,IAAAC,EAGA,OAAAe,GAAAC,EACAxB,EAAA7vG,IAAA+vG,EAAA/vG,GAAA6vG,EAAA54F,IAAA84F,EAAA94F,EAAA,GAEA,CAAA44F,GAIAuB,EACA5B,EAAAO,EAAAC,EAAAH,GAEA,CAAAA,GAFA,GAMAwB,EACA7B,EAAAK,EAAAC,EAAAC,GAEA,CAAAA,GAFA,IASA,IAAAG,GAEAL,EAAA7vG,EAAA8vG,EAAA9vG,GACA4wG,EAAAf,EACAiB,EAAAjB,EAAA7vG,EACA6wG,EAAAf,EACAiB,EAAAjB,EAAA9vG,IAEA4wG,EAAAd,EACAgB,EAAAhB,EAAA9vG,EACA6wG,EAAAhB,EACAkB,EAAAlB,EAAA7vG,GAGA+vG,EAAA/vG,EAAAgwG,EAAAhwG,GACAgxG,EAAAjB,EACAmB,EAAAnB,EAAA/vG,EACAixG,EAAAjB,EACAmB,EAAAnB,EAAAhwG,IAEAgxG,EAAAhB,EACAkB,EAAAlB,EAAAhwG,EACAixG,EAAAlB,EACAoB,EAAApB,EAAA/vG,KAIA6vG,EAAA54F,EAAA64F,EAAA74F,GACA25F,EAAAf,EACAiB,EAAAjB,EAAA54F,EACA45F,EAAAf,EACAiB,EAAAjB,EAAA74F,IAEA25F,EAAAd,EACAgB,EAAAhB,EAAA74F,EACA45F,EAAAhB,EACAkB,EAAAlB,EAAA54F,GAGA84F,EAAA94F,EAAA+4F,EAAA/4F,GACA+5F,EAAAjB,EACAmB,EAAAnB,EAAA94F,EACAg6F,EAAAjB,EACAmB,EAAAnB,EAAA/4F,IAEA+5F,EAAAhB,EACAkB,EAAAlB,EAAA/4F,EACAg6F,EAAAlB,EACAoB,EAAApB,EAAA94F,IAIA65F,GAAAI,EACAH,EAAAG,EAAA,GAEAH,IAAAG,EACAjB,EAAA,GACA,CAAAe,GAGAD,GAAAI,EAAA,CAAAH,EAAAH,GACA,CAAAG,EAAAC,GAEAH,EAAAK,EAAA,GAEAL,IAAAK,EACAlB,EAAA,GACA,CAAAW,GAGAG,GAAAI,EAAA,CAAAP,EAAAC,GACA,CAAAD,EAAAK,IAKA,SAAAK,EAAAC,EAAAC,EAAAC,EAAA9B,GAGA,IAAA+B,EAAAF,EAAAxxG,EAAAuxG,EAAAvxG,EACA2xG,EAAAH,EAAAv6F,EAAAs6F,EAAAt6F,EACA26F,EAAAH,EAAAzxG,EAAAuxG,EAAAvxG,EACA6xG,EAAAJ,EAAAx6F,EAAAs6F,EAAAt6F,EACA66F,EAAAnC,EAAA3vG,EAAAuxG,EAAAvxG,EACA+xG,EAAApC,EAAA14F,EAAAs6F,EAAAt6F,EAEA+6F,EAAAN,EAAAG,EAAAF,EAAAC,EACAK,EAAAP,EAAAK,EAAAJ,EAAAG,EAEA,GAAAjyG,KAAAia,IAAAk4F,GAAAryG,OAAAC,QAAA,CAEA,IAAAsyG,EAAAJ,EAAAD,EAAAE,EAAAH,EAEA,OAAAI,EAAA,EAEAC,GAAA,GAAAC,GAAA,EAGAD,GAAA,GAAAC,GAAA,EAKA,OAAAD,EAAA,EAzMA1C,EAAAlB,GACAiB,EAAA6C,QAAA5C,GAkWA,IAVA,IAAAhqF,EACAC,EACAzI,EACAswB,EACApE,EACApoC,EACAuxG,EAAA,GAEAC,EAAAhE,EAAAzvC,SAEAx0D,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAwCgL,EAAAkoG,EAAQloG,IAChDlL,MAAAe,UAAA28B,KAAA6jB,MAAA4xD,EAAA/C,EAAAllG,IAKA,IAAAmb,EAAA,EAAAC,EAAA6sF,EAAAjzG,OAAwCmmB,EAAAC,EAAQD,SAGhD7lB,IAAA0yG,EAFAnpE,EAAAopE,EAAA9sF,GAAAvlB,EAAA,IAAAqyG,EAAA9sF,GAAAtO,IAGApM,QAAAC,KAAA,oCAAAm+B,EAAA1jB,GAGA6sF,EAAAnpE,GAAA1jB,EAIA,IAAAgtF,EAvKA,SAAAlE,EAAAiB,GACA,IAEAkD,EAFAC,EAAApE,EAAAzvC,SAIA,SAAA8zC,EAAAC,EAAAC,GAEA,IAAAC,EAAAJ,EAAArzG,OAAA,EACA0zG,EAAAH,EAAA,EACAG,EAAA,IAAAA,EAAAD,GACA,IAAAE,EAAAJ,EAAA,EACAI,EAAAF,IAAAE,EAAA,GACA,IAAAC,EAAA1B,EAAAmB,EAAAE,GAAAF,EAAAK,GAAAL,EAAAM,GAAAP,EAAAI,IAEA,IAAAI,EAEA,SAIA,IAAAC,EAAAT,EAAApzG,OAAA,EACA8zG,EAAAN,EAAA,EACAM,EAAA,IAAAA,EAAAD,GACA,IAAAE,EAAAP,EAAA,EAIA,OAHAO,EAAAF,IAAAE,EAAA,MACAH,EAAA1B,EAAAkB,EAAAI,GAAAJ,EAAAU,GAAAV,EAAAW,GAAAV,EAAAE,KAUA,SAAAS,EAAAC,EAAAC,GAEA,IAAAC,EAAAC,EAEA,IAAAD,EAAA,EAAwBA,EAAAd,EAAArzG,OAAqBm0G,IAI7C,GAHAC,EAAAD,EAAA,EACAC,GAAAf,EAAArzG,OACAwwG,EAAAyD,EAAAC,EAAAb,EAAAc,GAAAd,EAAAe,IAAA,GACAp0G,OAAA,WAGA,SAGA,IAAAq0G,EAAA,GAEA,SAAAC,EAAAL,EAAAC,GAEA,IAAAK,EAAAC,EAAAC,EAAAL,EAEA,IAAAG,EAAA,EAAyBA,EAAAF,EAAAr0G,OAA2Bu0G,IAGpD,IAFAC,EAAAtE,EAAAmE,EAAAE,IAEAE,EAAA,EAA0BA,EAAAD,EAAAx0G,OAAuBy0G,IAIjD,GAHAL,EAAAK,EAAA,EACAL,GAAAI,EAAAx0G,OACAwwG,EAAAyD,EAAAC,EAAAM,EAAAC,GAAAD,EAAAJ,IAAA,GACAp0G,OAAA,WAIA,SAeA,IAZA,IAAA00G,EACAC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAJAC,EAAA,GAMApqG,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAA0CgL,EAAAkoG,EAAQloG,IAClDqpG,EAAA72E,KAAAxyB,GAMA,IAHA,IAAAqqG,EAAA,EACAC,EAAA,EAAAjB,EAAAr0G,OAEAq0G,EAAAr0G,OAAA,IAGA,KAFAs1G,EAEA,GACA7pG,QAAAwvB,IAAA,6BAAAo5E,EAAAr0G,OAAA,kCACA,MAKA,IAAA20G,EAAAU,EAA0CV,EAAAtB,EAAArzG,OAA2B20G,IAAA,CAIrE,IAHAC,EAAAvB,EAAAsB,GACAD,GAAA,EAEA1pG,EAAA,EAA2BA,EAAAqpG,EAAAr0G,OAAuBgL,IAIlD,GAHA8pG,EAAAT,EAAArpG,QAGA1K,IAAA80G,EADAL,EAAAH,EAAAh0G,EAAA,IAAAg0G,EAAA/8F,EAAA,IAAAi9F,GACA,CACA1B,EAAAlD,EAAA4E,GAEA,QAAAS,EAAA,EAA8BA,EAAAnC,EAAApzG,OAAkBu1G,IAEhD,GADAV,EAAAzB,EAAAmC,GACAjC,EAAAqB,EAAAY,KACAvB,EAAAY,EAAAC,KACAP,EAAAM,EAAAC,GAAA,CACAH,EAAAa,EACAlB,EAAA1wE,OAAA34B,EAAA,GACAgqG,EAAA3B,EAAAvmG,MAAA,EAAA6nG,EAAA,GACAM,EAAA5B,EAAAvmG,MAAA6nG,GACAO,EAAA9B,EAAAtmG,MAAA4nG,GACAS,EAAA/B,EAAAtmG,MAAA,EAAA4nG,EAAA,GACArB,EAAA2B,EAAAx1C,OAAA01C,GAAA11C,OAAA21C,GAAA31C,OAAAy1C,GACAI,EAAAV,EAGA,MAGA,GAAAD,GAAA,QAEAU,EAAAL,IAAA,EAGA,GAAAL,GAAA,SAIA,OAAArB,EA+BAmC,CAAAvG,EAAAiB,GACAuF,EAAAh2G,EAAAuvG,WAAAE,YAAAiE,GAAA,GAIA,IAAAhtF,EAAA,EAAAC,EAAAqvF,EAAAz1G,OAAwCmmB,EAAAC,EAAQD,IAGhD,IAFA8nB,EAAAwnE,EAAAtvF,GAEAxI,EAAA,EAAmBA,EAAA,EAAOA,SAI1Brd,KAFAmB,EAAAuxG,EADAnpE,EAAAoE,EAAAtwB,GAAA/c,EAAA,IAAAqtC,EAAAtwB,GAAA9F,MAIAo2B,EAAAtwB,GAAAlc,GAKA,OAAAg0G,EAAAj2C,UAEAk2C,YAAA,SAAAC,GACA,OAAAl2G,EAAAuvG,WAAAvwE,KAAAk3E,GAAA,GAKA17E,GAAA,WAcA,gBAAAlvB,EAAAirB,EAAAC,EAAAC,GACA,OAdA,SAAAnrB,EAAAF,GACA,IAAAsxB,EAAA,EAAApxB,EACA,OAAAoxB,IAAAtxB,EAYA+qG,CAAA7qG,EAAAirB,GATA,SAAAjrB,EAAAF,GACA,YAAAE,KAAAF,EAQAgrG,CAAA9qG,EAAAkrB,GALA,SAAAlrB,EAAAF,GACA,OAAAE,IAAAF,EAIAirG,CAAA/qG,EAAAmrB,IAfA,GAmBA6/E,GAAA,WAoBA,gBAAAhrG,EAAAirB,EAAAC,EAAAC,EAAAC,GACA,OApBA,SAAAprB,EAAAF,GACA,IAAAsxB,EAAA,EAAApxB,EACA,OAAAoxB,MAAAtxB,EAkBAmrG,CAAAjrG,EAAAirB,GAfA,SAAAjrB,EAAAF,GACA,IAAAsxB,EAAA,EAAApxB,EACA,SAAAoxB,IAAApxB,EAAAF,EAaAorG,CAAAlrG,EAAAkrB,GAVA,SAAAlrB,EAAAF,GAEA,UADA,EAAAE,GACAA,IAAAF,EAQAqrG,CAAAnrG,EAAAmrB,GALA,SAAAnrB,EAAAF,GACA,OAAAE,MAAAF,EAIAsrG,CAAAprG,EAAAorB,IArBA,IA6DA12B,EAAA22G,MAAA,aAEA32G,EAAA22G,MAAAv1G,UAAA,CACAqJ,YAAAzK,EAAA22G,MAGAl6E,SAAA,SAAAnxB,GAEA,OADAU,QAAAC,KAAA,qDACA,MAIA2qG,WAAA,SAAAl4E,GACA,IAAApzB,EAAA7J,KAAAo1G,eAAAn4E,GACA,OAAAj9B,KAAAg7B,SAAAnxB,IAGAwrG,UAAA,SAAAC,GACAA,MAAA,GAGA,IAFA,IAAAvwF,EAAA,GAEAtF,EAAA,EAAqBA,GAAA61F,EAAgB71F,IACrCsF,EAAAuX,KAAAt8B,KAAAg7B,SAAAvb,EAAA61F,IAGA,OAAAvwF,GAGAwwF,gBAAA,SAAAD,GACAA,MAAA,GAGA,IAFA,IAAAvwF,EAAA,GAEAtF,EAAA,EAAqBA,GAAA61F,EAAgB71F,IACrCsF,EAAAuX,KAAAt8B,KAAAm1G,WAAA11F,EAAA61F,IAGA,OAAAvwF,GAGAqW,UAAA,WACA,IAAAo6E,EAAAx1G,KAAAy1G,aACA,OAAAD,IAAA12G,OAAA,IAGA22G,WAAA,SAAAH,GAGA,GAFAA,MAAAt1G,KAAA01G,qBAAA11G,KAAA01G,qBAAA,KAEA11G,KAAA21G,iBAAA31G,KAAA21G,gBAAA72G,SAAAw2G,EAAA,IAAAt1G,KAAAupC,YAEA,OAAAvpC,KAAA21G,gBAGA31G,KAAAupC,aAAA,EACA,IACAqsE,EAEAjsG,EAHA++B,EAAA,GAEAwc,EAAAllD,KAAAg7B,SAAA,GAEA66E,EAAA,EAGA,IAFAntE,EAAApM,KAAA,GAEA3yB,EAAA,EAAiBA,GAAA2rG,EAAgB3rG,IAEjCksG,IADAD,EAAA51G,KAAAg7B,SAAArxB,EAAA2rG,IACAp3F,WAAAgnC,GACAxc,EAAApM,KAAAu5E,GACA3wD,EAAA0wD,EAIA,OADA51G,KAAA21G,gBAAAjtE,EACAA,GAEAotE,iBAAA,WACA91G,KAAAupC,aAAA,EACAvpC,KAAAy1G,cAGAL,eAAA,SAAAn4E,EAAA/Y,GACA,IAGA6xF,EAHAC,EAAAh2G,KAAAy1G,aACAxwF,EAAA,EACAC,EAAA8wF,EAAAl3G,OAIAi3G,EADA7xF,GAGA+Y,EAAA+4E,EAAA9wF,EAAA,GASA,IAJA,IAEA+wF,EAFA78E,EAAA,EACAC,EAAAnU,EAAA,EAGAkU,GAAAC,GAKA,IAFA48E,EAAAD,EAFA/wF,EAAA1lB,KAAAiK,MAAA4vB,GAAAC,EAAAD,GAAA,IAEA28E,GAEA,EACA38E,EAAAnU,EAAA,MACS,MAAAgxF,EAAA,GAEA,CACT58E,EAAApU,EACA,MAHAoU,EAAApU,EAAA,EASA,GAAA+wF,EAFA/wF,EAAAoU,KAEA08E,EAEA,OADA9wF,GAAAC,EAAA,GAKA,IAAAgxF,EAAAF,EAAA/wF,GAOA,OADAA,GAFA8wF,EAAAG,IAHAF,EAAA/wF,EAAA,GACAixF,KAIAhxF,EAAA,IAOAixF,WAAA,SAAAtsG,GACA,IACAmpB,EAAAnpB,EADA,KAEAgxB,EAAAhxB,EAFA,KAIAmpB,EAAA,IAAAA,EAAA,GACA6H,EAAA,IAAAA,EAAA,GACA,IAAAu7E,EAAAp2G,KAAAg7B,SAAAhI,GAGA,OAFAhzB,KAAAg7B,SAAAH,GACA3vB,QAAA0B,IAAAwpG,GACA18F,aAEA28F,aAAA,SAAAp5E,GACA,IAAApzB,EAAA7J,KAAAo1G,eAAAn4E,GACA,OAAAj9B,KAAAm2G,WAAAtsG,KASAtL,EAAA22G,MAAAx1E,OAAA,SAAA12B,EAAAstG,GAIA,OAHAttG,EAAArJ,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACAqJ,EAAArJ,UAAAqJ,cACAA,EAAArJ,UAAAq7B,SAAAs7E,EACAttG,GAcAzK,EAAAg4G,UAAA,WACAv2G,KAAAw2G,OAAA,GACAx2G,KAAAy2G,WAAA,GAGAl4G,EAAAg4G,UAAA52G,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WAAA,CACAqJ,YAAAzK,EAAAg4G,UACAhqG,IAAA,SAAAmqG,GACA12G,KAAAw2G,OAAAl6E,KAAAo6E,IAEAC,UAAA,WAEA,IAAAC,EAAA52G,KAAAw2G,OAAA,GAAAx7E,SAAA,GACA67E,EAAA72G,KAAAw2G,OAAAx2G,KAAAw2G,OAAA13G,OAAA,GAAAk8B,SAAA,GAEA47E,EAAA3pG,OAAA4pG,IACA72G,KAAAw2G,OAAAl6E,KAAA,IAAA/9B,EAAAu4G,UAAAD,EAAAD,KAUA57E,SAAA,SAAAnxB,GAKA,IAJA,IAAA4V,EAAA5V,EAAA7J,KAAAo7B,YACA27E,EAAA/2G,KAAAg3G,kBACA/xF,EAAA,EAEAA,EAAA8xF,EAAAj4G,QAAA,CACA,GAAAi4G,EAAA9xF,IAAAxF,EAAA,CACA,IAAAqS,EAAAilF,EAAA9xF,GAAAxF,EACAi3F,EAAA12G,KAAAw2G,OAAAvxF,GACAgyF,EAAAP,EAAAt7E,YACA6B,EAAA,IAAAg6E,EAAA,IAAAnlF,EAAAmlF,EACA,OAAAP,EAAAvB,WAAAl4E,GAGAhY,IAGA,aAKAmW,UAAA,WACA,IAAA87E,EAAAl3G,KAAAg3G,kBACA,OAAAE,IAAAp4G,OAAA,IAGAg3G,iBAAA,WACA91G,KAAAupC,aAAA,EACAvpC,KAAAm3G,aAAA,KACAn3G,KAAAy1G,cAIAuB,gBAAA,WAEA,GAAAh3G,KAAAm3G,cAAAn3G,KAAAm3G,aAAAr4G,SAAAkB,KAAAw2G,OAAA13G,OACA,OAAAkB,KAAAm3G,aAQA,IAHA,IAAA3B,EAAA,GACA4B,EAAA,EAEAnyF,EAAA,EAAAjb,EAAAhK,KAAAw2G,OAAA13G,OAA6CmmB,EAAAjb,EAAOib,IACpDmyF,GAAAp3G,KAAAw2G,OAAAvxF,GAAAmW,YACAo6E,EAAAl5E,KAAA86E,GAIA,OADAp3G,KAAAm3G,aAAA3B,EACAA,GAEAD,gBAAA,SAAAD,GACAA,MAAA,IAGA,IAFA,IAAAvwF,EAAA,GAEAE,EAAA,EAAqBA,GAAAqwF,EAAgBrwF,IACrCF,EAAAuX,KAAAt8B,KAAAg7B,SAAA/V,EAAAqwF,IAOA,OAJAt1G,KAAAy2G,WACA1xF,EAAAuX,KAAAvX,EAAA,IAGAA,GAEAswF,UAAA,SAAAC,GACAA,KAAA,GAIA,IAHA,IACApwD,EADAngC,EAAA,GAGAE,EAAA,EAAAuxF,EAAAx2G,KAAAw2G,OAA2CvxF,EAAAuxF,EAAA13G,OAAmBmmB,IAK9D,IAJA,IAAAyxF,EAAAF,EAAAvxF,GACAoyF,EAAAX,aAAAn4G,EAAA+4G,aAAA,EAAAhC,EAAAoB,aAAAn4G,EAAAu4G,UAAA,EAAAJ,aAAAn4G,EAAAg5G,YAAAjC,EAAAoB,EAAA3xF,OAAAjmB,OAAAw2G,EACAb,EAAAiC,EAAArB,UAAAgC,GAEApuF,EAAA,EAAuBA,EAAAwrF,EAAA31G,OAAgBmqB,IAAA,CACvC,IAAAzE,EAAAiwF,EAAAxrF,GACAi8B,KAAAj4C,OAAAuX,KAEAO,EAAAuX,KAAA9X,GACA0gC,EAAA1gC,GAQA,OAJAxkB,KAAAy2G,WAAA1xF,EAAAjmB,OAAA,IAAAimB,IAAAjmB,OAAA,GAAAmO,OAAA8X,EAAA,KACAA,EAAAuX,KAAAvX,EAAA,IAGAA,GAOAyyF,qBAAA,SAAAlC,GACA,IAAAb,EAAAz0G,KAAAq1G,UAAAC,GACA,OAAAt1G,KAAAy3G,eAAAhD,IAGAiD,2BAAA,SAAApC,GACA,IAAAb,EAAAz0G,KAAAu1G,gBAAAD,GACA,OAAAt1G,KAAAy3G,eAAAhD,IAEAgD,eAAA,SAAA1yF,GAGA,IAFA,IAAAkC,EAAA,IAAA1oB,EAAA2oB,SAEAjC,EAAA,EAAAjb,EAAA+a,EAAAjmB,OAAwCmmB,EAAAjb,EAAOib,IAAA,CAC/C,IAAAT,EAAAO,EAAAE,GACAgC,EAAAE,SAAAmV,KAAA,IAAA/9B,EAAA+a,QAAAkL,EAAA9kB,EAAA8kB,EAAA7N,EAAA6N,EAAA5N,GAAA,IAGA,OAAAqQ,KASA1oB,EAAA89D,KAAA,SAAA50C,GACAznB,KAAAynB,QAGA5nB,OAAAM,OAAA5B,EAAA89D,KAAA18D,UAAA,CACAg4G,eAAA,SAAAz7C,EAAAnxD,EAAAuqG,GAgBA,SAAAsC,EAAA1qG,EAAAgiB,EAAA7hB,GACA,IAAAwqG,EAAApwF,EAAAqwF,OAAA5qG,IAAAua,EAAAqwF,OAAA,KACA,GAAAD,EAAA,CACA,IAIAn4G,EAAAiX,EAAAohG,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAJAh3D,EAAA,IAAAhjD,EAAAi6G,UACA/D,EAAA,GACA17E,EAAAx6B,EAAAuvG,WAAA/0E,GACA87E,EAAAt2G,EAAAuvG,WAAA+G,GAGA,GAAAgD,EAAAp7D,EAGA,IAFA,IAAAg8D,EAAAZ,EAAAa,iBAAAb,EAAAa,eAAAb,EAAAp7D,EAAAlkB,MAAA,MAEAtT,EAAA,EAAAjb,EAAAyuG,EAAA35G,OAA6CmmB,EAAAjb,GAAO,CAGpD,OAFAyuG,EAAAxzF,MAGA,QAEAvlB,EAAA+4G,EAAAxzF,KAAAiK,EAAA7hB,EACAsJ,EAAA8hG,EAAAxzF,KAAAiK,EACAqyB,EAAAo3D,OAAAj5G,EAAAiX,GACA,MAEA,QAEAjX,EAAA+4G,EAAAxzF,KAAAiK,EAAA7hB,EACAsJ,EAAA8hG,EAAAxzF,KAAAiK,EACAqyB,EAAAq3D,OAAAl5G,EAAAiX,GACA,MAEA,QASA,GAPAohG,EAAAU,EAAAxzF,KAAAiK,EAAA7hB,EACA2qG,EAAAS,EAAAxzF,KAAAiK,EACAipF,EAAAM,EAAAxzF,KAAAiK,EAAA7hB,EACA+qG,EAAAK,EAAAxzF,KAAAiK,EACAqyB,EAAAs3D,iBAAAV,EAAAC,EAAAL,EAAAC,GACAO,EAAA9D,IAAA31G,OAAA,GAEA,CACAm5G,EAAAM,EAAA74G,EACAw4G,EAAAK,EAAA5hG,EAEA,QAAA0mB,EAAA,EAAkCA,GAAAi4E,EAAiBj4E,IAAA,CAEnDtE,EADAlvB,EAAAwzB,EAAAi4E,EACA2C,EAAAE,EAAAJ,GACAh/E,EAAAlvB,EAAAquG,EAAAE,EAAAJ,IAIA,MAEA,QAWA,GATAD,EAAAU,EAAAxzF,KAAAiK,EAAA7hB,EACA2qG,EAAAS,EAAAxzF,KAAAiK,EACAipF,EAAAM,EAAAxzF,KAAAiK,EAAA7hB,EACA+qG,EAAAK,EAAAxzF,KAAAiK,EACAmpF,EAAAI,EAAAxzF,KAAAiK,EAAA7hB,EACAirG,EAAAG,EAAAxzF,KAAAiK,EACAqyB,EAAAu3D,cAAAX,EAAAC,EAAAC,EAAAC,EAAAP,EAAAC,GACAO,EAAA9D,IAAA31G,OAAA,GAEA,CACAm5G,EAAAM,EAAA74G,EACAw4G,EAAAK,EAAA5hG,EAEA,IAAA0mB,EAAA,EAAkCA,GAAAi4E,EAAiBj4E,IAAA,CACnD,IAAAxzB,EACAgrG,EADAhrG,EAAAwzB,EAAAi4E,EACA2C,EAAAE,EAAAE,EAAAN,GACAlD,EAAAhrG,EAAAquG,EAAAE,EAAAE,EAAAN,MASA,OACA3qG,OAAAwqG,EAAAkB,GAAA7pF,EACAqyB,cAKAniD,IAAA2L,MAAA,UACA3L,IAAAk2G,MAAA,GAKA,IAJA,IAAA7tF,EAAAznB,KAAAynB,KACA48B,EAxGA,SAAA6X,GAMA,IALA,IAAA5jC,EAAA0gF,OAAA98C,GAAA3jC,MAAA,IACArJ,EAAAnkB,EAAA0c,EAAA4vF,WACAhqG,EAAA,EACAg3C,EAAA,GAEAp/B,EAAA,EAAuBA,EAAAqT,EAAAx5B,OAAkBmmB,IAAA,CACzC,IAAAg0F,EAAArB,EAAAt/E,EAAArT,GAAAiK,EAAA7hB,GACAA,GAAA4rG,EAAA5rG,OACAg3C,EAAA/nB,KAAA28E,EAAA13D,MAGA,OAAA8C,EA4FA60D,CAAAh9C,GACAi9C,EAAA,GAEAxvG,EAAA,EAAA4qF,EAAAlwC,EAAAvlD,OAAwC6K,EAAA4qF,EAAQ5qF,IAChD/K,MAAAe,UAAA28B,KAAA6jB,MAAAg5D,EAAA90D,EAAA16C,GAAAyvG,YAGA,OAAAD,KAUA56G,EAAA86G,KAAA,SAAAt0F,GACAxmB,EAAAg4G,UAAA31G,KAAAZ,MACAA,KAAAs5G,aAAA,IAAA/6G,EAAAme,QAEAqI,GACA/kB,KAAAu5G,WAAAx0F,IAIAxmB,EAAA86G,KAAA15G,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAAg4G,UAAA52G,WAAA,CACAqJ,YAAAzK,EAAA86G,KAGAE,WAAA,SAAArvE,GACAlqC,KAAA24G,OAAAzuE,EAAA,GAAAxqC,EAAAwqC,EAAA,GAAAvzB,GAEA,QAAAsO,EAAA,EAAAjb,EAAAkgC,EAAAprC,OAAyCmmB,EAAAjb,EAAOib,IAChDjlB,KAAA44G,OAAA1uE,EAAAjlB,GAAAvlB,EAAAwqC,EAAAjlB,GAAAtO,IAGAgiG,OAAA,SAAAj5G,EAAAiX,GACA3W,KAAAs5G,aAAAxwG,IAAApJ,EAAAiX,IAEAiiG,OAAA,SAAAl5G,EAAAiX,GACA,IAAA+/F,EAAA,IAAAn4G,EAAAu4G,UAAA92G,KAAAs5G,aAAApuG,QAAA,IAAA3M,EAAAme,QAAAhd,EAAAiX,IACA3W,KAAAw2G,OAAAl6E,KAAAo6E,GACA12G,KAAAs5G,aAAAxwG,IAAApJ,EAAAiX,IAEAkiG,iBAAA,SAAAW,EAAAC,EAAApL,EAAAC,GACA,IAAAoI,EAAA,IAAAn4G,EAAAm7G,qBAAA15G,KAAAs5G,aAAApuG,QAAA,IAAA3M,EAAAme,QAAA88F,EAAAC,GAAA,IAAAl7G,EAAAme,QAAA2xF,EAAAC,IACAtuG,KAAAw2G,OAAAl6E,KAAAo6E,GACA12G,KAAAs5G,aAAAxwG,IAAAulG,EAAAC,IAEAwK,cAAA,SAAAa,EAAAC,EAAAC,EAAAC,EAAAzL,EAAAC,GACA,IAAAoI,EAAA,IAAAn4G,EAAAw7G,iBAAA/5G,KAAAs5G,aAAApuG,QAAA,IAAA3M,EAAAme,QAAAi9F,EAAAC,GAAA,IAAAr7G,EAAAme,QAAAm9F,EAAAC,GAAA,IAAAv7G,EAAAme,QAAA2xF,EAAAC,IACAtuG,KAAAw2G,OAAAl6E,KAAAo6E,GACA12G,KAAAs5G,aAAAxwG,IAAAulG,EAAAC,IAEA0L,WAAA,SAAAvF,GAGA,IAAAwF,EAAA,CAAAj6G,KAAAs5G,aAAApuG,SAAAozD,OAAAm2C,GACAiC,EAAA,IAAAn4G,EAAAg5G,YAAA0C,GACAj6G,KAAAw2G,OAAAl6E,KAAAo6E,GACA12G,KAAAs5G,aAAApwG,KAAAurG,IAAA31G,OAAA,KAEAyjE,IAAA,SAAA8rC,EAAAC,EAAA4L,EAAAC,EAAAC,EAAAC,GACA,IAAAx+F,EAAA7b,KAAAs5G,aAAA55G,EACAoc,EAAA9b,KAAAs5G,aAAA3iG,EACA3W,KAAAs6G,OAAAjM,EAAAxyF,EAAAyyF,EAAAxyF,EAAAo+F,EAAAC,EAAAC,EAAAC,IAEAC,OAAA,SAAAjM,EAAAC,EAAA4L,EAAAC,EAAAC,EAAAC,GACAr6G,KAAAu6G,WAAAlM,EAAAC,EAAA4L,IAAAC,EAAAC,EAAAC,IAEAG,QAAA,SAAAnM,EAAAC,EAAAmM,EAAAC,EAAAP,EAAAC,EAAAC,EAAAM,GACA,IAAA9+F,EAAA7b,KAAAs5G,aAAA55G,EACAoc,EAAA9b,KAAAs5G,aAAA3iG,EACA3W,KAAAu6G,WAAAlM,EAAAxyF,EAAAyyF,EAAAxyF,EAAA2+F,EAAAC,EAAAP,EAAAC,EAAAC,EAAAM,IAEAJ,WAAA,SAAAlM,EAAAC,EAAAmM,EAAAC,EAAAP,EAAAC,EAAAC,EAAAM,GACA,IAAAjE,EAAA,IAAAn4G,EAAA+4G,aAAAjJ,EAAAC,EAAAmM,EAAAC,EAAAP,EAAAC,EAAAC,EAAAM,GAEA,GAAA36G,KAAAw2G,OAAA13G,OAAA,GAEA,IAAA87G,EAAAlE,EAAA17E,SAAA,GAEA4/E,EAAA3tG,OAAAjN,KAAAs5G,eACAt5G,KAAA44G,OAAAgC,EAAAl7G,EAAAk7G,EAAAjkG,GAIA3W,KAAAw2G,OAAAl6E,KAAAo6E,GACA,IAAAmE,EAAAnE,EAAA17E,SAAA,GACAh7B,KAAAs5G,aAAApwG,KAAA2xG,MAIAt8G,EAAAi6G,UAAA,WACAx4G,KAAA86G,SAAA,GACA96G,KAAA+6G,YAAA,MAGAx8G,EAAAi6G,UAAA74G,UAAA,CACAg5G,OAAA,SAAAj5G,EAAAiX,GACA3W,KAAA+6G,YAAA,IAAAx8G,EAAA86G,KACAr5G,KAAA86G,SAAAx+E,KAAAt8B,KAAA+6G,aACA/6G,KAAA+6G,YAAApC,OAAAj5G,EAAAiX,IAEAiiG,OAAA,SAAAl5G,EAAAiX,GACA3W,KAAA+6G,YAAAnC,OAAAl5G,EAAAiX,IAEAkiG,iBAAA,SAAAW,EAAAC,EAAApL,EAAAC,GACAtuG,KAAA+6G,YAAAlC,iBAAAW,EAAAC,EAAApL,EAAAC,IAEAwK,cAAA,SAAAa,EAAAC,EAAAC,EAAAC,EAAAzL,EAAAC,GACAtuG,KAAA+6G,YAAAjC,cAAAa,EAAAC,EAAAC,EAAAC,EAAAzL,EAAAC,IAEA0L,WAAA,SAAAvF,GACAz0G,KAAA+6G,YAAAf,WAAAvF,IAEA2E,SAAA,SAAA4B,EAAAC,GACA,SAAAC,EAAAC,GAGA,IAFA,IAAAhC,EAAA,GAEAl0F,EAAA,EAAAjb,EAAAmxG,EAAAr8G,OAA8CmmB,EAAAjb,EAAOib,IAAA,CACrD,IAAAm2F,EAAAD,EAAAl2F,GACAo2F,EAAA,IAAA98G,EAAA+8G,MACAD,EAAA7E,OAAA4E,EAAA5E,OACA2C,EAAA78E,KAAA++E,GAGA,OAAAlC,EAGA,SAAAoC,EAAAC,EAAAC,GAQA,IAPA,IAAAC,EAAAD,EAAA38G,OAKA68G,GAAA,EAEAhyG,EAAA+xG,EAAA,EAAA9xG,EAAA,EAAwCA,EAAA8xG,EAAa/xG,EAAAC,IAAA,CACrD,IAAAgyG,EAAAH,EAAA9xG,GACAkyG,EAAAJ,EAAA7xG,GACAkyG,EAAAD,EAAAn8G,EAAAk8G,EAAAl8G,EACAq8G,EAAAF,EAAAllG,EAAAilG,EAAAjlG,EAEA,GAAApX,KAAAia,IAAAuiG,GAAA18G,OAAAC,QAAA,CASA,GAPAy8G,EAAA,IACAH,EAAAH,EAAA7xG,GACAkyG,KACAD,EAAAJ,EAAA9xG,GACAoyG,MAGAP,EAAA7kG,EAAAilG,EAAAjlG,GAAA6kG,EAAA7kG,EAAAklG,EAAAllG,EAAA,SAEA,GAAA6kG,EAAA7kG,IAAAilG,EAAAjlG,GACA,GAAA6kG,EAAA97G,IAAAk8G,EAAAl8G,EAAA,aAEa,CACb,IAAAs8G,EAAAD,GAAAP,EAAA97G,EAAAk8G,EAAAl8G,GAAAo8G,GAAAN,EAAA7kG,EAAAilG,EAAAjlG,GACA,OAAAqlG,EAAA,SAEA,GAAAA,EAAA,WACAL,UAEW,CAEX,GAAAH,EAAA7kG,IAAAilG,EAAAjlG,EAAA,SAGA,GAAAklG,EAAAn8G,GAAA87G,EAAA97G,GAAA87G,EAAA97G,GAAAk8G,EAAAl8G,GAAAk8G,EAAAl8G,GAAA87G,EAAA97G,GAAA87G,EAAA97G,GAAAm8G,EAAAn8G,EAAA,UAKA,OAAAi8G,EAGA,IAAAnH,EAAAj2G,EAAAuvG,WAAA0G,YACAsG,EAAA96G,KAAA86G,SACA,OAAAA,EAAAh8G,OAAA,SACA,QAAAm8G,EAAA,OAAAC,EAAAJ,GACA,IAAAmB,EACAb,EACAC,EACAlC,EAAA,GAEA,OAAA2B,EAAAh8G,OAKA,OAJAs8G,EAAAN,EAAA,IACAO,EAAA,IAAA98G,EAAA+8G,OACA9E,OAAA4E,EAAA5E,OACA2C,EAAA78E,KAAA++E,GACAlC,EAGA,IAAA+C,GAAA1H,EAAAsG,EAAA,GAAAzF,aACA6G,EAAAlB,GAAAkB,IAEA,IAIAC,EA2EAC,EA/EAC,EAAA,GACAC,EAAA,GACAC,EAAA,GACAC,EAAA,EAEAF,EAAAE,QAAAp9G,EACAm9G,EAAAC,GAAA,GAEA,QAAAv3F,EAAA,EAAAjb,EAAA8wG,EAAAh8G,OAA0CmmB,EAAAjb,EAAOib,IAGjDg3F,EAAAzH,EADA2H,GADAf,EAAAN,EAAA71F,IACAowF,cAEA4G,EAAAjB,GAAAiB,OAGAC,GAAAI,EAAAE,QACAF,EAAAE,GAAA,CACAzyG,EAAA,IAAAxL,EAAA+8G,MACA3xG,EAAAwyG,GAEAG,EAAAE,GAAAzyG,EAAAysG,OAAA4E,EAAA5E,OACA0F,GAAAM,IACAD,EAAAC,GAAA,IAEAD,EAAAC,GAAAlgF,KAAA,CACAxyB,EAAAsxG,EACAzxG,EAAAwyG,EAAA,KAMA,IAAAG,EAAA,UAAApB,EAAAJ,GAEA,GAAAwB,EAAAx9G,OAAA,GAIA,IAHA,IAAA29G,GAAA,EACAC,EAAA,GAEAzJ,EAAA,EAAA0J,EAAAL,EAAAx9G,OAAmDm0G,EAAA0J,EAAa1J,IAChEoJ,EAAApJ,GAAA,GAGA,IAAAA,EAAA,EAAA0J,EAAAL,EAAAx9G,OAAmDm0G,EAAA0J,EAAa1J,IAGhE,IAFA,IAAA2J,EAAAL,EAAAtJ,GAEAM,EAAA,EAA4BA,EAAAqJ,EAAA99G,OAAmBy0G,IAAA,CAI/C,IAHA,IAAAsJ,EAAAD,EAAArJ,GACAuJ,GAAA,EAEAC,EAAA,EAA+BA,EAAAT,EAAAx9G,OAA0Bi+G,IACzDxB,EAAAsB,EAAAlzG,EAAA2yG,EAAAS,GAAApzG,KACAspG,IAAA8J,GAAAL,EAAApgF,KAAA,CACA0gF,MAAA/J,EACAgK,IAAAF,EACA7K,KAAAqB,IAGAuJ,GACAA,GAAA,EACAT,EAAAU,GAAAzgF,KAAAugF,IAEAJ,GAAA,GAKAK,GACAT,EAAApJ,GAAA32E,KAAAugF,GAMAH,EAAA59G,OAAA,IAEA29G,IAAAF,EAAAF,IAMAp3F,EAAA,UAAAC,EAAAo3F,EAAAx9G,OAA4CmmB,EAAAC,EAAQD,IAAA,CACpDo2F,EAAAiB,EAAAr3F,GAAAlb,EACAovG,EAAA78E,KAAA++E,GAGA,QAAApyF,EAAA,EAAA+jB,GAFAovE,EAAAG,EAAAt3F,IAEAnmB,OAA6CmqB,EAAA+jB,EAAQ/jB,IACrDoyF,EAAArM,MAAA1yE,KAAA8/E,EAAAnzF,GAAAnf,GAKA,OAAAqvG,IAeA56G,EAAA+8G,MAAA,WACA/8G,EAAA86G,KAAAl5D,MAAAngD,KAAAQ,WACAR,KAAAgvG,MAAA,IAGAzwG,EAAA+8G,MAAA37G,UAAAE,OAAAM,OAAAN,OAAA6/B,OAAAnhC,EAAA86G,KAAA15G,WAAA,CACAqJ,YAAAzK,EAAA+8G,MAEA4B,QAAA,SAAAvsD,GACA,WAAApyD,EAAA4+G,gBAAAn9G,KAAA2wD,IAGAysD,aAAA,SAAAzsD,GACA,WAAApyD,EAAA8+G,cAAAr9G,KAAA2wD,IAEA2sD,eAAA,SAAAhI,GAGA,IAFA,IAAAiI,EAAA,GAEAt4F,EAAA,EAAAjb,EAAAhK,KAAAgvG,MAAAlwG,OAA4CmmB,EAAAjb,EAAOib,IACnDs4F,EAAAt4F,GAAAjlB,KAAAgvG,MAAA/pF,GAAAowF,UAAAC,GAGA,OAAAiI,GAGAC,iBAAA,SAAAlI,GACA,OACAnD,MAAAnyG,KAAAq1G,UAAAC,GACAtG,MAAAhvG,KAAAs9G,eAAAhI,KAGAmI,cAAA,SAAAnI,GACA,OAAAt1G,KAAAw9G,iBAAAlI,MAQA/2G,EAAAu4G,UAAA,SAAA39F,EAAAsF,GACAze,KAAAmZ,KACAnZ,KAAAye,MAGAlgB,EAAAu4G,UAAAn3G,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACApB,EAAAu4G,UAAAn3G,UAAAqJ,YAAAzK,EAAAu4G,UAEAv4G,EAAAu4G,UAAAn3G,UAAAq7B,SAAA,SAAAnxB,GACA,OAAAA,EACA,OAAA7J,KAAAye,GAAAvT,QAGA,IAAAsZ,EAAAxkB,KAAAye,GAAAvT,QAAA0B,IAAA5M,KAAAmZ,IAEA,OADAqL,EAAA1X,eAAAjD,GAAA0C,IAAAvM,KAAAmZ,IACAqL,GAIAjmB,EAAAu4G,UAAAn3G,UAAAw1G,WAAA,SAAAl4E,GACA,OAAAj9B,KAAAg7B,SAAAiC,IAGA1+B,EAAAu4G,UAAAn3G,UAAAw2G,WAAA,SAAAtsG,GAEA,OADA7J,KAAAye,GAAAvT,QAAA0B,IAAA5M,KAAAmZ,IACAO,aAQAnb,EAAAm7G,qBAAA,SAAA3nF,EAAA5Y,EAAAsF,GACAze,KAAA+xB,KACA/xB,KAAAmZ,KACAnZ,KAAAye,MAGAlgB,EAAAm7G,qBAAA/5G,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACApB,EAAAm7G,qBAAA/5G,UAAAqJ,YAAAzK,EAAAm7G,qBAEAn7G,EAAAm7G,qBAAA/5G,UAAAq7B,SAAA,SAAAnxB,GACA,IAAAkvB,EAAAx6B,EAAAuvG,WAAA/0E,GACA,WAAAx6B,EAAAme,QAAAqc,EAAAlvB,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,GAAAq5B,EAAAlvB,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,KAGApY,EAAAm7G,qBAAA/5G,UAAAw2G,WAAA,SAAAtsG,GACA,IAAA0jG,EAAAhvG,EAAA+uG,WAAAC,uBACA,WAAAhvG,EAAAme,QAAA6wF,EAAA1jG,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,GAAA6tG,EAAA1jG,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,IAAA+C,aAQAnb,EAAAw7G,iBAAA,SAAAhoF,EAAA5Y,EAAAsF,EAAAkc,GACA36B,KAAA+xB,KACA/xB,KAAAmZ,KACAnZ,KAAAye,KACAze,KAAA26B,MAGAp8B,EAAAw7G,iBAAAp6G,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACApB,EAAAw7G,iBAAAp6G,UAAAqJ,YAAAzK,EAAAw7G,iBAEAx7G,EAAAw7G,iBAAAp6G,UAAAq7B,SAAA,SAAAnxB,GACA,IAAAgrG,EAAAt2G,EAAAuvG,WAAA+G,GACA,WAAAt2G,EAAAme,QAAAm4F,EAAAhrG,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,EAAAM,KAAA26B,GAAAj7B,GAAAm1G,EAAAhrG,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,EAAA3W,KAAA26B,GAAAhkB,KAGApY,EAAAw7G,iBAAAp6G,UAAAw2G,WAAA,SAAAtsG,GACA,IAAA2jG,EAAAjvG,EAAA+uG,WAAAE,mBACA,WAAAjvG,EAAAme,QAAA8wF,EAAA3jG,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,EAAAM,KAAA26B,GAAAj7B,GAAA8tG,EAAA3jG,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,EAAA3W,KAAA26B,GAAAhkB,IAAA+C,aAQAnb,EAAAg5G,YAAA,SAAAxyF,GAGA/kB,KAAA+kB,YAAA3lB,GAAA2lB,EAAA,GAAAA,GAGAxmB,EAAAg5G,YAAA53G,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACApB,EAAAg5G,YAAA53G,UAAAqJ,YAAAzK,EAAAg5G,YAEAh5G,EAAAg5G,YAAA53G,UAAAq7B,SAAA,SAAAnxB,GACA,IAAAkb,EAAA/kB,KAAA+kB,OACAP,GAAAO,EAAAjmB,OAAA,GAAA+K,EACAswB,EAAA56B,KAAAiK,MAAAgb,GACA4V,EAAA5V,EAAA2V,EACAujF,EAAA34F,EAAA,IAAAoV,MAAA,GACAwjF,EAAA54F,EAAAoV,GACAyjF,EAAA74F,EAAAoV,EAAApV,EAAAjmB,OAAA,EAAAimB,EAAAjmB,OAAA,EAAAq7B,EAAA,GACA0jF,EAAA94F,EAAAoV,EAAApV,EAAAjmB,OAAA,EAAAimB,EAAAjmB,OAAA,EAAAq7B,EAAA,GACAS,EAAAr8B,EAAA+uG,WAAA1yE,YACA,WAAAr8B,EAAAme,QAAAke,EAAA8iF,EAAAh+G,EAAAi+G,EAAAj+G,EAAAk+G,EAAAl+G,EAAAm+G,EAAAn+G,EAAA06B,GAAAQ,EAAA8iF,EAAA/mG,EAAAgnG,EAAAhnG,EAAAinG,EAAAjnG,EAAAknG,EAAAlnG,EAAAyjB,KAQA77B,EAAA+4G,aAAA,SAAAjJ,EAAAC,EAAAmM,EAAAC,EAAAP,EAAAC,EAAAC,EAAAM,GACA36G,KAAAquG,KACAruG,KAAAsuG,KACAtuG,KAAAy6G,UACAz6G,KAAA06G,UACA16G,KAAAm6G,cACAn6G,KAAAo6G,YACAp6G,KAAAq6G,aACAr6G,KAAA26G,aAAA,GAGAp8G,EAAA+4G,aAAA33G,UAAAE,OAAA6/B,OAAAnhC,EAAA22G,MAAAv1G,WACApB,EAAA+4G,aAAA33G,UAAAqJ,YAAAzK,EAAA+4G,aAEA/4G,EAAA+4G,aAAA33G,UAAAq7B,SAAA,SAAAnxB,GAKA,IAJA,IAAAi0G,EAAA,EAAAv+G,KAAA0e,GACA8/F,EAAA/9G,KAAAo6G,UAAAp6G,KAAAm6G,YACA6D,EAAAz+G,KAAAia,IAAAukG,GAAA1+G,OAAAC,QAEAy+G,EAAA,GACAA,GAAAD,EAGA,KAAAC,EAAAD,GACAC,GAAAD,EAGAC,EAAA1+G,OAAAC,UAEAy+G,EADAC,EACA,EAEAF,IAIA,IAAA99G,KAAAq6G,YAAA2D,IACAD,IAAAD,EACAC,GAAAD,EAEAC,GAAAD,GAIA,IAAA3lG,EAAAnY,KAAAm6G,YAAAtwG,EAAAk0G,EACAr+G,EAAAM,KAAAquG,GAAAruG,KAAAy6G,QAAAl7G,KAAAkY,IAAAU,GACAxB,EAAA3W,KAAAsuG,GAAAtuG,KAAA06G,QAAAn7G,KAAAsY,IAAAM,GAEA,OAAAnY,KAAA26G,UAAA,CACA,IAAAljG,EAAAlY,KAAAkY,IAAAzX,KAAA26G,WACA9iG,EAAAtY,KAAAsY,IAAA7X,KAAA26G,WACA/qF,EAAAlwB,EAAAM,KAAAquG,GACAx+E,EAAAlZ,EAAA3W,KAAAsuG,GAEA5uG,EAAAkwB,EAAAnY,EAAAoY,EAAAhY,EAAA7X,KAAAquG,GACA13F,EAAAiZ,EAAA/X,EAAAgY,EAAApY,EAAAzX,KAAAsuG,GAGA,WAAA/vG,EAAAme,QAAAhd,EAAAiX,IAQApY,EAAA0/G,SAAA,SAAA5P,EAAAC,EAAA4L,EAAAC,EAAAC,EAAAC,GACA97G,EAAA+4G,aAAA12G,KAAAZ,KAAAquG,EAAAC,EAAA4L,IAAAC,EAAAC,EAAAC,IAGA97G,EAAA0/G,SAAAt+G,UAAAE,OAAA6/B,OAAAnhC,EAAA+4G,aAAA33G,WACApB,EAAA0/G,SAAAt+G,UAAAqJ,YAAAzK,EAAA0/G,SAMA1/G,EAAA2/G,WAAA3/G,EAAA22G,MAAAx1E,OAAA,SAAAvmB,EAAAsF,GACAze,KAAAmZ,KACAnZ,KAAAye,MACG,SAAA5U,GACH,OAAAA,EACA,OAAA7J,KAAAye,GAAAvT,QAGA,IAAAkW,EAAA,IAAA7iB,EAAA+a,QAKA,OAJA8H,EAAAjE,WAAAnd,KAAAye,GAAAze,KAAAmZ,IAEAiI,EAAAtU,eAAAjD,GACAuX,EAAA7U,IAAAvM,KAAAmZ,IACAiI,IAOA7iB,EAAA4/G,sBAAA5/G,EAAA22G,MAAAx1E,OAAA,SAAA3N,EAAA5Y,EAAAsF,GACAze,KAAA+xB,KACA/xB,KAAAmZ,KACAnZ,KAAAye,MACG,SAAA5U,GACH,IAAAkvB,EAAAx6B,EAAAuvG,WAAA/0E,GACA,WAAAx6B,EAAA+a,QAAAyf,EAAAlvB,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,GAAAq5B,EAAAlvB,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,GAAAoiB,EAAAlvB,EAAA7J,KAAA+xB,GAAAnb,EAAA5W,KAAAmZ,GAAAvC,EAAA5W,KAAAye,GAAA7H,MAOArY,EAAA6/G,kBAAA7/G,EAAA22G,MAAAx1E,OAAA,SAAA3N,EAAA5Y,EAAAsF,EAAAkc,GACA36B,KAAA+xB,KACA/xB,KAAAmZ,KACAnZ,KAAAye,KACAze,KAAA26B,MACG,SAAA9wB,GACH,IAAAgrG,EAAAt2G,EAAAuvG,WAAA+G,GACA,WAAAt2G,EAAA+a,QAAAu7F,EAAAhrG,EAAA7J,KAAA+xB,GAAAryB,EAAAM,KAAAmZ,GAAAzZ,EAAAM,KAAAye,GAAA/e,EAAAM,KAAA26B,GAAAj7B,GAAAm1G,EAAAhrG,EAAA7J,KAAA+xB,GAAApb,EAAA3W,KAAAmZ,GAAAxC,EAAA3W,KAAAye,GAAA9H,EAAA3W,KAAA26B,GAAAhkB,GAAAk+F,EAAAhrG,EAAA7J,KAAA+xB,GAAAnb,EAAA5W,KAAAmZ,GAAAvC,EAAA5W,KAAAye,GAAA7H,EAAA5W,KAAA26B,GAAA/jB,MAOArY,EAAA8/G,aAAA9/G,EAAA22G,MAAAx1E,OAAA,SAAA3a,GAGAxa,QAAAC,KAAA,4EACAxK,KAAA+kB,YAAA3lB,GAAA2lB,EAAA,GAAAA,GACG,SAAAlb,GACH,IAAAkb,EAAA/kB,KAAA+kB,OACAP,GAAAO,EAAAjmB,OAAA,GAAA+K,EACAswB,EAAA56B,KAAAiK,MAAAgb,GACA4V,EAAA5V,EAAA2V,EACAujF,EAAA34F,EAAA,GAAAoV,MAAA,GACAwjF,EAAA54F,EAAAoV,GACAyjF,EAAA74F,EAAAoV,EAAApV,EAAAjmB,OAAA,EAAAimB,EAAAjmB,OAAA,EAAAq7B,EAAA,GACA0jF,EAAA94F,EAAAoV,EAAApV,EAAAjmB,OAAA,EAAAimB,EAAAjmB,OAAA,EAAAq7B,EAAA,GACAS,EAAAr8B,EAAA+uG,WAAA1yE,YACA,WAAAr8B,EAAA+a,QAAAshB,EAAA8iF,EAAAh+G,EAAAi+G,EAAAj+G,EAAAk+G,EAAAl+G,EAAAm+G,EAAAn+G,EAAA06B,GAAAQ,EAAA8iF,EAAA/mG,EAAAgnG,EAAAhnG,EAAAinG,EAAAjnG,EAAAknG,EAAAlnG,EAAAyjB,GAAAQ,EAAA8iF,EAAA9mG,EAAA+mG,EAAA/mG,EAAAgnG,EAAAhnG,EAAAinG,EAAAjnG,EAAAwjB,MAcA77B,EAAA+/G,iBAAA,WACA,IAAAr0F,EAAA,IAAA1rB,EAAA+a,QACA60F,EAAA,IAAAoQ,EACAnQ,EAAA,IAAAmQ,EACAC,EAAA,IAAAD,EAUA,SAAAA,KAyCA,OA9BAA,EAAA5+G,UAAAu5E,KAAA,SAAAr9D,EAAAI,EAAA8W,EAAAC,GACAhzB,KAAAy+G,GAAA5iG,EACA7b,KAAAwX,GAAAub,EACA/yB,KAAA0X,IAAA,EAAAmE,EAAA,EAAAI,EAAA,EAAA8W,EAAAC,EACAhzB,KAAA2X,GAAA,EAAAkE,EAAA,EAAAI,EAAA8W,EAAAC,GAGAurF,EAAA5+G,UAAA++G,yBAAA,SAAA7iG,EAAAI,EAAAmQ,EAAAuyF,EAAAC,EAAAC,EAAAC,GAEA,IAAA9rF,GAAA/W,EAAAJ,GAAA+iG,GAAAxyF,EAAAvQ,IAAA+iG,EAAAC,IAAAzyF,EAAAnQ,GAAA4iG,EACAhkF,GAAAzO,EAAAnQ,GAAA4iG,GAAAF,EAAA1iG,IAAA4iG,EAAAC,IAAAH,EAAAvyF,GAAA0yF,EAEA9rF,GAAA6rF,EACAhkF,GAAAgkF,EAEA7+G,KAAAk5E,KAAAj9D,EAAAmQ,EAAA4G,EAAA6H,IAIA0jF,EAAA5+G,UAAAo/G,eAAA,SAAAljG,EAAAI,EAAAmQ,EAAAuyF,EAAAK,GACAh/G,KAAAk5E,KAAAj9D,EAAAmQ,EAAA4yF,GAAA5yF,EAAAvQ,GAAAmjG,GAAAL,EAAA1iG,KAGAsiG,EAAA5+G,UAAAs/G,KAAA,SAAAp1G,GACA,IAAAgxB,EAAAhxB,IACAixB,EAAAD,EAAAhxB,EACA,OAAA7J,KAAAy+G,GAAAz+G,KAAAwX,GAAA3N,EAAA7J,KAAA0X,GAAAmjB,EAAA76B,KAAA2X,GAAAmjB,GAIAv8B,EAAA22G,MAAAx1E,OAAA,SAAA/1B,GAGA3J,KAAA+kB,OAAApb,GAAA,GACA3J,KAAAk/G,QAAA,GACK,SAAAr1G,GACL,IACA2a,EACA2V,EACAC,EACApwB,EAcA8qB,EAAAC,EAAAC,EAAAC,EAlBAlQ,EAAA/kB,KAAA+kB,OAuCA,IAlCA/a,EAAA+a,EAAAjmB,QACA,GAAAyL,QAAAwvB,IAAA,mCAGAK,GAFA5V,GAAAxa,GAAAhK,KAAAk/G,OAAA,MAAAr1G,IACAswB,EAAA56B,KAAAiK,MAAAgb,IAGAxkB,KAAAk/G,OACA/kF,KAAA,KAAA56B,KAAAiK,MAAAjK,KAAAia,IAAA2gB,GAAApV,EAAAjmB,QAAA,GAAAimB,EAAAjmB,OACO,IAAAs7B,GAAAD,IAAAnwB,EAAA,IACPmwB,EAAAnwB,EAAA,EACAowB,EAAA,GAKAp6B,KAAAk/G,QAAA/kF,EAAA,EACArF,EAAA/P,GAAAoV,EAAA,GAAAnwB,IAGAigB,EAAA9M,WAAA4H,EAAA,GAAAA,EAAA,IAAAxY,IAAAwY,EAAA,IACA+P,EAAA7K,GAGA8K,EAAAhQ,EAAAoV,EAAAnwB,GACAgrB,EAAAjQ,GAAAoV,EAAA,GAAAnwB,GAEAhK,KAAAk/G,QAAA/kF,EAAA,EAAAnwB,EACAirB,EAAAlQ,GAAAoV,EAAA,GAAAnwB,IAGAigB,EAAA9M,WAAA4H,EAAA/a,EAAA,GAAA+a,EAAA/a,EAAA,IAAAuC,IAAAwY,EAAA/a,EAAA,IACAirB,EAAAhL,QAGA7qB,IAAAY,KAAAiiC,MAAA,gBAAAjiC,KAAAiiC,MAAA,YAAAjiC,KAAAiiC,KAAA,CAEA,IAAAziC,EAAA,YAAAQ,KAAAiiC,KAAA,OACA28E,EAAAr/G,KAAAC,IAAAs1B,EAAA3W,kBAAA4W,GAAAv1B,GACAq/G,EAAAt/G,KAAAC,IAAAu1B,EAAA5W,kBAAA6W,GAAAx1B,GACAs/G,EAAAv/G,KAAAC,IAAAw1B,EAAA7W,kBAAA8W,GAAAz1B,GAEAq/G,EAAA,OAAAA,EAAA,GACAD,EAAA,OAAAA,EAAAC,GACAC,EAAA,OAAAA,EAAAD,GACA1Q,EAAAuQ,yBAAA5pF,EAAAp1B,EAAAq1B,EAAAr1B,EAAAs1B,EAAAt1B,EAAAu1B,EAAAv1B,EAAAk/G,EAAAC,EAAAC,GACA1Q,EAAAsQ,yBAAA5pF,EAAAne,EAAAoe,EAAApe,EAAAqe,EAAAre,EAAAse,EAAAte,EAAAioG,EAAAC,EAAAC,GACAN,EAAAE,yBAAA5pF,EAAAle,EAAAme,EAAAne,EAAAoe,EAAApe,EAAAqe,EAAAre,EAAAgoG,EAAAC,EAAAC,QACO,kBAAA9+G,KAAAiiC,KAAA,CACP,IAAA+8E,OAAA5/G,IAAAY,KAAAg/G,QAAAh/G,KAAAg/G,QAAA,GACA7Q,EAAA4Q,eAAAjqF,EAAAp1B,EAAAq1B,EAAAr1B,EAAAs1B,EAAAt1B,EAAAu1B,EAAAv1B,EAAAs/G,GACA5Q,EAAA2Q,eAAAjqF,EAAAne,EAAAoe,EAAApe,EAAAqe,EAAAre,EAAAse,EAAAte,EAAAqoG,GACAR,EAAAO,eAAAjqF,EAAAle,EAAAme,EAAAne,EAAAoe,EAAApe,EAAAqe,EAAAre,EAAAooG,GAIA,OADA,IAAAzgH,EAAA+a,QAAA60F,EAAA8Q,KAAA7kF,GAAAg0E,EAAA6Q,KAAA7kF,GAAAokF,EAAAS,KAAA7kF,MAxHA,GAkIA77B,EAAA4gH,mBAAA,SAAAp6F,GACAxa,QAAAC,KAAA,oFACAjM,EAAA+/G,iBAAA19G,KAAAZ,KAAA+kB,GACA/kB,KAAAiiC,KAAA,aACAjiC,KAAAk/G,QAAA,GAGA3gH,EAAA4gH,mBAAAx/G,UAAAE,OAAA6/B,OAAAnhC,EAAA+/G,iBAAA3+G,WAOApB,EAAA6gH,YAAA,SAAAziG,EAAAC,EAAAykD,EAAAF,EAAAC,EAAAE,GACA/iE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,cACAjiC,KAAA8wC,WAAA,CACAn0B,QACAC,SACAykD,QACAF,gBACAC,iBACAE,iBAEAthE,KAAAmtC,mBAAA,IAAA5uC,EAAAs6E,kBAAAl8D,EAAAC,EAAAykD,EAAAF,EAAAC,EAAAE,IACAthE,KAAAmwC,iBAGA5xC,EAAA6gH,YAAAz/G,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA6gH,YAAAz/G,UAAAqJ,YAAAzK,EAAA6gH,YACA7gH,EAAA8gH,aAAA9gH,EAAA6gH,YAMA7gH,EAAAs6E,kBAAA,SAAAl8D,EAAAC,EAAAykD,EAAAF,EAAAC,EAAAE,GACA/iE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA8wC,WAAA,CACAn0B,QACAC,SACAykD,QACAF,gBACAC,iBACAE,iBAEA,IAAAz6C,EAAA7mB,KAMAs/G,EAiCA,SAAAzoG,EAAA/M,EAAA2V,GACA,IAAA0H,EAAA,EAQA,OANAA,IAAAtQ,EAAA,IAAA/M,EAAA,KAEAqd,IAAAtQ,EAAA,IAAA4I,EAAA,KAEA0H,IAAA1H,EAAA,IAAA3V,EAAA,KAxCAy1G,CAJAp+C,EAAA5hE,KAAAiK,MAAA23D,IAAA,EACAC,EAAA7hE,KAAAiK,MAAA43D,IAAA,EACAE,EAAA/hE,KAAAiK,MAAA83D,IAAA,GAGAk+C,EA4CA,SAAA3oG,EAAA/M,EAAA2V,GACA,IAAAlf,EAAA,EAQA,OANAA,GAAAsW,EAAA/M,EAAA,EAEAvJ,GAAAsW,EAAA4I,EAAA,EAIA,GAFAlf,GAAAkf,EAAA3V,EAAA,GAnDA21G,CAAAt+C,EAAAC,EAAAE,GAEAt3B,EAAA,IAAAw1E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GACAr4F,EAAA,IAAAgB,aAAA,EAAAm3F,GACAjyE,EAAA,IAAAllB,aAAA,EAAAm3F,GACAhyE,EAAA,IAAAnlB,aAAA,EAAAm3F,GAEAI,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAEAr5B,EAAA,EA4CA,SAAAs5B,EAAA7iF,EAAApjB,EAAAhD,EAAAkpG,EAAAC,EAAArjG,EAAAC,EAAAykD,EAAA4+C,EAAAC,EAAAn3E,GAYA,IAXA,IAAAo3E,EAAAxjG,EAAAsjG,EACAG,EAAAxjG,EAAAsjG,EACAG,EAAA1jG,EAAA,EACA2jG,EAAA1jG,EAAA,EACA2jG,EAAAl/C,EAAA,EACAm/C,EAAAP,EAAA,EACAQ,EAAAP,EAAA,EACAQ,EAAA,EACAj6B,EAAA,EACArlE,EAAA,IAAA7iB,EAAA+a,QAEAyG,EAAA,EAAsBA,EAAA0gG,EAAa1gG,IAGnC,IAFA,IAAApJ,EAAAoJ,EAAAqgG,EAAAE,EAEAxgG,EAAA,EAAwBA,EAAA0gG,EAAa1gG,IAAA,CACrC,IAAApgB,EAAAogB,EAAAqgG,EAAAE,EAEAj/F,EAAA6b,GAAAv9B,EAAAqgH,EACA3+F,EAAAvH,GAAAlD,EAAAqpG,EACA5+F,EAAAvK,GAAA0pG,EAEAp5F,EAAAu4F,GAAAt+F,EAAA1hB,EACAynB,EAAAu4F,EAAA,GAAAt+F,EAAAzK,EACAwQ,EAAAu4F,EAAA,GAAAt+F,EAAAxK,EAEAwK,EAAA6b,GAAA,EACA7b,EAAAvH,GAAA,EACAuH,EAAAvK,GAAAwqD,EAAA,OAEAh0B,EAAAqyE,GAAAt+F,EAAA1hB,EACA2tC,EAAAqyE,EAAA,GAAAt+F,EAAAzK,EACA02B,EAAAqyE,EAAA,GAAAt+F,EAAAxK,EAEA02B,EAAAqyE,GAAA7/F,EAAAmgG,EACA3yE,EAAAqyE,EAAA,KAAA5/F,EAAAmgG,EAEAR,GAAA,EACAC,GAAA,EACAe,GAAA,EAOA,IAAA3gG,EAAA,EAAkBA,EAAAmgG,EAAYngG,IAC9B,IAAAD,EAAA,EAAoBA,EAAAmgG,EAAYngG,IAAA,CAEhC,IAAA7F,EAAA4lG,EAAA//F,EAAA0gG,EAAAzgG,EACAlX,EAAAg3G,EAAA//F,EAAA0gG,GAAAzgG,EAAA,GACA7S,EAAA2yG,GAAA//F,EAAA,GAAA0gG,GAAAzgG,EAAA,GACAN,EAAAogG,GAAA//F,EAAA,GAAA0gG,EAAAzgG,EAEAiqB,EAAA41E,GAAA3lG,EACA+vB,EAAA41E,EAAA,GAAA/2G,EACAmhC,EAAA41E,EAAA,GAAAngG,EAEAuqB,EAAA41E,EAAA,GAAA/2G,EACAmhC,EAAA41E,EAAA,GAAA1yG,EACA88B,EAAA41E,EAAA,GAAAngG,EAEAmgG,GAAA,EACAn5B,GAAA,EAKA5/D,EAAAysB,SAAAkzC,EAAAC,EAAA19C,GAEAy9C,GAAAC,EAEAo5B,GAAAa,EAlHAZ,EAAA,kBAAAz+C,EAAAzkD,EAAAD,EAAA2kD,EAAAF,EAAA,GAEA0+C,EAAA,iBAAAz+C,EAAAzkD,GAAAD,EAAA2kD,EAAAF,EAAA,GAEA0+C,EAAA,gBAAAnjG,EAAA0kD,EAAAzkD,EAAAukD,EAAAG,EAAA,GAEAw+C,EAAA,iBAAAnjG,EAAA0kD,GAAAzkD,EAAAukD,EAAAG,EAAA,GAEAw+C,EAAA,iBAAAnjG,EAAAC,EAAAykD,EAAAF,EAAAC,EAAA,GAEA0+C,EAAA,kBAAAnjG,EAAAC,GAAAykD,EAAAF,EAAAC,EAAA,GAGAphE,KAAAkzC,SAAA,IAAA30C,EAAA2qC,gBAAAc,EAAA,IACAhqC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/hB,EAAA,IACAnnB,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAAmE,EAAA,IACArtC,KAAAmzC,aAAA,SAAA50C,EAAA2qC,gBAAAoE,EAAA,KAsGA/uC,EAAAs6E,kBAAAl5E,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAs6E,kBAAAl5E,UAAAqJ,YAAAzK,EAAAs6E,kBAMAt6E,EAAAoiH,eAAA,SAAA3+F,EAAAu/C,EAAAC,EAAAC,GACAljE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,iBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAu/C,WACAC,aACAC,eAEAzhE,KAAAmtC,mBAAA,IAAA5uC,EAAAqiH,qBAAA5+F,EAAAu/C,EAAAC,EAAAC,KAGAljE,EAAAoiH,eAAAhhH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAoiH,eAAAhhH,UAAAqJ,YAAAzK,EAAAoiH,eAMApiH,EAAAqiH,qBAAA,SAAA5+F,EAAAu/C,EAAAC,EAAAC,GACAljE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,uBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAu/C,WACAC,aACAC,eAEAz/C,KAAA,GACAu/C,OAAAniE,IAAAmiE,EAAAhiE,KAAA2M,IAAA,EAAAq1D,GAAA,EACAC,OAAApiE,IAAAoiE,IAAA,EACAC,OAAAriE,IAAAqiE,IAAA,EAAAliE,KAAA0e,GACA,IAAAkJ,EAAAo6C,EAAA,EACAn0B,EAAA,IAAAjlB,aAAA,EAAAhB,GACAkmB,EAAA,IAAAllB,aAAA,EAAAhB,GACAmmB,EAAA,IAAAnlB,aAAA,EAAAhB,GAEAkmB,EAAA,KACAC,EAAA,MACAA,EAAA,MAEA,QAAAvjC,EAAA,EAAAkb,EAAA,EAAA47F,EAAA,EAAkC92G,GAAAw3D,EAAex3D,IAAAkb,GAAA,EAAA47F,GAAA,GACjD,IAAAC,EAAAt/C,EAAAz3D,EAAAw3D,EAAAE,EACAr0B,EAAAnoB,GAAAjD,EAAAziB,KAAAkY,IAAAqpG,GACA1zE,EAAAnoB,EAAA,GAAAjD,EAAAziB,KAAAsY,IAAAipG,GACAzzE,EAAApoB,EAAA,KAEAqoB,EAAAuzE,IAAAzzE,EAAAnoB,GAAAjD,EAAA,KACAsrB,EAAAuzE,EAAA,IAAAzzE,EAAAnoB,EAAA,GAAAjD,EAAA,KAGA,IAAAgoB,EAAA,GAEA,IAAA/kB,EAAA,EAAmBA,GAAAs8C,EAAet8C,IAClC+kB,EAAA1N,KAAArX,IAAA,KAGAjlB,KAAAkzC,SAAA,IAAA30C,EAAA2qC,gBAAA,IAAA+B,YAAAjB,GAAA,IACAhqC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAAkE,EAAA,IACAptC,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAAmE,EAAA,IACArtC,KAAAmzC,aAAA,SAAA50C,EAAA2qC,gBAAAoE,EAAA,IACAttC,KAAA02B,eAAA,IAAAn4B,EAAA0pB,OAAA,IAAA1pB,EAAA+a,QAAA0I,IAGAzjB,EAAAqiH,qBAAAjhH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAqiH,qBAAAjhH,UAAAqJ,YAAAzK,EAAAqiH,qBAMAriH,EAAAwiH,uBAAA,SAAAr/C,EAAAC,EAAA/kD,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAljE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,yBACAjiC,KAAA8wC,WAAA,CACA4wB,YACAC,eACA/kD,SACAglD,iBACAR,iBACAS,YACAL,aACAC,eAEA,IAAA56C,EAAA7mB,KACA0hE,OAAAtiE,IAAAsiE,IAAA,GACAC,OAAAviE,IAAAuiE,IAAA,GACA/kD,OAAAxd,IAAAwd,IAAA,IACAglD,EAAAriE,KAAAiK,MAAAo4D,IAAA,EACAR,EAAA7hE,KAAAiK,MAAA43D,IAAA,EACAS,OAAAziE,IAAAyiE,KACAL,OAAApiE,IAAAoiE,IAAA,EACAC,OAAAriE,IAAAqiE,IAAA,EAAAliE,KAAA0e,GAEA,IAAA+iG,EAAA,GAEA,IAAAn/C,IACAH,EAAA,GAAAs/C,IACAr/C,EAAA,GAAAq/C,KAGA,IAAA1B,EA4BA,WACA,IAAAh2E,GAAAs4B,EAAA,IAAAR,EAAA,IAEA,IAAAS,IACAv4B,IAAAs4B,EAAA,GAAAo/C,EAAAp/C,EAAAo/C,GAGA,OAAA13E,EAnCAi2E,GACAC,EAqCA,WACA,IAAAl2E,EAAAs4B,EAAAR,EAAA,KAEA,IAAAS,IACAv4B,GAAAs4B,EAAAo/C,EAAA,GAGA,OAAA13E,EA5CAm2E,GAEAz1E,EAAA,IAAAzrC,EAAA2qC,gBAAA,IAAAs2E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GAAA,GACAr4F,EAAA,IAAA5oB,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAjyE,EAAA,IAAA9uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAhyE,EAAA,IAAA/uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GAEA/+G,EAAA,EACAirG,EAAA,EACAyV,EAAA,GACAC,EAAAtkG,EAAA,EAEA4pE,EAAA,EA+GA,SAAA26B,EAAA3wF,GACA,IAAA9wB,EAAA0hH,EAAAC,EACA9zE,EAAA,IAAAhvC,EAAAme,QACAq0B,EAAA,IAAAxyC,EAAA+a,QACAmtE,EAAA,EACAzkE,GAAA,IAAAwO,EAAAkxC,EAAAC,EACAliE,GAAA,IAAA+wB,EAAA,KAMA,IAJA4wF,EAAA7gH,EAIAb,EAAA,EAAiBA,GAAAkiE,EAAqBliE,IAEtCynB,EAAAoC,OAAAhpB,EAAA,EAAA2gH,EAAAzhH,EAAA,GAEA4tC,EAAA9jB,OAAAhpB,EAAA,EAAAd,EAAA,GAEA8tC,EAAA7tC,EAAA,GACA6tC,EAAA52B,EAAA,GACA22B,EAAAhD,MAAA/pC,EAAAgtC,EAAA7tC,EAAA6tC,EAAA52B,GAEApW,IAMA,IAFA8gH,EAAA9gH,EAEAb,EAAA,EAAiBA,GAAAkiE,EAAqBliE,IAAA,CACtC,IACAgiB,EADAhiB,EAAAkiE,EACAH,EAAAD,EACA8/C,EAAA/hH,KAAAkY,IAAAiK,GACA6/F,EAAAhiH,KAAAsY,IAAA6J,GAEAqvB,EAAArxC,EAAAsiB,EAAAu/F,EACAxwE,EAAAp6B,EAAAuqG,EAAAzhH,EACAsxC,EAAAn6B,EAAAoL,EAAAs/F,EACAn6F,EAAAoC,OAAAhpB,EAAAwwC,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAEAy2B,EAAA9jB,OAAAhpB,EAAA,EAAAd,EAAA,GAEA8tC,EAAA7tC,EAAA,GAAA4hH,EAAA,GACA/zE,EAAA52B,EAAA,GAAA4qG,EAAA9hH,EAAA,GACA6tC,EAAAhD,MAAA/pC,EAAAgtC,EAAA7tC,EAAA6tC,EAAA52B,GAEApW,IAIA,IAAAb,EAAA,EAAiBA,EAAAkiE,EAAoBliE,IAAA,CACrC,IAAAwN,EAAAk0G,EAAA1hH,EACAulB,EAAAo8F,EAAA3hH,GAEA,IAAA8wB,GAEAwZ,EAAAntB,KAAA2uF,EAAAvmF,GACAumF,IACAxhE,EAAAntB,KAAA2uF,EAAAvmF,EAAA,GACAumF,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,MAGAxhE,EAAAntB,KAAA2uF,EAAAvmF,EAAA,GACAumF,IACAxhE,EAAAntB,KAAA2uF,EAAAvmF,GACAumF,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,KAIA/kB,GAAA,EAIA5/D,EAAAysB,SAAAkzC,EAAAC,GAAA,IAAAj2D,EAAA,KAEAg2D,GAAAC,GA1JA,WACA,IAAA/mF,EAAAiX,EACA6K,EAAA,IAAAjjB,EAAA+a,QACAy3B,EAAA,IAAAxyC,EAAA+a,QACAmtE,EAAA,EAEA+6B,GAAA7/C,EAAAD,GAAA9kD,EAEA,IAAAjG,EAAA,EAAiBA,GAAAyqD,EAAqBzqD,IAAA,CACtC,IAAA8qG,EAAA,GACA5nG,EAAAlD,EAAAyqD,EAEAp/C,EAAAnI,GAAA8nD,EAAAD,KAEA,IAAAhiE,EAAA,EAAmBA,GAAAkiE,EAAqBliE,IAAA,CACxC,IAAAu9B,EAAAv9B,EAAAkiE,EAEA7wB,EAAArxC,EAAAsiB,EAAAziB,KAAAsY,IAAAolB,EAAAwkC,EAAAD,GACAzwB,EAAAp6B,GAAAkD,EAAA+C,EAAAskG,EACAnwE,EAAAn6B,EAAAoL,EAAAziB,KAAAkY,IAAAwlB,EAAAwkC,EAAAD,GACAr6C,EAAAoC,OAAAhpB,EAAAwwC,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAEA4K,EAAAtY,KAAA6nC,IAEA,IAAA2wB,GAAA,IAAA/qD,GAAA,IAAAgrD,GAAAhrD,IAAAyqD,KACA5/C,EAAA9hB,EAAAH,KAAAsY,IAAAolB,EAAAwkC,EAAAD,GACAhgD,EAAA5K,EAAArX,KAAAkY,IAAAwlB,EAAAwkC,EAAAD,IAGAhgD,EAAA1E,KAAAvd,KAAAkM,KAAA+V,EAAA9hB,EAAA8hB,EAAA9hB,EAAA8hB,EAAA5K,EAAA4K,EAAA5K,GAAA4qG,GAAA9nG,YACA2zB,EAAA9jB,OAAAhpB,EAAAihB,EAAA9hB,EAAA8hB,EAAA7K,EAAA6K,EAAA5K,GAEA02B,EAAAhD,MAAA/pC,EAAA08B,EAAA,EAAApjB,GAEA4nG,EAAAnlF,KAAA/7B,GAEAA,IAIA0gH,EAAA3kF,KAAAmlF,GAIA,IAAA/hH,EAAA,EAAiBA,EAAAkiE,EAAoBliE,IACrC,IAAAiX,EAAA,EAAmBA,EAAAyqD,EAAoBzqD,IAAA,CAEvC,IAAAymB,EAAA6jF,EAAAtqG,GAAAjX,GACA29B,EAAA4jF,EAAAtqG,EAAA,GAAAjX,GACAgiH,EAAAT,EAAAtqG,EAAA,GAAAjX,EAAA,GACA6rF,EAAA01B,EAAAtqG,GAAAjX,EAAA,GAEAsqC,EAAAntB,KAAA2uF,EAAApuE,GACAouE,IACAxhE,EAAAntB,KAAA2uF,EAAAnuE,GACAmuE,IACAxhE,EAAAntB,KAAA2uF,EAAAjgB,GACAigB,IAEAxhE,EAAAntB,KAAA2uF,EAAAnuE,GACAmuE,IACAxhE,EAAAntB,KAAA2uF,EAAAkW,GACAlW,IACAxhE,EAAAntB,KAAA2uF,EAAAjgB,GACAigB,IAEA/kB,GAAA,EAKA5/D,EAAAysB,SAAAkzC,EAAAC,EAAA,GAEAD,GAAAC,EA1GAk7B,IAEA,IAAA9/C,IACAH,EAAA,GAAAy/C,GAAA,GACAx/C,EAAA,GAAAw/C,GAAA,IAIAnhH,KAAAkzC,SAAAlJ,GACAhqC,KAAAmzC,aAAA,WAAAhsB,GACAnnB,KAAAmzC,aAAA,SAAA9F,GACArtC,KAAAmzC,aAAA,KAAA7F,IAoLA/uC,EAAAwiH,uBAAAphH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAwiH,uBAAAphH,UAAAqJ,YAAAzK,EAAAwiH,uBAMAxiH,EAAAqjH,iBAAA,SAAAlgD,EAAAC,EAAA/kD,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAljE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,mBACAjiC,KAAA8wC,WAAA,CACA4wB,YACAC,eACA/kD,SACAglD,iBACAR,iBACAS,YACAL,aACAC,eAEAzhE,KAAAmtC,mBAAA,IAAA5uC,EAAAwiH,uBAAAr/C,EAAAC,EAAA/kD,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,IACAzhE,KAAAmwC,iBAGA5xC,EAAAqjH,iBAAAjiH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAqjH,iBAAAjiH,UAAAqJ,YAAAzK,EAAAqjH,iBAMArjH,EAAAsjH,mBAAA,SAAA7/F,EAAApF,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAljE,EAAAwiH,uBAAAngH,KAAAZ,KAAA,EAAAgiB,EAAApF,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAzhE,KAAAiiC,KAAA,qBACAjiC,KAAA8wC,WAAA,CACA9uB,SACApF,SACAglD,iBACAR,iBACAI,aACAC,gBAIAljE,EAAAsjH,mBAAAliH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAsjH,mBAAAliH,UAAAqJ,YAAAzK,EAAAsjH,mBAMAtjH,EAAAujH,aAAA,SAAA9/F,EAAApF,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAljE,EAAAqjH,iBAAAhhH,KAAAZ,KAAA,EAAAgiB,EAAApF,EAAAglD,EAAAR,EAAAS,EAAAL,EAAAC,GACAzhE,KAAAiiC,KAAA,eACAjiC,KAAA8wC,WAAA,CACA9uB,SACApF,SACAglD,iBACAR,iBACAS,YACAL,aACAC,gBAIAljE,EAAAujH,aAAAniH,UAAAE,OAAA6/B,OAAAnhC,EAAAqjH,iBAAAjiH,WACApB,EAAAujH,aAAAniH,UAAAqJ,YAAAzK,EAAAujH,aAMAvjH,EAAAwjH,cAAA,SAAA96F,EAAA+6F,GACAzjH,EAAA6oB,eAAAxmB,KAAAZ,MACAgiH,OAAA5iH,IAAA4iH,IAAA,EACA,IAAAC,EAAA1iH,KAAAkY,IAAAlZ,EAAAgB,KAAAwxB,QAAAixF,GACAE,EAAA,MACApwE,EAAA,GAEA,SAAAqwE,EAAAloG,EAAApR,GACA,OAAAoR,EAAApR,EAGA,IACA0rC,EADAwJ,EAAA,cAGA92B,aAAA1oB,EAAA6oB,gBACAmtB,EAAA,IAAAh2C,EAAA2oB,UACAimB,mBAAAlmB,GAEAstB,EAAAttB,EAAA/b,QAGAqpC,EAAApE,gBACAoE,EAAAvG,qBAIA,IAHA,IAAA7mB,EAAAotB,EAAAptB,SACA6kB,EAAAuI,EAAAvI,MAEA/mB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAAqCmmB,EAAAjb,EAAOib,IAG5C,IAFA,IAAA8nB,EAAAf,EAAA/mB,GAEAgE,EAAA,EAAqBA,EAAA,EAAOA,IAAA,CAC5Bi5F,EAAA,GAAAn1E,EAAAgR,EAAA90B,IACAi5F,EAAA,GAAAn1E,EAAAgR,GAAA90B,EAAA,OACAi5F,EAAAv9E,KAAAw9E,QAGA/iH,IAAA0yC,EAFAnJ,EAAAu5E,EAAAjiH,YAGA6xC,EAAAnJ,GAAA,CACAy5E,MAAAF,EAAA,GACAG,MAAAH,EAAA,GACAI,MAAAr9F,EACAs9F,WAAAnjH,GAGA0yC,EAAAnJ,GAAA45E,MAAAt9F,EAKA,IAAAkW,EAAA,GAEA,QAAAwN,KAAAmJ,EAAA,CACA,IAAAhoC,EAAAgoC,EAAAnJ,GAEA,QAAAvpC,IAAA0K,EAAAy4G,OAAAv2E,EAAAliC,EAAAw4G,OAAA9gG,OAAAjI,IAAAyyB,EAAAliC,EAAAy4G,OAAA/gG,SAAAygG,EAAA,CACA,IAAAlxE,EAAA5pB,EAAArd,EAAAs4G,OACAjnF,EAAAmB,KAAAyU,EAAArxC,GACAy7B,EAAAmB,KAAAyU,EAAAp6B,GACAwkB,EAAAmB,KAAAyU,EAAAn6B,GACAm6B,EAAA5pB,EAAArd,EAAAu4G,OACAlnF,EAAAmB,KAAAyU,EAAArxC,GACAy7B,EAAAmB,KAAAyU,EAAAp6B,GACAwkB,EAAAmB,KAAAyU,EAAAn6B,IAIA5W,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA,IAAA/gB,aAAAgT,GAAA,KAGA58B,EAAAwjH,cAAApiH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAwjH,cAAApiH,UAAAqJ,YAAAzK,EAAAwjH,cA0BAxjH,EAAA4+G,gBAAA,SAAAhE,EAAAxoD,GACA,qBAAAwoD,GAKA56G,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,kBACAk3E,EAAAv6G,MAAAkmC,QAAAq0E,KAAA,CAAAA,GACAn5G,KAAAwiH,aAAArJ,EAAAxoD,GACA3wD,KAAAguC,sBARAmrE,EAAA,IAeA56G,EAAA4+G,gBAAAx9G,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA4+G,gBAAAx9G,UAAAqJ,YAAAzK,EAAA4+G,gBAEA5+G,EAAA4+G,gBAAAx9G,UAAA6iH,aAAA,SAAArJ,EAAAxoD,GAGA,IAFA,IAAAt0B,EAAA88E,EAAAr6G,OAEAiL,EAAA,EAAmBA,EAAAsyB,EAAQtyB,IAAA,CAC3B,IAAAooG,EAAAgH,EAAApvG,GACA/J,KAAAyiH,SAAAtQ,EAAAxhD,KAIApyD,EAAA4+G,gBAAAx9G,UAAA8iH,SAAA,SAAAtQ,EAAAxhD,GACA,IAWA+xD,EAIAC,EAAAC,EAAAphG,EAAAqhG,EAyBAC,EAAAh5G,EAAAkoG,EAxCA+Q,OAAA3jH,IAAAuxD,EAAAoyD,OAAApyD,EAAAoyD,OAAA,IACAC,OAAA5jH,IAAAuxD,EAAAqyD,eAAAryD,EAAAqyD,eAAA,EAEAC,OAAA7jH,IAAAuxD,EAAAsyD,UAAAtyD,EAAAsyD,UAAAD,EAAA,EAEAE,OAAA9jH,IAAAuxD,EAAAuyD,cAAAvyD,EAAAuyD,cAAA,EACAC,OAAA/jH,IAAAuxD,EAAAwyD,cAAAxyD,EAAAwyD,aAEAC,OAAAhkH,IAAAuxD,EAAAyyD,cAAAzyD,EAAAyyD,cAAA,GACAC,OAAAjkH,IAAAuxD,EAAA0yD,MAAA1yD,EAAA0yD,MAAA,EACAC,EAAA3yD,EAAA2yD,YAEAC,GAAA,EAEAC,OAAApkH,IAAAuxD,EAAA8yD,YAAA9yD,EAAA8yD,YAAAllH,EAAA4+G,gBAAAuG,iBAGAJ,IACAZ,EAAAY,EAAA/N,gBAAA8N,GACAE,GAAA,EACAJ,GAAA,EAKAR,OAAAvjH,IAAAuxD,EAAAgzD,OAAAhzD,EAAAgzD,OAAA,IAAAplH,EAAAqlH,aAAAC,aAAAP,EAAAD,GAAA,GAEAT,EAAA,IAAArkH,EAAA+a,QACAkI,EAAA,IAAAjjB,EAAA+a,QACAupG,EAAA,IAAAtkH,EAAA+a,SAIA6pG,IACAD,EAAA,EACAF,EAAA,EACAC,EAAA,GAMA,IAAAp8F,EAAA7mB,KACA8jH,EAAA9jH,KAAAmnB,SAAAroB,OACAilH,EAAA5R,EAAAsL,cAAA2F,GACAj8F,EAAA48F,EAAA5R,MACAnD,EAAA+U,EAAA/U,MACAgV,GAAAzlH,EAAAuvG,WAAA0G,YAAArtF,GAEA,GAAA68F,EAAA,CAGA,IAFA78F,IAAA68F,UAEAl6G,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAoCgL,EAAAkoG,EAAQloG,IAC5Cg5G,EAAA9T,EAAAllG,GAEAvL,EAAAuvG,WAAA0G,YAAAsO,KACA9T,EAAAllG,GAAAg5G,EAAAkB,WAIAA,GAAA,EAGA,IAAAh4E,EAAAztC,EAAAuvG,WAAAiB,iBAAA5nF,EAAA6nF,GAGAjB,EAAA5mF,EAEA,IAAArd,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAkCgL,EAAAkoG,EAAQloG,IAC1Cg5G,EAAA9T,EAAAllG,GACAqd,IAAAm3C,OAAAwkD,GAGA,SAAAmB,EAAAC,EAAA71C,EAAAtjE,GAEA,OADAsjE,GAAA9jE,QAAA2U,MAAA,6CACAmvD,EAAAnjE,QAAA4B,eAAA/B,GAAAwB,IAAA23G,GAGA,IAAAr7G,EACAs7G,EACAt6G,EACA+M,EACAwtG,EAEAr3E,EADAs3E,EAAAl9F,EAAAroB,OAEAwlH,EAAAt4E,EAAAltC,OAEA,SAAAylH,EAAA/I,EAAAgJ,EAAAC,GAOA,IAAAC,EACAC,EACAC,EAAA,EAIAC,EAAArJ,EAAA97G,EAAA8kH,EAAA9kH,EACAolH,EAAAtJ,EAAA7kG,EAAA6tG,EAAA7tG,EACAouG,EAAAN,EAAA/kH,EAAA87G,EAAA97G,EACAslH,EAAAP,EAAA9tG,EAAA6kG,EAAA7kG,EACAsuG,EAAAJ,IAAAC,IAEAI,EAAAL,EAAAG,EAAAF,EAAAC,EAEA,GAAAxlH,KAAAia,IAAA0rG,GAAA7lH,OAAAC,QAAA,CAGA,IAAA6lH,EAAA5lH,KAAAkM,KAAAw5G,GACAG,EAAA7lH,KAAAkM,KAAAs5G,IAAAC,KAEAK,EAAAb,EAAA9kH,EAAAolH,EAAAK,EACAG,EAAAd,EAAA7tG,EAAAkuG,EAAAM,EAIAI,IAHAd,EAAA/kH,EAAAslH,EAAAI,EAGAC,GAAAL,GAFAP,EAAA9tG,EAAAouG,EAAAK,EAEAE,GAAAP,IAAAF,EAAAG,EAAAF,EAAAC,GAMAS,GAJAd,EAAAW,EAAAR,EAAAU,EAAA/J,EAAA97G,GAIAglH,GAHAC,EAAAW,EAAAR,EAAAS,EAAA/J,EAAA7kG,GAGAguG,EAEA,GAAAa,GAAA,EACA,WAAAjnH,EAAAme,QAAAgoG,EAAAC,GAEAC,EAAArlH,KAAAkM,KAAA+5G,EAAA,OAEO,CAEP,IAAAC,GAAA,EAEAZ,EAAAxlH,OAAAC,QACAylH,EAAA1lH,OAAAC,UACAmmH,GAAA,GAGAZ,GAAAxlH,OAAAC,QACAylH,GAAA1lH,OAAAC,UACAmmH,GAAA,GAGAlmH,KAAAE,KAAAqlH,KAAAvlH,KAAAE,KAAAulH,KACAS,GAAA,GAKAA,GAEAf,GAAAI,EACAH,EAAAE,EACAD,EAAArlH,KAAAkM,KAAAw5G,KAGAP,EAAAG,EACAF,EAAAG,EACAF,EAAArlH,KAAAkM,KAAAw5G,EAAA,IAIA,WAAA1mH,EAAAme,QAAAgoG,EAAAE,EAAAD,EAAAC,GAKA,IAFA,IAAAc,EAAA,GAEAzgG,EAAA,EAAAC,EAAA6oF,EAAAjvG,OAAAmqB,EAAA/D,EAAA,EAAA+V,EAAAhW,EAAA,EAA+DA,EAAAC,EAAQD,IAAAgE,IAAAgS,IACvEhS,IAAA/D,IAAA+D,EAAA,GACAgS,IAAA/V,IAAA+V,EAAA,GAGAyqF,EAAAzgG,GAAAs/F,EAAAxW,EAAA9oF,GAAA8oF,EAAA9kF,GAAA8kF,EAAA9yE,IAGA,IACA0qF,EA+DA57G,EAhEA67G,EAAA,GAEAC,EAAAH,EAAApnD,SAEA,IAAAx0D,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAkCgL,EAAAkoG,EAAQloG,IAAA,CAI1C,IAHAg5G,EAAA9T,EAAAllG,GACA67G,EAAA,GAEA1gG,EAAA,EAAAgE,GAAA/D,EAAA49F,EAAAhkH,QAAA,EAAAm8B,EAAAhW,EAAA,EAA2DA,EAAAC,EAAQD,IAAAgE,IAAAgS,IACnEhS,IAAA/D,IAAA+D,EAAA,GACAgS,IAAA/V,IAAA+V,EAAA,GAEA0qF,EAAA1gG,GAAAs/F,EAAAzB,EAAA79F,GAAA69F,EAAA75F,GAAA65F,EAAA7nF,IAGA2qF,EAAAtpF,KAAAqpF,GACAE,IAAAvnD,OAAAqnD,GAIA,IAAA98G,EAAA,EAAeA,EAAAq6G,EAAmBr6G,IAAA,CASlC,IANA+N,EAAAosG,GAAA,GADAn5G,EAAAhB,EAAAq6G,IAGAiB,EAAAlB,EAAA1jH,KAAAsY,IAAAhO,EAAAtK,KAAA0e,GAAA,GAIAgH,EAAA,EAAAC,EAAA6oF,EAAAjvG,OAAsCmmB,EAAAC,EAAQD,IAE9CpL,GADAuqG,EAAAH,EAAAlW,EAAA9oF,GAAAygG,EAAAzgG,GAAAk/F,IACAzkH,EAAA0kH,EAAAztG,GAAAC,GAIA,IAAA9M,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAoCgL,EAAAkoG,EAAQloG,IAI5C,IAHAg5G,EAAA9T,EAAAllG,GACA67G,EAAAC,EAAA97G,GAEAmb,EAAA,EAAAC,EAAA49F,EAAAhkH,OAAsCmmB,EAAAC,EAAQD,IAE9CpL,GADAuqG,EAAAH,EAAAnB,EAAA79F,GAAA0gG,EAAA1gG,GAAAk/F,IACAzkH,EAAA0kH,EAAAztG,GAAAC,GAOA,IAFAutG,EAAAlB,EAEAh+F,EAAA,EAAeA,EAAAo/F,EAAUp/F,IACzBm/F,EAAAjB,EAAAc,EAAA98F,EAAAlC,GAAA4gG,EAAA5gG,GAAAk/F,GAAAh9F,EAAAlC,GAEAs+F,GAIA/hG,EAAAtY,KAAAy5G,EAAAt1E,QAAA,IAAAvgC,eAAAs3G,EAAA1kH,GACAkjH,EAAA15G,KAAAy5G,EAAAmD,UAAA,IAAAh5G,eAAAs3G,EAAAztG,GACAksG,EAAA35G,KAAAw5G,EAAA,IAAAn2G,IAAAiV,GAAAjV,IAAAq2G,GACA/oG,EAAAgpG,EAAAnjH,EAAAmjH,EAAAlsG,EAAAksG,EAAAjsG,IANAiD,EAAAuqG,EAAA1kH,EAAA0kH,EAAAztG,EAAA,GAcA,IAAA5M,EAAA,EAAeA,GAAAs5G,EAAYt5G,IAC3B,IAAAkb,EAAA,EAAiBA,EAAAo/F,EAAUp/F,IAC3Bm/F,EAAAjB,EAAAc,EAAA98F,EAAAlC,GAAA4gG,EAAA5gG,GAAAk/F,GAAAh9F,EAAAlC,GAEAs+F,GAIA/hG,EAAAtY,KAAAy5G,EAAAt1E,QAAAtjC,IAAA+C,eAAAs3G,EAAA1kH,GACAkjH,EAAA15G,KAAAy5G,EAAAmD,UAAA/7G,IAAA+C,eAAAs3G,EAAAztG,GACAksG,EAAA35G,KAAAw5G,EAAA34G,IAAAwC,IAAAiV,GAAAjV,IAAAq2G,GACA/oG,EAAAgpG,EAAAnjH,EAAAmjH,EAAAlsG,EAAAksG,EAAAjsG,IANAiD,EAAAuqG,EAAA1kH,EAAA0kH,EAAAztG,EAAAosG,EAAAM,EAAAt5G,GAaA,IAAAlB,EAAAq6G,EAAA,EAA+Br6G,GAAA,EAAQA,IAAA,CAMvC,IAJA+N,EAAAosG,GAAA,GADAn5G,EAAAhB,EAAAq6G,IAGAiB,EAAAlB,EAAA1jH,KAAAsY,IAAAhO,EAAAtK,KAAA0e,GAAA,GAEAgH,EAAA,EAAAC,EAAA6oF,EAAAjvG,OAAsCmmB,EAAAC,EAAQD,IAE9CpL,GADAuqG,EAAAH,EAAAlW,EAAA9oF,GAAAygG,EAAAzgG,GAAAk/F,IACAzkH,EAAA0kH,EAAAztG,EAAAosG,EAAAnsG,GAIA,IAAA9M,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAoCgL,EAAAkoG,EAAQloG,IAI5C,IAHAg5G,EAAA9T,EAAAllG,GACA67G,EAAAC,EAAA97G,GAEAmb,EAAA,EAAAC,EAAA49F,EAAAhkH,OAAsCmmB,EAAAC,EAAQD,IAC9Cm/F,EAAAH,EAAAnB,EAAA79F,GAAA0gG,EAAA1gG,GAAAk/F,GAEAZ,EAGA1pG,EAAAuqG,EAAA1kH,EAAA0kH,EAAAztG,EAAA+rG,EAAAW,EAAA,GAAA1sG,EAAA+rG,EAAAW,EAAA,GAAA3jH,EAAAkX,GAFAiD,EAAAuqG,EAAA1kH,EAAA0kH,EAAAztG,EAAAosG,EAAAnsG,GA8DA,SAAAmvG,EAAAhY,EAAAiY,GACA,IAAA/8F,EAAAgS,EAGA,IAFAhW,EAAA8oF,EAAAjvG,SAEAmmB,GAAA,IACAgE,EAAAhE,GACAgW,EAAAhW,EAAA,GACA,IAAAgW,EAAA8yE,EAAAjvG,OAAA,GAEA,IAAAiL,EAAA,EACAsyB,EAAAgnF,EAAA,EAAAH,EAEA,IAAAn5G,EAAA,EAAmBA,EAAAsyB,EAAQtyB,IAAA,CAC3B,IAAAk8G,EAAA5B,EAAAt6G,EACAm8G,EAAA7B,GAAAt6G,EAAA,GAKAo8G,EAJAH,EAAA/8F,EAAAg9F,EACAD,EAAA/qF,EAAAgrF,EACAD,EAAA/qF,EAAAirF,EACAF,EAAA/8F,EAAAi9F,EACAnY,EAAAhkG,EAAAsyB,EAAApT,EAAAgS,KAKA,SAAAphB,EAAAna,EAAAiX,EAAAC,GACAiQ,EAAAM,SAAAmV,KAAA,IAAA/9B,EAAA+a,QAAA5Z,EAAAiX,EAAAC,IAGA,SAAAwvG,EAAAnsG,EAAApR,EAAAqE,GACA+M,GAAA6pG,EACAj7G,GAAAi7G,EACA52G,GAAA42G,EACAj9F,EAAAmlB,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAA,cACA,IAAAogC,EAAAk2E,EAAA6C,cAAAx/F,EAAA5M,EAAApR,EAAAqE,GACA2Z,EAAAolB,cAAA,GAAA3P,KAAAgR,GAGA,SAAA64E,EAAAlsG,EAAApR,EAAAqE,EAAAuS,EAAA6mG,EAAAC,EAAAC,EAAAC,EAAAC,GACAzsG,GAAA6pG,EACAj7G,GAAAi7G,EACA52G,GAAA42G,EACArkG,GAAAqkG,EACAj9F,EAAAmlB,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAA7uB,EAAApR,EAAA4W,EAAA,cACAoH,EAAAmlB,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAAjgC,EAAAqE,EAAAuS,EAAA,cACA,IAAA6tB,EAAAk2E,EAAAmD,mBAAA9/F,EAAA5M,EAAApR,EAAAqE,EAAAuS,GACAoH,EAAAolB,cAAA,GAAA3P,KAAA,CAAAgR,EAAA,GAAAA,EAAA,GAAAA,EAAA,KACAzmB,EAAAolB,cAAA,GAAA3P,KAAA,CAAAgR,EAAA,GAAAA,EAAA,GAAAA,EAAA,MA7FA,WACA,GAAA61E,EAAA,CACA,IAAAyD,EAAA,EAEAv5G,EAAAg3G,EAAAuC,EAEA,IAAA3hG,EAAA,EAAmBA,EAAAq/F,EAAUr/F,IAE7BmhG,GADAr5E,EAAAf,EAAA/mB,IACA,GAAA5X,EAAA0/B,EAAA,GAAA1/B,EAAA0/B,EAAA,GAAA1/B,GAMA,IAFAA,EAAAg3G,GADAuC,EAAAvD,EAAA,EAAAH,GAGAj+F,EAAA,EAAmBA,EAAAq/F,EAAUr/F,IAE7BmhG,GADAr5E,EAAAf,EAAA/mB,IACA,GAAA5X,EAAA0/B,EAAA,GAAA1/B,EAAA0/B,EAAA,GAAA1/B,OAEO,CAEP,IAAA4X,EAAA,EAAmBA,EAAAq/F,EAAUr/F,IAE7BmhG,GADAr5E,EAAAf,EAAA/mB,IACA,GAAA8nB,EAAA,GAAAA,EAAA,IAIA,IAAA9nB,EAAA,EAAmBA,EAAAq/F,EAAUr/F,IAE7BmhG,GADAr5E,EAAAf,EAAA/mB,IACA,GAAAo/F,EAAAhB,EAAAt2E,EAAA,GAAAs3E,EAAAhB,EAAAt2E,EAAA,GAAAs3E,EAAAhB,IAhCAwD,GAsCA,WACA,IAAAb,EAAA,EAIA,IAHAD,EAAAhY,EAAAiY,GACAA,GAAAjY,EAAAjvG,OAEAgL,EAAA,EAAAkoG,EAAAhD,EAAAlwG,OAAoCgL,EAAAkoG,EAAQloG,IAE5Ci8G,EADAjD,EAAA9T,EAAAllG,GACAk8G,GAEAA,GAAAlD,EAAAhkH,OA7CAgoH,IAmGAvoH,EAAA4+G,gBAAAuG,iBAAA,CACA2C,cAAA,SAAAp/F,EAAA8/F,EAAAC,EAAAC,GACA,IAAA9/F,EAAAF,EAAAE,SACAlN,EAAAkN,EAAA4/F,GACAl+G,EAAAse,EAAA6/F,GACA95G,EAAAia,EAAA8/F,GACA,WAAA1oH,EAAAme,QAAAzC,EAAAva,EAAAua,EAAAtD,GAAA,IAAApY,EAAAme,QAAA7T,EAAAnJ,EAAAmJ,EAAA8N,GAAA,IAAApY,EAAAme,QAAAxP,EAAAxN,EAAAwN,EAAAyJ,KAEAgwG,mBAAA,SAAA1/F,EAAA8/F,EAAAC,EAAAC,EAAAC,GACA,IAAA//F,EAAAF,EAAAE,SACAlN,EAAAkN,EAAA4/F,GACAl+G,EAAAse,EAAA6/F,GACA95G,EAAAia,EAAA8/F,GACAxnG,EAAA0H,EAAA+/F,GAEA,OAAA3nH,KAAAia,IAAAS,EAAAtD,EAAA9N,EAAA8N,GAAA,IACA,KAAApY,EAAAme,QAAAzC,EAAAva,EAAA,EAAAua,EAAArD,GAAA,IAAArY,EAAAme,QAAA7T,EAAAnJ,EAAA,EAAAmJ,EAAA+N,GAAA,IAAArY,EAAAme,QAAAxP,EAAAxN,EAAA,EAAAwN,EAAA0J,GAAA,IAAArY,EAAAme,QAAA+C,EAAA/f,EAAA,EAAA+f,EAAA7I,IAEA,KAAArY,EAAAme,QAAAzC,EAAAtD,EAAA,EAAAsD,EAAArD,GAAA,IAAArY,EAAAme,QAAA7T,EAAA8N,EAAA,EAAA9N,EAAA+N,GAAA,IAAArY,EAAAme,QAAAxP,EAAAyJ,EAAA,EAAAzJ,EAAA0J,GAAA,IAAArY,EAAAme,QAAA+C,EAAA9I,EAAA,EAAA8I,EAAA7I,MAqBArY,EAAA8+G,cAAA,SAAAlE,EAAAxoD,GACApyD,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,iBACA,IAAArjC,MAAAkmC,QAAAq0E,OAAA,CAAAA,IACAn5G,KAAAwiH,aAAArJ,EAAAxoD,GACA3wD,KAAAguC,sBAGAzvC,EAAA8+G,cAAA19G,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA8+G,cAAA19G,UAAAqJ,YAAAzK,EAAA8+G,cAKA9+G,EAAA8+G,cAAA19G,UAAA6iH,aAAA,SAAArJ,EAAAxoD,GACA,QAAA1rC,EAAA,EAAAjb,EAAAmvG,EAAAr6G,OAAsCmmB,EAAAjb,EAAOib,IAC7CjlB,KAAAyiH,SAAAtJ,EAAAl0F,GAAA0rC,GAGA,OAAA3wD,MAOAzB,EAAA8+G,cAAA19G,UAAA8iH,SAAA,SAAAtQ,EAAAxhD,QACAvxD,IAAAuxD,MAAA,IACA,IAIA1rC,EAAAjb,EAAAkoG,EAJAkR,OAAAhkH,IAAAuxD,EAAAyyD,cAAAzyD,EAAAyyD,cAAA,GACA56E,EAAAmoB,EAAAnoB,SACAg7E,OAAApkH,IAAAuxD,EAAA8yD,YAAAllH,EAAA4+G,gBAAAuG,iBAAA/yD,EAAA8yD,YAGAK,EAAA9jH,KAAAmnB,SAAAroB,OACAilH,EAAA5R,EAAAsL,cAAA2F,GACAj8F,EAAA48F,EAAA5R,MACAnD,EAAA+U,EAAA/U,MACAgV,GAAAzlH,EAAAuvG,WAAA0G,YAAArtF,GAEA,GAAA68F,EAAA,CAGA,IAFA78F,IAAA68F,UAEA/+F,EAAA,EAAAjb,EAAAglG,EAAAlwG,OAAmCmmB,EAAAjb,EAAOib,IAC1CitF,EAAAlD,EAAA/pF,GAEA1mB,EAAAuvG,WAAA0G,YAAAtC,KACAlD,EAAA/pF,GAAAitF,EAAA8R,WAIAA,GAAA,EAGA,IAAAh4E,EAAAztC,EAAAuvG,WAAAiB,iBAAA5nF,EAAA6nF,GAEA,IAAA/pF,EAAA,EAAAjb,EAAAglG,EAAAlwG,OAAiCmmB,EAAAjb,EAAOib,IACxCitF,EAAAlD,EAAA/pF,GACAkC,IAAAm3C,OAAA4zC,GAIA,IAAAkS,EAEAr3E,EADAs3E,EAAAl9F,EAAAroB,OAEAwlH,EAAAt4E,EAAAltC,OAEA,IAAAmmB,EAAA,EAAeA,EAAAo/F,EAAUp/F,IACzBm/F,EAAAj9F,EAAAlC,GACAjlB,KAAAmnB,SAAAmV,KAAA,IAAA/9B,EAAA+a,QAAA8qG,EAAA1kH,EAAA0kH,EAAAztG,EAAA,IAGA,IAAAsO,EAAA,EAAeA,EAAAq/F,EAAUr/F,IAAA,CAEzB,IAAAhL,GADA8yB,EAAAf,EAAA/mB,IACA,GAAA6+F,EACAj7G,EAAAkkC,EAAA,GAAA+2E,EACA52G,EAAA6/B,EAAA,GAAA+2E,EACA9jH,KAAAgsC,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAA,UAAAs7B,IACAxoC,KAAAisC,cAAA,GAAA3P,KAAAknF,EAAA6C,cAAArmH,KAAAia,EAAApR,EAAAqE,MAeA3O,EAAA4oH,oBAAA,SAAApiG,EAAAw8C,EAAAO,EAAAC,GACAxjE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,sBACAjiC,KAAA8wC,WAAA,CACA/rB,SACAw8C,WACAO,WACAC,aAEAR,EAAAhiE,KAAAiK,MAAA+3D,IAAA,GACAO,KAAA,EACAC,KAAA,EAAAxiE,KAAA0e,GAEA8jD,EAAAxjE,EAAAgB,KAAA2K,MAAA63D,EAAA,IAAAxiE,KAAA0e,IAEA,IASAmpG,EAKAniG,EAAAgE,EAdAq2F,GAAA/9C,EAAA,GAAAx8C,EAAAjmB,OACA0gH,EAAAj+C,EAAAx8C,EAAAjmB,OAAA,IAEAkrC,EAAA,IAAAzrC,EAAA2qC,gBAAA,IAAAs2E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GAAA,GACAr4F,EAAA,IAAA5oB,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAhyE,EAAA,IAAA/uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GAEA/+G,EAAA,EACAirG,EAAA,EAGA6b,GADAtiG,EAAAjmB,OACA,EAAAyiE,GACAxwB,EAAA,IAAAxyC,EAAA+a,QACAi0B,EAAA,IAAAhvC,EAAAme,QAGA,IAAAuI,EAAA,EAAeA,GAAAs8C,EAAet8C,IAAA,CAC9B,IAAAlD,EAAA+/C,EAAA78C,EAAAoiG,EAAAtlD,EACAlqD,EAAAtY,KAAAsY,IAAAkK,GACAtK,EAAAlY,KAAAkY,IAAAsK,GAEA,IAAAkH,EAAA,EAAiBA,GAAAlE,EAAAjmB,OAAA,EAAwBmqB,IAEzC8nB,EAAArxC,EAAAqlB,EAAAkE,GAAAvpB,EAAAmY,EACAk5B,EAAAp6B,EAAAoO,EAAAkE,GAAAtS,EACAo6B,EAAAn6B,EAAAmO,EAAAkE,GAAAvpB,EAAA+X,EACA0P,EAAAoC,OAAAhpB,EAAAwwC,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAEA22B,EAAA7tC,EAAAulB,EAAAs8C,EACAh0B,EAAA52B,EAAAsS,GAAAlE,EAAAjmB,OAAA,GACAwuC,EAAAhD,MAAA/pC,EAAAgtC,EAAA7tC,EAAA6tC,EAAA52B,GAEApW,IAKA,IAAA0kB,EAAA,EAAeA,EAAAs8C,EAAct8C,IAC7B,IAAAgE,EAAA,EAAiBA,EAAAlE,EAAAjmB,OAAA,EAAuBmqB,IAAA,CAGxC,IAAAhP,EAFAmtG,EAAAn+F,EAAAhE,EAAAF,EAAAjmB,OAGA+J,EAAAu+G,EAAAriG,EAAAjmB,OACAoO,EAAAk6G,EAAAriG,EAAAjmB,OAAA,EACA2gB,EAAA2nG,EAAA,EAEAp9E,EAAAntB,KAAA2uF,EAAAvxF,GACAuxF,IACAxhE,EAAAntB,KAAA2uF,EAAA3iG,GACA2iG,IACAxhE,EAAAntB,KAAA2uF,EAAA/rF,GACA+rF,IAEAxhE,EAAAntB,KAAA2uF,EAAA3iG,GACA2iG,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,IACAxhE,EAAAntB,KAAA2uF,EAAA/rF,GACA+rF,IAYA,GAPAxrG,KAAAkzC,SAAAlJ,GACAhqC,KAAAmzC,aAAA,WAAAhsB,GACAnnB,KAAAmzC,aAAA,KAAA7F,GAEAttC,KAAAuuC,uBAGAwzB,IAAA,EAAAxiE,KAAA0e,GAAA,CACA,IAAAovB,EAAArtC,KAAAqnB,WAAA7F,OAAApU,MACAk6G,EAAA,IAAA/oH,EAAA+a,QACAiuG,EAAA,IAAAhpH,EAAA+a,QACAuT,EAAA,IAAAtuB,EAAA+a,QAIA,IAFA8tG,EAAA7lD,EAAAx8C,EAAAjmB,OAAA,EAEAmmB,EAAA,EAAAgE,EAAA,EAAwBhE,EAAAF,EAAAjmB,OAAmBmmB,IAAAgE,GAAA,EAE3Cq+F,EAAA5nH,EAAA2tC,EAAApkB,EAAA,GACAq+F,EAAA3wG,EAAA02B,EAAApkB,EAAA,GACAq+F,EAAA1wG,EAAAy2B,EAAApkB,EAAA,GAEAs+F,EAAA7nH,EAAA2tC,EAAA+5E,EAAAn+F,EAAA,GACAs+F,EAAA5wG,EAAA02B,EAAA+5E,EAAAn+F,EAAA,GACAs+F,EAAA3wG,EAAAy2B,EAAA+5E,EAAAn+F,EAAA,GAEA4D,EAAA5P,WAAAqqG,EAAAC,GAAA7tG,YAEA2zB,EAAApkB,EAAA,GAAAokB,EAAA+5E,EAAAn+F,EAAA,GAAA4D,EAAAntB,EACA2tC,EAAApkB,EAAA,GAAAokB,EAAA+5E,EAAAn+F,EAAA,GAAA4D,EAAAlW,EACA02B,EAAApkB,EAAA,GAAAokB,EAAA+5E,EAAAn+F,EAAA,GAAA4D,EAAAjW,IAMArY,EAAA4oH,oBAAAxnH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAA4oH,oBAAAxnH,UAAAqJ,YAAAzK,EAAA4oH,oBAcA5oH,EAAAipH,cAAA,SAAAziG,EAAAw8C,EAAAO,EAAAC,GACAxjE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,gBACAjiC,KAAA8wC,WAAA,CACA/rB,SACAw8C,WACAO,WACAC,aAEA/hE,KAAAmtC,mBAAA,IAAA5uC,EAAA4oH,oBAAApiG,EAAAw8C,EAAAO,EAAAC,IACA/hE,KAAAmwC,iBAGA5xC,EAAAipH,cAAA7nH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAipH,cAAA7nH,UAAAqJ,YAAAzK,EAAAipH,cAOAjpH,EAAAkpH,cAAA,SAAA9qG,EAAAC,EAAAukD,EAAAC,GACA7iE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,gBACAjiC,KAAA8wC,WAAA,CACAn0B,QACAC,SACAukD,gBACAC,kBAEAphE,KAAAmtC,mBAAA,IAAA5uC,EAAAm6E,oBAAA/7D,EAAAC,EAAAukD,EAAAC,KAGA7iE,EAAAkpH,cAAA9nH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAkpH,cAAA9nH,UAAAqJ,YAAAzK,EAAAkpH,cAOAlpH,EAAAm6E,oBAAA,SAAA/7D,EAAAC,EAAAukD,EAAAC,GACA7iE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,sBACAjiC,KAAA8wC,WAAA,CACAn0B,QACAC,SACAukD,gBACAC,kBAgBA,IAdA,IAAAsmD,EAAA/qG,EAAA,EACAgrG,EAAA/qG,EAAA,EACAqjG,EAAA1gH,KAAAiK,MAAA23D,IAAA,EACA++C,EAAA3gH,KAAAiK,MAAA43D,IAAA,EACAo/C,EAAAP,EAAA,EACAQ,EAAAP,EAAA,EACA0H,EAAAjrG,EAAAsjG,EACA4H,EAAAjrG,EAAAsjG,EACA/4F,EAAA,IAAAgB,aAAAq4F,EAAAC,EAAA,GACApzE,EAAA,IAAAllB,aAAAq4F,EAAAC,EAAA,GACAnzE,EAAA,IAAAnlB,aAAAq4F,EAAAC,EAAA,GACApzG,EAAA,EACAy6G,EAAA,EAEA/nG,EAAA,EAAoBA,EAAA0gG,EAAa1gG,IAGjC,IAFA,IAAApJ,EAAAoJ,EAAA8nG,EAAAF,EAEA7nG,EAAA,EAAsBA,EAAA0gG,EAAa1gG,IAAA,CACnC,IAAApgB,EAAAogB,EAAA8nG,EAAAF,EACAvgG,EAAA9Z,GAAA3N,EACAynB,EAAA9Z,EAAA,IAAAsJ,EACA02B,EAAAhgC,EAAA,KACAigC,EAAAw6E,GAAAhoG,EAAAmgG,EACA3yE,EAAAw6E,EAAA,KAAA/nG,EAAAmgG,EACA7yG,GAAA,EACAy6G,GAAA,EAIAz6G,EAAA,EACA,IAAA28B,EAAA,IAAA7iB,EAAAroB,OAAA,QAAAusC,YAAAJ,aAAAg1E,EAAAC,EAAA,GAEA,IAAAngG,EAAA,EAAoBA,EAAAmgG,EAAYngG,IAChC,IAAAD,EAAA,EAAsBA,EAAAmgG,EAAYngG,IAAA,CAClC,IAAA7F,EAAA6F,EAAA0gG,EAAAzgG,EACAlX,EAAAiX,EAAA0gG,GAAAzgG,EAAA,GACA7S,EAAA4S,EAAA,EAAA0gG,GAAAzgG,EAAA,GACAN,EAAAK,EAAA,EAAA0gG,EAAAzgG,EACAiqB,EAAA38B,GAAA4M,EACA+vB,EAAA38B,EAAA,GAAAxE,EACAmhC,EAAA38B,EAAA,GAAAoS,EACAuqB,EAAA38B,EAAA,GAAAxE,EACAmhC,EAAA38B,EAAA,GAAAH,EACA88B,EAAA38B,EAAA,GAAAoS,EACApS,GAAA,EAIArN,KAAAkzC,SAAA,IAAA30C,EAAA2qC,gBAAAc,EAAA,IACAhqC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/hB,EAAA,IACAnnB,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAAmE,EAAA,IACArtC,KAAAmzC,aAAA,SAAA50C,EAAA2qC,gBAAAoE,EAAA,KAGA/uC,EAAAm6E,oBAAA/4E,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAm6E,oBAAA/4E,UAAAqJ,YAAAzK,EAAAm6E,oBAMAn6E,EAAAwpH,mBAAA,SAAA9lD,EAAAC,EAAAC,EAAAC,EAAAZ,EAAAC,GACAljE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,qBACAjiC,KAAA8wC,WAAA,CACAmxB,cACAC,cACAC,gBACAC,cACAZ,aACAC,eAEAQ,KAAA,GACAC,KAAA,GACAV,OAAApiE,IAAAoiE,IAAA,EACAC,OAAAriE,IAAAqiE,IAAA,EAAAliE,KAAA0e,GAIA,IAUA6iG,EAKA73F,EAAAhE,EAfAq6F,IAHAn9C,OAAA/iE,IAAA+iE,EAAA5iE,KAAA2M,IAAA,EAAAi2D,GAAA,GAGA,KAFAC,OAAAhjE,IAAAgjE,EAAA7iE,KAAA2M,IAAA,EAAAk2D,GAAA,GAEA,GACAo9C,EAAAr9C,EAAAC,EAAA,IAEAp4B,EAAA,IAAAzrC,EAAA2qC,gBAAA,IAAAs2E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GAAA,GACAr4F,EAAA,IAAA5oB,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAjyE,EAAA,IAAA9uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAhyE,EAAA,IAAA/uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GAEA/+G,EAAA,EACAirG,EAAA,EAEAxpF,EAAAigD,EACA+lD,GAAA9lD,EAAAD,GAAAG,EACArxB,EAAA,IAAAxyC,EAAA+a,QACAi0B,EAAA,IAAAhvC,EAAAme,QAIA,IAAAuM,EAAA,EAAeA,GAAAm5C,EAAkBn5C,IAAA,CACjC,IAAAhE,EAAA,EAAiBA,GAAAk9C,EAAoBl9C,IACrC67F,EAAAt/C,EAAAv8C,EAAAk9C,EAAAV,EAEA1wB,EAAArxC,EAAAsiB,EAAAziB,KAAAkY,IAAAqpG,GACA/vE,EAAAp6B,EAAAqL,EAAAziB,KAAAsY,IAAAipG,GACA35F,EAAAoC,OAAAhpB,EAAAwwC,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAEAy2B,EAAA9jB,OAAAhpB,EAAA,OAEAgtC,EAAA7tC,GAAAqxC,EAAArxC,EAAAwiE,EAAA,KACA30B,EAAA52B,GAAAo6B,EAAAp6B,EAAAurD,EAAA,KACA50B,EAAAhD,MAAA/pC,EAAAgtC,EAAA7tC,EAAA6tC,EAAA52B,GAEApW,IAIAyhB,GAAAgmG,EAIA,IAAA/+F,EAAA,EAAeA,EAAAm5C,EAAiBn5C,IAAA,CAChC,IAAAg/F,EAAAh/F,GAAAk5C,EAAA,GAEA,IAAAl9C,EAAA,EAAiBA,EAAAk9C,EAAmBl9C,IAAA,CAGpC,IAAAhL,EAFA6mG,EAAA77F,EAAAgjG,EAGAp/G,EAAAi4G,EAAA3+C,EAAA,EACAj1D,EAAA4zG,EAAA3+C,EAAA,EACA1iD,EAAAqhG,EAAA,EAEA92E,EAAAntB,KAAA2uF,EAAAvxF,GACAuxF,IACAxhE,EAAAntB,KAAA2uF,EAAA3iG,GACA2iG,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,IAEAxhE,EAAAntB,KAAA2uF,EAAAvxF,GACAuxF,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,IACAxhE,EAAAntB,KAAA2uF,EAAA/rF,GACA+rF,KAKAxrG,KAAAkzC,SAAAlJ,GACAhqC,KAAAmzC,aAAA,WAAAhsB,GACAnnB,KAAAmzC,aAAA,SAAA9F,GACArtC,KAAAmzC,aAAA,KAAA7F,IAGA/uC,EAAAwpH,mBAAApoH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAwpH,mBAAApoH,UAAAqJ,YAAAzK,EAAAwpH,mBAMAxpH,EAAA2pH,aAAA,SAAAjmD,EAAAC,EAAAC,EAAAC,EAAAZ,EAAAC,GACAljE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,eACAjiC,KAAA8wC,WAAA,CACAmxB,cACAC,cACAC,gBACAC,cACAZ,aACAC,eAEAzhE,KAAAmtC,mBAAA,IAAA5uC,EAAAwpH,mBAAA9lD,EAAAC,EAAAC,EAAAC,EAAAZ,EAAAC,KAGAljE,EAAA2pH,aAAAvoH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA2pH,aAAAvoH,UAAAqJ,YAAAzK,EAAA2pH,aAMA3pH,EAAA4pH,eAAA,SAAAnmG,EAAAm/C,EAAAC,EAAAU,EAAAC,EAAAP,EAAAC,GACAljE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,iBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAm/C,gBACAC,iBACAU,WACAC,YACAP,aACAC,eAEAzhE,KAAAmtC,mBAAA,IAAA5uC,EAAA6pH,qBAAApmG,EAAAm/C,EAAAC,EAAAU,EAAAC,EAAAP,EAAAC,KAGAljE,EAAA4pH,eAAAxoH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA4pH,eAAAxoH,UAAAqJ,YAAAzK,EAAA4pH,eAOA5pH,EAAA6pH,qBAAA,SAAApmG,EAAAm/C,EAAAC,EAAAU,EAAAC,EAAAP,EAAAC,GACAljE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,uBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAm/C,gBACAC,iBACAU,WACAC,YACAP,aACAC,eAEAz/C,KAAA,GACAm/C,EAAA5hE,KAAA2M,IAAA,EAAA3M,KAAAiK,MAAA23D,IAAA,GACAC,EAAA7hE,KAAA2M,IAAA,EAAA3M,KAAAiK,MAAA43D,IAAA,GACAU,OAAA1iE,IAAA0iE,IAAA,EACAC,OAAA3iE,IAAA2iE,IAAA,EAAAxiE,KAAA0e,GAYA,IATA,IAAAoqG,GAFA7mD,OAAApiE,IAAAoiE,IAAA,IACAC,OAAAriE,IAAAqiE,IAAAliE,KAAA0e,IAEAqhG,GAAAn+C,EAAA,IAAAC,EAAA,GACAh0B,EAAA,IAAA7uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAjyE,EAAA,IAAA9uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAhyE,EAAA,IAAA/uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACA/+G,EAAA,EACA4mB,EAAA,GACA3F,EAAA,IAAAjjB,EAAA+a,QAEA3C,EAAA,EAAmBA,GAAAyqD,EAAqBzqD,IAAA,CAIxC,IAHA,IAAA2xG,EAAA,GACAzuG,EAAAlD,EAAAyqD,EAEA1hE,EAAA,EAAqBA,GAAAyhE,EAAoBzhE,IAAA,CACzC,IAAAu9B,EAAAv9B,EAAAyhE,EACAgtC,GAAAnsF,EAAAziB,KAAAkY,IAAAqqD,EAAA7kC,EAAA8kC,GAAAxiE,KAAAsY,IAAA2pD,EAAA3nD,EAAA4nD,GACA2sC,EAAApsF,EAAAziB,KAAAkY,IAAA+pD,EAAA3nD,EAAA4nD,GACA+8C,EAAAx8F,EAAAziB,KAAAsY,IAAAiqD,EAAA7kC,EAAA8kC,GAAAxiE,KAAAsY,IAAA2pD,EAAA3nD,EAAA4nD,GACAjgD,EAAA1Y,IAAAqlG,EAAAC,EAAAoQ,GAAA9kG,YACA0zB,EAAA7jB,OAAAhpB,EAAA4tG,EAAAC,EAAAoQ,GACAnxE,EAAA9jB,OAAAhpB,EAAAihB,EAAA9hB,EAAA8hB,EAAA7K,EAAA6K,EAAA5K,GACA02B,EAAAhD,MAAA/pC,EAAA08B,EAAA,EAAApjB,GACAyuG,EAAAhsF,KAAA/7B,GACAA,IAGA4mB,EAAAmV,KAAAgsF,GAGA,IAAAt+E,EAAA,GAEA,IAAArzB,EAAA,EAAmBA,EAAAyqD,EAAoBzqD,IACvC,IAAAjX,EAAA,EAAqBA,EAAAyhE,EAAmBzhE,IAAA,CACxC,IAAAyZ,EAAAgO,EAAAxQ,GAAAjX,EAAA,GACA+e,EAAA0I,EAAAxQ,GAAAjX,GACAi7B,EAAAxT,EAAAxQ,EAAA,GAAAjX,GACA6oH,EAAAphG,EAAAxQ,EAAA,GAAAjX,EAAA,IACA,IAAAiX,GAAA6qD,EAAA,IAAAx3B,EAAA1N,KAAAnjB,EAAAsF,EAAA8pG,IACA5xG,IAAAyqD,EAAA,GAAAinD,EAAA9oH,KAAA0e,KAAA+rB,EAAA1N,KAAA7d,EAAAkc,EAAA4tF,GAIAvoH,KAAAkzC,SAAA,IAAA9F,EAAA9D,MAAA,MAAA/qC,EAAA6sC,gBAAA7sC,EAAAysC,iBAAAhB,EAAA,IACAhqC,KAAAmzC,aAAA,WAAA/F,GACAptC,KAAAmzC,aAAA,SAAA9F,GACArtC,KAAAmzC,aAAA,KAAA7F,GACAttC,KAAA02B,eAAA,IAAAn4B,EAAA0pB,OAAA,IAAA1pB,EAAA+a,QAAA0I,IAGAzjB,EAAA6pH,qBAAAzoH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAA6pH,qBAAAzoH,UAAAqJ,YAAAzK,EAAA6pH,qBAqBA7pH,EAAAiqH,aAAA,SAAAtsD,EAAAprB,GAEA,IAAAsrB,GADAtrB,KAAA,IACAsrB,KAEA,GAAAA,aAAA79D,EAAA89D,QAAA,EAEA,OADA9xD,QAAA2U,MAAA,wEACA,IAAA3gB,EAAA2oB,SAGA,IAAAiyF,EAAA/8C,EAAAu7C,eAAAz7C,EAAAprB,EAAA/lC,KAAA+lC,EAAAsyE,eAEAtyE,EAAAiyE,YAAA3jH,IAAA0xC,EAAAl0B,OAAAk0B,EAAAl0B,OAAA,QAEAxd,IAAA0xC,EAAAkyE,iBAAAlyE,EAAAkyE,eAAA,SACA5jH,IAAA0xC,EAAAmyE,YAAAnyE,EAAAmyE,UAAA,QACA7jH,IAAA0xC,EAAAqyE,eAAAryE,EAAAqyE,cAAA,GACA5kH,EAAA4+G,gBAAAv8G,KAAAZ,KAAAm5G,EAAAroE,GACA9wC,KAAAiiC,KAAA,gBAGA1jC,EAAAiqH,aAAA7oH,UAAAE,OAAA6/B,OAAAnhC,EAAA4+G,gBAAAx9G,WACApB,EAAAiqH,aAAA7oH,UAAAqJ,YAAAzK,EAAAiqH,aAMAjqH,EAAAkqH,oBAAA,SAAAzmG,EAAAqgD,EAAAT,EAAAU,EAAAC,GACAhkE,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,sBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAqgD,OACAT,iBACAU,kBACAC,OAEAvgD,KAAA,IACAqgD,KAAA,GACAT,EAAAriE,KAAAiK,MAAAo4D,IAAA,EACAU,EAAA/iE,KAAAiK,MAAA84D,IAAA,EACAC,KAAA,EAAAhjE,KAAA0e,GAEA,IAeAgL,EAAAhE,EAfAq6F,GAAA19C,EAAA,IAAAU,EAAA,GACAk9C,EAAA59C,EAAAU,EAAA,IAEAt4B,EAAA,IAAAw1E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GACAr4F,EAAA,IAAAgB,aAAA,EAAAm3F,GACAjyE,EAAA,IAAAllB,aAAA,EAAAm3F,GACAhyE,EAAA,IAAAnlB,aAAA,EAAAm3F,GAEAI,EAAA,EACAC,EAAA,EACAC,EAAA,EAEA9gG,EAAA,IAAAvgB,EAAA+a,QACAy3B,EAAA,IAAAxyC,EAAA+a,QACAkI,EAAA,IAAAjjB,EAAA+a,QAGA,IAAA2P,EAAA,EAAeA,GAAA24C,EAAqB34C,IACpC,IAAAhE,EAAA,EAAiBA,GAAAq9C,EAAsBr9C,IAAA,CACvC,IAAAgY,EAAAhY,EAAAq9C,EAAAC,EACA1oD,EAAAoP,EAAA24C,EAAAriE,KAAA0e,GAAA,EAEA8yB,EAAArxC,GAAAsiB,EAAAqgD,EAAA9iE,KAAAkY,IAAAoC,IAAAta,KAAAkY,IAAAwlB,GACA8T,EAAAp6B,GAAAqL,EAAAqgD,EAAA9iE,KAAAkY,IAAAoC,IAAAta,KAAAsY,IAAAolB,GACA8T,EAAAn6B,EAAAyrD,EAAA9iE,KAAAsY,IAAAgC,GACAsN,EAAAu4F,GAAA3uE,EAAArxC,EACAynB,EAAAu4F,EAAA,GAAA3uE,EAAAp6B,EACAwQ,EAAAu4F,EAAA,GAAA3uE,EAAAn6B,EAEAkI,EAAApf,EAAAsiB,EAAAziB,KAAAkY,IAAAwlB,GACAne,EAAAnI,EAAAqL,EAAAziB,KAAAsY,IAAAolB,GAEAzb,EAAArE,WAAA4zB,EAAAjyB,GAAApF,YACA2zB,EAAAqyE,GAAAl+F,EAAA9hB,EACA2tC,EAAAqyE,EAAA,GAAAl+F,EAAA7K,EACA02B,EAAAqyE,EAAA,GAAAl+F,EAAA5K,EAEA02B,EAAAqyE,GAAA16F,EAAAq9C,EACAh1B,EAAAqyE,EAAA,GAAA12F,EAAA24C,EAEA89C,GAAA,EACAC,GAAA,EAKA,IAAA12F,EAAA,EAAeA,GAAA24C,EAAqB34C,IACpC,IAAAhE,EAAA,EAAiBA,GAAAq9C,EAAsBr9C,IAAA,CAEvC,IAAAhL,GAAAqoD,EAAA,GAAAr5C,EAAAhE,EAAA,EACApc,GAAAy5D,EAAA,IAAAr5C,EAAA,GAAAhE,EAAA,EACA/X,GAAAo1D,EAAA,IAAAr5C,EAAA,GAAAhE,EACAxF,GAAA6iD,EAAA,GAAAr5C,EAAAhE,EAEA+kB,EAAA41E,GAAA3lG,EACA+vB,EAAA41E,EAAA,GAAA/2G,EACAmhC,EAAA41E,EAAA,GAAAngG,EAEAuqB,EAAA41E,EAAA,GAAA/2G,EACAmhC,EAAA41E,EAAA,GAAA1yG,EACA88B,EAAA41E,EAAA,GAAAngG,EAEAmgG,GAAA,EAKA5/G,KAAAkzC,SAAA,IAAA30C,EAAA2qC,gBAAAc,EAAA,IACAhqC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/hB,EAAA,IACAnnB,KAAAmzC,aAAA,aAAA50C,EAAA2qC,gBAAAmE,EAAA,IACArtC,KAAAmzC,aAAA,SAAA50C,EAAA2qC,gBAAAoE,EAAA,KAGA/uC,EAAAkqH,oBAAA9oH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAkqH,oBAAA9oH,UAAAqJ,YAAAzK,EAAAkqH,oBAQAlqH,EAAAmqH,cAAA,SAAA1mG,EAAAqgD,EAAAT,EAAAU,EAAAC,GACAhkE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,gBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAqgD,OACAT,iBACAU,kBACAC,OAEAviE,KAAAmtC,mBAAA,IAAA5uC,EAAAkqH,oBAAAzmG,EAAAqgD,EAAAT,EAAAU,EAAAC,KAGAhkE,EAAAmqH,cAAA/oH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAmqH,cAAA/oH,UAAAqJ,YAAAzK,EAAAmqH,cAQAnqH,EAAAoqH,wBAAA,SAAA3mG,EAAAqgD,EAAAC,EAAAV,EAAAj4D,EAAAC,GACArL,EAAA6oB,eAAAxmB,KAAAZ,MACAA,KAAAiiC,KAAA,0BACAjiC,KAAA8wC,WAAA,CACA9uB,SACAqgD,OACAC,kBACAV,iBACAj4D,IACAC,KAEAoY,KAAA,IACAqgD,KAAA,GACAC,EAAA/iE,KAAAiK,MAAA84D,IAAA,GAEA34D,KAAA,EACAC,KAAA,EAEA,IAQAqb,EACAgE,EATAq2F,IAJA19C,EAAAriE,KAAAiK,MAAAo4D,IAAA,GAIA,IAAAU,EAAA,GACAk9C,EAAA59C,EAAAU,EAAA,IAEAt4B,EAAA,IAAAzrC,EAAA2qC,gBAAA,IAAAs2E,EAAA,MAAAn0E,YAAAJ,aAAAu0E,GAAA,GACAr4F,EAAA,IAAA5oB,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAjyE,EAAA,IAAA9uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GACAhyE,EAAA,IAAA/uC,EAAA2qC,gBAAA,IAAA/gB,aAAA,EAAAm3F,GAAA,GAIA/+G,EAAA,EACAirG,EAAA,EACAz6D,EAAA,IAAAxyC,EAAA+a,QACAkI,EAAA,IAAAjjB,EAAA+a,QACAi0B,EAAA,IAAAhvC,EAAAme,QACAksG,EAAA,IAAArqH,EAAA+a,QACAuvG,EAAA,IAAAtqH,EAAA+a,QACAwvG,EAAA,IAAAvqH,EAAA+a,QACAyvG,EAAA,IAAAxqH,EAAA+a,QACA0vG,EAAA,IAAAzqH,EAAA+a,QAEA,IAAA2L,EAAA,EAAeA,GAAAq9C,IAAsBr9C,EAAA,CAErC,IAAAgY,EAAAhY,EAAAq9C,EAAA34D,EAAApK,KAAA0e,GAAA,EAcA,IAXAgrG,EAAAhsF,EAAAtzB,EAAAC,EAAAoY,EAAA4mG,GACAK,EAAAhsF,EAAA,IAAAtzB,EAAAC,EAAAoY,EAAA6mG,GAEAE,EAAA5rG,WAAA0rG,EAAAD,GACAI,EAAA/rG,WAAA4rG,EAAAD,GACAE,EAAArvG,aAAAsvG,EAAAC,GACAA,EAAAvvG,aAAAqvG,EAAAC,GAEAD,EAAApvG,YACAsvG,EAAAtvG,YAEAuP,EAAA,EAAiBA,GAAA24C,IAAqB34C,EAAA,CAGtC,IAAApP,EAAAoP,EAAA24C,EAAAriE,KAAA0e,GAAA,EACAi0C,GAAAmQ,EAAA9iE,KAAAkY,IAAAoC,GACAs4C,EAAAkQ,EAAA9iE,KAAAsY,IAAAgC,GAGAk3B,EAAArxC,EAAAkpH,EAAAlpH,GAAAwyD,EAAA82D,EAAAtpH,EAAAyyD,EAAA22D,EAAAppH,GACAqxC,EAAAp6B,EAAAiyG,EAAAjyG,GAAAu7C,EAAA82D,EAAAryG,EAAAw7C,EAAA22D,EAAAnyG,GACAo6B,EAAAn6B,EAAAgyG,EAAAhyG,GAAAs7C,EAAA82D,EAAApyG,EAAAu7C,EAAA22D,EAAAlyG,GAEAuQ,EAAAoC,OAAAhpB,EAAAwwC,EAAArxC,EAAAqxC,EAAAp6B,EAAAo6B,EAAAn6B,GAEA4K,EAAArE,WAAA4zB,EAAA63E,GAAAlvG,YACA2zB,EAAA9jB,OAAAhpB,EAAAihB,EAAA9hB,EAAA8hB,EAAA7K,EAAA6K,EAAA5K,GAEA22B,EAAA7tC,EAAAulB,EAAAq9C,EACA/0B,EAAA52B,EAAAsS,EAAA24C,EACAt0B,EAAAhD,MAAA/pC,EAAAgtC,EAAA7tC,EAAA6tC,EAAA52B,GAEApW,KAKA,IAAA0oB,EAAA,EAAeA,GAAAq5C,EAAsBr5C,IACrC,IAAAhE,EAAA,EAAiBA,GAAA28C,EAAqB38C,IAAA,CAEtC,IAAAhL,GAAA2nD,EAAA,IAAA34C,EAAA,IAAAhE,EAAA,GACApc,GAAA+4D,EAAA,GAAA34C,GAAAhE,EAAA,GACA/X,GAAA00D,EAAA,GAAA34C,EAAAhE,EACAxF,GAAAmiD,EAAA,IAAA34C,EAAA,GAAAhE,EAEA+kB,EAAAntB,KAAA2uF,EAAAvxF,GACAuxF,IACAxhE,EAAAntB,KAAA2uF,EAAA3iG,GACA2iG,IACAxhE,EAAAntB,KAAA2uF,EAAA/rF,GACA+rF,IAEAxhE,EAAAntB,KAAA2uF,EAAA3iG,GACA2iG,IACAxhE,EAAAntB,KAAA2uF,EAAAt+F,GACAs+F,IACAxhE,EAAAntB,KAAA2uF,EAAA/rF,GACA+rF,IAUA,SAAAyd,EAAAhsF,EAAAtzB,EAAAC,EAAAoY,EAAAsF,GACA,IAAA4hG,EAAA3pH,KAAAkY,IAAAwlB,GACAksF,EAAA5pH,KAAAsY,IAAAolB,GACAmsF,EAAAx/G,EAAAD,EAAAszB,EACAosF,EAAA9pH,KAAAkY,IAAA2xG,GACA9hG,EAAA5nB,EAAAsiB,GAAA,EAAAqnG,GAAA,GAAAH,EACA5hG,EAAA3Q,EAAAqL,GAAA,EAAAqnG,GAAAF,EAAA,GACA7hG,EAAA1Q,EAAAoL,EAAAziB,KAAAsY,IAAAuxG,GAAA,GAZAppH,KAAAkzC,SAAAlJ,GACAhqC,KAAAmzC,aAAA,WAAAhsB,GACAnnB,KAAAmzC,aAAA,SAAA9F,GACArtC,KAAAmzC,aAAA,KAAA7F,IAaA/uC,EAAAoqH,wBAAAhpH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAAoqH,wBAAAhpH,UAAAqJ,YAAAzK,EAAAoqH,wBAMApqH,EAAA+qH,kBAAA,SAAAtnG,EAAAqgD,EAAAC,EAAAV,EAAAj4D,EAAAC,EAAA2/G,GACAhrH,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,oBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAqgD,OACAC,kBACAV,iBACAj4D,IACAC,UAEAxK,IAAAmqH,GAAAh/G,QAAAC,KAAA,4FACAxK,KAAAmtC,mBAAA,IAAA5uC,EAAAoqH,wBAAA3mG,EAAAqgD,EAAAC,EAAAV,EAAAj4D,EAAAC,IACA5J,KAAAmwC,iBAGA5xC,EAAA+qH,kBAAA3pH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAA+qH,kBAAA3pH,UAAAqJ,YAAAzK,EAAA+qH,kBAgBA/qH,EAAAqlH,aAAA,SAAAriE,EAAAggB,EAAAv/C,EAAA4/C,EAAAs9C,EAAAsK,GACAjrH,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,eACAjiC,KAAA8wC,WAAA,CACAyQ,OACAggB,WACAv/C,SACA4/C,iBACAs9C,SACAsK,SAEAjoD,KAAA,GACAv/C,KAAA,EACA4/C,KAAA,EACAs9C,MAAA,EACAsK,KAAAjrH,EAAAqlH,aAAA6F,QACA,IAGAjoG,EACAohG,EAEA3lF,EACApjB,EACAlR,EACAupD,EACAC,EACA6b,EAEA/oD,EACAgE,EACAygG,EACAC,EACA1vG,EACApR,EACAqE,EACAuS,EACAmqG,EACAC,EACAC,EACAC,EAUArqH,EAAAiX,EAAAC,EAlCAozG,EAAA,GACAnjG,EAAA7mB,KAIAiqH,EAAA1oD,EAAA,EAOA2oD,EAAA,IAAA3rH,EAAA+a,QAaAqqG,EAAA,IAAAplH,EAAAqlH,aAAAC,aAAAtiE,EAAAggB,EAAA29C,GACAiL,EAAAxG,EAAAwG,SACA98E,EAAAs2E,EAAAt2E,QACAy4E,EAAAnC,EAAAmC,UAWA,IATA9lH,KAAAmqH,WACAnqH,KAAAqtC,UACArtC,KAAA8lH,YAOA7gG,EAAA,EAAeA,EAAAglG,EAAehlG,IAS9B,IARA+kG,EAAA/kG,GAAA,GACAgY,EAAAhY,GAAAglG,EAAA,GACAj8C,EAAAzsB,EAAA4zD,WAAAl4E,GACAktF,EAAAllG,GACAzD,EAAA6rB,EAAApoB,GACA29F,EAAAkD,EAAA7gG,GACAtc,EAAAqZ,EAAAwnG,EAAAvsF,GAEAhU,EAAA,EAAiBA,EAAA24C,EAAoB34C,IACrCpP,EAAAoP,EAAA24C,EAAA,EAAAriE,KAAA0e,GACAi0C,GAAAvpD,EAAApJ,KAAAkY,IAAAoC,GAEAs4C,EAAAxpD,EAAApJ,KAAAsY,IAAAgC,GACAqwG,EAAAhhH,KAAA8kE,GACAk8C,EAAAxqH,GAAAwyD,EAAA1wC,EAAA9hB,EAAAyyD,EAAAywD,EAAAljH,EACAwqH,EAAAvzG,GAAAu7C,EAAA1wC,EAAA7K,EAAAw7C,EAAAywD,EAAAjsG,EACAuzG,EAAAtzG,GAAAs7C,EAAA1wC,EAAA5K,EAAAu7C,EAAAywD,EAAAhsG,EACAozG,EAAA/kG,GAAAgE,IAvBAvpB,EAuBAwqH,EAAAxqH,EAvBAiX,EAuBAuzG,EAAAvzG,EAvBAC,EAuBAszG,EAAAtzG,EAtBAiQ,EAAAM,SAAAmV,KAAA,IAAA/9B,EAAA+a,QAAA5Z,EAAAiX,EAAAC,IAAA,GA2BA,IAAAqO,EAAA,EAAeA,EAAAs8C,EAAct8C,IAC7B,IAAAgE,EAAA,EAAiBA,EAAA24C,EAAoB34C,IACrCygG,EAAAxK,GAAAj6F,EAAA,GAAAs8C,EAAAt8C,EAAA,EACA0kG,GAAA1gG,EAAA,GAAA24C,EACA3nD,EAAA+vG,EAAA/kG,GAAAgE,GAEApgB,EAAAmhH,EAAAN,GAAAzgG,GACA/b,EAAA88G,EAAAN,GAAAC,GACAlqG,EAAAuqG,EAAA/kG,GAAA0kG,GACAC,EAAA,IAAArrH,EAAAme,QAAAuI,EAAAs8C,EAAAt4C,EAAA24C,GACAioD,EAAA,IAAAtrH,EAAAme,SAAAuI,EAAA,GAAAs8C,EAAAt4C,EAAA24C,GACAkoD,EAAA,IAAAvrH,EAAAme,SAAAuI,EAAA,GAAAs8C,GAAAt4C,EAAA,GAAA24C,GACAmoD,EAAA,IAAAxrH,EAAAme,QAAAuI,EAAAs8C,GAAAt4C,EAAA,GAAA24C,GACA5hE,KAAAgsC,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAA7uB,EAAApR,EAAA4W,IACAzf,KAAAisC,cAAA,GAAA3P,KAAA,CAAAstF,EAAAC,EAAAE,IACA/pH,KAAAgsC,MAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAAjgC,EAAAqE,EAAAuS,IACAzf,KAAAisC,cAAA,GAAA3P,KAAA,CAAAutF,EAAA3+G,QAAA4+G,EAAAC,EAAA7+G,UAIAlL,KAAAguC,qBACAhuC,KAAAuuC,wBAGAhwC,EAAAqlH,aAAAjkH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAqlH,aAAAjkH,UAAAqJ,YAAAzK,EAAAqlH,aAEArlH,EAAAqlH,aAAA6F,QAAA,SAAAxsF,GACA,UAGA1+B,EAAAqlH,aAAAwG,gBAAA,SAAAntF,GACA,OAAA19B,KAAAsY,IAAAtY,KAAA0e,GAAAgf,IAIA1+B,EAAAqlH,aAAAC,aAAA,SAAAtiE,EAAAggB,EAAA29C,GACA,IAOAx9F,EACA2oG,EACAz6F,EACAC,EACAy6F,EACArlG,EACAgY,EAbAzb,EAAA,IAAAjjB,EAAA+a,QACA6wG,EAAA,GACA98E,EAAA,GACAy4E,EAAA,GACAz3C,EAAA,IAAA9vE,EAAA+a,QACAixG,EAAA,IAAAhsH,EAAA8hB,QACA4pG,EAAA1oD,EAAA,EAaA,IAJAvhE,KAAAmqH,WACAnqH,KAAAqtC,UACArtC,KAAA8lH,YAEA7gG,EAAA,EAAeA,EAAAglG,EAAehlG,IAC9BgY,EAAAhY,GAAAglG,EAAA,GACAE,EAAAllG,GAAAs8B,EAAA80D,aAAAp5E,GACAktF,EAAAllG,GAAAvL,YAqDA,IA9BA,WAGA2zB,EAAA,OAAA9uC,EAAA+a,QACAwsG,EAAA,OAAAvnH,EAAA+a,QACA+wG,EAAAhrH,OAAAmrH,UACA56F,EAAArwB,KAAAia,IAAA2wG,EAAA,GAAAzqH,GACAmwB,EAAAtwB,KAAAia,IAAA2wG,EAAA,GAAAxzG,GACA2zG,EAAA/qH,KAAAia,IAAA2wG,EAAA,GAAAvzG,GAEAgZ,GAAAy6F,IACAA,EAAAz6F,EACApO,EAAA1Y,IAAA,QAGA+mB,GAAAw6F,IACAA,EAAAx6F,EACArO,EAAA1Y,IAAA,QAGAwhH,GAAAD,GACA7oG,EAAA1Y,IAAA,OAGAulE,EAAA50D,aAAA0wG,EAAA,GAAA3oG,GAAA9H,YACA2zB,EAAA,GAAA5zB,aAAA0wG,EAAA,GAAA97C,GACAy3C,EAAA,GAAArsG,aAAA0wG,EAAA,GAAA98E,EAAA,IA9CAo9E,GAkDAxlG,EAAA,EAAeA,EAAAglG,EAAehlG,IAC9BooB,EAAApoB,GAAAooB,EAAApoB,EAAA,GAAA/Z,QACA46G,EAAA7gG,GAAA6gG,EAAA7gG,EAAA,GAAA/Z,QACAmjE,EAAA50D,aAAA0wG,EAAAllG,EAAA,GAAAklG,EAAAllG,IAEAopD,EAAAvvE,SAAAO,OAAAC,UACA+uE,EAAA30D,YACAgI,EAAAniB,KAAAoiB,KAAApjB,EAAAgB,KAAA2K,MAAAigH,EAAAllG,EAAA,GAAA1L,IAAA4wG,EAAAllG,KAAA,MAEAooB,EAAApoB,GAAA1F,aAAAgrG,EAAA56F,iBAAA0+C,EAAA3sD,KAGAokG,EAAA7gG,GAAAxL,aAAA0wG,EAAAllG,GAAAooB,EAAApoB,IAIA,GAAAi6F,EAQA,IAPAx9F,EAAAniB,KAAAoiB,KAAApjB,EAAAgB,KAAA2K,MAAAmjC,EAAA,GAAA9zB,IAAA8zB,EAAA48E,EAAA,WACAvoG,GAAAuoG,EAAA,EAEAE,EAAA,GAAA5wG,IAAA80D,EAAA50D,aAAA4zB,EAAA,GAAAA,EAAA48E,EAAA,SACAvoG,MAGAuD,EAAA,EAAiBA,EAAAglG,EAAehlG,IAEhCooB,EAAApoB,GAAA1F,aAAAgrG,EAAA56F,iBAAAw6F,EAAAllG,GAAAvD,EAAAuD,IACA6gG,EAAA7gG,GAAAxL,aAAA0wG,EAAAllG,GAAAooB,EAAApoB,KAYA1mB,EAAAmsH,mBAAA,SAAAvjG,EAAA6iB,EAAAhoB,EAAAggD,GACAzjE,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,qBACAjiC,KAAA8wC,WAAA,CACA3pB,WACA6iB,UACAhoB,SACAggD,UAEAhgD,KAAA,EACAggD,KAAA,EAGA,IAFA,IAAA2oD,EAAA3qH,KAEAilB,EAAA,EAAAjb,EAAAmd,EAAAroB,OAAwCmmB,EAAAjb,EAAOib,GAAA,EAC/C2lG,EAAA,IAAArsH,EAAA+a,QAAA6N,EAAAlC,GAAAkC,EAAAlC,EAAA,GAAAkC,EAAAlC,EAAA,KAGA,IAAAtb,EAAA3J,KAAAmnB,SACA6kB,EAAA,GAEA/iB,GAAAhE,EAAA,SAAAjb,EAAAggC,EAAAlrC,OAA8CmmB,EAAAjb,EAAOib,GAAA,EAAAgE,IAAA,CACrD,IAAA9P,EAAAxP,EAAAqgC,EAAA/kB,IACAxG,EAAA9U,EAAAqgC,EAAA/kB,EAAA,IACA0V,EAAAhxB,EAAAqgC,EAAA/kB,EAAA,IACA+mB,EAAA/iB,GAAA,IAAA1qB,EAAAuqC,MAAA3vB,EAAA5Y,MAAAke,EAAAle,MAAAo6B,EAAAp6B,MAAA,CAAA4Y,EAAAjO,QAAAuT,EAAAvT,QAAAyvB,EAAAzvB,UAGA,IAAA2/G,EAAA,IAAAtsH,EAAA+a,QAEA,IAAA2L,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAAqCmmB,EAAAjb,EAAOib,IAC5C6lG,EAAA9+E,EAAA/mB,GAAA+8C,GAIA,IAAA/8C,EAAA,EAAAjb,EAAAhK,KAAAisC,cAAA,GAAAntC,OAAqDmmB,EAAAjb,EAAOib,IAAA,CAC5D,IAAAqoB,EAAAttC,KAAAisC,cAAA,GAAAhnB,GACApJ,EAAAyxB,EAAA,GAAA5tC,EACAuc,EAAAqxB,EAAA,GAAA5tC,EACA0sB,EAAAkhB,EAAA,GAAA5tC,EACAwM,EAAA3M,KAAA2M,IAAA2P,EAAAI,EAAAmQ,GACAvhB,EAAAtL,KAAAsL,IAAAgR,EAAAI,EAAAmQ,GAEAlgB,EAAA,IAAArB,EAAA,KAEAgR,EAAA,KAAAyxB,EAAA,GAAA5tC,GAAA,GACAuc,EAAA,KAAAqxB,EAAA,GAAA5tC,GAAA,GACA0sB,EAAA,KAAAkhB,EAAA,GAAA5tC,GAAA,IAKA,IAAAulB,EAAA,EAAAjb,EAAAhK,KAAAmnB,SAAAroB,OAA6CmmB,EAAAjb,EAAOib,IACpDjlB,KAAAmnB,SAAAlC,GAAAnY,eAAAkV,GAQA,SAAA4oG,EAAAxpG,GACA,IAAA2vB,EAAA3vB,EAAA1H,YAAAxO,QACA6lC,EAAAxwC,MAAAoqH,EAAAxjG,SAAAmV,KAAAyU,GAAA,EAEA,IAAA9T,EAAA8tF,EAAA3pG,GAAA,EAAA7hB,KAAA0e,GAAA,GACApE,EAyDA,SAAAuH,GACA,OAAA7hB,KAAAwb,OAAAqG,EAAAzK,EAAApX,KAAAkM,KAAA2V,EAAA1hB,EAAA0hB,EAAA1hB,EAAA0hB,EAAAxK,EAAAwK,EAAAxK,IA1DAo0G,CAAA5pG,GAAA7hB,KAAA0e,GAAA,GAEA,OADA8yB,EAAAxD,GAAA,IAAAhvC,EAAAme,QAAAugB,EAAA,EAAApjB,GACAk3B,EAIA,SAAAk6E,EAAA9xG,EAAAsF,EAAAkc,GACA,IAAAoS,EAAA,IAAAxuC,EAAAuqC,MAAA3vB,EAAA5Y,MAAAke,EAAAle,MAAAo6B,EAAAp6B,MAAA,CAAA4Y,EAAAjO,QAAAuT,EAAAvT,QAAAyvB,EAAAzvB,UACAy/G,EAAA3+E,MAAA1P,KAAAyQ,GACA89E,EAAA3hH,KAAAiQ,GAAA5M,IAAAkS,GAAAlS,IAAAouB,GAAApd,aAAA,GACA,IAAA2tG,EAAAH,EAAAF,GACAF,EAAA1+E,cAAA,GAAA3P,KAAA,CAAA6uF,EAAAhyG,EAAAo0B,GAAAp0B,EAAA+xG,GAAAC,EAAA1sG,EAAA8uB,GAAA9uB,EAAAysG,GAAAC,EAAAxwF,EAAA4S,GAAA5S,EAAAuwF,KAIA,SAAAJ,EAAA/9E,EAAAi1B,GAOA,IANA,IAAAopD,EAAA7rH,KAAAC,IAAA,EAAAwiE,GACA/nD,EAAA2wG,EAAAD,EAAAxjG,SAAA4lB,EAAA9yB,IACApR,EAAA+hH,EAAAD,EAAAxjG,SAAA4lB,EAAAlkC,IACAqE,EAAA09G,EAAAD,EAAAxjG,SAAA4lB,EAAA7/B,IACA2M,EAAA,GAEAoL,EAAA,EAAqBA,GAAAmmG,EAAWnmG,IAAA,CAChCpL,EAAAoL,GAAA,GAKA,IAJA,IAAAomG,EAAAT,EAAA3wG,EAAA/O,QAAA6B,KAAAG,EAAA+X,EAAAmmG,IACAE,EAAAV,EAAA/hH,EAAAqC,QAAA6B,KAAAG,EAAA+X,EAAAmmG,IACAG,EAAAH,EAAAnmG,EAEAgE,EAAA,EAAuBA,GAAAsiG,EAAWtiG,IAElCpP,EAAAoL,GAAAgE,GADA,IAAAA,GAAAhE,IAAAmmG,EACAC,EAEAT,EAAAS,EAAAngH,QAAA6B,KAAAu+G,EAAAriG,EAAAsiG,IAMA,IAAAtmG,EAAA,EAAqBA,EAAAmmG,EAAUnmG,IAC/B,IAAAgE,EAAA,EAAuBA,EAAA,GAAAmiG,EAAAnmG,GAAA,EAAwBgE,IAAA,CAC/C,IAAAgS,EAAA17B,KAAAiK,MAAAyf,EAAA,GAEAA,EAAA,MACAgiG,EAAApxG,EAAAoL,GAAAgW,EAAA,GAAAphB,EAAAoL,EAAA,GAAAgW,GAAAphB,EAAAoL,GAAAgW,IAEAgwF,EAAApxG,EAAAoL,GAAAgW,EAAA,GAAAphB,EAAAoL,EAAA,GAAAgW,EAAA,GAAAphB,EAAAoL,EAAA,GAAAgW,KAOA,SAAA8vF,EAAA3pG,GACA,OAAA7hB,KAAAwb,MAAAqG,EAAAxK,GAAAwK,EAAA1hB,GASA,SAAAyrH,EAAA59E,EAAAnsB,EAAA2pG,GAGA,OAFAA,EAAA,OAAAx9E,EAAA7tC,IAAA6tC,EAAA,IAAAhvC,EAAAme,QAAA6wB,EAAA7tC,EAAA,EAAA6tC,EAAA52B,IACA,IAAAyK,EAAA1hB,GAAA,IAAA0hB,EAAAxK,IAAA22B,EAAA,IAAAhvC,EAAAme,QAAAquG,EAAA,EAAAxrH,KAAA0e,GAAA,GAAAsvB,EAAA52B,IACA42B,EAAAriC,QA1EAlL,KAAAmwC,gBACAnwC,KAAAguC,qBACAhuC,KAAA02B,eAAA,IAAAn4B,EAAA0pB,OAAA,IAAA1pB,EAAA+a,QAAA0I,IA4EAzjB,EAAAmsH,mBAAA/qH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAmsH,mBAAA/qH,UAAAqJ,YAAAzK,EAAAmsH,mBAMAnsH,EAAAitH,qBAAA,SAAAxpG,EAAAggD,GACA,IAAAn4D,GAAA,EAAAtK,KAAAkM,KAAA,MACA9C,EAAA,EAAAkB,EACAsd,EAAA,EACA,2DACA,GAAAxe,GAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,EAAAlB,GAAAkB,EAAA,EAAAlB,EAAAkB,GACAlB,GAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,EAAAlB,GAAAkB,EAAA,EAAAlB,EAAAkB,EAAA,GACAA,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,GAAAkB,EAAA,EAAAlB,EAAAkB,EAAA,EAAAlB,GAEApK,EAAAmsH,mBAAA9pH,KAAAZ,KAAAmnB,EADA,4QACAnF,EAAAggD,GACAhiE,KAAAiiC,KAAA,uBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAggD,WAIAzjE,EAAAitH,qBAAA7rH,UAAAE,OAAA6/B,OAAAnhC,EAAAmsH,mBAAA/qH,WACApB,EAAAitH,qBAAA7rH,UAAAqJ,YAAAzK,EAAAitH,qBAMAjtH,EAAAktH,oBAAA,SAAAzpG,EAAAggD,GACA,IAAAn4D,GAAA,EAAAtK,KAAAkM,KAAA,MACA0b,EAAA,IAAAtd,EAAA,IAAAA,EAAA,MAAAA,EAAA,KAAAA,EAAA,OAAAA,EAAA,IAAAA,EAAA,MAAAA,EAAA,KAAAA,IAAA,KAAAA,EAAA,KAAAA,EAAA,MAAAA,EAAA,KAEAtL,EAAAmsH,mBAAA9pH,KAAAZ,KAAAmnB,EADA,oIACAnF,EAAAggD,GACAhiE,KAAAiiC,KAAA,sBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAggD,WAIAzjE,EAAAktH,oBAAA9rH,UAAAE,OAAA6/B,OAAAnhC,EAAAmsH,mBAAA/qH,WACApB,EAAAktH,oBAAA9rH,UAAAqJ,YAAAzK,EAAAktH,oBAMAltH,EAAAmtH,mBAAA,SAAA1pG,EAAAggD,GAGAzjE,EAAAmsH,mBAAA9pH,KAAAZ,KAFA,yCACA,kDACAgiB,EAAAggD,GACAhiE,KAAAiiC,KAAA,qBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAggD,WAIAzjE,EAAAmtH,mBAAA/rH,UAAAE,OAAA6/B,OAAAnhC,EAAAmsH,mBAAA/qH,WACApB,EAAAmtH,mBAAA/rH,UAAAqJ,YAAAzK,EAAAmtH,mBAMAntH,EAAAotH,oBAAA,SAAA3pG,EAAAggD,GAGAzjE,EAAAmsH,mBAAA9pH,KAAAZ,KAFA,gCACA,0BACAgiB,EAAAggD,GACAhiE,KAAAiiC,KAAA,sBACAjiC,KAAA8wC,WAAA,CACA9uB,SACAggD,WAIAzjE,EAAAotH,oBAAAhsH,UAAAE,OAAA6/B,OAAAnhC,EAAAmsH,mBAAA/qH,WACApB,EAAAotH,oBAAAhsH,UAAAqJ,YAAAzK,EAAAotH,oBAWAptH,EAAAqtH,mBAAA,SAAAC,EAAAC,EAAAC,GACAxtH,EAAA2oB,SAAAtmB,KAAAZ,MACAA,KAAAiiC,KAAA,qBACAjiC,KAAA8wC,WAAA,CACA+6E,OACAC,SACAC,UAEA,IAGA9mG,EAAAgE,EAAAtf,EACAkQ,EAaAI,EAAApR,EAAAqE,EAAAuS,EACAmqG,EAAAC,EAAAC,EAAAC,EAlBA7b,EAAAluG,KAAAmnB,SACA6kB,EAAAhsC,KAAAgsC,MACAsB,EAAAttC,KAAAisC,cAAA,GAGA+/E,EAAAF,EAAA,EAEA,IAAA7mG,EAAA,EAAeA,GAAA8mG,EAAa9mG,IAG5B,IAFApL,EAAAoL,EAAA8mG,EAEA9iG,EAAA,EAAiBA,GAAA6iG,EAAa7iG,IAE9Btf,EAAAkiH,EADA5iG,EAAA6iG,EACAjyG,GACAq0F,EAAA5xE,KAAA3yB,GAOA,IAAAsb,EAAA,EAAeA,EAAA8mG,EAAY9mG,IAC3B,IAAAgE,EAAA,EAAiBA,EAAA6iG,EAAY7iG,IAC7BhP,EAAAgL,EAAA+mG,EAAA/iG,EACApgB,EAAAoc,EAAA+mG,EAAA/iG,EAAA,EACA/b,GAAA+X,EAAA,GAAA+mG,EAAA/iG,EAAA,EACAxJ,GAAAwF,EAAA,GAAA+mG,EAAA/iG,EACA2gG,EAAA,IAAArrH,EAAAme,QAAAuM,EAAA6iG,EAAA7mG,EAAA8mG,GACAlC,EAAA,IAAAtrH,EAAAme,SAAAuM,EAAA,GAAA6iG,EAAA7mG,EAAA8mG,GACAjC,EAAA,IAAAvrH,EAAAme,SAAAuM,EAAA,GAAA6iG,GAAA7mG,EAAA,GAAA8mG,GACAhC,EAAA,IAAAxrH,EAAAme,QAAAuM,EAAA6iG,GAAA7mG,EAAA,GAAA8mG,GACA//E,EAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAA7uB,EAAApR,EAAA4W,IACA6tB,EAAAhR,KAAA,CAAAstF,EAAAC,EAAAE,IACA/9E,EAAA1P,KAAA,IAAA/9B,EAAAuqC,MAAAjgC,EAAAqE,EAAAuS,IACA6tB,EAAAhR,KAAA,CAAAutF,EAAA3+G,QAAA4+G,EAAAC,EAAA7+G,UAQAlL,KAAAguC,qBACAhuC,KAAAuuC,wBAGAhwC,EAAAqtH,mBAAAjsH,UAAAE,OAAA6/B,OAAAnhC,EAAA2oB,SAAAvnB,WACApB,EAAAqtH,mBAAAjsH,UAAAqJ,YAAAzK,EAAAqtH,mBAMArtH,EAAA0tH,kBAAA,SAAAhlG,GACA1oB,EAAA6oB,eAAAxmB,KAAAZ,MACA,IAAAkiH,EAAA,MACApwE,EAAA,GAEA,SAAAqwE,EAAAloG,EAAApR,GACA,OAAAoR,EAAApR,EAGA,IAAAk1C,EAAA,cAEA,GAAA92B,aAAA1oB,EAAA2oB,SAAA,CAOA,IANA,IAAAC,EAAAF,EAAAE,SACA6kB,EAAA/kB,EAAA+kB,MACAkgF,EAAA,EAEAt9B,EAAA,IAAAvjD,YAAA,EAAAW,EAAAltC,QAEAmmB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAAuCmmB,EAAAjb,EAAOib,IAG9C,IAFA,IAAA8nB,EAAAf,EAAA/mB,GAEAgE,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9Bi5F,EAAA,GAAAn1E,EAAAgR,EAAA90B,IACAi5F,EAAA,GAAAn1E,EAAAgR,GAAA90B,EAAA,OACAi5F,EAAAv9E,KAAAw9E,QAGA/iH,IAAA0yC,EAFAnJ,EAAAu5E,EAAAjiH,cAGA2uF,EAAA,EAAAs9B,GAAAhK,EAAA,GACAtzB,EAAA,EAAAs9B,EAAA,GAAAhK,EAAA,GACApwE,EAAAnJ,IAAA,EACAujF,KAKA,IAAA/wF,EAAA,IAAAhT,aAAA,EAAA+jG,EAAA,GAEA,IAAAjnG,EAAA,EAAAjb,EAAAkiH,EAAmCjnG,EAAAjb,EAAOib,IAC1C,IAAAgE,EAAA,EAAuBA,EAAA,EAAOA,IAAA,CAC9B,IAAA8nB,EAAA5pB,EAAAynE,EAAA,EAAA3pE,EAAAgE,IAEAkS,GADA56B,EAAA,EAAA0kB,EAAA,EAAAgE,GACA,GAAA8nB,EAAArxC,EACAy7B,EAAA56B,EAAA,GAAAwwC,EAAAp6B,EACAwkB,EAAA56B,EAAA,GAAAwwC,EAAAn6B,EAIA5W,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/N,EAAA,SACK,GAAAlU,aAAA1oB,EAAA6oB,eACL,UAAAH,EAAA1mB,MAAA,CAEA,IAAAypC,EAAA/iB,EAAA1mB,MAAA6M,MAEA0gC,GADA3mB,EAAAF,EAAAI,WAAAC,SACAL,EAAA6mB,QACAo+E,EAAA,EAEA,IAAAp+E,EAAAhvC,QACAmoB,EAAAqsB,SAAA,EAAAtJ,EAAAlrC,QAIA8vF,EAAA,IAAAvjD,YAAA,EAAArB,EAAAlrC,QAEA,IAFA,IAEA29C,EAAA,EAAA0vE,EAAAr+E,EAAAhvC,OAA2C29C,EAAA0vE,IAAQ1vE,EAKnD,IAJA,IAAA1O,EAAAD,EAAA2O,GACA34B,EAAAiqB,EAAAjqB,MAGAoB,GAAAD,EAAAnB,IAFAiqB,EAAAzE,OAEiDrkB,EAAAC,EAAQD,GAAA,EACzD,IAAAgE,EAAA,EAA2BA,EAAA,EAAOA,IAAA,CAIlC,IAAA0f,EAHAu5E,EAAA,GAAAl4E,EAAA/kB,EAAAgE,GACAi5F,EAAA,GAAAl4E,EAAA/kB,GAAAgE,EAAA,MACAi5F,EAAAv9E,KAAAw9E,QAGA/iH,IAAA0yC,EAFAnJ,EAAAu5E,EAAAjiH,cAGA2uF,EAAA,EAAAs9B,GAAAhK,EAAA,GACAtzB,EAAA,EAAAs9B,EAAA,GAAAhK,EAAA,GACApwE,EAAAnJ,IAAA,EACAujF,KAQA,IAFA/wF,EAAA,IAAAhT,aAAA,EAAA+jG,EAAA,GAEAjnG,EAAA,EAAAjb,EAAAkiH,EAAqCjnG,EAAAjb,EAAOib,IAC5C,IAAAgE,EAAA,EAAyBA,EAAA,EAAOA,IAAA,CAChC,IAAA1oB,EAAA,EAAA0kB,EAAA,EAAAgE,EACA0gB,EAAAilD,EAAA,EAAA3pE,EAAAgE,GACAkS,EAAA56B,EAAA,GAAA4mB,EAAAiC,KAAAugB,GACAxO,EAAA56B,EAAA,GAAA4mB,EAAAkC,KAAAsgB,GACAxO,EAAA56B,EAAA,GAAA4mB,EAAAmC,KAAAqgB,GAIA3pC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/N,EAAA,QACO,CAEP,IAEAixF,GADAF,GADA/kG,EAAAF,EAAAI,WAAAC,SAAAla,OACAtO,OAAA,GACA,EAGA,IAFAq8B,EAAA,IAAAhT,aAAA,EAAA+jG,EAAA,GAEAjnG,EAAA,EAAAjb,EAAAoiH,EAAoCnnG,EAAAjb,EAAOib,IAC3C,IAAAgE,EAAA,EAAyBA,EAAA,EAAOA,IAAA,CAChC,IACAygB,EAAA,EAAAzkB,EAAA,EAAAgE,EACAkS,GAFA56B,EAAA,GAAA0kB,EAAA,EAAAgE,GAEA,GAAA9B,EAAAuiB,GACAvO,EAAA56B,EAAA,GAAA4mB,EAAAuiB,EAAA,GACAvO,EAAA56B,EAAA,GAAA4mB,EAAAuiB,EAAA,GACAC,EAAA,EAAA1kB,GAAAgE,EAAA,OACAkS,EAAA56B,EAAA,GAAA4mB,EAAAwiB,GACAxO,EAAA56B,EAAA,GAAA4mB,EAAAwiB,EAAA,GACAxO,EAAA56B,EAAA,GAAA4mB,EAAAwiB,EAAA,GAIA3pC,KAAAmzC,aAAA,eAAA50C,EAAA2qC,gBAAA/N,EAAA,MAKA58B,EAAA0tH,kBAAAtsH,UAAAE,OAAA6/B,OAAAnhC,EAAA6oB,eAAAznB,WACApB,EAAA0tH,kBAAAtsH,UAAAqJ,YAAAzK,EAAA0tH,kBAOA1tH,EAAA8tH,WAAA,SAAAthH,GACAA,KAAA,EACA,IAAAoc,EAAA,IAAAgB,aAAA,OAAApd,EAAA,YAAAA,EAAA,YAAAA,IACA++B,EAAA,IAAA3hB,aAAA,0CACAlB,EAAA,IAAA1oB,EAAA6oB,eACAH,EAAAksB,aAAA,eAAA50C,EAAA2qC,gBAAA/hB,EAAA,IACAF,EAAAksB,aAAA,YAAA50C,EAAA2qC,gBAAAY,EAAA,IACA,IAAAtB,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACA98B,aAAA1qC,EAAA0D,eAEA1D,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAAuhB,IAGAjqC,EAAA8tH,WAAA1sH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAA8tH,WAAA1sH,UAAAqJ,YAAAzK,EAAA8tH,WAkBA9tH,EAAA+tH,YAAA,WACA,IAAAC,EAAA,IAAAhuH,EAAA6oB,eACAmlG,EAAAp5E,aAAA,eAAA50C,EAAA+sC,iBAAA,kBACA,IAAAkhF,EAAA,IAAAjuH,EAAAwiH,uBAAA,YAEA,OADAyL,EAAAtmG,UAAA,SACA,SAAA7J,EAAAgV,EAAAvyB,EAAA6L,EAAA8hH,EAAAC,GAEAnuH,EAAAwmC,SAAAnkC,KAAAZ,WACAZ,IAAAuL,MAAA,eACAvL,IAAAN,MAAA,QACAM,IAAAqtH,MAAA,GAAA3tH,QACAM,IAAAstH,MAAA,GAAAD,GACAzsH,KAAAsnB,SAAApe,KAAAmoB,GACArxB,KAAAgkB,KAAA,IAAAzlB,EAAAwlC,KAAAwoF,EAAA,IAAAhuH,EAAAwnE,kBAAA,CACAp7D,WAEA3K,KAAAgkB,KAAAshB,kBAAA,EACAtlC,KAAAuM,IAAAvM,KAAAgkB,MACAhkB,KAAA2sH,KAAA,IAAApuH,EAAAulC,KAAA0oF,EAAA,IAAAjuH,EAAA+nE,kBAAA,CACA37D,WAEA3K,KAAA2sH,KAAArnF,kBAAA,EACAtlC,KAAAuM,IAAAvM,KAAA2sH,MACA3sH,KAAA4sH,aAAAvwG,GACArc,KAAAue,UAAAzf,EAAA2tH,EAAAC,IAxBA,GA4BAnuH,EAAA+tH,YAAA3sH,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAA+tH,YAAA3sH,UAAAqJ,YAAAzK,EAAA+tH,YAEA/tH,EAAA+tH,YAAA3sH,UAAAitH,aAAA,WACA,IACAhzF,EADA1hB,EAAA,IAAA3Z,EAAA+a,QAEA,gBAAA+C,GAEAA,EAAA1F,EAAA,OACA3W,KAAAmX,WAAArO,IAAA,SACOuT,EAAA1F,GAAA,OACP3W,KAAAmX,WAAArO,IAAA,UAEAoP,EAAApP,IAAAuT,EAAAzF,EAAA,GAAAyF,EAAA3c,GAAAga,YACAkgB,EAAAr6B,KAAAoiB,KAAAtF,EAAA1F,GACA3W,KAAAmX,WAAAc,iBAAAC,EAAA0hB,KAZA,GAiBAr7B,EAAA+tH,YAAA3sH,UAAA4e,UAAA,SAAAzf,EAAA2tH,EAAAC,QACAttH,IAAAqtH,MAAA,GAAA3tH,QACAM,IAAAstH,MAAA,GAAAD,GACAzsH,KAAAgkB,KAAAkL,MAAApmB,IAAA,EAAAvJ,KAAA2M,IAAA,EAAApN,EAAA2tH,GAAA,GACAzsH,KAAAgkB,KAAA0jB,eACA1nC,KAAA2sH,KAAAz9F,MAAApmB,IAAA4jH,EAAAD,EAAAC,GACA1sH,KAAA2sH,KAAArlG,SAAA3Q,EAAA7X,EACAkB,KAAA2sH,KAAAjlF,gBAGAnpC,EAAA+tH,YAAA3sH,UAAAktH,SAAA,SAAAliH,GACA3K,KAAAgkB,KAAAwkB,SAAA79B,MAAAzB,KAAAyB,GACA3K,KAAA2sH,KAAAnkF,SAAA79B,MAAAzB,KAAAyB,IAQApM,EAAAuuH,UAAA,SAAAlmG,EAAAjc,QACAvL,IAAAuL,MAAA,UACA,IAAAq/B,EAAA,IAAAiB,YAAA,mDACAmC,EAAA,IAAAjlB,aAAA,IACAlB,EAAA,IAAA1oB,EAAA6oB,eACAH,EAAAisB,SAAA,IAAA30C,EAAA2qC,gBAAAc,EAAA,IACA/iB,EAAAksB,aAAA,eAAA50C,EAAA2qC,gBAAAkE,EAAA,IACA7uC,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAA,IAAA1oB,EAAAwnE,kBAAA,CACAp7D,gBAGAvL,IAAAwnB,GACA5mB,KAAAsX,OAAAsP,IAIAroB,EAAAuuH,UAAAntH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAuuH,UAAAntH,UAAAqJ,YAAAzK,EAAAuuH,UAEAvuH,EAAAuuH,UAAAntH,UAAA2X,OAAA,WACA,IAAAgO,EAAA,IAAA/mB,EAAA4nB,KACA,gBAAAS,GAOA,GANAA,aAAAroB,EAAA4nB,KACAb,EAAApc,KAAA0d,GAEAtB,EAAAqB,cAAAC,IAGAtB,EAAAC,UAAA,CACA,IAAA1a,EAAAya,EAAAza,IACAqB,EAAAoZ,EAAApZ,IAgBAob,EAAAtnB,KAAAinB,SAAAI,WAAAC,SACAla,EAAAka,EAAAla,MACAA,EAAA,GAAAlB,EAAAxM,EACA0N,EAAA,GAAAlB,EAAAyK,EACAvJ,EAAA,GAAAlB,EAAA0K,EACAxJ,EAAA,GAAAvC,EAAAnL,EACA0N,EAAA,GAAAlB,EAAAyK,EACAvJ,EAAA,GAAAlB,EAAA0K,EACAxJ,EAAA,GAAAvC,EAAAnL,EACA0N,EAAA,GAAAvC,EAAA8L,EACAvJ,EAAA,GAAAlB,EAAA0K,EACAxJ,EAAA,GAAAlB,EAAAxM,EACA0N,EAAA,IAAAvC,EAAA8L,EACAvJ,EAAA,IAAAlB,EAAA0K,EACAxJ,EAAA,IAAAlB,EAAAxM,EACA0N,EAAA,IAAAlB,EAAAyK,EACAvJ,EAAA,IAAAvC,EAAA+L,EACAxJ,EAAA,IAAAvC,EAAAnL,EACA0N,EAAA,IAAAlB,EAAAyK,EACAvJ,EAAA,IAAAvC,EAAA+L,EACAxJ,EAAA,IAAAvC,EAAAnL,EACA0N,EAAA,IAAAvC,EAAA8L,EACAvJ,EAAA,IAAAvC,EAAA+L,EACAxJ,EAAA,IAAAlB,EAAAxM,EACA0N,EAAA,IAAAvC,EAAA8L,EACAvJ,EAAA,IAAAvC,EAAA+L,EACA0Q,EAAAiiB,aAAA,EACAvpC,KAAAinB,SAAA0P,0BAtDA,GAgEAp4B,EAAAwuH,kBAAA,SAAAnmG,EAAArd,GACA,IAAAoB,OAAAvL,IAAAmK,IAAA,QACAvJ,KAAA4mB,SACA5mB,KAAAslB,IAAA,IAAA/mB,EAAA4nB,KACA5nB,EAAAulC,KAAAljC,KAAAZ,KAAA,IAAAzB,EAAA6gH,YAAA,WAAA7gH,EAAA+nE,kBAAA,CACA37D,QACAm1D,WAAA,MAIAvhE,EAAAwuH,kBAAAptH,UAAAE,OAAA6/B,OAAAnhC,EAAAulC,KAAAnkC,WACApB,EAAAwuH,kBAAAptH,UAAAqJ,YAAAzK,EAAAwuH,kBAEAxuH,EAAAwuH,kBAAAptH,UAAA2X,OAAA,WACAtX,KAAAslB,IAAAqB,cAAA3mB,KAAA4mB,QACA5mB,KAAAslB,IAAAva,KAAA/K,KAAAkvB,OACAlvB,KAAAslB,IAAAxG,OAAA9e,KAAAsnB,WAaA/oB,EAAAyuH,aAAA,SAAA5sG,GACA,IAAA6G,EAAA,IAAA1oB,EAAA2oB,SACAshB,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACAp7D,MAAA,SACAs+B,aAAA1qC,EAAAyD,aAEAirH,EAAA,GAwCA,SAAAC,EAAAjzG,EAAApR,EAAAU,GACA4jH,EAAAlzG,EAAA1Q,GACA4jH,EAAAtkH,EAAAU,GAGA,SAAA4jH,EAAAnmF,EAAAz9B,GACA0d,EAAAE,SAAAmV,KAAA,IAAA/9B,EAAA+a,SACA2N,EAAA6iB,OAAAxN,KAAA,IAAA/9B,EAAAmK,MAAAa,SAEAnK,IAAA6tH,EAAAjmF,KACAimF,EAAAjmF,GAAA,IAGAimF,EAAAjmF,GAAA1K,KAAArV,EAAAE,SAAAroB,OAAA,GA7CAouH,EAAA,UANA,UAOAA,EAAA,UAPA,UAQAA,EAAA,UARA,UASAA,EAAA,UATA,UAWAA,EAAA,UAXA,UAYAA,EAAA,UAZA,UAaAA,EAAA,UAbA,UAcAA,EAAA,UAdA,UAgBAA,EAAA,UAhBA,UAiBAA,EAAA,UAjBA,UAkBAA,EAAA,UAlBA,UAmBAA,EAAA,UAnBA,UAqBAA,EAAA,SApBA,UAqBAA,EAAA,SArBA,UAsBAA,EAAA,SAtBA,UAuBAA,EAAA,SAvBA,UAyBAA,EAAA,UAxBA,OAyBAA,EAAA,UAzBA,OA0BAA,EAAA,UA1BA,OA4BAA,EAAA,QA3BA,UA4BAA,EAAA,QA3BA,SA6BAA,EAAA,YA7BA,SA8BAA,EAAA,YA9BA,SA+BAA,EAAA,YA/BA,SAgCAA,EAAA,YAhCA,SAkDA3uH,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAogB,SACApgB,KAAAogB,OAAAuxC,wBAAA3xD,KAAAogB,OAAAuxC,yBACA3xD,KAAAmgB,OAAAC,EAAAK,YACAzgB,KAAAslC,kBAAA,EACAtlC,KAAAitH,WACAjtH,KAAAsX,UAGA/Y,EAAAyuH,aAAArtH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAyuH,aAAArtH,UAAAqJ,YAAAzK,EAAAyuH,aAEAzuH,EAAAyuH,aAAArtH,UAAA2X,OAAA,WACA,IAAA2P,EAAAgmG,EACA7rG,EAAA,IAAA7iB,EAAA+a,QACA8G,EAAA,IAAA7hB,EAAA0xD,OAEA,SAAAm9D,EAAA5oG,EAAA9kB,EAAAiX,EAAAC,GACAwK,EAAAtY,IAAApJ,EAAAiX,EAAAC,GAAA8J,UAAAN,GACA,IAAA2E,EAAAkoG,EAAAzoG,GAEA,QAAAplB,IAAA2lB,EACA,QAAAE,EAAA,EAAAC,EAAAH,EAAAjmB,OAA2CmmB,EAAAC,EAAQD,IACnDgC,EAAAE,SAAApC,EAAAE,IAAA/b,KAAAkY,GAKA,kBACA6F,EAAAjnB,KAAAinB,SACAgmG,EAAAjtH,KAAAitH,SAKA7sG,EAAAG,iBAAArX,KAAAlJ,KAAAogB,OAAAG,kBAEA6sG,EAAA,YACAA,EAAA,WAEAA,EAAA,MATA,GACA,GAQA,GACAA,EAAA,KAVA,GACA,GASA,GACAA,EAAA,MAXA,EACA,GAUA,GACAA,EAAA,KAZA,EACA,GAWA,GAEAA,EAAA,MAdA,GACA,EAaA,GACAA,EAAA,KAfA,GACA,EAcA,GACAA,EAAA,MAhBA,EACA,EAeA,GACAA,EAAA,KAjBA,EACA,EAgBA,GAEAA,EAAA,KAAAv2G,GAAA/M,KAAA,GACAsjH,EAAA,SAAAtjH,KAAA,GACAsjH,EAAA,OAAAtjH,GAAA,GAEAsjH,EAAA,OAvBA,EAuBA,KACAA,EAAA,MAxBA,EAwBA,KACAA,EAAA,SAxBA,EAwBA,GACAA,EAAA,QAzBA,EAyBA,GACAA,EAAA,OA3BA,EA2BA,MACAA,EAAA,MA5BA,EA4BA,MACAA,EAAA,SA5BA,GA4BA,GACAA,EAAA,QA7BA,GA6BA,GACAnmG,EAAAwlB,oBAAA,GAlDA,GA6DAluC,EAAA8uH,uBAAA,SAAA94D,EAAAxpD,GACAxM,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAu0D,QACAv0D,KAAAu0D,MAAAztC,oBACA9mB,KAAAmgB,OAAAo0C,EAAA9zC,YACAzgB,KAAAslC,kBAAA,OACAlmC,IAAA2L,MAAA,GACA,IAAAkc,EAAA,IAAA1oB,EAAA6oB,eACAH,EAAAksB,aAAA,eAAA50C,EAAA+sC,iBAAA,EAAAvgC,IAAA,EAAAA,IAAA,EAAAA,KAAA,GAAAA,KAAA,GAAAA,IAAA,OACA,IAAAy9B,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACAvB,KAAA,IAEAxkE,KAAAuM,IAAA,IAAAhO,EAAAwlC,KAAA9c,EAAAuhB,KACAvhB,EAAA,IAAA1oB,EAAA6oB,gBACA+rB,aAAA,eAAA50C,EAAA+sC,iBAAA,kBACAtrC,KAAAuM,IAAA,IAAAhO,EAAAwlC,KAAA9c,EAAAuhB,IACAxoC,KAAAsX,UAGA/Y,EAAA8uH,uBAAA1tH,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAA8uH,uBAAA1tH,UAAAqJ,YAAAzK,EAAA8uH,uBAEA9uH,EAAA8uH,uBAAA1tH,UAAAsyC,QAAA,WACA,IAAAq7E,EAAAttH,KAAA2jC,SAAA,GACA4pF,EAAAvtH,KAAA2jC,SAAA,GACA2pF,EAAArmG,SAAAgrB,UACAq7E,EAAA9kF,SAAAyJ,UACAs7E,EAAAtmG,SAAAgrB,UACAs7E,EAAA/kF,SAAAyJ,WAGA1zC,EAAA8uH,uBAAA1tH,UAAA2X,OAAA,WACA,IAAA6B,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACAqhB,EAAA,IAAAp8B,EAAA+a,QACA,kBACAH,EAAA8I,sBAAAjiB,KAAAu0D,MAAA9zC,aACAhC,EAAAwD,sBAAAjiB,KAAAu0D,MAAAn0D,OAAAqgB,aACAka,EAAAxd,WAAAsB,EAAAtF,GACA,IAAAm0G,EAAAttH,KAAA2jC,SAAA,GACA4pF,EAAAvtH,KAAA2jC,SAAA,GACA2pF,EAAA5gG,OAAAiO,GACA2yF,EAAA9kF,SAAA79B,MAAAzB,KAAAlJ,KAAAu0D,MAAA5pD,OAAAmC,eAAA9M,KAAAu0D,MAAAZ,WACA45D,EAAA7gG,OAAAiO,GACA4yF,EAAAr+F,MAAAtY,EAAA+jB,EAAA77B,UAbA,GA4BAP,EAAAivH,YAAA,SAAA5mG,EAAArd,EAAAy4G,GACA,IAAAr3G,OAAAvL,IAAAmK,IAAA,SACAhL,EAAA6rE,aAAAxpE,KAAAZ,KAAA,IAAAzB,EAAAwjH,cAAAn7F,EAAAK,SAAA+6F,GAAA,IAAAzjH,EAAAwnE,kBAAA,CACAp7D,WAEA3K,KAAAmgB,OAAAyG,EAAAnG,YACAzgB,KAAAslC,kBAAA,GAGA/mC,EAAAivH,YAAA7tH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAivH,YAAA7tH,UAAAqJ,YAAAzK,EAAAivH,YAOAjvH,EAAAkvH,kBAAA,SAAA7mG,EAAA7b,EAAAxB,EAAAy8D,GAEAhmE,KAAA4mB,SACA5mB,KAAA+K,UAAA3L,IAAA2L,IAAA,EACA,IAAAJ,OAAAvL,IAAAmK,IAAA,SACAoT,OAAAvd,IAAA4mE,IAAA,EAEA0nD,EAAA,EACAC,EAAA3tH,KAAA4mB,OAAAK,SAEA0mG,aAAApvH,EAAA2oB,SACAwmG,EAAAC,EAAA3hF,MAAAltC,OAEAyL,QAAAC,KAAA,sGAIA,IAAAyc,EAAA,IAAA1oB,EAAA6oB,eACAgmB,EAAA,IAAA7uC,EAAA+sC,iBAAA,EAAAoiF,EAAA,KACAzmG,EAAAksB,aAAA,WAAA/F,GACA7uC,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAA,IAAA1oB,EAAAwnE,kBAAA,CACAp7D,QACAq7D,UAAArpD,KAGA3c,KAAAslC,kBAAA,EACAtlC,KAAAsX,UAGA/Y,EAAAkvH,kBAAA9tH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAkvH,kBAAA9tH,UAAAqJ,YAAAzK,EAAAkvH,kBAEAlvH,EAAAkvH,kBAAA9tH,UAAA2X,OAAA,WACA,IAAA6B,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACAye,EAAA,IAAAx5B,EAAA2pB,QACA,kBACAloB,KAAA4mB,OAAAE,mBAAA,GACAiR,EAAA5N,gBAAAnqB,KAAA4mB,OAAAnG,aASA,IARA,IAAAA,EAAAzgB,KAAA4mB,OAAAnG,YACA6G,EAAAtnB,KAAAinB,SAAAI,WAAAC,SAEAqmG,EAAA3tH,KAAA4mB,OAAAK,SACAE,EAAAwmG,EAAAxmG,SACA6kB,EAAA2hF,EAAA3hF,MACAyE,EAAA,EAEAxrB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAAuCmmB,EAAAjb,EAAOib,IAAA,CAC9C,IAAA8nB,EAAAf,EAAA/mB,GACAzD,EAAAurB,EAAAvrB,OACArI,EAAAjQ,KAAAie,EAAA4lB,EAAA9yB,IAAA1N,IAAA4a,EAAA4lB,EAAAlkC,IAAA0D,IAAA4a,EAAA4lB,EAAA7/B,IAAAqQ,aAAA,GAAAgC,aAAAkB,GACAhC,EAAAvV,KAAAsY,GAAAnC,aAAA0Y,GAAAre,YAAA5M,eAAA9M,KAAA+K,MAAAwB,IAAA4M,GACAmO,EAAAiC,OAAAknB,EAAAt3B,EAAAzZ,EAAAyZ,EAAAxC,EAAAwC,EAAAvC,GACA65B,GAAA,EACAnpB,EAAAiC,OAAAknB,EAAAhyB,EAAA/e,EAAA+e,EAAA9H,EAAA8H,EAAA7H,GACA65B,GAAA,EAIA,OADAnpB,EAAAiiB,aAAA,EACAvpC,MA3BA,GAoCAzB,EAAAqvH,WAAA,SAAA7iH,EAAAuqG,EAAA7oG,EAAAC,GACA4oG,KAAA,EACA7oG,EAAA,IAAAlO,EAAAmK,WAAAtJ,IAAAqN,IAAA,SACAC,EAAA,IAAAnO,EAAAmK,WAAAtJ,IAAAsN,IAAA,SAMA,IALA,IAAAoS,EAAAw2F,EAAA,EACA5qC,EAAA,EAAA3/D,EAAAuqG,EACAnuF,EAAA,GACA2iB,EAAA,GAEA7kB,EAAA,EAAAgE,EAAA,EAAAgS,GAAAlwB,EAAqCka,GAAAqwF,EAAgBrwF,IAAAgW,GAAAyvC,EAAA,CACrDvjD,EAAAmV,MAAAvxB,EAAA,EAAAkwB,EAAAlwB,EAAA,EAAAkwB,GACA9T,EAAAmV,KAAArB,EAAA,GAAAlwB,EAAAkwB,EAAA,EAAAlwB,GACA,IAAAJ,EAAAsa,IAAAnG,EAAArS,EAAAC,EACA/B,EAAA2C,QAAAw8B,EAAA7gB,GACAA,GAAA,EACAte,EAAA2C,QAAAw8B,EAAA7gB,GACAA,GAAA,EACAte,EAAA2C,QAAAw8B,EAAA7gB,GACAA,GAAA,EACAte,EAAA2C,QAAAw8B,EAAA7gB,GACAA,GAAA,EAGA,IAAAhC,EAAA,IAAA1oB,EAAA6oB,eACAH,EAAAksB,aAAA,eAAA50C,EAAA+sC,iBAAAnkB,EAAA,IACAF,EAAAksB,aAAA,YAAA50C,EAAA+sC,iBAAAxB,EAAA,IACA,IAAAtB,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACA98B,aAAA1qC,EAAA0D,eAEA1D,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAAuhB,IAGAjqC,EAAAqvH,WAAAjuH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAqvH,WAAAjuH,UAAAqJ,YAAAzK,EAAAqvH,WAEArvH,EAAAqvH,WAAAjuH,UAAAkuH,UAAA,WACAtjH,QAAA2U,MAAA,6FASA3gB,EAAAuvH,sBAAA,SAAAv5D,EAAAw5D,GACAxvH,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAu0D,QACAv0D,KAAAu0D,MAAAztC,oBACA9mB,KAAAmgB,OAAAo0C,EAAA9zC,YACAzgB,KAAAslC,kBAAA,EACAtlC,KAAA8pC,OAAA,KAAAvrC,EAAAmK,MAAA,IAAAnK,EAAAmK,OACA,IAAAue,EAAA,IAAA1oB,EAAA4pH,eAAA4F,EAAA,KACA9mG,EAAAof,SAAA9mC,KAAA0e,GAAA,GAEA,QAAAgH,EAAA,EAA2BA,EAA3B,EAAmCA,IACnCgC,EAAA+kB,MAAA/mB,GAAAta,MAAA3K,KAAA8pC,OAAA7kB,EAAA,OAGA,IAAAujB,EAAA,IAAAjqC,EAAA+nE,kBAAA,CACAr9B,aAAA1qC,EAAAyD,WACA89D,WAAA,IAEA9/D,KAAAguH,YAAA,IAAAzvH,EAAAulC,KAAA7c,EAAAuhB,GACAxoC,KAAAuM,IAAAvM,KAAAguH,aACAhuH,KAAAsX,UAGA/Y,EAAAuvH,sBAAAnuH,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAAuvH,sBAAAnuH,UAAAqJ,YAAAzK,EAAAuvH,sBAEAvvH,EAAAuvH,sBAAAnuH,UAAAsyC,QAAA,WACAjyC,KAAAguH,YAAA/mG,SAAAgrB,UACAjyC,KAAAguH,YAAAxlF,SAAAyJ,WAGA1zC,EAAAuvH,sBAAAnuH,UAAA2X,OAAA,WACA,IAAA8J,EAAA,IAAA7iB,EAAA+a,QACA,kBACAtZ,KAAA8pC,OAAA,GAAA5gC,KAAAlJ,KAAAu0D,MAAA5pD,OAAAmC,eAAA9M,KAAAu0D,MAAAZ,WACA3zD,KAAA8pC,OAAA,GAAA5gC,KAAAlJ,KAAAu0D,MAAAX,aAAA9mD,eAAA9M,KAAAu0D,MAAAZ,WACA3zD,KAAAguH,YAAAthG,OAAAtL,EAAAa,sBAAAjiB,KAAAu0D,MAAA9zC,aAAA1C,UACA/d,KAAAguH,YAAA/mG,SAAA2lB,kBAAA,GANA,GAgBAruC,EAAA0vH,iBAAA,SAAA15D,EAAAw5D,GACA/tH,KAAAu0D,QACAv0D,KAAAu0D,MAAAztC,oBACA,IAAAG,EAAA,IAAA1oB,EAAA6pH,qBAAA2F,EAAA,KACAvlF,EAAA,IAAAjqC,EAAA+nE,kBAAA,CACAxG,WAAA,EACA0E,KAAA,IAEAh8B,EAAA79B,MAAAzB,KAAAlJ,KAAAu0D,MAAA5pD,OAAAmC,eAAA9M,KAAAu0D,MAAAZ,WACAp1D,EAAAulC,KAAAljC,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAmgB,OAAAngB,KAAAu0D,MAAA9zC,YACAzgB,KAAAslC,kBAAA,GAgBA/mC,EAAA0vH,iBAAAtuH,UAAAE,OAAA6/B,OAAAnhC,EAAAulC,KAAAnkC,WACApB,EAAA0vH,iBAAAtuH,UAAAqJ,YAAAzK,EAAA0vH,iBAEA1vH,EAAA0vH,iBAAAtuH,UAAAsyC,QAAA,WACAjyC,KAAAinB,SAAAgrB,UACAjyC,KAAAwoC,SAAAyJ,WAGA1zC,EAAA0vH,iBAAAtuH,UAAA2X,OAAA,WACAtX,KAAAwoC,SAAA79B,MAAAzB,KAAAlJ,KAAAu0D,MAAA5pD,OAAAmC,eAAA9M,KAAAu0D,MAAAZ,YAoBAp1D,EAAA2vH,eAAA,SAAAtnG,GACA5mB,KAAAm9C,MAAAn9C,KAAAmuH,YAAAvnG,GAGA,IAFA,IAAAK,EAAA,IAAA1oB,EAAA2oB,SAEAjC,EAAA,EAAmBA,EAAAjlB,KAAAm9C,MAAAr+C,OAAuBmmB,IAAA,CAC1CjlB,KAAAm9C,MAAAl4B,GAEAggB,kBAAA1mC,EAAAuuE,OACA7lD,EAAAE,SAAAmV,KAAA,IAAA/9B,EAAA+a,SACA2N,EAAAE,SAAAmV,KAAA,IAAA/9B,EAAA+a,SACA2N,EAAA6iB,OAAAxN,KAAA,IAAA/9B,EAAAmK,MAAA,QACAue,EAAA6iB,OAAAxN,KAAA,IAAA/9B,EAAAmK,MAAA,SAIAue,EAAAmiB,SAAA,EACA,IAAAZ,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACA98B,aAAA1qC,EAAA0D,aACA09D,WAAA,EACAC,YAAA,EACA/E,aAAA,IAEAt8D,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAu+C,KAAA33B,EACA5mB,KAAAmgB,OAAAyG,EAAAnG,YACAzgB,KAAAslC,kBAAA,EACAtlC,KAAAsX,UAGA/Y,EAAA2vH,eAAAvuH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAA2vH,eAAAvuH,UAAAqJ,YAAAzK,EAAA2vH,eAEA3vH,EAAA2vH,eAAAvuH,UAAAwuH,YAAA,SAAAvnG,GACA,IAAAwnG,EAAA,GAEAxnG,aAAAroB,EAAAuuE,MACAshD,EAAA9xF,KAAA1V,GAGA,QAAA3B,EAAA,EAAmBA,EAAA2B,EAAA+c,SAAA7kC,OAA4BmmB,IAC/CmpG,EAAA9xF,KAAA6jB,MAAAiuE,EAAApuH,KAAAmuH,YAAAvnG,EAAA+c,SAAA1e,KAGA,OAAAmpG,GAGA7vH,EAAA2vH,eAAAvuH,UAAA2X,OAAA,WAMA,IALA,IAAA2P,EAAAjnB,KAAAinB,SACAonG,GAAA,IAAA9vH,EAAA8hB,SAAAG,WAAAxgB,KAAAu+C,KAAA99B,aACA6tG,EAAA,IAAA/vH,EAAA8hB,QACA4I,EAAA,EAEAhE,EAAA,EAAmBA,EAAAjlB,KAAAm9C,MAAAr+C,OAAuBmmB,IAAA,CAC1C,IAAA8lC,EAAA/qD,KAAAm9C,MAAAl4B,GAEA8lC,EAAA9lB,kBAAA1mC,EAAAuuE,OACAwhD,EAAAhuG,iBAAA+tG,EAAAtjE,EAAAtqC,aACAwG,EAAAE,SAAA8B,GAAAhH,sBAAAqsG,GACAA,EAAAhuG,iBAAA+tG,EAAAtjE,EAAA9lB,OAAAxkB,aACAwG,EAAAE,SAAA8B,EAAA,GAAAhH,sBAAAqsG,GACArlG,GAAA,GAIAhC,EAAAwlB,oBAAA,EACAxlB,EAAA0P,yBAUAp4B,EAAAgwH,gBAAA,SAAAh6D,GACAh2D,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAu0D,QACAv0D,KAAAu0D,MAAAztC,oBACA9mB,KAAAmgB,OAAAo0C,EAAA9zC,YACAzgB,KAAAslC,kBAAA,EAIA,IAHA,IAAAre,EAAA,IAAA1oB,EAAA6oB,eACAgmB,EAAA,gEAEAnoB,EAAA,EAAAgE,EAAA,EAAkChE,EAAlC,GAAyCA,IAAAgE,IAAA,CACzC,IAAA8L,EAAA9P,EADA,GACA1lB,KAAA0e,GAAA,EACA+W,EAAA/L,EAFA,GAEA1pB,KAAA0e,GAAA,EACAmvB,EAAA9Q,KAAA/8B,KAAAkY,IAAAsd,GAAAx1B,KAAAsY,IAAAkd,GAAA,EAAAx1B,KAAAkY,IAAAud,GAAAz1B,KAAAsY,IAAAmd,GAAA,GAGA/N,EAAAksB,aAAA,eAAA50C,EAAA+sC,iBAAA8B,EAAA,IACA,IAAA5E,EAAA,IAAAjqC,EAAAwnE,kBAAA,CACAvB,KAAA,IAEAxkE,KAAA2sH,KAAA,IAAApuH,EAAA6rE,aAAAnjD,EAAAuhB,GACAxoC,KAAAuM,IAAAvM,KAAA2sH,MACA3sH,KAAAsX,UAGA/Y,EAAAgwH,gBAAA5uH,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAAgwH,gBAAA5uH,UAAAqJ,YAAAzK,EAAAgwH,gBAEAhwH,EAAAgwH,gBAAA5uH,UAAAsyC,QAAA,WACAjyC,KAAA2sH,KAAA1lG,SAAAgrB,UACAjyC,KAAA2sH,KAAAnkF,SAAAyJ,WAGA1zC,EAAAgwH,gBAAA5uH,UAAA2X,OAAA,WACA,IAAA8J,EAAA,IAAA7iB,EAAA+a,QACAk1G,EAAA,IAAAjwH,EAAA+a,QACA,kBACA,IAAAm1G,EAAAzuH,KAAAu0D,MAAArwC,SAAAlkB,KAAAu0D,MAAArwC,SAAA,IACAwqG,EAAAD,EAAAlvH,KAAAwW,IAAA/V,KAAAu0D,MAAAp8C,OACAnY,KAAA2sH,KAAAz9F,MAAApmB,IAAA4lH,IAAAD,GACArtG,EAAAa,sBAAAjiB,KAAAu0D,MAAA9zC,aACA+tG,EAAAvsG,sBAAAjiB,KAAAu0D,MAAAn0D,OAAAqgB,aACAzgB,KAAA2sH,KAAAjgG,OAAA8hG,EAAA5hH,IAAAwU,IACAphB,KAAA2sH,KAAAnkF,SAAA79B,MAAAzB,KAAAlJ,KAAAu0D,MAAA5pD,OAAAmC,eAAA9M,KAAAu0D,MAAAZ,YAVA,GAoBAp1D,EAAAowH,oBAAA,SAAA/nG,EAAA7b,EAAAxB,EAAAy8D,GACAhmE,KAAA4mB,SACA5mB,KAAA+K,UAAA3L,IAAA2L,IAAA,EACA,IAAAJ,OAAAvL,IAAAmK,IAAA,SACAoT,OAAAvd,IAAA4mE,IAAA,EAEA0nD,EAAA,EACAC,EAAA3tH,KAAA4mB,OAAAK,SAEA0mG,aAAApvH,EAAA2oB,SACAwmG,EAAA,EAAAC,EAAA3hF,MAAAltC,OACK6uH,aAAApvH,EAAA6oB,iBACLsmG,EAAAC,EAAAtmG,WAAA7F,OAAA8nB,OAIA,IAAAriB,EAAA,IAAA1oB,EAAA6oB,eACAgmB,EAAA,IAAA7uC,EAAA+sC,iBAAA,EAAAoiF,EAAA,KACAzmG,EAAAksB,aAAA,WAAA/F,GACA7uC,EAAA6rE,aAAAxpE,KAAAZ,KAAAinB,EAAA,IAAA1oB,EAAAwnE,kBAAA,CACAp7D,QACAq7D,UAAArpD,KAGA3c,KAAAslC,kBAAA,EACAtlC,KAAAsX,UAGA/Y,EAAAowH,oBAAAhvH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAowH,oBAAAhvH,UAAAqJ,YAAAzK,EAAAowH,oBAEApwH,EAAAowH,oBAAAhvH,UAAA2X,OAAA,WACA,IAAA6B,EAAA,IAAA5a,EAAA+a,QACAmF,EAAA,IAAAlgB,EAAA+a,QACAye,EAAA,IAAAx5B,EAAA2pB,QACA,kBACA,IAAA61B,EAAA,cACA/9C,KAAA4mB,OAAAE,mBAAA,GACAiR,EAAA5N,gBAAAnqB,KAAA4mB,OAAAnG,aACA,IAAAA,EAAAzgB,KAAA4mB,OAAAnG,YACA6G,EAAAtnB,KAAAinB,SAAAI,WAAAC,SAEAqmG,EAAA3tH,KAAA4mB,OAAAK,SAEA,GAAA0mG,aAAApvH,EAAA2oB,SAKA,IAJA,IAAAC,EAAAwmG,EAAAxmG,SACA6kB,EAAA2hF,EAAA3hF,MACAyE,EAAA,EAEAxrB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAAyCmmB,EAAAjb,EAAOib,IAGhD,IAFA,IAAA8nB,EAAAf,EAAA/mB,GAEAgE,EAAA,EAAA+jB,EAAAD,EAAA/D,cAAAlqC,OAAyDmqB,EAAA+jB,EAAQ/jB,IAAA,CACjE,IAAA8nB,EAAA5pB,EAAA4lB,EAAAgR,EAAA90B,KACAzH,EAAAurB,EAAA/D,cAAA/f,GACA9P,EAAAjQ,KAAA6nC,GAAAxxB,aAAAkB,GACAhC,EAAAvV,KAAAsY,GAAAnC,aAAA0Y,GAAAre,YAAA5M,eAAA9M,KAAA+K,MAAAwB,IAAA4M,GACAmO,EAAAiC,OAAAknB,EAAAt3B,EAAAzZ,EAAAyZ,EAAAxC,EAAAwC,EAAAvC,GACA65B,GAAA,EACAnpB,EAAAiC,OAAAknB,EAAAhyB,EAAA/e,EAAA+e,EAAA9H,EAAA8H,EAAA7H,GACA65B,GAAA,OAGO,GAAAk9E,aAAApvH,EAAA6oB,eACP,KAAAwnG,EAAAjB,EAAAtmG,WAAAC,SACAunG,EAAAlB,EAAAtmG,WAAA7F,OAGA,IAFAivB,EAAA,EAEAxnB,EAAA,EAAA+jB,EAAA4hF,EAAAtlF,MAA0CrgB,EAAA+jB,EAAQ/jB,IAClD9P,EAAArQ,IAAA8lH,EAAAxlG,KAAAH,GAAA2lG,EAAAvlG,KAAAJ,GAAA2lG,EAAAtlG,KAAAL,IAAA1J,aAAAkB,GACAhC,EAAA3V,IAAA+lH,EAAAzlG,KAAAH,GAAA4lG,EAAAxlG,KAAAJ,GAAA4lG,EAAAvlG,KAAAL,IACAxK,EAAAY,aAAA0Y,GAAAre,YAAA5M,eAAA9M,KAAA+K,MAAAwB,IAAA4M,GACAmO,EAAAiC,OAAAknB,EAAAt3B,EAAAzZ,EAAAyZ,EAAAxC,EAAAwC,EAAAvC,GACA65B,GAAA,EACAnpB,EAAAiC,OAAAknB,EAAAhyB,EAAA/e,EAAA+e,EAAA9H,EAAA8H,EAAA7H,GACA65B,GAAA,EAKA,OADAnpB,EAAAiiB,aAAA,EACAvpC,MAjDA,GA0DAzB,EAAAuwH,gBAAA,SAAAloG,EAAArd,GACA,IAAAoB,OAAAvL,IAAAmK,IAAA,SACAhL,EAAA6rE,aAAAxpE,KAAAZ,KAAA,IAAAzB,EAAA0tH,kBAAArlG,EAAAK,UAAA,IAAA1oB,EAAAwnE,kBAAA,CACAp7D,WAEA3K,KAAAmgB,OAAAyG,EAAAnG,YACAzgB,KAAAslC,kBAAA,GAGA/mC,EAAAuwH,gBAAAnvH,UAAAE,OAAA6/B,OAAAnhC,EAAA6rE,aAAAzqE,WACApB,EAAAuwH,gBAAAnvH,UAAAqJ,YAAAzK,EAAAuwH,gBAMAvwH,EAAAu8E,sBAAA,SAAAtyC,GACAjqC,EAAAwmC,SAAAnkC,KAAAZ,MACAA,KAAAwoC,WAEAxoC,KAAAuxD,OAAA,SAAAw9D,MAGAxwH,EAAAu8E,sBAAAn7E,UAAAE,OAAA6/B,OAAAnhC,EAAAwmC,SAAAplC,WACApB,EAAAu8E,sBAAAn7E,UAAAqJ,YAAAzK,EAAAu8E,sBAMAv8E,EAAAywH,eAAA,SAAA/nG,EAAAuhB,GACAjqC,EAAAulC,KAAAljC,KAAAZ,KAAAinB,EAAAuhB,GACAxoC,KAAAivH,cAAA,GACAjvH,KAAAkvH,eAAA,GAGA,IAAAC,EAAAnvH,KAAAinB,SAAAilB,aAAAptC,OAGAswH,EAAAD,EAAA,EACAxzE,EAAAwzE,EAAA,EACAnvH,KAAAqvH,gBAJA,YACA,EAGAD,EAAAzzE,GACA37C,KAAAsvH,mBALA,YAKA,IAGA/wH,EAAAywH,eAAArvH,UAAAE,OAAA6/B,OAAAnhC,EAAAulC,KAAAnkC,WACApB,EAAAywH,eAAArvH,UAAAqJ,YAAAzK,EAAAywH,eAEAzwH,EAAAywH,eAAArvH,UAAA0vH,gBAAA,SAAAzvH,EAAAkkB,EAAAC,EAAA43B,GACA,IAAAuB,EAAA,CACAp5B,QACAC,MACAjlB,OAAAilB,EAAAD,EAAA,EACA63B,MACA3D,UAAAj0B,EAAAD,GAAA63B,EACA4zE,UAAA,EACAC,aAAA,EACAC,QAAA,EACAj5E,KAAA,EACAllB,UAAA,EACA8I,OAAA,EACAs1F,oBAAA,EACAC,cAAA,GAEA3vH,KAAAivH,cAAArvH,GAAAs9C,EACAl9C,KAAAkvH,eAAA5yF,KAAA4gB,IAGA3+C,EAAAywH,eAAArvH,UAAAiwH,qBAAA,SAAAj0E,GAMA,IALA,IACAk0E,EADAhzE,EAAA,mBAEAizE,EAAA,GACA7oG,EAAAjnB,KAAAinB,SAEAhC,EAAA,EAAAC,EAAA+B,EAAAilB,aAAAptC,OAAsDmmB,EAAAC,EAAQD,IAAA,CAC9D,IACA2W,EADA3U,EAAAilB,aAAAjnB,GACArlB,KAAAM,MAAA28C,GAEA,GAAAjhB,KAAA98B,OAAA,EAEAgxH,EADAlwH,EAAAg8B,EAAA,MACAk0F,EAAAlwH,GAAA,CACAkkB,MAAAe,IACAd,KAAAc,MAGAI,GADAuU,EAAAs2F,EAAAlwH,IACAkkB,QAAA0V,EAAA1V,MAAAmB,GACAA,EAAAuU,EAAAzV,MAAAyV,EAAAzV,IAAAkB,GACA4qG,MAAAjwH,GAIA,QAAAA,KAAAkwH,EAAA,CACA,IAAAt2F,EAAAs2F,EAAAlwH,GACAI,KAAAqvH,gBAAAzvH,EAAA45B,EAAA1V,MAAA0V,EAAAzV,IAAA43B,GAGA37C,KAAA6vH,kBAGAtxH,EAAAywH,eAAArvH,UAAAowH,6BAAA,SAAAnwH,GACA,IAAAs9C,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAA5rB,UAAA,EACA4rB,EAAAwyE,oBAAA,IAIAnxH,EAAAywH,eAAArvH,UAAAqwH,8BAAA,SAAApwH,GACA,IAAAs9C,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAA5rB,WAAA,EACA4rB,EAAAwyE,oBAAA,IAIAnxH,EAAAywH,eAAArvH,UAAAswH,gBAAA,SAAArwH,EAAA+7C,GACA,IAAAuB,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAAvB,MACAuB,EAAAlF,UAAAkF,EAAAn5B,IAAAm5B,EAAAp5B,OAAAo5B,EAAAvB,MAIAp9C,EAAAywH,eAAArvH,UAAAuwH,qBAAA,SAAAtwH,EAAAo4C,GACA,IAAAkF,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAAlF,WACAkF,EAAAvB,KAAAuB,EAAAn5B,IAAAm5B,EAAAp5B,OAAAo5B,EAAAlF,WAIAz5C,EAAAywH,eAAArvH,UAAA2vH,mBAAA,SAAA1vH,EAAAw6B,GACA,IAAA8iB,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAA9iB,WAIA77B,EAAAywH,eAAArvH,UAAAwwH,iBAAA,SAAAvwH,EAAA42C,GACA,IAAA0G,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAA1G,SAIAj4C,EAAAywH,eAAArvH,UAAAywH,iBAAA,SAAAxwH,GACA,IAAA42C,EAAA,EACA0G,EAAAl9C,KAAAivH,cAAArvH,GAMA,OAJAs9C,IACA1G,EAAA0G,EAAA1G,MAGAA,GAGAj4C,EAAAywH,eAAArvH,UAAA0wH,qBAAA,SAAAzwH,GACA,IAAAo4C,GAAA,EACAkF,EAAAl9C,KAAAivH,cAAArvH,GAMA,OAJAs9C,IACAlF,EAAAkF,EAAAlF,UAGAA,GAGAz5C,EAAAywH,eAAArvH,UAAA2wH,cAAA,SAAA1wH,GACA,IAAAs9C,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,GACAA,EAAA1G,KAAA,EACA0G,EAAAuyE,QAAA,GAEAllH,QAAAC,KAAA,mCAAA5K,EAAA,oCAIArB,EAAAywH,eAAArvH,UAAA4wH,cAAA,SAAA3wH,GACA,IAAAs9C,EAAAl9C,KAAAivH,cAAArvH,GAEAs9C,IACAA,EAAAuyE,QAAA,IAIAlxH,EAAAywH,eAAArvH,UAAA2X,OAAA,SAAAlL,GACA,QAAA6Y,EAAA,EAAAC,EAAAllB,KAAAkvH,eAAApwH,OAAoDmmB,EAAAC,EAAQD,IAAA,CAC5D,IAAAi4B,EAAAl9C,KAAAkvH,eAAAjqG,GACA,GAAAi4B,EAAAuyE,OAAA,CACA,IAAA/zE,EAAAwB,EAAAlF,SAAAkF,EAAAp+C,OACAo+C,EAAA1G,MAAA0G,EAAA5rB,UAAAllB,EAEA8wC,EAAAyyE,cACAzyE,EAAA1G,KAAA0G,EAAAlF,UAAAkF,EAAA1G,KAAA,KACA0G,EAAA5rB,YAAA,EAEA4rB,EAAA1G,KAAA0G,EAAAlF,WACAkF,EAAA1G,KAAA0G,EAAAlF,SACAkF,EAAAwyE,oBAAA,GAGAxyE,EAAA1G,KAAA,IACA0G,EAAA1G,KAAA,EACA0G,EAAAwyE,oBAAA,KAIAxyE,EAAA1G,KAAA0G,EAAA1G,KAAA0G,EAAAlF,SACAkF,EAAA1G,KAAA,IAAA0G,EAAA1G,MAAA0G,EAAAlF,WAGA,IAAAw4E,EAAAtzE,EAAAp5B,MAAAvlB,EAAAgB,KAAA2K,MAAA3K,KAAAiK,MAAA0zC,EAAA1G,KAAAkF,GAAA,EAAAwB,EAAAp+C,OAAA,GACAs7B,EAAA8iB,EAAA9iB,OAEAo2F,IAAAtzE,EAAAsyE,eACAxvH,KAAAirE,sBAAA/tB,EAAAqyE,WAAA,EACAvvH,KAAAirE,sBAAA/tB,EAAAsyE,cAAA,EAAAp1F,EACAp6B,KAAAirE,sBAAAulD,GAAA,EACAtzE,EAAAqyE,UAAAryE,EAAAsyE,aACAtyE,EAAAsyE,aAAAgB,GAGA,IAAA5kE,EAAA1O,EAAA1G,KAAAkF,IACAwB,EAAAwyE,qBAAA9jE,EAAA,EAAAA,GAEA1O,EAAAsyE,eAAAtyE,EAAAqyE,WACAvvH,KAAAirE,sBAAA/tB,EAAAsyE,cAAA5jE,EAAAxxB,EACAp6B,KAAAirE,sBAAA/tB,EAAAqyE,YAAA,EAAA3jE,GAAAxxB,GAEAp6B,KAAAirE,sBAAA/tB,EAAAsyE,cAAAp1F,KAKuC57B,EAAA,eAAMQ,eAAkCI,GAAVZ,EAAA,UAGhEY,KAFDF,EAAA,WACJ,OAAAX,GACKqC,KAAAlC,EAAAF,EAAAE,EAAAD,QAAAC,QAAAQ,GACF,qBAAAT,KAAAC,QACHD,EAAAC,QAAAH,OACGa,GAAAY,OACHA,KAAAzB,SA783BA,sBCAAE,EAAAC,QAAA,WACA,UAAAO,MAAA,uDCDA,SAAAwxH,GACAhyH,EAAAC,QAAA+xH,qCCDAhyH,EAAAC,QAAA,SAAAH,GASAA,EAAAmyH,wBAAA,SAAAC,EAAAtZ,GACAr3G,KAAAq3G,gBAAAj4G,IAAAi4G,IAAA,IACAr3G,KAAA4wH,WAAA,EACA5wH,KAAA2wH,cAAAvxH,IAAAuxH,OACA3wH,KAAA6wH,YAAA,KACA7wH,KAAA8wH,oBAAA,KACA9wH,KAAA+wH,mBAAA,UACA3xH,IAAAb,EAAAyyH,YAAAzmH,QAAA2U,MAAA,4DACA,IAAA+xG,EAAA1yH,EAAAyyH,WACAhxH,KAAAkxH,aAAA3yH,EAAA4pE,cAAAj9D,MAAA+lH,EAAA3xD,UACAt/D,KAAAmxH,aAAA,IAAA5yH,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAkxH,aACA3xD,aAAA0xD,EAAA1xD,aACAC,eAAAyxD,EAAAzxD,eACApI,SAAA74D,EAAA2D,WACAy9D,WAAA,SAEAvgE,IAAAb,EAAA6yH,kBAAA7mH,QAAA2U,MAAA,kEACAlf,KAAAqxH,kBAAA,IAAA9yH,EAAAmpE,eAAA,CACApI,SAAA/gE,EAAA4pE,cAAAj9D,MAAA3M,EAAA6yH,iBAAA9xD,UACAC,aAAAhhE,EAAA6yH,iBAAA7xD,aACAC,eAAAjhE,EAAA6yH,iBAAA5xD,eACApI,SAAA74D,EAAA2D,aAEAlC,KAAAsxH,qBAAA,CACArqD,QAAA,CACAsqD,eAAAhyH,KAAAw6B,IAAA/5B,KAAAq3G,YAAA93G,KAAAw6B,IAAA,IAAAy3F,QAAA,IAEAlyD,SAAA,CACAmyD,QAAA,CACAxvF,KAAA,IACAh5B,MAAA,MAEAyoH,WAAA,CACAzvF,KAAA,IACAh5B,MAAA,MAEAmD,MAAA,CACA61B,KAAA,IACAh5B,MAAA,MAEA0oH,IAAA,CACA1vF,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAuC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACvJ6mC,eAAA,qBAAyC,6BAA8B,gCAAiC,uBAAwB,qBAAsB,gBAAiB,2DAA4D,iEAAkE,8BAA+B,oCAEpU,8BACA,uFACA,mDAAuD,KAAK7mC,KAAA,OAE5D34B,KAAA4xH,oBAAA,IAAArzH,EAAAmpE,eAAA,CACApI,SAAA/gE,EAAA4pE,cAAAj9D,MAAAlL,KAAAsxH,qBAAAhyD,UACAC,aAAAv/D,KAAAsxH,qBAAA/xD,aACAC,eAAAx/D,KAAAsxH,qBAAA9xD,eACAyH,QAAAjnE,KAAAsxH,qBAAArqD,QACA7P,SAAA74D,EAAA2D,kBAEA9C,IAAAb,EAAAszH,eAAAtnH,QAAA2U,MAAA,+DACAlf,KAAA8xH,gBAAA,IAAAvzH,EAAAmpE,eAAA,CACApI,SAAA/gE,EAAA4pE,cAAAj9D,MAAA3M,EAAAszH,cAAAvyD,UACAC,aAAAhhE,EAAAszH,cAAAtyD,aACAC,eAAAjhE,EAAAszH,cAAAryD,eACApI,SAAA74D,EAAA2D,aAEAlC,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAA61D,OAAA,EACA71D,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAAmyH,wBAAA/wH,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,EAAA+lH,GACAnyH,KAAA4wH,YACA5wH,KAAAo3C,MAAA8Z,GACAlxD,KAAA6wH,YAAA5uF,KAAAiwF,EAAAjwF,KACAjiC,KAAA8wH,oBAAA7uF,KAAAiwF,EAAAjwF,KACAjiC,KAAA+wH,mBAAA9uF,KAAAiwF,EAAAjwF,KACAjiC,KAAA4wH,WAAA,GAGA5wH,KAAA2wH,WAEA3wH,KAAAgyH,KAAAxpF,SAAAxoC,KAAAqxH,kBACArxH,KAAAqxH,kBAAA/xD,SAAA8yD,SAAAnpH,MAAAipH,EACAhhE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA+wH,oBAGA/wH,KAAAgyH,KAAAxpF,SAAAxoC,KAAA4xH,oBACA5xH,KAAA4xH,oBAAAtyD,SAAAlzD,MAAAnD,MAAAmD,EACApM,KAAA4xH,oBAAAtyD,SAAAmyD,QAAAxoH,MAAAjJ,KAAA8wH,oBACA9wH,KAAA4xH,oBAAAtyD,SAAAoyD,WAAAzoH,MAAAjJ,KAAA+wH,mBACA7/D,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA6wH,aAEA7wH,KAAAgyH,KAAAxpF,SAAAxoC,KAAAmxH,aACAnxH,KAAAkxH,aAAAkB,SAAAnpH,MAAAjJ,KAAA6wH,YACA3/D,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA8wH,sBAGA9wH,KAAAgyH,KAAAxpF,SAAAxoC,KAAA8xH,gBACA9xH,KAAA8xH,gBAAAxyD,SAAA8yD,SAAAnpH,MAAAipH,EACAhhE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,EAAAjyH,KAAA61D,QAEAze,MAAA,SAAA8Z,GAEAlxD,KAAA6wH,aACA7wH,KAAA6wH,YAAA5+E,UAGAjyC,KAAA+wH,oBACA/wH,KAAA+wH,mBAAA9+E,UAGAjyC,KAAA8wH,qBACA9wH,KAAA8wH,oBAAA7+E,UAGA,IAAA0lD,EAAA,CACA7mC,UAAAvyD,EAAA+G,aACAurD,UAAAtyD,EAAA+G,aACAsrD,OAAAryD,EAAA8H,WAEArG,KAAA6wH,YAAA,IAAAtyH,EAAA2/E,kBAAAl+E,KAAAq3G,WAAAr3G,KAAAq3G,WAAA1f,GACA33F,KAAA6wH,YAAAz/D,iBAAA,EACApxD,KAAA8wH,oBAAA,IAAAvyH,EAAA2/E,kBAAAl+E,KAAAq3G,WAAAr3G,KAAAq3G,WAAA1f,GACA33F,KAAA8wH,oBAAA1/D,iBAAA,EAEAumC,EAAA7mC,UAAAvyD,EAAAiH,yBACAxF,KAAA+wH,mBAAA,IAAAxyH,EAAA2/E,kBAAAl+E,KAAAq3G,WAAAr3G,KAAAq3G,WAAA1f,GAEA33F,KAAA2wH,WACA3wH,KAAA8xH,gBAAA7qD,QAAA,qBACAjnE,KAAA8xH,gBAAAxyD,SAAA+yD,aAAAppH,MAAAjJ,KAAA6wH,aAIA7wH,KAAAgyH,KAAAxpF,SAAA,IAAAjqC,EAAA+nE,kBAAA,CACA37D,MAAA,UAEA3K,KAAAqxH,kBAAA9nF,aAAA,EACAvpC,KAAA4xH,oBAAAroF,aAAA,EACAvpC,KAAA8xH,gBAAAvoF,aAAA,GAIA+oF,YAAA,SAAA3B,GACAA,GACA3wH,KAAA2wH,UAAA,EACA3wH,KAAA8xH,gBAAA7qD,QAAA,qBACAjnE,KAAA8xH,gBAAAxyD,SAAA+yD,aAAAppH,MAAAjJ,KAAA6wH,cAEA7wH,KAAA2wH,UAAA,SACA3wH,KAAA8xH,gBAAA7qD,QAAA,kBACAjnE,KAAA8xH,gBAAAxyD,SAAA+yD,aAAAppH,WAAA7J,GAGAY,KAAA8xH,gBAAAvoF,aAAA,GAEAgpF,gBAAA,SAAAC,GACAA,IACAxyH,KAAA4xH,oBAAAtyD,SAAAqyD,IAAA1oH,MAAA1J,KAAAia,IAAAg5G,KAGAC,gBAAA,SAAAC,GACAA,IACA1yH,KAAA8xH,gBAAAxyD,SAAAqzD,aAAA1pH,MAAAypH,IAGAE,oBAAA,SAAAC,GACAA,IACA7yH,KAAA8xH,gBAAAxyD,SAAAwzD,iBAAA7pH,MAAA4pH,IAGAE,cAAA,SAAAC,GACAA,IACAhzH,KAAA8xH,gBAAAxyD,SAAA0zD,WAAA/pH,MAAA+pH,IAGA/gF,QAAA,WACAjyC,KAAA6wH,aACA7wH,KAAA6wH,YAAA5+E,UAGAjyC,KAAA8wH,qBACA9wH,KAAA8wH,oBAAA7+E,UAGAjyC,KAAA+wH,oBACA/wH,KAAA+wH,mBAAA9+E,UAGAjyC,KAAAqxH,mBACArxH,KAAAqxH,kBAAAp/E,UAGAjyC,KAAA4xH,qBACA5xH,KAAA4xH,oBAAA3/E,UAGAjyC,KAAAmxH,cACAnxH,KAAAmxH,aAAAl/E,UAGAjyC,KAAA8xH,iBACA9xH,KAAA8xH,gBAAA7/E,gCC1NAxzC,EAAAC,QAAA,SAAAH,GAMAA,EAAA00H,YAAA,CACA3zD,SAAA,GACAC,aAAA,iBAAiC,4EAA6E,KAAK5mC,KAAA,MACnH6mC,eAAA,iBAAmC,6CAA8C,KAAK7mC,KAAA,2BCTtFl6B,EAAAC,QAAA,SAAAH,GAQAA,EAAA20H,mBAAA,CACA5zD,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA2xD,QAAA,CACA34B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,0BAA4C,8BAA+B,oBAAqB,gBAAiB,0CAA2C,2CAA4C,yCAA0C,4BAA6B,2DAA4D,yCAA0C,mEAAoE,8CAA+C,+BAAgC,mCAAoC,yCAA0C,yCAA0C,KAAK7mC,KAAA,2BCpBroBl6B,EAAAC,QAAA,SAAAH,GAMAA,EAAA40H,YAAA,CACA7zD,SAAA,CACA8zD,UAAA,CACAnxF,KAAA,IACAh5B,MAAA,MAEAoqH,UAAA,CACApxF,KAAA,IACAh5B,MAAA,MAEAqqH,SAAA,CACArxF,KAAA,IACAh5B,MAAA,IAEA2xD,QAAA,CACA34B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,0BAA4C,0BAA2B,+BAAgC,+BAAgC,oBAAqB,gBAAiB,6CAA8C,6CAA8C,4DAA6D,KAAK7mC,KAAA,2BC1B3Ul6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAg1H,UAAA,SAAAC,EAAAC,EAAAC,EAAArc,GACAmc,OAAAp0H,IAAAo0H,IAAA,EACAC,OAAAr0H,IAAAq0H,IAAA,GACAC,OAAAt0H,IAAAs0H,IAAA,EACArc,OAAAj4G,IAAAi4G,IAAA,IAEA,IAAA1f,EAAA,CACA7mC,UAAAvyD,EAAA+G,aACAurD,UAAAtyD,EAAA+G,aACAsrD,OAAAryD,EAAA8H,WAEArG,KAAA2zH,cAAA,IAAAp1H,EAAA2/E,kBAAAm5B,IAAA1f,GACA33F,KAAA4zH,cAAA,IAAAr1H,EAAA2/E,kBAAAm5B,IAAA1f,QAEAv4F,IAAAb,EAAAyyH,YAAAzmH,QAAA2U,MAAA,8CACA,IAAA+xG,EAAA1yH,EAAAyyH,WACAhxH,KAAAkxH,aAAA3yH,EAAA4pE,cAAAj9D,MAAA+lH,EAAA3xD,UACAt/D,KAAAkxH,aAAA,QAAAjoH,MAAAuqH,EACAxzH,KAAAmxH,aAAA,IAAA5yH,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAkxH,aACA3xD,aAAA0xD,EAAA1xD,aACAC,eAAAyxD,EAAAzxD,eACApI,SAAA74D,EAAA6D,iBACAy4D,aAAA,SAGAz7D,IAAAb,EAAAs1H,mBAAAtpH,QAAA2U,MAAA,qDACA,IAAA40G,EAAAv1H,EAAAs1H,kBACA7zH,KAAA+zH,oBAAAx1H,EAAA4pE,cAAAj9D,MAAA4oH,EAAAx0D,UACAt/D,KAAA+zH,oBAAA,gBAAA9qH,MAAA1K,EAAAg1H,UAAAS,MACAh0H,KAAA+zH,oBAAA,QAAA9qH,MAAA1K,EAAAs1H,kBAAAI,YAAAP,GACA1zH,KAAAk0H,oBAAA,IAAA31H,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAA+zH,oBACAx0D,aAAAu0D,EAAAv0D,aACAC,eAAAs0D,EAAAt0D,eACAyH,QAAA,CACAktD,kBAAAV,EAAAjC,QAAA,GACA4C,gBAAAX,EAAAjC,QAAA,MAGAxxH,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAA61D,OAAA,EACA71D,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAAg1H,UAAA5zH,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,EAAA+lH,GACAA,GAAAjhE,EAAAnF,QAAA9oB,QAAAiuB,EAAAnF,QAAA0yC,cAEAz+F,KAAAgyH,KAAAxpF,SAAAxoC,KAAAk0H,oBACAl0H,KAAA+zH,oBAAA,SAAA9qH,MAAAipH,EACAlyH,KAAA+zH,oBAAA,gBAAA9qH,MAAA1K,EAAAg1H,UAAAS,MACA9iE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA2zH,eAAA,GAEA3zH,KAAA+zH,oBAAA,SAAA9qH,MAAAjJ,KAAA2zH,cACA3zH,KAAA+zH,oBAAA,gBAAA9qH,MAAA1K,EAAAg1H,UAAAc,MACAnjE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA4zH,eAAA,GAEA5zH,KAAAgyH,KAAAxpF,SAAAxoC,KAAAmxH,aACAnxH,KAAAkxH,aAAA,SAAAjoH,MAAAjJ,KAAA4zH,cACAzB,GAAAjhE,EAAAnF,QAAAhpB,OAAAmuB,EAAAnF,QAAA0yC,cACAvtC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA8xG,EAAAlyH,KAAA61D,SAGAt3D,EAAAg1H,UAAAS,MAAA,IAAAz1H,EAAAme,QAAA,cACAne,EAAAg1H,UAAAc,MAAA,IAAA91H,EAAAme,QAAA,kCCzEAje,EAAAC,QAAA,SAAAH,GAIAA,EAAA+1H,UAAA,SAAAnjE,EAAA/wC,EAAAyjB,GACA7jC,KAAAmxD,QACAnxD,KAAAogB,SACA,IAAAoyC,OAAApzD,IAAAykC,EAAA2uB,MAAA3uB,EAAA2uB,MAAA,EACA3hC,OAAAzxB,IAAAykC,EAAAhT,OAAAgT,EAAAhT,OAAAzQ,EAAAyQ,OACA0jG,OAAAn1H,IAAAykC,EAAA0wF,SAAA1wF,EAAA0wF,SAAA,KACAC,OAAAp1H,IAAAykC,EAAA2wF,QAAA3wF,EAAA2wF,QAAA,EAEA73G,EAAAknB,EAAAlnB,OAAA6xC,OAAAimE,YAAA,EACA73G,EAAAinB,EAAAjnB,QAAA4xC,OAAAkmE,aAAA,EACA10H,KAAA20H,kBAAA,IAAAp2H,EAAA2/E,kBAAAvhE,EAAAC,EAAA,CACAk0C,UAAAvyD,EAAA+G,aACAurD,UAAAtyD,EAAA+G,aACAsrD,OAAAryD,EAAA8H,YAEArG,KAAA40H,kBAAA50H,KAAA20H,kBAAAzpH,QAEAlL,KAAA60H,cAAA,IAAAt2H,EAAAooE,uBAEAvnE,IAAAb,EAAAu2H,aACAvqH,QAAA2U,MAAA,+CAGA,IAAA61G,EAAAx2H,EAAAu2H,YACAE,EAAAz2H,EAAA4pE,cAAAj9D,MAAA6pH,EAAAz1D,UACA01D,EAAA,OAAA/rH,MAAAjJ,KAAA40H,kBACAI,EAAA,MAAA/rH,MAAAupD,EACAwiE,EAAA,OAAA/rH,MAAA4nB,EACAmkG,EAAA,SAAA/rH,MAAAsrH,EACAS,EAAA,QAAA/rH,MAAAurH,EACAx0H,KAAAi1H,cAAA,IAAA12H,EAAAmpE,eAAA,CACApI,SAAA01D,EACAz1D,aAAAw1D,EAAAx1D,aACAC,eAAAu1D,EAAAv1D,iBAEAx/D,KAAAs/D,SAAA01D,EACAh1H,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAAk1H,gBAAA,EACAl1H,KAAA61D,OAAA,EACA71D,KAAAm1H,QAAA,IAAA52H,EAAAkmC,oBAAA,cACAzkC,KAAAo1H,OAAA,IAAA72H,EAAAwkE,MACA/iE,KAAAq1H,MAAA,IAAA92H,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAo1H,OAAA7oH,IAAAvM,KAAAq1H,QAGA92H,EAAA+1H,UAAA30H,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,EAAA+lH,GACAnyH,KAAAq1H,MAAA7sF,SAAAxoC,KAAAi1H,cAEAj1H,KAAAmxD,MAAAge,iBAAAnvE,KAAA60H,cACA3jE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA40H,mBAAA,GAEA50H,KAAAs/D,SAAA,OAAAr2D,MAAAipH,EAEAlyH,KAAAk1H,eACAhkE,EAAAK,OAAAvxD,KAAAo1H,OAAAp1H,KAAAm1H,SAEAjkE,EAAAK,OAAAvxD,KAAAo1H,OAAAp1H,KAAAm1H,QAAAlD,EAAAjyH,KAAA61D,OAGA71D,KAAAmxD,MAAAge,iBAAA,2BCjEA1wE,EAAAC,QAAA,SAAAH,GAQAA,EAAAu2H,YAAA,CACAx1D,SAAA,CACAg2D,OAAA,CACArzF,KAAA,IACAh5B,MAAA,MAEAssH,OAAA,CACAtzF,KAAA,IACAh5B,MAAA,MAEAupD,MAAA,CACAvwB,KAAA,IACAh5B,MAAA,GAEA4nB,OAAA,CACAoR,KAAA,IACAh5B,MAAA,GAEAsrH,SAAA,CACAtyF,KAAA,IACAh5B,MAAA,MAEAurH,QAAA,CACAvyF,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,qBAAuC,4BAA6B,4BAA6B,yBACjG,0BACA,uBAAyB,wBAAyB,gBAAiB,4CAA6C,0CAA2C,mCAAoC,yEAA0E,iCAAkC,iCAAkC,iCAAkC,0BAA2B,sCAAuC,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,2FAA4F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,4FAA6F,6BAA8B,wBAAyB,KAAK7mC,KAAA,2BCtCrmIl6B,EAAAC,QAAA,SAAAH,GAUAA,EAAAu2H,YAAA,CACAx1D,SAAA,CACAk2D,aAAA,CACAvzF,KAAA,IACAh5B,MAAA,GAEAwsH,cAAA,CACAxzF,KAAA,IACAh5B,MAAA,GAEAysH,WAAA,CACAzzF,KAAA,IACAh5B,MAAA,GAEA2pD,YAAA,CACA3wB,KAAA,IACAh5B,MAAA,IAEA0sH,MAAA,CACA1zF,KAAA,IACAh5B,MAAA,IAEAqsH,OAAA,CACArzF,KAAA,IACAh5B,MAAA,MAEAssH,OAAA,CACAtzF,KAAA,IACAh5B,MAAA,MAEAurH,QAAA,CACAvyF,KAAA,IACAh5B,MAAA,GAEA2sH,UAAA,CACA3zF,KAAA,IACAh5B,MAAA,GAEA4sH,UAAA,CACA5zF,KAAA,IACAh5B,MAAA,GAEA6sH,WAAA,CACA7zF,KAAA,IACAh5B,MAAA,GAEA8sH,UAAA,CACA9zF,KAAA,IACAh5B,MAAA,GAEAi7B,UAAA,CACAjC,KAAA,IACAh5B,MAAA,IAEAkjD,KAAA,CACAlqB,KAAA,IACAh5B,MAAA,GAEA+qD,KAAA,CACA/xB,KAAA,IACAh5B,MAAA,IAEA+sH,OAAA,CACA/zF,KAAA,IACAh5B,MAAA,IAEAgtH,MAAA,CACAh0F,KAAA,IACAh5B,MAAA,IAEAitH,KAAA,CACAj0F,KAAA,IACAh5B,MAAA,KAEAktH,MAAA,CACAl0F,KAAA,IACAh5B,MAAA,GAEAmtH,UAAA,CACAn0F,KAAA,IACAh5B,MAAA,MAEAotH,SAAA,CACAp0F,KAAA,IACAh5B,MAAA,GAEAqtH,YAAA,CACAr0F,KAAA,IACAh5B,MAAA,GAEAstH,YAAA,CACAt0F,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,UAGA6iD,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,qBAAuC,4BAA6B,4BAA6B,8BAA+B,+BAAgC,+BAAgC,sGAA6B,kDAAwG,sCAA6C,4GAA0C,6JAA0N,6CAAgD,6HAA2H,wCAAwD,8CAA4D,oDAA2B,gDAAoD,0DAAgD,+CAA4D,yDAA+C,0EAAsD,0DAAkF,kDAAuD,iDAAkD,uDAAqD,4BAA2D,8EAAgF,iIAAmI,yBAA0B,4GAA8G,yCAA0C,yCAAuB,iEAA4C,0EAAgE,2BAAgF,mDAA2B,0CAAiD,oMAA8L,gDAAuD,4EAAuG,yDAA2D,0DAA2D,0DAA2D,0DAA2D,0DAA2D,0DAA2D,0DAA2D,2BAA4B,8CAA+C,yBAA0B,wBAAyB,0BAA2B,0BAA2B,0BAA2B,0BAA2B,gDAAiD,+BAAgC,0BAA2B,+BAAgC,gDAAiD,qBAAsB,qCAAsC,IAAK,8BAA+B,wCAA0C,mBAAoB,kBAAmB,+DAAgE,iCAAkC,iCAAkC,iCAAkC,iCAAkC,iCAAkC,iCAAkC,iCAAkC,iCAAkC,iCAAkC,wEAAyE,wEAAyE,wEAAyE,6BAA8B,uDAAwD,wBAAyB,IAAK,YAAa,IAAK,uCAAwC,kDAAoD,yDAA0D,wEAAyE,4EAA6E,2EAA4E,2CAA4C,sCAAuC,iDAAkD,6CAA8C,IAAK,0BAA2B,yKAA2K,mHAAoH,eAAgB,6FAA8F,iGAAkG,IAAK,8BAA+B,IAAK,uDAAwD,4DAA6B,sDAAuF,0DAA2D,gDAAiD,0DAA2D,cAAe,IAAK,iCAAkC,0DAA2D,IAAK,qBAAsB,gDAAiD,8EAA+E,8BAA+B,IAAK,kGAAmG,+BAAgC,4CAA6C,4BAA6B,4BAA6B,iBAAkB,kBAAmB,0BAA2B,IAAK,+EAAgF,8CAA+C,IAAK,gBAAiB,mFAAqF,oCAAsC,qCAAsC,IAAK,yDAA2D,qBAAsB,uDAAwD,IAAK,qDAAuD,mBAAoB,yCAA2B,+CAAoD,iDAAiD,0BAAuC,WAAY,+CAA0B,gDAAkD,yCAAgD,yBAAyC,yBAA0B,iCAAkC,qBAAsB,IAAK,8BAA+B,sFAAwF,2FAA6F,sDAAuD,wDAA0D,oBAAqB,oEAAsE,WAAY,uCAAwC,iBAAkB,mBAAoB,qCAAsC,8CAAgD,+CAAgD,+BAAgC,iEAAkE,IAAK,mBAAqB,qCAAa,IAA8B,mBAAoB,sCAAuC,IAAK,oBAAqB,qBAAsB,IAAK,0BAA2B,wBAAyB,MAAK7mC,KAAA,2BC1GhlQl6B,EAAAC,QAAA,SAAAH,GASAA,EAAAi4H,yBAAA,CACAl3D,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAwtH,WAAA,CACAx0F,KAAA,IACAh5B,MAAA,GAEAytH,SAAA,CACAz0F,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,4BAA6B,0BAA2B,oBAAqB,gBAAiB,6CAA8C,kCAAmC,wBAAyB,wEAAyE,WAAY,wEAAyE,IAAK,KAAK7mC,KAAA,2BCzBjal6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAo4H,qBAAA,SAAA7lF,GACAvyC,EAAA+lE,SAAA1jE,KAAAZ,MACAA,KAAAiiC,KAAA,uBACAjiC,KAAA2K,MAAA,IAAApM,EAAAmK,MAAA,UAEA1I,KAAAk6E,QAAA,SAAAnuB,EAAAphD,KAEA3K,KAAAylE,UAAA30B,IAGAvyC,EAAAo4H,qBAAAh3H,UAAAE,OAAA6/B,OAAAnhC,EAAA+lE,SAAA3kE,WACApB,EAAAo4H,qBAAAh3H,UAAAqJ,YAAAzK,EAAAo4H,qBAEAp4H,EAAAo4H,qBAAAh3H,UAAAuL,MAAA,WACA,IAAAs9B,EAAA,IAAAjqC,EAAAo4H,qBAIA,OAHAnuF,EAAAt/B,KAAAlJ,MACAwoC,EAAA79B,MAAAzB,KAAAlJ,KAAA2K,OACA69B,EAAA0xC,QAAAl6E,KAAAk6E,QACA1xC,GAIAjqC,EAAA8uG,eAAA,SAAAv8D,GACAvmC,QAAAwvB,IAAA,uBAAAx7B,EAAAY,UACA2xC,KAAA,GAEA,IACA8lF,EACAC,EACAtgD,EA0BAugD,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAiBAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EA/DAjjD,EAAA50E,KAIA83H,EAAA,IAAAv5H,EAAA0uG,UACAr6B,OAAAxzE,IAAA0xC,EAAAk4B,OAAAl4B,EAAAk4B,OAAAxM,SAAAu7D,cAAA,UACAC,EAAAplD,EAAAj2D,MACAs7G,EAAArlD,EAAAh2D,OACAs7G,EAAA34H,KAAAiK,MAAAwuH,EAAA,GACAG,EAAA54H,KAAAiK,MAAAyuH,EAAA,GACAG,EAAA,EACAC,EAAA,EACAC,EAAAN,EACAO,EAAAN,EACAtiD,EAAA,EACA9C,EAAAD,EAAA1J,WAAA,MACAl8D,OAAA,IAAA8jC,EAAA9jC,QAEAuoE,EAAA,IAAAh3E,EAAAmK,MAAA,GACA8sE,GAAA,IAAA1kC,EAAA9jC,MAAA,IACAwrH,EAAA,EACAC,EAAA,EACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,GAoBAC,GAdA,IAAAz6H,EAAA06H,iBACA,IAAA16H,EAAA06H,iBAaA,IAAA16H,EAAAmK,OAKAwwH,GAJA,IAAA36H,EAAAmK,MACA,IAAAnK,EAAAmK,MACA,IAAAnK,EAAAmK,MACA,IAAAnK,EAAAmK,MACA,IAAAnK,EAAAmK,OACAywH,EAAA,IAAA56H,EAAAmK,MACA0wH,EAAA,IAAA76H,EAAAmK,MACA2wH,EAAA,GASAC,EAAA,IAAA/6H,EAAAqmB,KACA20G,EAAA,IAAAh7H,EAAAqmB,KACA40G,EAAA,IAAAj7H,EAAAqmB,KACA60G,EAAA,IAAAl7H,EAAAmK,MACAgxH,EAAA,IAAAn7H,EAAAmK,MACAixH,GAAA,IAAAp7H,EAAAmK,MACA4tE,GAAA,IAAA/3E,EAAA+a,QAEAsgH,GAAA,IAAAr7H,EAAA+a,QACAugH,GAAA,IAAAt7H,EAAA+a,QACAwgH,GAAA,IAAAv7H,EAAA2pB,QA0SA,SAAA6xG,GAAA5gH,EAAA6gH,EAAAxxF,GACAyxF,GAAAzxF,EAAAoyB,SACAygB,GAAA7yC,EAAA4uB,UACA,IAAAhsC,EAAA4uG,EAAA9qG,MAAAxvB,EAAAw4H,EACA7sG,EAAA2uG,EAAA9qG,MAAAvY,EAAAwhH,EACA+B,EAAA,GAAA36H,KAAAkM,KAAA2f,IAAAC,KAMA,GAJAmuG,EAAA3uH,IAAA/B,IAAAqQ,EAAAzZ,EAAAw6H,EAAA/gH,EAAAxC,EAAAujH,GAEAV,EAAAttH,IAAApD,IAAAqQ,EAAAzZ,EAAAw6H,EAAA/gH,EAAAxC,EAAAujH,GAEA1xF,aAAAjqC,EAAA8pE,eAAA,CACA,IAAAhX,EAAA7oB,EAAA0rB,IAEA,UAAA7C,EAAA,CACA,IAAAxU,EAAAw8E,EAAAhoE,EAAArqB,IAOA,QALA5nC,IAAAy9C,KAAAzU,UAAAipB,EAAAjpB,UACAyU,EAAAs9E,GAAA9oE,GACAgoE,EAAAhoE,EAAArqB,IAAA6V,QAGAz9C,IAAAy9C,EAAAmsB,OAAA,CACAoxD,GAAAv9E,EAAAmsB,QACA,IAAAqxD,EAAAhpE,EAAAkL,MACA+9D,EAAAD,EAAA19G,MAAA00C,EAAAhkD,OAAA3N,EACA66H,EAAAF,EAAAz9G,OAAAy0C,EAAAhkD,OAAAsJ,EACAyL,EAAAi4G,EAAA19G,MAAA00C,EAAAuF,OAAAl3D,EACA2iB,EAAAg4G,EAAAz9G,OAAAy0C,EAAAuF,OAAAjgD,EACAu7C,EAAA9mC,EAAAhJ,EACA+vC,EAAA9mC,EAAAhJ,EAEAwwD,EAAA2nD,OAEA3nD,EAAA3sD,UAAA/M,EAAAzZ,EAAAyZ,EAAAxC,GAEA,IAAA6xB,EAAArD,UAAA0tC,EAAA4nD,OAAAjyF,EAAArD,UAEA0tC,EAAA3sD,WAAAkF,EAAA,GAAAC,EAAA,GAEAwnD,EAAA3jD,MAAAgjC,EAAAC,GAEA0gB,EAAA3sD,WAAAo0G,GAAAC,GAEA1nD,EAAA21B,SAAA8xB,EAAAC,EAAAn4G,EAAAC,GAEAwwD,EAAAsX,gBAIAiwC,GAAA5xF,EAAA79B,MAAA0B,YAEAwmE,EAAA2nD,OAEA3nD,EAAA3sD,UAAA/M,EAAAzZ,EAAAyZ,EAAAxC,GAEA,IAAA6xB,EAAArD,UAAA0tC,EAAA4nD,OAAAjyF,EAAArD,UAEA0tC,EAAA3jD,MAAA9D,GAAAC,GAEAwnD,EAAA21B,UAAA,YAEA31B,EAAAsX,eAEO3hD,aAAAjqC,EAAAo4H,uBACP+D,GAAAlyF,EAAA79B,MAAA0B,YACA+tH,GAAA5xF,EAAA79B,MAAA0B,YAEAwmE,EAAA2nD,OAEA3nD,EAAA3sD,UAAA/M,EAAAzZ,EAAAyZ,EAAAxC,GAEA,IAAA6xB,EAAArD,UAAA0tC,EAAA4nD,OAAAjyF,EAAArD,UAEA0tC,EAAA3jD,MAAA9D,EAAAC,GAEAmd,EAAA0xC,QAAArH,GAEAA,EAAAsX,WAcA,SAAAwwC,GAAAxhH,EAAAsF,EAAAu7G,EAAAxxF,GAUA,GATAyxF,GAAAzxF,EAAAoyB,SACAygB,GAAA7yC,EAAA4uB,UAEAyb,EAAA+nD,YAEA/nD,EAAA8lC,OAAAx/F,EAAAw1D,eAAAjvE,EAAAyZ,EAAAw1D,eAAAh4D,GAEAk8D,EAAA+lC,OAAAn6F,EAAAkwD,eAAAjvE,EAAA+e,EAAAkwD,eAAAh4D,GAEA6xB,aAAAjqC,EAAAwnE,kBAAA,CAKA,GAJA8gB,GAAAr+C,EAAAw9B,WACA60D,GAAAryF,EAAAy9B,SACA60D,GAAAtyF,EAAA09B,UAEA19B,EAAAS,eAAA1qC,EAAA0D,aACAy4H,GAAAlyF,EAAA79B,MAAA0B,gBACS,CACT,IAAA0uH,EAAAf,EAAA/wF,aAAA,GAAA58B,WACA2uH,EAAAhB,EAAA/wF,aAAA,GAAA58B,WAEA,GAAA0uH,IAAAC,EACAN,GAAAK,OACW,CACX,IACA,IAAAE,EAAApoD,EAAAqoD,qBAAA/hH,EAAAw1D,eAAAjvE,EAAAyZ,EAAAw1D,eAAAh4D,EAAA8H,EAAAkwD,eAAAjvE,EAAA+e,EAAAkwD,eAAAh4D,GAEAskH,EAAAE,aAAA,EAAAJ,GACAE,EAAAE,aAAA,EAAAH,GACa,MAAAI,GACbH,EAAAF,EAGAL,GAAAO,IAIApoD,EAAAwoD,SAEA7B,EAAA/zG,eAAA,EAAA+iB,EAAAw9B,gBACOx9B,aAAAjqC,EAAA4nE,qBACP0gB,GAAAr+C,EAAAw9B,WACA60D,GAAAryF,EAAAy9B,SACA60D,GAAAtyF,EAAA09B,UACAw0D,GAAAlyF,EAAA79B,MAAA0B,YACAivH,GAAA,CAAA9yF,EAAA49B,SAAA59B,EAAA69B,UAEAwM,EAAAwoD,SAEA7B,EAAA/zG,eAAA,EAAA+iB,EAAAw9B,WAEAs1D,GAAA,KAIA,SAAAC,GAAApiH,EAAAsF,EAAAkc,EAAAoxC,EAAAt+B,EAAAu+B,EAAAguD,EAAAxxF,GAgFA,IAAA3sB,EAAAC,EAAAG,EAAAC,EAAAkQ,EAAAC,EAnEA,GAZAuoD,EAAAmC,KAAAxlB,OAAApqC,UAAA,EACAytD,EAAAmC,KAAAxlB,OAAAvlB,QACAiuF,GAAAzxF,EAAAoyB,SACAygB,GAAA7yC,EAAA4uB,UACA6/D,EAAA99G,EAAAw1D,eAAAjvE,EACAw3H,EAAA/9G,EAAAw1D,eAAAh4D,EACAwgH,EAAA14G,EAAAkwD,eAAAjvE,EACA03H,EAAA34G,EAAAkwD,eAAAh4D,EACA0gH,EAAA18F,EAAAg0C,eAAAjvE,EACA43H,EAAA38F,EAAAg0C,eAAAh4D,EAsEAkF,EArEAo7G,EAqEAn7G,EArEAo7G,EAqEAj7G,EArEAk7G,EAqEAj7G,EArEAk7G,EAqEAhrG,EArEAirG,EAqEAhrG,EArEAirG,EAsEAzkD,EAAA+nD,YAEA/nD,EAAA8lC,OAAA98F,EAAAC,GAEA+2D,EAAA+lC,OAAA38F,EAAAC,GAEA22D,EAAA+lC,OAAAxsF,EAAAC,GAEAwmD,EAAA8jC,aA5EAnuE,aAAAjqC,EAAAsoE,qBAAAr+B,aAAAjqC,EAAAwoE,oBAAA,OAAAv+B,EAAA0rB,IACAglE,EAAAhwH,KAAAs/B,EAAA79B,OAEAwuH,EAAAjwH,KAAAs/B,EAAA8uB,UAEA9uB,EAAAS,eAAA1qC,EAAAyD,YACAk3H,EAAArsH,SAAAmtH,EAAArvH,OAGAquH,EAAA9vH,KAAAuwH,GAEAG,GAAA1wH,KAAAiQ,EAAAqiH,eAAAjvH,IAAAkS,EAAA+8G,eAAAjvH,IAAAouB,EAAA6gG,eAAAj+G,aAAA,GArMA,SAAA+J,EAAA9F,EAAA7W,GACA,QAAAX,EAAA,EAAA69E,EAAAtR,EAAAz3E,OAA0CkL,EAAA69E,EAAQ79E,IAAA,CAClD,IAAAuqD,EAAAgiB,EAAAvsE,GAIA,GAFAovH,EAAAlwH,KAAAqrD,EAAA5pD,OAEA4pD,aAAAh2D,EAAA61D,iBAAA,CACA,IAAAqnE,EAAAnlD,GAAAr0D,sBAAAsyC,EAAA9zC,aAAA/G,YAGA,IADAqpG,EAAAvhG,EAAAjI,IAAAkiH,KACA,WACA1Y,GAAAxuD,EAAAZ,UACAhpD,EAAA4B,IAAA6sH,EAAAtsH,eAAAi2G,SACS,GAAAxuD,aAAAh2D,EAAAm2D,WAAA,CACT,IAEAquD,EACA,GAHA0Y,EAAAnlD,GAAAr0D,sBAAAsyC,EAAA9zC,cAEAsiG,EAAAvhG,EAAAjI,IAAA+8D,GAAAn5D,WAAAs+G,EAAAn0G,GAAA5N,eACA,WAEA,OADAqpG,GAAA,GAAAxuD,EAAArwC,SAAA,IAAA3kB,KAAAsL,IAAAyc,EAAApJ,WAAAu9G,GAAAlnE,EAAArwC,SAAA,IACA,SACA6+F,GAAAxuD,EAAAZ,UACAhpD,EAAA4B,IAAA6sH,EAAAtsH,eAAAi2G,MAkLA2Y,CAAA9B,GAAAI,EAAA2B,YAAA3C,GAEAA,EAAAnsH,SAAAqsH,GAAA3sH,IAAA4sH,IAEA,IAAA3wF,EAAAs3B,UAAA87D,GAAA5C,EAAAxwF,EAAAu3B,mBAAAv3B,EAAAg+B,iBAAAh+B,EAAAi+B,mBAAAo1D,GAAA7C,QACO,GAAAxwF,aAAAjqC,EAAA+nE,mBAAA99B,aAAAjqC,EAAAsoE,qBAAAr+B,aAAAjqC,EAAAwoE,kBAAA,CACP,UAAAv+B,EAAA0rB,IACA1rB,EAAA0rB,IAAAyO,UAEApkE,EAAAiG,YACA+yH,EAAAyC,EAAA1sF,IACAwuF,GAAA7E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxrD,GAAArsE,EAAA63H,EAAAxrD,GAAAp1D,EAAA4gH,EAAA9pF,GAAA/tC,EAAA63H,EAAA9pF,GAAA92B,EAAA4gH,EAAAvrD,GAAAtsE,EAAA63H,EAAAvrD,GAAAr1D,EAAA6xB,EAAA0rB,WAES,OAAA1rB,EAAA63B,OACT73B,EAAA63B,OAAAsC,UAAApkE,EAAAsG,6BACAg1H,GAAA3wH,KAAA8wH,EAAA+B,mBAAAhwD,IAAA1sD,aAAAy6G,IAEAtC,EAAA,GAAAqC,GAAAn6H,EAAA,GACA+3H,EAAA,GAAAoC,GAAAljH,EAAA,GAEAkjH,GAAA3wH,KAAA8wH,EAAA+B,mBAAAtuF,IAAApuB,aAAAy6G,IAEApC,EAAA,GAAAmC,GAAAn6H,EAAA,GACAi4H,EAAA,GAAAkC,GAAAljH,EAAA,GAEAkjH,GAAA3wH,KAAA8wH,EAAA+B,mBAAA/vD,IAAA3sD,aAAAy6G,IAEAlC,EAAA,GAAAiC,GAAAn6H,EAAA,GACAm4H,EAAA,GAAAgC,GAAAljH,EAAA,GACAmlH,GAAA7E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAArvF,EAAA63B,UAGA24D,EAAA9vH,KAAAs/B,EAAA79B,OAEA69B,EAAAS,eAAA1qC,EAAAyD,YACAg3H,EAAAnsH,SAAAmtH,EAAArvH,QAGA,IAAA69B,EAAAs3B,UAAA87D,GAAA5C,EAAAxwF,EAAAu3B,mBAAAv3B,EAAAg+B,iBAAAh+B,EAAAi+B,mBAAAo1D,GAAA7C,SAEOxwF,aAAAjqC,EAAAuoE,oBACP+yD,GAAA3wH,KAAA8wH,EAAA2B,aAAAt8G,aAAAy6G,IAEAd,EAAAjwH,OAAA8wH,GAAAn6H,EAAAm6H,GAAAljH,EAAAkjH,GAAAjjH,GAAA9J,eAAA,IAAAH,UAAA,KAEA,IAAA67B,EAAAs3B,UAAA87D,GAAA5C,EAAAxwF,EAAAu3B,mBAAAv3B,EAAAg+B,iBAAAh+B,EAAAi+B,mBAAAo1D,GAAA7C,KAEAA,EAAAjwH,OAAA,QAEA,IAAAy/B,EAAAs3B,UAAA87D,GAAA5C,EAAAxwF,EAAAu3B,mBAAAv3B,EAAAg+B,iBAAAh+B,EAAAi+B,mBAAAo1D,GAAA7C,IAiBA,SAAA4C,GAAAjxH,EAAAq7D,EAAAC,EAAAC,GACA2gB,GAAA7gB,GACA60D,GAAA50D,GACA60D,GAAA50D,GACAw0D,GAAA/vH,EAAA0B,YAEAwmE,EAAAwoD,SAEA7B,EAAA/zG,eAAA,EAAAugD,GAGA,SAAA61D,GAAAlxH,GACAyvH,GAAAzvH,EAAA0B,YAEAwmE,EAAAmpD,OAGA,SAAA7B,GAAA9oE,GACA,OAAAA,EAAAjpB,SAAAipB,aAAA9yD,EAAA4lE,mBAAA9S,aAAA9yD,EAAAulE,YACA,OACAkF,YAAA5pE,EACAgpC,QAAAipB,EAAAjpB,SAIA,IAAAm0B,EAAAlL,EAAAkL,MAEA,QAAAA,EAAAqjC,SACA,OACA52B,YAAA5pE,EACAgpC,QAAA,GAIA,IAAA4gC,EAAAxM,SAAAu7D,cAAA,UACA/uD,EAAArsD,MAAA4/C,EAAA5/C,MACAqsD,EAAApsD,OAAA2/C,EAAA3/C,OACA,IAAAmvC,EAAAid,EAAAE,WAAA,MACAnd,EAAAkwE,aAAA,WAAA1/D,EAAA3/C,QACAmvC,EAAAod,UAAA5M,EAAA,KACA,IAAA2/D,EAAA7qE,EAAA6F,QAAA34D,EAAAyG,eACAm3H,EAAA9qE,EAAA8F,QAAA54D,EAAAyG,eACA4xD,EAAA,aAEA,IAAAslE,IAAA,IAAAC,EACAvlE,EAAA,UACO,IAAAslE,EACPtlE,EAAA,YACO,IAAAulE,IACPvlE,EAAA,YAGA,IAAA/Z,EAAAg2B,EAAAupD,cAAApzD,EAAApS,GAGA,OADAvF,EAAAvc,UAAAuc,EAAAvc,SAAAuc,GACA,CACA2X,OAAAnsB,EACAzU,QAAAipB,EAAAjpB,SAIA,SAAA0zF,GAAAjgH,EAAAC,EAAAG,EAAAC,EAAAkQ,EAAAC,EAAAgwG,EAAAtqG,EAAAuqG,EAAAnjH,EAAAojH,EAAA99G,EAAA4yC,GACA,IAAAxU,EAAAw8E,EAAAhoE,EAAArqB,IAOA,QALA5nC,IAAAy9C,KAAAzU,UAAAipB,EAAAjpB,UACAyU,EAAAs9E,GAAA9oE,GACAgoE,EAAAhoE,EAAArqB,IAAA6V,QAGAz9C,IAAAy9C,EAAAmsB,OAOA,OAJAoxD,GAAA,0BAEAvnD,EAAAmpD,OAJA5B,GAAAv9E,EAAAmsB,QAUA,IAAA/uD,EACApR,EACAqE,EACAuS,EACAH,EACA7C,EACAoN,EACA2yG,EACAzqE,EAAAV,EAAAhkD,OAAA3N,EAAA2xD,EAAAuF,OAAAl3D,EACAsyD,EAAAX,EAAAhkD,OAAAsJ,EAAA06C,EAAAuF,OAAAjgD,EACAgG,EAAA00C,EAAAkL,MAAA5/C,MAAA00C,EAAAuF,OAAAl3D,EACAkd,EAAAy0C,EAAAkL,MAAA3/C,OAAAy0C,EAAAuF,OAAAjgD,EAGA2lH,KAAAvqE,GAAAp1C,EACAxD,KAAA64C,GAAAp1C,EACA2/G,KAAAxqE,GAAAp1C,EACA8B,KAAAuzC,GAAAp1C,EACAX,GAAAJ,EACAK,GAAAJ,EACAsQ,GAAAvQ,EACAwQ,GAAAvQ,EAMA,KADA+N,GAJAyyG,GAVAD,KAAAtqE,GAAAp1C,IAaA8B,GAZAsT,KAAAigC,GAAAp1C,IAWA2/G,GAAAF,IADAljH,GAAA4Y,MAUAzS,EAAAzD,GAJA5B,GAAAwE,EAAAxC,EAAA9C,EAAAiT,IADAowG,EAAA,EAAA3yG,IAKAwyG,GAFAnvH,GAAAovH,EAAAlwG,EAAAmwG,EAAAtgH,GAAAugH,GAEAzqG,EACAtV,EAAAX,GAJAjT,GAAA4V,EAAAvC,EAAA/C,EAAAkT,GAAAmwG,GAIAH,GAFA58G,GAAA68G,EAAAjwG,EAAAkwG,EAAArgH,GAAAsgH,GAEAzqG,EAEA8gD,EAAA2nD,OAEA3nD,EAAA4pD,UAAAxiH,EAAApR,EAAAqE,EAAAuS,EAAAH,EAAA7C,GAEAo2D,EAAAmpD,OAEAnpD,EAAAsX,WAkDA,SAAAuyC,GAAAvjH,EAAAsF,EAAAk+G,GACA,IAGAH,EAHA98H,EAAA+e,EAAA/e,EAAAyZ,EAAAzZ,EACAiX,EAAA8H,EAAA9H,EAAAwC,EAAAxC,EACAkT,EAAAnqB,IAAAiX,IAEA,IAAAkT,IAEAnqB,GADA88H,EAAAG,EAAAp9H,KAAAkM,KAAAoe,GAEAlT,GAAA6lH,EACA/9G,EAAA/e,KACA+e,EAAA9H,KACAwC,EAAAzZ,KACAyZ,EAAAxC,MAIA,SAAAsjH,GAAAhxH,GACAuvH,IAAAvvH,IACA4pE,EAAA+pD,YAAA3zH,EACAuvH,EAAAvvH,GAIA,SAAAoyE,GAAApyE,GACAwvH,IAAAxvH,IACAA,IAAA1K,EAAA4D,eACA0wE,EAAAgqD,yBAAA,cACS5zH,IAAA1K,EAAA6D,iBACTywE,EAAAgqD,yBAAA,UACS5zH,IAAA1K,EAAA8D,sBACTwwE,EAAAgqD,yBAAA,UAGApE,EAAAxvH,GAIA,SAAA49E,GAAA59E,GACA2vH,IAAA3vH,IACA4pE,EAAAqU,UAAAj+E,EACA2vH,EAAA3vH,GAIA,SAAA4xH,GAAA5xH,GAEA4vH,IAAA5vH,IACA4pE,EAAAiqD,QAAA7zH,EACA4vH,EAAA5vH,GAIA,SAAA6xH,GAAA7xH,GAEA6vH,IAAA7vH,IACA4pE,EAAAkqD,SAAA9zH,EACA6vH,EAAA7vH,GAIA,SAAAyxH,GAAAzxH,GACAyvH,IAAAzvH,IACA4pE,EAAAmqD,YAAA/zH,EACAyvH,EAAAzvH,GAIA,SAAAmxH,GAAAnxH,GACA0vH,IAAA1vH,IACA4pE,EAAA01B,UAAAt/F,EACA0vH,EAAA1vH,GAIA,SAAAqyH,GAAAryH,GACA8vH,EAAAj6H,SAAAmK,EAAAnK,SACA+zE,EAAAyoD,YAAAryH,GAEA8vH,EAAA9vH,QAzwBA7J,IAAAyzE,EAAAyoD,cACAzoD,EAAAyoD,YAAA,cAGAt7H,KAAA4zE,WAAAhB,EACA5yE,KAAA6zE,WAAA,EACA7zE,KAAAi0E,aAAA,EACAj0E,KAAAi9H,cAAA,EACAj9H,KAAA+2E,KAAA,CACAxlB,OAAA,CACApqC,SAAA,EACA6kB,MAAA,IAIAhsC,KAAAmxF,uBAAA,aAEAnxF,KAAAsoF,eAAA,aAGAtoF,KAAAkpE,WAAA,WACA,OAAA2J,GAGA7yE,KAAAmiF,qBAAA,WACA,OAAAtP,EAAAsP,wBAGAniF,KAAAwiF,cAAA,WACA,OAAA7M,GAGA31E,KAAAyiF,cAAA,SAAAx5E,QACA7J,IAAA6J,IAAA0sE,EAAA1sE,IAGAjJ,KAAA0iF,QAAA,SAAA/lE,EAAAC,EAAAgmE,GACAo1C,EAAAr7G,EAAAg5D,EACAsiD,EAAAr7G,EAAA+4D,EACA/C,EAAAj2D,MAAAq7G,EACAplD,EAAAh2D,OAAAq7G,EACAC,EAAA34H,KAAAiK,MAAAwuH,EAAA,GACAG,EAAA54H,KAAAiK,MAAAyuH,EAAA,IAEA,IAAAr1C,IACAhQ,EAAAzoE,MAAAwS,QAAA,KACAi2D,EAAAzoE,MAAAyS,SAAA,MAGA08G,EAAAzuH,IAAA/B,KAAAovH,GAAAC,GAEAmB,EAAAptH,IAAApD,IAAAovH,EAAAC,GAEAoB,EAAA1uH,IAAA/B,KAAAovH,GAAAC,GAEAoB,EAAArtH,IAAApD,IAAAovH,EAAAC,GAEAK,EAAA,EACAC,EAAA,EACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACA94H,KAAA6iF,YAAA,IAAAlmE,EAAAC,IAGA5c,KAAA6iF,YAAA,SAAAnjF,EAAAiX,EAAAgG,EAAAC,GACAw7G,EAAA14H,EAAAi2E,EACA0iD,EAAA1hH,EAAAg/D,EACA2iD,EAAA37G,EAAAg5D,EACA4iD,EAAA37G,EAAA+4D,GAGA31E,KAAA8iF,WAAA,aAEA9iF,KAAA+iF,eAAA,aAEA/iF,KAAAkjF,cAAA,SAAAv4E,EAAAqC,GACAuoE,EAAAzsE,IAAA6B,GAEA6qE,OAAAp2E,IAAA4N,IAAA,EAEAusH,EAAA1uH,IAAA/B,KAAAovH,GAAAC,GAEAoB,EAAArtH,IAAApD,IAAAovH,EAAAC,IAGAn4H,KAAAk9H,iBAAA,SAAA3zH,EAAAyD,GACAzC,QAAAC,KAAA,6FACAxK,KAAAkjF,cAAA35E,EAAAyD,IAGAhN,KAAAijF,cAAA,WACA,OAAA1N,GAGAv1E,KAAAmjF,cAAA,WACA,OAAA3N,GAGAx1E,KAAAsiF,iBAAA,WACA,UAGAtiF,KAAA61D,MAAA,YACA,IAAA0jE,EAAAh0G,YACAg0G,EAAAvzG,UAAAszG,GAEAC,EAAA9zG,eAAA,GAEA8zG,EAAA1uH,IAAAnL,EAAA65H,EAAA1uH,IAAAnL,EAAAw4H,EACAqB,EAAA1uH,IAAA8L,GAAA4iH,EAAA1uH,IAAA8L,EAAAwhH,EAEAoB,EAAArtH,IAAAxM,EAAA65H,EAAArtH,IAAAxM,EAAAw4H,EACAqB,EAAArtH,IAAAyK,GAAA4iH,EAAArtH,IAAAyK,EAAAwhH,EAEA3iD,EAAA,GACA3C,EAAAsqD,UAAA,EAAA5D,EAAA1uH,IAAAnL,EAAA,EAAA65H,EAAArtH,IAAAyK,EAAA4iH,EAAArtH,IAAAxM,EAAA65H,EAAA1uH,IAAAnL,EAAA,EAAA65H,EAAA1uH,IAAA8L,EAAA4iH,EAAArtH,IAAAyK,EAAA,GAGA6+D,EAAA,IACA6F,GAAA98E,EAAA4D,gBACA83H,GAAA,GACAG,GAAA,QAAA76H,KAAAiK,MAAA,IAAA+rE,EAAA5sE,GAAA,IAAApJ,KAAAiK,MAAA,IAAA+rE,EAAA3sE,GAAA,IAAArJ,KAAAiK,MAAA,IAAA+rE,EAAA1sE,GAAA,IAAA2sE,EAAA,KAEA3C,EAAA21B,SAAA,EAAA+wB,EAAA1uH,IAAAnL,EAAA,EAAA65H,EAAArtH,IAAAyK,EAAA4iH,EAAArtH,IAAAxM,EAAA65H,EAAA1uH,IAAAnL,EAAA,EAAA65H,EAAA1uH,IAAA8L,EAAA4iH,EAAArtH,IAAAyK,EAAA,IAGA4iH,EAAAv0G,cAKAhlB,KAAAg5E,WAAA,aAEAh5E,KAAAyjF,WAAA,aAEAzjF,KAAA0jF,aAAA,aAEA1jF,KAAAuxD,OAAA,SAAAJ,EAAA/wC,GACA,GAAAA,aAAA7hB,EAAA0xD,UAAA,IAKA,IAAAjwD,KAAA6zE,WAAA7zE,KAAA61D,QACA+e,EAAAmC,KAAAxlB,OAAApqC,SAAA,EACAytD,EAAAmC,KAAAxlB,OAAAvlB,MAAA,EAEA6mC,EAAAopD,aAAA3D,EAAAN,EAAA,KAAAO,EAAAN,EAAAG,EAAAH,EAAAI,GAEAxlD,EAAA3sD,UAAAgyG,EAAAC,GAEAvB,EAAAkB,EAAAsF,aAAAjsE,EAAA/wC,EAAApgB,KAAAi0E,YAAAj0E,KAAAi9H,cACApG,EAAAD,EAAAr+G,SACAg+D,EAAAqgD,EAAAnyD,OACArkD,EAEA05G,GAAA3vG,gBAAA/J,EAAA8vC,oBAgFA,WACAupE,EAAA1wH,OAAA,OAEA2wH,EAAA3wH,OAAA,OAEA4wH,GAAA5wH,OAAA,OAEA,QAAAiB,EAAA,EAAA69E,EAAAtR,EAAAz3E,OAA0CkL,EAAA69E,EAAQ79E,IAAA,CAClD,IAAAuqD,EAAAgiB,EAAAvsE,GACAqzH,EAAA9oE,EAAA5pD,MAEA4pD,aAAAh2D,EAAA41D,aACAslE,EAAAltH,IAAA8wH,GACS9oE,aAAAh2D,EAAA61D,iBAETslE,EAAAntH,IAAA8wH,GACS9oE,aAAAh2D,EAAAm2D,YAETilE,GAAAptH,IAAA8wH,IA3FAC,GAEA,QAAAh+G,EAAA,EAAAi+G,EAAA1G,EAAA/3H,OAA4CwgB,EAAAi+G,EAAQj+G,IAAA,CACpD,IAAA06G,EAAAnD,EAAAv3G,GACAkpB,EAAAwxF,EAAAxxF,SACA,QAAAppC,IAAAopC,GAAA,IAAAA,EAAAoyB,QAAA,CAIA,GAFA4+D,EAAAx0G,YAEAg1G,aAAAz7H,EAAAi/H,kBACA1G,EAAAkD,GACAt6H,GAAAw4H,EACApB,EAAAngH,GAAAwhH,EACA4B,GAAAjD,EAAAkD,EAAAxxF,QACS,GAAAwxF,aAAAz7H,EAAAk/H,eACT3G,EAAAkD,EAAA7gH,GACA49G,EAAAiD,EAAAv7G,GACAq4G,EAAAnoD,eAAAjvE,GAAAw4H,EACApB,EAAAnoD,eAAAh4D,GAAAwhH,EACApB,EAAApoD,eAAAjvE,GAAAw4H,EACAnB,EAAApoD,eAAAh4D,GAAAwhH,EAEAqB,EAAA10G,cAAA,CAAAgyG,EAAAnoD,eAAAooD,EAAApoD,kBAEA,IAAA2qD,EAAAzzG,cAAA2zG,IACAmB,GAAA7D,EAAAC,EAAAiD,EAAAxxF,QAES,GAAAwxF,aAAAz7H,EAAAm/H,eAAA,CAIT,GAHA5G,EAAAkD,EAAA7gH,GACA49G,EAAAiD,EAAAv7G,GACAu4G,EAAAgD,EAAAr/F,GACAm8F,EAAAnoD,eAAA/3D,GAAA,GAAAkgH,EAAAnoD,eAAA/3D,EAAA,WACA,GAAAmgH,EAAApoD,eAAA/3D,GAAA,GAAAmgH,EAAApoD,eAAA/3D,EAAA,WACA,GAAAogH,EAAAroD,eAAA/3D,GAAA,GAAAogH,EAAAroD,eAAA/3D,EAAA,WACAkgH,EAAAnoD,eAAAjvE,GAAAw4H,EACApB,EAAAnoD,eAAAh4D,GAAAwhH,EACApB,EAAApoD,eAAAjvE,GAAAw4H,EACAnB,EAAApoD,eAAAh4D,GAAAwhH,EACAnB,EAAAroD,eAAAjvE,GAAAw4H,EACAlB,EAAAroD,eAAAh4D,GAAAwhH,EAEA3vF,EAAA+8B,SAAA,IACAm3D,GAAA5F,EAAAnoD,eAAAooD,EAAApoD,eAAAnmC,EAAA+8B,UACAm3D,GAAA3F,EAAApoD,eAAAqoD,EAAAroD,eAAAnmC,EAAA+8B,UACAm3D,GAAA1F,EAAAroD,eAAAmoD,EAAAnoD,eAAAnmC,EAAA+8B,WAGAi0D,EAAA10G,cAAA,CAAAgyG,EAAAnoD,eAAAooD,EAAApoD,eAAAqoD,EAAAroD,kBAEA,IAAA2qD,EAAAzzG,cAAA2zG,IACA+B,GAAAzE,EAAAC,EAAAC,EAAA,MAAAgD,EAAAxxF,GAUA+wF,EAAAtzG,MAAAuzG,IASA3mD,EAAAopD,aAAA,kBA7FA1xH,QAAA2U,MAAA,iGChQAzgB,EAAAC,QAAA,SAAAH,GAMAA,EAAAo/H,sBAAA,CACAr+D,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA20H,OAAA,CACA37F,KAAA,KACAh5B,MAAA,IAAA1K,EAAA+a,QAAA,QAEAukH,OAAA,CACA57F,KAAA,KACAh5B,MAAA,IAAA1K,EAAA+a,QAAA,QAEAwkH,OAAA,CACA77F,KAAA,KACAh5B,MAAA,IAAA1K,EAAA+a,QAAA,SAGAimD,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,uBAAwB,uBAAwB,uBAAwB,oBAAqB,gBAAiB,6CAA8C,4EAA6E,KAAK7mC,KAAA,2BC1B/Rl6B,EAAAC,QAAA,SAAAH,GAMAA,EAAAw/H,eAAA,CACAz+D,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA0B,MAAA,CACAs3B,KAAA,IACAh5B,MAAA,IAAA1K,EAAAmK,MAAA,YAGA62D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,uBAAyC,8BAA+B,oBAAqB,gBAAiB,2CAA4C,2CAA4C,oCAAqC,6CAA8C,KAAK7mC,KAAA,2BClB9Rl6B,EAAAC,QAAA,SAAAH,GAQAA,EAAAs1H,kBAAA,CACA5sD,QAAA,CACAktD,kBAAA,OACAC,gBAAA,MAEA90D,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA+0H,gBAAA,CACA/7F,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,eAEAuhH,QAAA,CACAh8F,KAAA,MACAh5B,MAAA,KAGAs2D,aAAA,iCAAiD,oBAAqB,gBAAiB,sEAAuE,4EAA6E,KAAK5mC,KAAA,MAChP6mC,eAAA,6CAA+D,8BAA+B,gCAAiC,oBAAqB,gBAAiB,yBAA0B,yCAA0C,gDAAiD,2DAA4D,iCAAkC,IAAK,sBAAuB,KAAK7mC,KAAA,MACzZs7F,YAAA,SAAAP,GAEA,SAAAwK,EAAAx+H,EAAAg0H,GACA,OAAAn0H,KAAA4+H,KAAAz+H,KAAA,EAAAg0H,MAGA,IAAAzuG,EACAma,EACAy2E,EACAuoB,EAEA3K,EAAA,EAAAl0H,KAAAqe,KAAA,EAAA81G,GAAA,EAMA,IALAD,EAFA,KAEAA,EAFA,IAGA2K,EAAA,IAAA3K,EAAA,GACAr0F,EAAA,IAAAxgC,MAAA60H,GACA5d,EAAA,EAEA5wF,EAAA,EAAiBA,EAAAwuG,IAAgBxuG,EACjCma,EAAAna,GAAAi5G,EAAAj5G,EAAAm5G,EAAA1K,GACA7d,GAAAz2E,EAAAna,GAIA,IAAAA,EAAA,EAAiBA,EAAAwuG,IAAgBxuG,EACjCma,EAAAna,IAAA4wF,EAGA,OAAAz2E,wBCxDA3gC,EAAAC,QAAA,SAAAH,GAMAA,EAAAyyH,WAAA,CACA1xD,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA2xD,QAAA,CACA34B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,0BAA4C,8BAA+B,oBAAqB,gBAAiB,2CAA4C,kCAAmC,KAAK7mC,KAAA,2BClBrMl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAA8/H,UAAA,WACAr+H,KAAA6jE,QAAAtlE,EAAA8/H,UAAAz1F,OAGArqC,EAAA8/H,UAAA1+H,UAAAE,OAAA6/B,OAAAnhC,EAAA2lE,wBAAAvkE,WACApB,EAAA8/H,UAAA1+H,UAAAqJ,YAAAzK,EAAA8/H,UAEA9/H,EAAA8/H,UAAAz1F,MAAA,SAAAzf,EAAAm1G,GACA,IAAAC,EAAA,CACAv6D,QAAA,GACArnD,MAAA,EACAC,OAAA,EACAg0C,OAAA,KACAqT,YAAA,GAiCA,SAAAu6D,EAAAv1H,GACA,OAAAA,EAAAw1H,WAAA,IAAAx1H,EAAAw1H,WAAA,QAAAx1H,EAAAw1H,WAAA,SAAAx1H,EAAAw1H,WAAA,QAOA,SAAAC,EAAAv1G,EAAAw1G,EAAAhiH,EAAAC,GAOA,IANA,IAAAgiH,EAAAjiH,EAAAC,EAAA,EACAiiH,EAAA,IAAAl0F,WAAAxhB,EAAAw1G,EAAAC,GACAE,EAAA,IAAAn0F,WAAAi0F,GACArjH,EAAA,EACAshD,EAAA,EAEAlmD,EAAA,EAAqBA,EAAAiG,EAAYjG,IACjC,QAAAjX,EAAA,EAAuBA,EAAAid,EAAWjd,IAAA,CAClC,IAAAmJ,EAAAg2H,EAAAhiE,GAEAj0D,EAAAi2H,IADAhiE,GAGAl0D,EAAAk2H,IADAhiE,GAGA5iD,EAAA4kH,IADAhiE,GAEAA,IACAiiE,EAAAvjH,GAAA5S,EAGAm2H,IAFAvjH,GAEA3S,EAGAk2H,IAFAvjH,GAEA1S,EAGAi2H,IAFAvjH,GAEAtB,EACAsB,IAIA,OAAAujH,EAGA,IAqCAC,EArCAC,EAAAR,EAAA,QACAS,EAAAT,EAAA,QACAU,EAAAV,EAAA,QACAW,EAAAX,EAAA,QAsBAY,EAAA,IAAAj0F,WAAAhiB,EAAA,EArBA,IAuBA,GAhGA,YAgGAi2G,EApBA,GAsBA,OADA70H,QAAA2U,MAAA,8DACAq/G,EAGA,GA/EA,GA+EAa,EAnBA,IAqBA,OADA70H,QAAA2U,MAAA,0EACAq/G,EAIA,IA5EAt1H,EA4EAo2H,EAAAD,EAxBA,IAyBAE,GAAA,EAEA,OAAAD,GACA,KAAAL,EACAD,EAAA,EACAR,EAAA3tE,OAAAryD,EAAAoI,qBACA,MAEA,KAAAs4H,EACAF,EAAA,GACAR,EAAA3tE,OAAAryD,EAAAsI,sBACA,MAEA,KAAAq4H,EACAH,EAAA,GACAR,EAAA3tE,OAAAryD,EAAAuI,sBACA,MAEA,KAAAq4H,EACAJ,EAAA,EACAR,EAAA3tE,OAAAryD,EAAA4I,gBACA,MAEA,QACA,UAAAi4H,EAhDA,KAgDA,SAAAA,EA/CA,KA+CA,MAAAA,EA9CA,KA8CA,IAAAA,EA7CA,KA6CA,WAAAA,EA5CA,KAkDA,OADA70H,QAAA2U,MAAA,mDA1GAjW,EA0GAo2H,EAzGArmB,OAAAumB,aAAA,IAAAt2H,KAAA,MAAAA,GAAA,OAAAA,GAAA,UA0GAs1H,EALAe,GAAA,EACAP,EAAA,GACAR,EAAA3tE,OAAAryD,EAAA+H,WAQAi4H,EAAAt6D,YAAA,EAzIA,OA2IAm7D,EAnEA,KAmEA,IAAAd,IACAC,EAAAt6D,YAAA1kE,KAAA2M,IAAA,EAAAkzH,EAjEA,KAoEA,IAAAI,EAAAJ,EA3DA,IA8DA,GAFAb,EAAAl6D,aA1IA,IA0IAm7D,GAEAjB,EAAAl6D,cA3IA,KA2IAm7D,MA1IA,KA0IAA,MAzIA,KAyIAA,MAxIA,KAwIAA,MAvIA,MAuIAA,MAtIA,MAsIAA,IAEA,OADAj1H,QAAA2U,MAAA,mDACAq/G,EAGAA,EAAA5hH,MAAAyiH,EA7EA,GA8EAb,EAAA3hH,OAAAwiH,EA/EA,GAoFA,IAJA,IAAAT,EAAAS,EAlFA,GAkFA,EAEApzF,EAAAuyF,EAAAl6D,UAAA,IAEAt3B,EAAA,EAAsBA,EAAAf,EAAce,IAIpC,IAHA,IAAApwB,EAAA4hH,EAAA5hH,MACAC,EAAA2hH,EAAA3hH,OAEAqI,EAAA,EAAqBA,EAAAs5G,EAAAt6D,YAAqBh/C,IAAA,CAC1C,GAAAq6G,EACA,IACAV,GADAE,EAAAJ,EAAAv1G,EAAAw1G,EAAAhiH,EAAAC,IACA9d,WAEA,CAAA8/H,EAAAr/H,KAAA2M,IAAA,EAAAyQ,GAAA,EAAApd,KAAA2M,IAAA,EAAA0Q,GAAA,EAAAmiH,EAAA,IACAD,EAAA,IAAAn0F,WAAAxhB,EAAAw1G,EAAAC,GAGA,IAAAn+B,EAAA,CACAh5E,KAAAq3G,EACAniH,QACAC,UAEA2hH,EAAAv6D,QAAA1nC,KAAAmkE,GACAk+B,GAAAC,EACAjiH,EAAApd,KAAA2M,IAAAyQ,GAAA,KACAC,EAAArd,KAAA2M,IAAA0Q,GAAA,KAIA,OAAA2hH,uBCnNA9/H,EAAAC,QAAA,SAAAH,GAQAA,EAAAkhI,gBAAA,CACAngE,SAAA,CACAg2D,OAAA,CACArzF,KAAA,IACAh5B,MAAA,MAEAssH,OAAA,CACAtzF,KAAA,IACAh5B,MAAA,MAEAupD,MAAA,CACAvwB,KAAA,IACAh5B,MAAA,GAEAurH,QAAA,CACAvyF,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,wBAA0C,yBAA0B,4BAA6B,4BAA6B,oBAAqB,gBAAiB,yCAA0C,kCAAmC,+EAAgF,sBAAuB,wBAAyB,KAAK7mC,KAAA,2BC5BtXl6B,EAAAC,QAAA,SAAAH,GAYAA,EAAAmhI,cAAA,CACApgE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAGA02H,MAAA,CACA19F,KAAA,IACAh5B,MAAA,MAGA22H,IAAA,CACA39F,KAAA,IACAh5B,MAAA,GAGA85G,OAAA,CACA9gF,KAAA,IACAh5B,MAAA,KAEAkP,MAAA,CACA8pB,KAAA,IACAh5B,MAAA,KAEA42H,KAAA,CACA59F,KAAA,IACAh5B,MAAA,KAEA62H,OAAA,CACA79F,KAAA,IACAh5B,MAAA,KAGA82H,OAAA,CACA99F,KAAA,IACAh5B,MAAA,KAGA+2H,aAAA,CACA/9F,KAAA,IACAh5B,MAAA,IAEAg3H,aAAA,CACAh+F,KAAA,IACAh5B,MAAA,IAEAi3H,MAAA,CACAj+F,KAAA,IACAh5B,MAAA,MAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,oBACA,8BAAgC,2BAA4B,wBAAyB,uBAAwB,sBAAuB,wBAAyB,wBAAyB,8BAA+B,8BAA+B,uBAAwB,oBAAqB,uBAAwB,oEAAqE,IAAK,gBAAiB,cAAe,gBAAiB,0CAA2C,0CAC/d,gDAAkD,8DAA+D,iBAAkB,mCAAoC,IAAK,SAAU,sBAAuB,IAAK,IAAK,8DAA+D,iBAAkB,oBAAqB,IAAK,SAAU,mCAAoC,IAAK,IAAK,kCAAmC,kCAC7Z,wDAA0D,6CAA8C,qCAAsC,6CAA8C,iDAC5L,yEAA2E,qCAAsC,IAAK,SAAU,0CAA2C,IAAK,KAAK7mC,KAAA,2BCrErLl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAA4hI,cAAA,SAAArhH,EAAA3G,EAAA+W,QACA9vB,IAAAb,EAAA6hI,iBAAA71H,QAAA2U,MAAA,uDACA,IAAAm9D,EAAA99E,EAAA6hI,gBACApgI,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,eACAlgE,IAAA0f,GAAA9e,KAAAs/D,SAAA,OAAAr2D,MAAAC,KAAA4V,QACA1f,IAAA+Y,IAAAnY,KAAAs/D,SAAA,MAAAr2D,MAAAkP,QACA/Y,IAAA8vB,IAAAlvB,KAAAs/D,SAAA,MAAAr2D,MAAAimB,GACAlvB,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,iBAEAx/D,KAAA6xC,SAAA,EACA7xC,KAAAk1H,gBAAA,EACAl1H,KAAA+xH,WAAA,EACA/xH,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAA4hI,cAAAxgI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAs/D,SAAA,SAAAr2D,MAAAipH,EACAlyH,KAAAs/D,SAAA,MAAAr2D,MAAAH,IAAAopH,EAAAv1G,MAAAu1G,EAAAt1G,QACA5c,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SAEAxoC,KAAAk1H,eACAhkE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,QAEA8wC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,GAAA,yBClCAxzH,EAAAC,QAAA,SAAAH,GAQAA,EAAA6hI,gBAAA,CACA9gE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAo3H,MAAA,CACAp+F,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,UAEAoC,OAAA,CACAmjB,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,QAEAvE,MAAA,CACA8pB,KAAA,IACAh5B,MAAA,MAEAimB,MAAA,CACA+S,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,wBAA0C,uBAAwB,uBAAwB,sBAAuB,8BAA+B,oBAAqB,oBAAqB,4CAA6C,mCAAoC,6EAA8E,oDAAqD,IAAK,gBAAiB,2CAA4C,yDAA0D,4EAA6E,KAAK7mC,KAAA,2BChC5lBl6B,EAAAC,QAAA,SAAAH,GASAA,EAAA+hI,WAAA,CACAhhE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA4nB,OAAA,CACAoR,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,WAGA6iD,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,uBAAwB,qDAAsD,aACpJ,gIAAkI,gIAAiI,gIAAiI,gIAAiI,+DAAgE,+DAAgE,kNAAmN,kNAAmN,8MAA+M,sBAAwB,qHAA8H,UAAW,gBAAiB,eAE56C,kCAAoC,kCAAmC,sEAAuE,sCAAuC,IAAK,IAE1L,4BAA8B,4EAA6E,sBAAuB,IAAK,mDAAoD,kEAAmE,6CAA8C,KAAK7mC,KAAA,2BC1BjTl6B,EAAAC,QAAA,SAAAH,GASAA,EAAAgiI,YAAA,CACAjhE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA4nB,OAAA,CACAoR,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,WAGA6iD,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,uBAAwB,qDAAsD,aAAc,0EAA2E,0EAA2E,sBAAwB,UAAW,gBAAiB,eAAgB,aAAc,aAE1Y,gCAA6B,kCAAwC,uEAAwE,sCAAuC,IAEpL,4BAA8B,4EAA6E,uBAAuB,IAAM,gEAAiE,MAAK7mC,KAAA,2BCzB9Ml6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAiiI,eAAA,SAAAtvE,EAAAH,GAGA,GAFA/wD,KAAAkxD,gBAEA9xD,IAAA2xD,EAAA,CACA,IAAA0vE,EAAAvvE,EAAAsxB,gBACA7lE,EAAApd,KAAAiK,MAAA0nD,EAAAnF,QAAAid,OAAArsD,MAAA8jH,IAAA,EACA7jH,EAAArd,KAAAiK,MAAA0nD,EAAAnF,QAAAid,OAAApsD,OAAA6jH,IAAA,EACA3vF,EAAA,CACAggB,UAAAvyD,EAAA+G,aACAurD,UAAAtyD,EAAA+G,aACAsrD,OAAAryD,EAAA8H,UACAqkF,eAAA,GAEA35B,EAAA,IAAAxyD,EAAA2/E,kBAAAvhE,EAAAC,EAAAk0B,GAGA9wC,KAAA0gI,cAAA3vE,EACA/wD,KAAA2gI,cAAA5vE,EAAA7lD,QACAlL,KAAAiyH,YAAAjyH,KAAA0gI,cACA1gI,KAAAkyH,WAAAlyH,KAAA2gI,cACA3gI,KAAA4gI,OAAA,QACAxhI,IAAAb,EAAAyyH,YAAAzmH,QAAA2U,MAAA,mDACAlf,KAAA6gI,SAAA,IAAAtiI,EAAAuiI,WAAAviI,EAAAyyH,aAGAzyH,EAAAiiI,eAAA7gI,UAAA,CACAohI,YAAA,WACA,IAAA92G,EAAAjqB,KAAAkyH,WACAlyH,KAAAkyH,WAAAlyH,KAAAiyH,YACAjyH,KAAAiyH,YAAAhoG,GAEA+2G,QAAA,SAAAC,GACAjhI,KAAA4gI,OAAAtkG,KAAA2kG,IAEAC,WAAA,SAAAD,EAAA1gI,GACAP,KAAA4gI,OAAAn+F,OAAAliC,EAAA,EAAA0gI,IAEA1vE,OAAA,SAAAnlD,GACApM,KAAAiyH,YAAAjyH,KAAA0gI,cACA1gI,KAAAkyH,WAAAlyH,KAAA2gI,cACA,IACAM,EACAh8G,EAFAktG,GAAA,EAGAjtG,EAAAllB,KAAA4gI,OAAA9hI,OAEA,IAAAmmB,EAAA,EAAiBA,EAAAC,EAAQD,IAEzB,IADAg8G,EAAAjhI,KAAA4gI,OAAA37G,IACA4sB,QAAA,CAGA,GAFAovF,EAAA1vE,OAAAvxD,KAAAkxD,SAAAlxD,KAAAiyH,YAAAjyH,KAAAkyH,WAAA9lH,EAAA+lH,GAEA8O,EAAAlP,UAAA,CACA,GAAAI,EAAA,CACA,IAAApmE,EAAA/rD,KAAAkxD,SAAAnF,QACAA,EAAAqvC,YAAArvC,EAAAiyC,SAAA,cACAh+F,KAAA6gI,SAAAtvE,OAAAvxD,KAAAkxD,SAAAlxD,KAAAiyH,YAAAjyH,KAAAkyH,WAAA9lH,GACA2/C,EAAAqvC,YAAArvC,EAAA8xC,MAAA,cAGA79F,KAAA+gI,cAGAE,aAAA1iI,EAAA4iI,SACAhP,GAAA,EACS8O,aAAA1iI,EAAA6iI,gBACTjP,GAAA,KAIA/6E,MAAA,SAAA2Z,GACA,QAAA3xD,IAAA2xD,EAAA,CACAA,EAAA/wD,KAAA0gI,cAAAx1H,QACA,IAAAu1H,EAAAzgI,KAAAkxD,SAAAsxB,gBACAzxB,EAAAp0C,MAAApd,KAAAiK,MAAAxJ,KAAAkxD,SAAAnF,QAAAid,OAAArsD,MAAA8jH,GACA1vE,EAAAn0C,OAAArd,KAAAiK,MAAAxJ,KAAAkxD,SAAAnF,QAAAid,OAAApsD,OAAA6jH,GAGAzgI,KAAA0gI,cAAAzuF,UACAjyC,KAAA0gI,cAAA3vE,EACA/wD,KAAA2gI,cAAA1uF,UACAjyC,KAAA2gI,cAAA5vE,EAAA7lD,QACAlL,KAAAiyH,YAAAjyH,KAAA0gI,cACA1gI,KAAAkyH,WAAAlyH,KAAA2gI,eAEAj+C,QAAA,SAAA/lE,EAAAC,GACA5c,KAAA0gI,cAAAh+C,QAAA/lE,EAAAC,GACA5c,KAAA2gI,cAAAj+C,QAAA/lE,EAAAC,yBCzFAne,EAAAC,QAAA,SAAAH,GAIAA,EAAA8iI,WAAA,CACA/hE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,IAAA1K,EAAAmkE,SAEA20C,WAAA,CACAp1E,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,UAGA6iD,aAAA,2pBACAC,eAAA,2gJChBA/gE,EAAAC,QAAA,SAAAH,GAIAA,EAAA+iI,SAAA,SAAAC,EAAAC,EAAAC,EAAAC,QACAtiI,IAAAb,EAAAojI,YAAAp3H,QAAA2U,MAAA,6CACA,IAAAm9D,EAAA99E,EAAAojI,WACA3hI,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,UACAt/D,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,sBAEApgE,IAAAsiI,IAAA1hI,KAAAs/D,SAAAoiE,UAAAz4H,MAAAy4H,QACAtiI,IAAAmiI,IAAAvhI,KAAAs/D,SAAAsiE,WAAA34H,MAAAs4H,QACAniI,IAAAoiI,IAAAxhI,KAAAs/D,SAAAuiE,WAAA54H,MAAAu4H,QACApiI,IAAAqiI,IAAAzhI,KAAAs/D,SAAAwiE,OAAA74H,MAAAw4H,GACAzhI,KAAA6xC,SAAA,EACA7xC,KAAAk1H,gBAAA,EACAl1H,KAAA+xH,WAAA,EACA/xH,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAA+iI,SAAA3hI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAs/D,SAAA,SAAAr2D,MAAAipH,EACAlyH,KAAAs/D,SAAA,KAAAr2D,OAAAmD,EACApM,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SAEAxoC,KAAAk1H,eACAhkE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,QAEA8wC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,GAAA,yBCnCAxzH,EAAAC,QAAA,SAAAH,GAsBAA,EAAAojI,WAAA,CACAriE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAutC,KAAA,CACAvU,KAAA,IACAh5B,MAAA,GAEA24H,WAAA,CACA3/F,KAAA,IACAh5B,MAAA,IAEA44H,WAAA,CACA5/F,KAAA,IACAh5B,MAAA,KAEA64H,OAAA,CACA7/F,KAAA,IACAh5B,MAAA,MAEAy4H,UAAA,CACAz/F,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,CACA,sBAAwB,0BACxB,4BACA,4BACA,wBAA0B,8BAA+B,oBAAqB,gBAC9E,oDACA,4CAA8C,wCAAyC,6BACvF,gGACA,kEACA,yEACA,kGACA,oBAAsB,2EAA4E,IAAK,qDAAsD,KAAK7mC,KAAA,2BC7DlKl6B,EAAAC,QAAA,SAAAH,GAQAA,EAAAwjI,YAAA,CACAziE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA+4H,YAAA,CACA//F,KAAA,IACAh5B,MAAA,MAEAg5H,aAAA,CACAhgG,KAAA,IACAh5B,MAAA,MAEAi5H,eAAA,CACAjgG,KAAA,IACAh5B,MAAA,KAEAk5H,WAAA,CACAlgG,KAAA,IACAh5B,MAAA,SAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,8BAAgD,8BAA+B,gCAAiC,4BAA6B,8BAA+B,oBAAqB,gBAAiB,6BAA8B,wBAAyB,YAAa,iBAAkB,iDAAkD,4CAA6C,uCAAwC,mEAAoE,gFAAiF,oFAAqF,qCAAsC,oFAAqF,qCAAsC,qFAAsF,qCAAsC,qFAAsF,qCAAsC,sFAAuF,qCAAsC,sFAAuF,qCAAsC,qFAAsF,qCAAsC,uDAAwD,+FAAgG,gFAAiF,KAAK7mC,KAAA,2BChCtpDl6B,EAAAC,QAAA,SAAAH,GAMAA,EAAA6jI,cAAA,CACA9iE,SAAA,CACA+iE,iBAAA,CACApgG,KAAA,IACAh5B,MAAA,MAEAq5H,aAAA,CACArgG,KAAA,IACAh5B,MAAA,IAEAs5H,cAAA,CACAtgG,KAAA,IACAh5B,MAAA,GAEAu5H,cAAA,CACAvgG,KAAA,IACAh5B,MAAA,GAEAopE,MAAA,CACApwC,KAAA,IACAh5B,MAAA,OAGAs2D,aAAA,mCAAmD,8BAA+B,+BAAgC,+BAAgC,yBAA0B,4BAA6B,mCAAoC,gBAAiB,6DAA8D,4DAA6D,+GAAgH,+CAAgD,wCAAyC,0EAA2E,iFAAkF,iFAAkF,qHAAsH,+CAAgD,KAAK5mC,KAAA,MAC59B6mC,eAAA,8BAAgD,yBAA0B,4BAA6B,mCAAoC,gBAAiB,gFAAiF,qCAAsC,qFAAsF,qFAAsF,qFAAsF,8FAA+F,KAAK7mC,KAAA,2BC9BznBl6B,EAAAC,QAAA,SAAAH,GAOAA,EAAAkkI,sBAAA,CACAnjE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,OAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+EAAmG,oBAAqBjhE,EAAAiqE,YAAA,uBAA8C,0DAA2D,2DAA4D,KAAK7vC,KAAA,2BCflSl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAmkI,WAAA,SAAAC,QACAvjI,IAAAb,EAAAmhI,eAAAn1H,QAAA2U,MAAA,kDACA,IAAAm9D,EAAA99E,EAAAmhI,cACA1/H,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,eACAlgE,GAAAujI,MAAA,IACA3iI,KAAAs/D,SAAA,MAAAr2D,MAAAjJ,KAAA4iI,kBAAAD,GACA3iI,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,iBAEAx/D,KAAA6xC,SAAA,EACA7xC,KAAAk1H,gBAAA,EACAl1H,KAAA+xH,WAAA,EACA/xH,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,MACAhyH,KAAA6iI,QAAA,EACA7iI,KAAA8iI,KAAA,EACA9iI,KAAA+iI,mBAGAxkI,EAAAmkI,WAAA/iI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAs/D,SAAA,SAAAr2D,MAAAipH,EACAlyH,KAAAs/D,SAAA,KAAAr2D,MAAA1J,KAAAm5B,SAEA14B,KAAAs/D,SAAA,IAAAr2D,MAAA,EAEAjJ,KAAA8iI,KAAA9iI,KAAAgjI,OAAA,MAAAhjI,KAAA6iI,QACA7iI,KAAAs/D,SAAA,OAAAr2D,MAAA1J,KAAAm5B,SAAA,GACA14B,KAAAs/D,SAAA,MAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA/5B,KAAA0e,GAAA1e,KAAA0e,IACAje,KAAAs/D,SAAA,OAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA,KACAt5B,KAAAs/D,SAAA,OAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA,KACAt5B,KAAAs/D,SAAA,aAAAr2D,MAAA1K,EAAAgB,KAAA+5B,UAAA,KACAt5B,KAAAs/D,SAAA,aAAAr2D,MAAA1K,EAAAgB,KAAA+5B,UAAA,KACAt5B,KAAA8iI,KAAA,EACA9iI,KAAA+iI,mBACO/iI,KAAA8iI,KAAA9iI,KAAAgjI,MAAAhjI,KAAAgjI,MAAA,GACPhjI,KAAAs/D,SAAA,OAAAr2D,MAAA1J,KAAAm5B,SAAA,GACA14B,KAAAs/D,SAAA,MAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA/5B,KAAA0e,GAAA1e,KAAA0e,IACAje,KAAAs/D,SAAA,aAAAr2D,MAAA1K,EAAAgB,KAAA+5B,UAAA,KACAt5B,KAAAs/D,SAAA,aAAAr2D,MAAA1K,EAAAgB,KAAA+5B,UAAA,KACAt5B,KAAAs/D,SAAA,OAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA,OACAt5B,KAAAs/D,SAAA,OAAAr2D,MAAA1K,EAAAgB,KAAA+5B,WAAA,QACO,GAAAt5B,KAAA6iI,SACP7iI,KAAAs/D,SAAA,IAAAr2D,MAAA,GAGAjJ,KAAA8iI,OACA9iI,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SAEAxoC,KAAAk1H,eACAhkE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,QAEA8wC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,GAAA,IAGA8Q,gBAAA,WACA/iI,KAAAgjI,MAAAzkI,EAAAgB,KAAA45B,QAAA,UAEAypG,kBAAA,SAAAD,GAIA,IAHA,IAAAM,EAAA,IAAA96G,aAAAw6G,IAAA,GACA7jI,EAAA6jI,IAEA19G,EAAA,EAAqBA,EAAAnmB,EAAYmmB,IAAA,CACjC,IAAAi+G,EAAA3kI,EAAAgB,KAAA+5B,UAAA,KACA2pG,EAAA,EAAAh+G,EAAA,GAAAi+G,EACAD,EAAA,EAAAh+G,EAAA,GAAAi+G,EACAD,EAAA,EAAAh+G,EAAA,GAAAi+G,EAGA,IAAA7xE,EAAA,IAAA9yD,EAAAulE,YAAAm/D,EAAAN,IAAApkI,EAAA8H,UAAA9H,EAAAwH,WAEA,OADAsrD,EAAA9nB,aAAA,EACA8nB,wBC/EA5yD,EAAAC,QAAA,SAAAH,GAYAA,EAAA4kI,qBAAA,CACA7jE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAa,EAAA,CACAm4B,KAAA,IACAh5B,MAAA,QAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,mBAAoB,oBAAqB,gBAAiB,0BAA2B,wEAAyE,yEAA0E,0EAA2E,yEAA0E,+DAAgE,yEAA0E,0EAA2E,yEAA0E,wEAAyE,sBAAuB,KAAK7mC,KAAA,2BCxBlzBl6B,EAAAC,QAAA,SAAAH,GAWAA,EAAA6kI,0BAAA,CACA9jE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAa,EAAA,CACAm4B,KAAA,IACAh5B,MAAA,OAEAN,EAAA,CACAs5B,KAAA,IACAh5B,MAAA,MAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,mBAAoB,mBAAoB,oBAAqB,gBAAiB,0BAA2B,mCAAoC,yEAA0E,0EAA2E,2EAA4E,0EAA2E,+DAAgE,0EAA2E,2EAA4E,0EAA2E,yEAA0E,sBAAuB,KAAK7mC,KAAA,2BC3Bl3Bl6B,EAAAC,QAAA,SAAAH,GASAA,EAAA8kI,oBAAA,CACA/jE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA8C,IAAA,CACAk2B,KAAA,IACAh5B,MAAA,GAEA+C,WAAA,CACAi2B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,qBAAsB,4BAA6B,oBAAqB,gBAAiB,6CAC1I,kCAAoC,wCAAyC,qFAAsF,wCAAyC,iJAC5M,4EAA8E,0BAA2B,yFAA0F,WAAY,oEAAqE,IAAK,KAAK7mC,KAAA,2BC3B9Rl6B,EAAAC,QAAA,SAAAH,GAKAA,EAAAy+D,WAAA,SAAAjI,GACA,mBAAAA,IACAxqD,QAAAC,KAAA,6EACAuqD,OAAA31D,GAGAY,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBACAh1D,KAAA67D,iBAAA,GAGAt9D,EAAAy+D,WAAAr9D,UAAA,CACAqJ,YAAAzK,EAAAy+D,WAGAsmE,uBAMA,YALAlkI,IAAAY,KAAAujI,oBACAvjI,KAAAujI,kBAAA/mE,SAAAu7D,cAAA,QAGAxtH,QAAAC,KAAA,yDACAxK,KAAAujI,mBAGAtuE,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAq2D,EAAAr2D,KAAAq2D,aAAA,kBAAAr2D,KAAAq2D,YAAAr2D,KAAAq2D,YAAA93D,EAAAu3D,OAAAn2D,UAAAw2D,eAAAjB,GACAI,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SACAO,EAAA0G,mBAAAh8D,KAAA67D,iBACAvG,EAAAL,KAAAC,EAAA,SAAAgH,GACA,IAAA1gB,EAAAlT,KAAAM,MAAAszB,GACA/zB,EAAAqT,EAAArT,SAEA,QAAA/oC,IAAA+oC,EAAA,CACA,IAAAlG,EAAAkG,EAAAlG,KAEA,QAAA7iC,IAAA6iC,EAAA,CACA,cAAAA,EAAAimB,cAEA,YADA39C,QAAA2U,MAAA,qBAAAg2C,EAAA,sDAIA,aAAAjzB,EAAAimB,cAEA,YADA39C,QAAA2U,MAAA,qBAAAg2C,EAAA,sDAMA,IAAAtuC,EAAAC,EAAA+hB,MAAA4S,EAAA6a,GACAlB,EAAAvuC,EAAAK,SAAAL,EAAAohB,YACOotB,EAAAC,IAEP4H,eAAA,SAAAh0D,GACAjJ,KAAAq2D,YAAAptD,GAEA2/B,MAAA,SAAA4S,EAAA6a,GACA,IAAApvC,EAAA,IAAA1oB,EAAA2oB,SACAgI,OAAA9vB,IAAAo8C,EAAAtsB,MAAA,EAAAssB,EAAAtsB,MAAA,EAoTA,GA5SA,SAAAA,GACA,SAAAguC,EAAAj0D,EAAAqe,GACA,OAAAre,EAAA,GAAAqe,EAGA,IAAArC,EACAgE,EACAk0C,EACA9vD,EACA+vD,EACAC,EACAC,EACAC,EACAx0B,EACA9G,EACAu7B,EACAC,EACAtsB,EACAC,EACAC,EACAC,EACAC,EACAR,EACAhE,EACA2wB,EACAC,EACAp0D,EACAiY,EACAo8C,EACArwB,EACAtQ,EACApjB,EACAmyB,EAAAwP,EAAAxP,MACA7kB,EAAAq0B,EAAAr0B,SACAkmB,EAAAmO,EAAAnO,QACAvD,EAAA0R,EAAA1R,OACA+zB,EAAA,EAEA,QAAAz+D,IAAAo8C,EAAAlO,IAAA,CAEA,IAAAroB,EAAA,EAAqBA,EAAAu2B,EAAAlO,IAAAxuC,OAAqBmmB,IAC1Cu2B,EAAAlO,IAAAroB,GAAAnmB,QAAA++D,IAGA,IAAA54C,EAAA,EAAqBA,EAAA44C,EAAe54C,IACpCgC,EAAAglB,cAAAhnB,GAAA,GAIA5X,EAAA,EACA+vD,EAAAj2C,EAAAroB,OAEA,KAAAuO,EAAA+vD,IACArsB,EAAA,IAAAxyC,EAAA+a,SACA5Z,EAAAynB,EAAA9Z,KAAA6hB,EACA6hB,EAAAp6B,EAAAwQ,EAAA9Z,KAAA6hB,EACA6hB,EAAAn6B,EAAAuQ,EAAA9Z,KAAA6hB,EACAjI,EAAAE,SAAAmV,KAAAyU,GAGA1jC,EAAA,EACA+vD,EAAApxB,EAAAltC,OAEA,KAAAuO,EAAA+vD,GAUA,GATAn7B,EAAA+J,EAAA3+B,KACAmwD,EAAAN,EAAAj7B,EAAA,GACAw7B,EAAAP,EAAAj7B,EAAA,GACAkP,EAAA+rB,EAAAj7B,EAAA,GACAmP,EAAA8rB,EAAAj7B,EAAA,GACAoP,EAAA6rB,EAAAj7B,EAAA,GACAqP,EAAA4rB,EAAAj7B,EAAA,GACAsP,EAAA2rB,EAAAj7B,EAAA,GAEAu7B,EAAA,CAoBA,IAnBAE,EAAA,IAAAn/D,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,GACAqwD,EAAA70D,EAAAmjC,EAAA3+B,EAAA,GACAqwD,EAAAxwD,EAAA8+B,EAAA3+B,EAAA,IACAswD,EAAA,IAAAp/D,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,EAAA,GACAswD,EAAA90D,EAAAmjC,EAAA3+B,EAAA,GACAswD,EAAAzwD,EAAA8+B,EAAA3+B,EAAA,GACAA,GAAA,EAEAowD,IACA10B,EAAAiD,EAAA3+B,KACAqwD,EAAA30B,gBACA40B,EAAA50B,iBAIAo0B,EAAAl2C,EAAA+kB,MAAAltC,OAEAqyC,EACA,IAAAlsB,EAAA,EAAyBA,EAAA44C,EAAe54C,IAKxC,IAJA24C,EAAApiB,EAAAlO,IAAAroB,GACAgC,EAAAglB,cAAAhnB,GAAAk4C,GAAA,GACAl2C,EAAAglB,cAAAhnB,GAAAk4C,EAAA,MAEAl0C,EAAA,EAA2BA,EAAA,EAAOA,IAClCs0C,EAAAvxB,EAAA3+B,KACA4vB,EAAA2gC,EAAA,EAAAL,GACA1jD,EAAA+jD,EAAA,EAAAL,EAAA,GACAhwB,EAAA,IAAAhvC,EAAAme,QAAAugB,EAAApjB,GACA,IAAAoP,GAAAhC,EAAAglB,cAAAhnB,GAAAk4C,GAAA7gC,KAAAiR,GACA,IAAAtkB,GAAAhC,EAAAglB,cAAAhnB,GAAAk4C,EAAA,GAAA7gC,KAAAiR,GAWA,GANA6D,IACAksB,EAAA,EAAAtxB,EAAA3+B,KACAqwD,EAAAl8C,OAAA1Y,IAAAukC,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACAK,EAAAn8C,OAAAtY,KAAAw0D,EAAAl8C,SAGA6vB,EACA,IAAApsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCq4C,EAAA,EAAAtxB,EAAA3+B,KACAmU,EAAA,IAAAjjB,EAAA+a,QAAA+zB,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACA,IAAAr4C,GAAAy4C,EAAA10B,cAAA1M,KAAA9a,GACA,IAAAyD,GAAA04C,EAAA30B,cAAA1M,KAAA9a,GAWA,GAPA8vB,IACA+rB,EAAArxB,EAAA3+B,KACA9D,EAAAugC,EAAAuzB,GACAK,EAAA/yD,MAAAxB,OAAAI,GACAo0D,EAAAhzD,MAAAxB,OAAAI,IAGAgoC,EACA,IAAAtsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCo4C,EAAArxB,EAAA3+B,KACA9D,EAAAugC,EAAAuzB,GACA,IAAAp4C,GAAAy4C,EAAAz0B,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAa,IACA,IAAA0b,GAAA04C,EAAA10B,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAa,IAIA0d,EAAA+kB,MAAA1P,KAAAohC,GACAz2C,EAAA+kB,MAAA1P,KAAAqhC,OACW,CAcX,IAbA5wB,EAAA,IAAAxuC,EAAAuqC,OACA7uB,EAAA+xB,EAAA3+B,KACA0/B,EAAAlkC,EAAAmjC,EAAA3+B,KACA0/B,EAAA7/B,EAAA8+B,EAAA3+B,KAEAowD,IACA10B,EAAAiD,EAAA3+B,KACA0/B,EAAAhE,iBAIAo0B,EAAAl2C,EAAA+kB,MAAAltC,OAEAqyC,EACA,IAAAlsB,EAAA,EAAyBA,EAAA44C,EAAe54C,IAIxC,IAHA24C,EAAApiB,EAAAlO,IAAAroB,GACAgC,EAAAglB,cAAAhnB,GAAAk4C,GAAA,GAEAl0C,EAAA,EAA2BA,EAAA,EAAOA,IAClCs0C,EAAAvxB,EAAA3+B,KACA4vB,EAAA2gC,EAAA,EAAAL,GACA1jD,EAAA+jD,EAAA,EAAAL,EAAA,GACAhwB,EAAA,IAAAhvC,EAAAme,QAAAugB,EAAApjB,GACAoN,EAAAglB,cAAAhnB,GAAAk4C,GAAA7gC,KAAAiR,GAUA,GALA6D,IACAksB,EAAA,EAAAtxB,EAAA3+B,KACA0/B,EAAAvrB,OAAA1Y,IAAAukC,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,KAGAjsB,EACA,IAAApsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCq4C,EAAA,EAAAtxB,EAAA3+B,KACAmU,EAAA,IAAAjjB,EAAA+a,QAAA+zB,EAAAiwB,KAAAjwB,EAAAiwB,KAAAjwB,EAAAiwB,IACAvwB,EAAA/D,cAAA1M,KAAA9a,GASA,GALA8vB,IACA+rB,EAAArxB,EAAA3+B,KACA0/B,EAAApiC,MAAAxB,OAAA2gC,EAAAuzB,KAGA9rB,EACA,IAAAtsB,EAAA,EAAyBA,EAAA,EAAOA,IAChCo4C,EAAArxB,EAAA3+B,KACA0/B,EAAA9D,aAAA3M,KAAA,IAAA/9B,EAAAmK,MAAAohC,EAAAuzB,KAIAp2C,EAAA+kB,MAAA1P,KAAAyQ,IA5MA+wB,CAAA5uC,GAmNA,WACA,IAAA6uC,OAAA3+D,IAAAo8C,EAAAuiB,oBAAAviB,EAAAuiB,oBAAA,EAEA,GAAAviB,EAAApP,YACA,QAAAnnB,EAAA,EAAAjb,EAAAwxC,EAAApP,YAAAttC,OAAsDmmB,EAAAjb,EAAOib,GAAA84C,EAAA,CAC7D,IAAAr+D,EAAA87C,EAAApP,YAAAnnB,GACAtO,EAAAonD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACArO,EAAAmnD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACApO,EAAAknD,EAAA,EAAAviB,EAAApP,YAAAnnB,EAAA,KACAgC,EAAAmlB,YAAA9P,KAAA,IAAA/9B,EAAAikB,QAAA9iB,EAAAiX,EAAAC,EAAAC,IAIA,GAAA2kC,EAAAnP,YACA,QAAApnB,EAAA,EAAAjb,EAAAwxC,EAAAnP,YAAAvtC,OAAsDmmB,EAAAjb,EAAOib,GAAA84C,EAAA,CAC7D,IAAA9jD,EAAAuhC,EAAAnP,YAAApnB,GACApc,EAAAk1D,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACA/X,EAAA6wD,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACAxF,EAAAs+C,EAAA,EAAAviB,EAAAnP,YAAApnB,EAAA,KACAgC,EAAAolB,YAAA/P,KAAA,IAAA/9B,EAAAikB,QAAAvI,EAAApR,EAAAqE,EAAAuS,IAIAwH,EAAAk2B,MAAA3B,EAAA2B,MAEAl2B,EAAAk2B,OAAAl2B,EAAAk2B,MAAAr+C,OAAA,IAAAmoB,EAAAmlB,YAAAttC,SAAAmoB,EAAAolB,YAAAvtC,QAAAmoB,EAAAolB,YAAAvtC,SAAAmoB,EAAAE,SAAAroB,SACAyL,QAAAC,KAAA,sCAAAyc,EAAAE,SAAAroB,OAAA,mBAAAmoB,EAAAolB,YAAAvtC,OAAA,uBAAAmoB,EAAAmlB,YAAAttC,OAAA,mBA5OAk/D,GAkPA,SAAA9uC,GACA,QAAA9vB,IAAAo8C,EAAAtP,aACA,QAAAjnB,EAAA,EAAAjb,EAAAwxC,EAAAtP,aAAAptC,OAAuDmmB,EAAAjb,EAAOib,IAAA,CAC9DgC,EAAAilB,aAAAjnB,GAAA,GACAgC,EAAAilB,aAAAjnB,GAAArlB,KAAA47C,EAAAtP,aAAAjnB,GAAArlB,KACAqnB,EAAAilB,aAAAjnB,GAAAkC,SAAA,GAIA,IAHA,IAAA82C,EAAAh3C,EAAAilB,aAAAjnB,GAAAkC,SACA+2C,EAAA1iB,EAAAtP,aAAAjnB,GAAAkC,SAEAtN,EAAA,EAAA40B,EAAAyvB,EAAAp/D,OAAoD+a,EAAA40B,EAAQ50B,GAAA,GAC5D,IAAAk3B,EAAA,IAAAxyC,EAAA+a,QACAy3B,EAAArxC,EAAAw+D,EAAArkD,GAAAqV,EACA6hB,EAAAp6B,EAAAunD,EAAArkD,EAAA,GAAAqV,EACA6hB,EAAAn6B,EAAAsnD,EAAArkD,EAAA,GAAAqV,EACA+uC,EAAA3hC,KAAAyU,IAKA,QAAA3xC,IAAAo8C,EAAA2iB,aAAA3iB,EAAA2iB,YAAAr/D,OAAA,GACAyL,QAAAC,KAAA,mFAIA,IAHA,IAAAwhC,EAAA/kB,EAAA+kB,MACAmyB,EAAA3iB,EAAA2iB,YAAA,GAAAr0B,OAEA7kB,EAAA,EAAAjb,EAAAgiC,EAAAltC,OAA2CmmB,EAAAjb,EAAOib,IAClD+mB,EAAA/mB,GAAAta,MAAAwC,UAAAgxD,EAAA,EAAAl5C,IA1QAm5C,CAAAlvC,GA+QA,WACA,IAAAmvC,EAAA,GAEA3hB,EAAA,QAEAt9C,IAAAo8C,EAAA0B,WACAR,EAAApgB,KAAAkf,EAAA0B,gBAGA99C,IAAAo8C,EAAAkB,aACAlB,EAAAkB,WAAA59C,OACA49C,IAAA4hB,OAAA9iB,EAAAkB,YAEAA,EAAApgB,KAAAkf,EAAAkB,aAIA,QAAAz3B,EAAA,EAAuBA,EAAAy3B,EAAA59C,OAAuBmmB,IAAA,CAC9C,IAAAkwB,EAAA52C,EAAA48C,cAAA8B,eAAAP,EAAAz3B,GAAAgC,EAAAk2B,OACAhI,GAAAkpB,EAAA/hC,KAAA6Y,GAIA,GAAAluB,EAAAilB,aAAA,CAEA,IAAAqyB,EAAAhgE,EAAA48C,cAAAwB,oCAAA11B,EAAAilB,aAAA,IACAmyB,IAAAC,OAAAC,GAGAF,EAAAv/D,OAAA,IAAAmoB,EAAAy1B,WAAA2hB,GA3SAG,GACAv3C,EAAA+mB,qBACA/mB,EAAA0P,6BA8SAv3B,IAAAo8C,EAAAxT,WAAA,IAAAwT,EAAAxT,UAAAlpC,OACA,OACAmoB,YAGA,IAAA+gB,EAAAzpC,EAAAu3D,OAAAn2D,UAAAy2D,cAAA5a,EAAAxT,UAAAquB,EAAAr2D,KAAAk2D,aACA,OACAjvC,WACA+gB,mCC1XAvpC,EAAAC,QAAA,SAAAH,GAYAA,EAAAilI,cAAA,CACAlkE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAw6H,MAAA,CACAxhG,KAAA,IACAh5B,MAAA,GAEAkP,MAAA,CACA8pB,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,uBAAwB,uBAAwB,oBAAqB,gBAAiB,sBAAuB,uBAAwB,oCAAqC,4BAA6B,yBAA0B,8BAA+B,gCAAiC,6CAA8C,wBAAyB,KAAK7mC,KAAA,2BC5B9Zl6B,EAAAC,QAAA,SAAAH,GAOAA,EAAA6yH,iBAAA,CACA9xD,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,OAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,gBAAiB,2CAA4C,2CAA4C,oCAAqC,2CAA4C,KAAK7mC,KAAA,2BCfrQl6B,EAAAC,QAAA,SAAAH,GAMAA,EAAAmlI,UAAA,SAAA3uE,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAz2D,EAAAmlI,UAAA/jI,UAAA,CACAqJ,YAAAzK,EAAAmlI,UACAzuE,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAs1D,EAAA,IAAA/2D,EAAAg3D,UAAAv1D,KAAA+0D,SACAO,EAAAyG,QAAA/7D,KAAAuhD,MACA+T,EAAAL,KAAAC,EAAA,SAAAgH,GACA/G,EAAAtuC,EAAA+hB,MAAAszB,KACO9G,EAAAC,IAEP0G,QAAA,SAAA9yD,GACAjJ,KAAAuhD,KAAAt4C,GAEA06H,WAAA,SAAA16H,GAEAjJ,KAAA4jI,QAAA36H,GAEAguD,eAAA,SAAAhuD,GACAjJ,KAAAk2D,YAAAjtD,GAEA46H,mBAAA,SAAA56H,GACAjJ,KAAA8jI,gBAAA76H,GAQA2/B,MAAA,SAAAszB,GAMA,IALA,IAAA24B,EAAA34B,EAAA3jC,MAAA,MACAw+C,EAAA,GACAgtD,EAAA,MACAC,EAAA,GAEA/+G,EAAA,EAAqBA,EAAA4vE,EAAA/1F,OAAkBmmB,IAAA,CACvC,IAAAjB,EAAA6wE,EAAA5vE,GAGA,QAFAjB,IAAAq3B,QAEAv8C,QAAA,MAAAklB,EAAAhZ,OAAA,IAKA,IAAAgjE,EAAAhqD,EAAAqe,QAAA,KACAsG,EAAAqlC,GAAA,EAAAhqD,EAAAm4C,UAAA,EAAA6R,GAAAhqD,EACA2kB,IAAAuf,cACA,IAAAj/C,EAAA+kE,GAAA,EAAAhqD,EAAAm4C,UAAA6R,EAAA,MAGA,GAFA/kE,IAAAoyC,OAEA,WAAA1S,EAEAouC,EAAA,CACAn3E,KAAAqJ,GAEA+6H,EAAA/6H,GAAA8tE,OACS,GAAAA,EACT,UAAApuC,GAAA,OAAAA,GAAA,OAAAA,EAAA,CACA,IAAAs7F,EAAAh7H,EAAAsvB,MAAAwrG,EAAA,GACAhtD,EAAApuC,GAAA,CAAAr+B,WAAA25H,EAAA,IAAA35H,WAAA25H,EAAA,IAAA35H,WAAA25H,EAAA,UAEAltD,EAAApuC,GAAA1/B,GAKA,IAAAi7H,EAAA,IAAA3lI,EAAAmlI,UAAAS,gBAAAnkI,KAAA4jI,QAAA5jI,KAAA8jI,iBAIA,OAHAI,EAAAjtE,eAAAj3D,KAAAk2D,aACAguE,EAAAE,WAAApkI,KAAA+0D,SACAmvE,EAAAG,aAAAL,GACAE,IAkBA3lI,EAAAmlI,UAAAS,gBAAA,SAAAP,EAAAjzE,GACA3wD,KAAA4jI,UACA5jI,KAAA2wD,UACA3wD,KAAAgkI,cAAA,GACAhkI,KAAAgoC,UAAA,GACAhoC,KAAAskI,eAAA,GACAtkI,KAAAukI,WAAA,GACAvkI,KAAA26D,KAAA36D,KAAA2wD,SAAA3wD,KAAA2wD,QAAAgK,KAAA36D,KAAA2wD,QAAAgK,KAAAp8D,EAAAmD,UACA1B,KAAA62D,KAAA72D,KAAA2wD,SAAA3wD,KAAA2wD,QAAAkG,KAAA72D,KAAA2wD,QAAAkG,KAAAt4D,EAAAyG,gBAGAzG,EAAAmlI,UAAAS,gBAAAxkI,UAAA,CACAqJ,YAAAzK,EAAAmlI,UAAAS,gBACAltE,eAAA,SAAAhuD,GACAjJ,KAAAk2D,YAAAjtD,GAEAm7H,WAAA,SAAAn7H,GACAjJ,KAAA+0D,QAAA9rD,GAEAo7H,aAAA,SAAAL,GACAhkI,KAAAgkI,cAAAhkI,KAAAwkI,QAAAR,GACAhkI,KAAAgoC,UAAA,GACAhoC,KAAAskI,eAAA,GACAtkI,KAAAukI,WAAA,IAEAC,QAAA,SAAAR,GACA,IAAAhkI,KAAA2wD,QAAA,OAAAqzE,EACA,IAAAS,EAAA,GAEA,QAAAC,KAAAV,EAAA,CAEA,IAAAzZ,EAAAyZ,EAAAU,GACAC,EAAA,GAGA,QAAAC,KAFAH,EAAAC,GAAAC,EAEApa,EAAA,CACA,IAAAiQ,GAAA,EACAvxH,EAAAshH,EAAAqa,GACAC,EAAAD,EAAA18E,cAEA,OAAA28E,GACA,SACA,SACA,SAEA7kI,KAAA2wD,SAAA3wD,KAAA2wD,QAAAm0E,eACA77H,EAAA,CAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,SAGAjJ,KAAA2wD,SAAA3wD,KAAA2wD,QAAAo0E,gBACA,IAAA97H,EAAA,QAAAA,EAAA,QAAAA,EAAA,KAEAuxH,GAAA,GAUAA,IACAmK,EAAAE,GAAA57H,IAKA,OAAAw7H,GAEAO,QAAA,WACA,QAAAN,KAAA1kI,KAAAgkI,cACAhkI,KAAA0/B,OAAAglG,IAGAzxF,SAAA,SAAAgyF,GACA,OAAAjlI,KAAAukI,WAAAU,IAEAC,WAAA,WACA,IAAA3kI,EAAA,EAEA,QAAAmkI,KAAA1kI,KAAAgkI,cACAhkI,KAAAskI,eAAA/jI,GAAAP,KAAA0/B,OAAAglG,GACA1kI,KAAAukI,WAAAG,GAAAnkI,EACAA,IAGA,OAAAP,KAAAskI,gBAEA5kG,OAAA,SAAAulG,GAKA,YAJA7lI,IAAAY,KAAAgoC,UAAAi9F,IACAjlI,KAAAmlI,gBAAAF,GAGAjlI,KAAAgoC,UAAAi9F,IAEAE,gBAAA,SAAAF,GAEA,IAAA1a,EAAAvqH,KAAAgkI,cAAAiB,GACAphG,EAAA,CACAjkC,KAAAqlI,EACAtqE,KAAA36D,KAAA26D,MAGA,QAAAiqE,KAAAra,EAAA,CACA,IAAAthH,EAAAshH,EAAAqa,GACA,QAAA37H,EAEA,OAAA27H,EAAA18E,eAEA,SAEArkB,EAAA,WAAAtlC,EAAAmK,OAAAyE,UAAAlE,GACA,MAEA,SAEA46B,EAAA,cAAAtlC,EAAAmK,OAAAyE,UAAAlE,GACA,MAEA,aAEA46B,EAAA,IAAA7jC,KAAA22D,YAAA32D,KAAA4jI,QAAA36H,GACA46B,EAAA,IAAAqzB,MAAAl3D,KAAA62D,KACAhzB,EAAA,IAAAszB,MAAAn3D,KAAA62D,KACA,MAEA,SAGAhzB,EAAA,UAAAv5B,WAAArB,GACA,MAEA,QACAA,EAAA,IACA46B,EAAA,QAAA56B,EACA46B,EAAA,gBAGA,MAEA,SACA56B,EAAA,IACA46B,EAAA,UAAA56B,EACA46B,EAAA,gBAGA,MAEA,eACA,WAEA,GAAAA,EAAA,cAEAA,EAAA,QAAA7jC,KAAA22D,YAAA32D,KAAA4jI,QAAA36H,GACA46B,EAAA,QAAAqzB,MAAAl3D,KAAA62D,KACAhzB,EAAA,QAAAszB,MAAAn3D,KAAA62D,MASA,OADA72D,KAAAgoC,UAAAi9F,GAAA,IAAA1mI,EAAAwoE,kBAAAljC,GACA7jC,KAAAgoC,UAAAi9F,IAEAtuE,YAAA,SAAAzB,EAAAyN,EAAAxN,EAAAC,EAAAC,GACA,IAAAhE,EACAiE,EAAA/2D,EAAAu3D,OAAAkB,SAAAj3D,IAAAm1D,GACAH,OAAA31D,IAAAY,KAAA+0D,QAAA/0D,KAAA+0D,QAAAx2D,EAAAy2D,sBASA,OAPA,OAAAM,IACAA,EAAA,IAAA/2D,EAAAk4D,cAAA1B,IAGAO,EAAA2B,gBAAA3B,EAAA2B,eAAAj3D,KAAAk2D,aACA7E,EAAAiE,EAAAL,KAAAC,EAAAC,EAAAC,EAAAC,QACAj2D,IAAAujE,IAAAtR,EAAAsR,WACAtR,IAGA9yD,EAAAwjC,gBAAApiC,UAAAwgD,MAAA5hD,EAAAmlI,UAAA/jI,+BCxRAlB,EAAAC,QAAA,SAAAH,GAOAA,EAAA6mI,cAAA,SAAA/tB,EAAA7uE,EAAA68F,EAAAC,GACA/mI,EAAAu8E,sBAAAl6E,KAAAZ,KAAAwoC,GACAxoC,KAAAqlI,eAAAjmI,IAAAimI,KACArlI,KAAAslI,kBAAAlmI,IAAAkmI,KAIAtlI,KAAAk5E,KAAA,SAAAm+B,GACAr3G,KAAAq3G,aAEAr3G,KAAAulI,UAAA,GAEAvlI,KAAA+K,KAAAssG,EACAr3G,KAAAwlI,MAAAxlI,KAAA+K,KAAA/K,KAAA+K,KACA/K,KAAAylI,MAAAzlI,KAAAwlI,MAAAxlI,KAAA+K,KACA/K,KAAA0lI,SAAA1lI,KAAA+K,KAAA,EAEA/K,KAAAoM,MAAA,EAAApM,KAAA+K,KACA/K,KAAA2lI,GAAA3lI,KAAA+K,KACA/K,KAAA4lI,GAAA5lI,KAAAwlI,MACAxlI,KAAA6lI,MAAA,IAAA19G,aAAAnoB,KAAAylI,OACAzlI,KAAA8lI,aAAA,IAAA39G,aAAA,EAAAnoB,KAAAylI,OAEAzlI,KAAA+lI,MAAA,IAAA59G,aAAA,IACAnoB,KAAAgmI,MAAA,IAAA79G,aAAA,IAEAnoB,KAAAimI,SAAA,KAEAjmI,KAAAspC,MAAA,EACAtpC,KAAA8jF,cAAA,EACA9jF,KAAAgkF,YAAA,EACAhkF,KAAAkkF,WAAA,EACAlkF,KAAAikF,QAAA,EACAjkF,KAAAskF,cAAA,IAAAn8D,aAAA,EAAAnoB,KAAAimI,UACAjmI,KAAA0kF,YAAA,IAAAv8D,aAAA,EAAAnoB,KAAAimI,UAEAjmI,KAAAqlI,YACArlI,KAAA8kF,QAAA,IAAA38D,aAAA,EAAAnoB,KAAAimI,WAGAjmI,KAAAslI,eACAtlI,KAAA+kF,WAAA,IAAA58D,aAAA,EAAAnoB,KAAAimI,YAOAjmI,KAAA+M,KAAA,SAAAkN,EAAApR,EAAAgB,GACA,OAAAoQ,GAAApR,EAAAoR,GAAApQ,GAGA7J,KAAAkmI,MAAA,SAAAt8H,EAAAu8H,EAAAC,EAAA/4H,EAAAg5H,EAAA3mI,EAAAiX,EAAAC,EAAA0vH,EAAAC,GACA,IAAAC,GAAAH,EAAAC,IAAAC,EAAAD,GACAG,EAAAzmI,KAAA8lI,aACAK,EAAA94H,GAAA3N,EAAA8mI,EAAAxmI,KAAAoM,MACA+5H,EAAA94H,EAAA,GAAAsJ,EACAwvH,EAAA94H,EAAA,GAAAuJ,EACAwvH,EAAA/4H,GAAArN,KAAA+M,KAAA05H,EAAA78H,GAAA68H,EAAA78H,EAAA,GAAA48H,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAA78H,EAAA,GAAA48H,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAA78H,EAAA,GAAA48H,IAGAxmI,KAAA0mI,MAAA,SAAA98H,EAAAu8H,EAAAC,EAAA/4H,EAAAg5H,EAAA3mI,EAAAiX,EAAAC,EAAA0vH,EAAAC,GACA,IAAAC,GAAAH,EAAAC,IAAAC,EAAAD,GACAG,EAAAzmI,KAAA8lI,aACAK,EAAA94H,GAAA3N,EACAymI,EAAA94H,EAAA,GAAAsJ,EAAA6vH,EAAAxmI,KAAAoM,MACA+5H,EAAA94H,EAAA,GAAAuJ,EACA,IAAA+vH,EAAA/8H,EAAA,EAAA5J,KAAA2lI,GACAS,EAAA/4H,GAAArN,KAAA+M,KAAA05H,EAAA78H,GAAA68H,EAAAE,GAAAH,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAAE,EAAA,GAAAH,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAAE,EAAA,GAAAH,IAGAxmI,KAAA4mI,MAAA,SAAAh9H,EAAAu8H,EAAAC,EAAA/4H,EAAAg5H,EAAA3mI,EAAAiX,EAAAC,EAAA0vH,EAAAC,GACA,IAAAC,GAAAH,EAAAC,IAAAC,EAAAD,GACAG,EAAAzmI,KAAA8lI,aACAK,EAAA94H,GAAA3N,EACAymI,EAAA94H,EAAA,GAAAsJ,EACAwvH,EAAA94H,EAAA,GAAAuJ,EAAA4vH,EAAAxmI,KAAAoM,MACA,IAAAu6H,EAAA/8H,EAAA,EAAA5J,KAAA4lI,GACAQ,EAAA/4H,GAAArN,KAAA+M,KAAA05H,EAAA78H,GAAA68H,EAAAE,GAAAH,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAAE,EAAA,GAAAH,GACAJ,EAAA/4H,EAAA,GAAArN,KAAA+M,KAAA05H,EAAA78H,EAAA,GAAA68H,EAAAE,EAAA,GAAAH,IAGAxmI,KAAA6mI,SAAA,SAAAj9H,GACA,IAAAk9H,EAAA,EAAAl9H,EAEA,IAAA5J,KAAA8lI,aAAAgB,KACA9mI,KAAA8lI,aAAAgB,GAAA9mI,KAAA6lI,MAAAj8H,EAAA,GAAA5J,KAAA6lI,MAAAj8H,EAAA,GACA5J,KAAA8lI,aAAAgB,EAAA,GAAA9mI,KAAA6lI,MAAAj8H,EAAA5J,KAAA2lI,IAAA3lI,KAAA6lI,MAAAj8H,EAAA5J,KAAA2lI,IACA3lI,KAAA8lI,aAAAgB,EAAA,GAAA9mI,KAAA6lI,MAAAj8H,EAAA5J,KAAA4lI,IAAA5lI,KAAA6lI,MAAAj8H,EAAA5J,KAAA4lI,MAMA5lI,KAAA+mI,WAAA,SAAAC,EAAAC,EAAAC,EAAAt9H,EAAAy8H,EAAAtX,GAEA,IAAA3oF,EAAAx8B,EAAA,EACA+V,EAAA/V,EAAA5J,KAAA2lI,GACA/lH,EAAAhW,EAAA5J,KAAA4lI,GACAuB,EAAA/gG,EAAApmC,KAAA2lI,GACAyB,EAAAhhG,EAAApmC,KAAA4lI,GACAyB,EAAAz9H,EAAA5J,KAAA2lI,GAAA3lI,KAAA4lI,GACA0B,EAAAlhG,EAAApmC,KAAA2lI,GAAA3lI,KAAA4lI,GACA2B,EAAA,EACAC,EAAAxnI,KAAA6lI,MAAAj8H,GACA69H,EAAAznI,KAAA6lI,MAAAz/F,GACAshG,EAAA1nI,KAAA6lI,MAAAlmH,GACAgoH,EAAA3nI,KAAA6lI,MAAAsB,GACAS,EAAA5nI,KAAA6lI,MAAAjmH,GACAioH,EAAA7nI,KAAA6lI,MAAAuB,GACAU,EAAA9nI,KAAA6lI,MAAAwB,GACAU,EAAA/nI,KAAA6lI,MAAAyB,GACAE,EAAAnB,IAAAkB,GAAA,GACAE,EAAApB,IAAAkB,GAAA,GACAG,EAAArB,IAAAkB,GAAA,GACAI,EAAAtB,IAAAkB,GAAA,GACAK,EAAAvB,IAAAkB,GAAA,IACAM,EAAAxB,IAAAkB,GAAA,IACAO,EAAAzB,IAAAkB,GAAA,KACAQ,EAAA1B,IAAAkB,GAAA,IAEA,IAAAlkD,EAAA9kF,EAAAypI,UAAAT,GACA,OAAAlkD,EAAA,SACA,IAAA5jE,EAAAzf,KAAAoM,MACA67H,EAAAjB,EAAAvnH,EACAyoH,EAAAjB,EAAAxnH,EACA0oH,EAAAjB,EAAAznH,EAEA,EAAA4jE,IACArjF,KAAA6mI,SAAAj9H,GACA5J,KAAA6mI,SAAAzgG,GACApmC,KAAAkmI,MAAA,EAAAt8H,EAAA5J,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,EAAAK,EAAAW,EAAAC,EAAAC,EAAAM,EAAAC,IAGA,EAAApkD,IACArjF,KAAA6mI,SAAAzgG,GACApmC,KAAA6mI,SAAAM,GACAnnI,KAAA0mI,MAAA,EAAAtgG,EAAApmC,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,EAAAK,EAAA4B,EAAAhB,EAAAC,EAAAO,EAAAE,IAGA,EAAAtkD,IACArjF,KAAA6mI,SAAAlnH,GACA3f,KAAA6mI,SAAAM,GACAnnI,KAAAkmI,MAAA,EAAAvmH,EAAA3f,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,EAAAK,EAAAW,EAAAkB,EAAAhB,EAAAQ,EAAAC,IAGA,EAAAtkD,IACArjF,KAAA6mI,SAAAj9H,GACA5J,KAAA6mI,SAAAlnH,GACA3f,KAAA0mI,MAAA,EAAA98H,EAAA5J,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,EAAAK,EAAAW,EAAAC,EAAAC,EAAAM,EAAAE,IAIA,GAAArkD,IACArjF,KAAA6mI,SAAAjnH,GACA5f,KAAA6mI,SAAAO,GACApnI,KAAAkmI,MAAA,EAAAtmH,EAAA5f,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAAW,EAAAC,EAAAkB,EAAAP,EAAAC,IAGA,GAAAxkD,IACArjF,KAAA6mI,SAAAO,GACApnI,KAAA6mI,SAAAS,GACAtnI,KAAA0mI,MAAA,EAAAU,EAAApnI,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAA4B,EAAAhB,EAAAkB,EAAAN,EAAAE,IAGA,GAAA1kD,IACArjF,KAAA6mI,SAAAQ,GACArnI,KAAA6mI,SAAAS,GACAtnI,KAAAkmI,MAAA,EAAAmB,EAAArnI,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAAW,EAAAkB,EAAAC,EAAAL,EAAAC,IAGA,IAAA1kD,IACArjF,KAAA6mI,SAAAjnH,GACA5f,KAAA6mI,SAAAQ,GACArnI,KAAA0mI,MAAA,EAAA9mH,EAAA5f,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAAW,EAAAC,EAAAkB,EAAAP,EAAAE,IAIA,IAAAzkD,IACArjF,KAAA6mI,SAAAj9H,GACA5J,KAAA6mI,SAAAjnH,GACA5f,KAAA4mI,MAAA,EAAAh9H,EAAA5J,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAAW,EAAAC,EAAAC,EAAAM,EAAAI,IAGA,IAAAvkD,IACArjF,KAAA6mI,SAAAzgG,GACApmC,KAAA6mI,SAAAO,GACApnI,KAAA4mI,MAAA,EAAAxgG,EAAApmC,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAA4B,EAAAhB,EAAAC,EAAAO,EAAAI,IAGA,KAAAxkD,IACArjF,KAAA6mI,SAAAM,GACAnnI,KAAA6mI,SAAAS,GACAtnI,KAAA4mI,MAAA,EAAAO,EAAAnnI,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAA4B,EAAAC,EAAAhB,EAAAS,EAAAI,IAGA,KAAA1kD,IACArjF,KAAA6mI,SAAAlnH,GACA3f,KAAA6mI,SAAAQ,GACArnI,KAAA4mI,MAAA,EAAAjnH,EAAA3f,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,GAAAK,EAAAW,EAAAkB,EAAAhB,EAAAQ,EAAAI,IAGAP,IAAA,EAQA,IANA,IAAArnG,EACAkoG,EACAC,EACAC,EAAA,EACArjH,EAAA,GAEA,GAAA1mB,EAAAgqI,SAAAhB,EAAAtiH,IAEAmjH,GADAloG,EAAAqnG,EAAAtiH,GACA,EACAojH,EAAAnoG,EAAA,EACAlgC,KAAAwoI,YAAAxoI,KAAA+lI,MAAA/lI,KAAAgmI,MAAA,EAAAznI,EAAAgqI,SAAAroG,GAAA,EAAA3hC,EAAAgqI,SAAAH,GAAA,EAAA7pI,EAAAgqI,SAAAF,GAAAtZ,GACA9pG,GAAA,EACAqjH,IAGA,OAAAA,GAMAtoI,KAAAwoI,YAAA,SAAAx6D,EAAAy6D,EAAAvoG,EAAAkoG,EAAAC,EAAAtZ,GACA,IAAA7hH,EAAA,EAAAlN,KAAAspC,MAsBA,GApBAtpC,KAAAskF,cAAAp3E,GAAA8gE,EAAA9tC,GACAlgC,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAA9tC,EAAA,GACAlgC,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAA9tC,EAAA,GACAlgC,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAo6D,GACApoI,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAo6D,EAAA,GACApoI,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAo6D,EAAA,GACApoI,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAq6D,GACAroI,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAq6D,EAAA,GACAroI,KAAAskF,cAAAp3E,EAAA,GAAA8gE,EAAAq6D,EAAA,GAEAroI,KAAA0kF,YAAAx3E,GAAAu7H,EAAAvoG,GACAlgC,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAvoG,EAAA,GACAlgC,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAvoG,EAAA,GACAlgC,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAL,GACApoI,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAL,EAAA,GACApoI,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAL,EAAA,GACApoI,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAJ,GACAroI,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAJ,EAAA,GACAroI,KAAA0kF,YAAAx3E,EAAA,GAAAu7H,EAAAJ,EAAA,GAEAroI,KAAAqlI,UAAA,CACA,IAAA5lH,EAAA,EAAAzf,KAAAspC,MACAtpC,KAAA8kF,QAAArlE,GAAAuuD,EAAA9tC,GACAlgC,KAAA8kF,QAAArlE,EAAA,GAAAuuD,EAAA9tC,EAAA,GACAlgC,KAAA8kF,QAAArlE,EAAA,GAAAuuD,EAAAo6D,GACApoI,KAAA8kF,QAAArlE,EAAA,GAAAuuD,EAAAo6D,EAAA,GACApoI,KAAA8kF,QAAArlE,EAAA,GAAAuuD,EAAAq6D,GACAroI,KAAA8kF,QAAArlE,EAAA,GAAAuuD,EAAAq6D,EAAA,GAIAroI,KAAAslI,eACAtlI,KAAA+kF,WAAA73E,GAAA8gE,EAAA9tC,GACAlgC,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAA9tC,EAAA,GACAlgC,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAA9tC,EAAA,GACAlgC,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAo6D,GACApoI,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAo6D,EAAA,GACApoI,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAo6D,EAAA,GACApoI,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAq6D,GACAroI,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAq6D,EAAA,GACAroI,KAAA+kF,WAAA73E,EAAA,GAAA8gE,EAAAq6D,EAAA,IAGAroI,KAAAspC,OAAA,EAEAtpC,KAAAspC,OAAAtpC,KAAAimI,SAAA,IACAjmI,KAAA8jF,cAAA,EACA9jF,KAAAgkF,YAAA,EAEAhkF,KAAAqlI,YACArlI,KAAAikF,QAAA,GAGAjkF,KAAAslI,eACAtlI,KAAAkkF,WAAA,GAGA6qC,EAAA/uH,QAIAA,KAAA0oI,MAAA,WACA1oI,KAAAspC,MAAA,EACAtpC,KAAA8jF,cAAA,EACA9jF,KAAAgkF,YAAA,EACAhkF,KAAAikF,QAAA,EACAjkF,KAAAkkF,WAAA,GAGAlkF,KAAA+jB,IAAA,SAAAgrG,GACA,OAAA/uH,KAAAspC,MAAA,CAEA,QAAArkB,EAAA,EAAAjlB,KAAAspC,MAAkCrkB,EAAAjlB,KAAAskF,cAAAxlF,OAA+BmmB,IACjEjlB,KAAAskF,cAAAr/D,GAAA,EAGAjlB,KAAA8jF,cAAA,EACA9jF,KAAAgkF,YAAA,EAEAhkF,KAAAqlI,YACArlI,KAAAikF,QAAA,GAGAjkF,KAAAslI,eACAtlI,KAAAkkF,WAAA,GAGA6qC,EAAA/uH,QAQAA,KAAA2oI,QAAA,SAAAC,EAAAC,EAAAC,EAAAtV,EAAAuV,GAOA,IAAA/mH,EAAAhiB,KAAA+K,KAAAxL,KAAAkM,KAAA+nH,EAAAuV,GACAC,EAAAF,EAAA9oI,KAAA+K,KACAk+H,EAAAJ,EAAA7oI,KAAA+K,KACAm+H,EAAAN,EAAA5oI,KAAA+K,KACAo+H,EAAA5pI,KAAAiK,MAAAw/H,EAAAhnH,GACAmnH,EAAA,IAAAA,EAAA,GACA,IAAAC,EAAA7pI,KAAAiK,MAAAw/H,EAAAhnH,GACAonH,EAAAppI,KAAA+K,KAAA,IAAAq+H,EAAAppI,KAAA+K,KAAA,GACA,IAAAs+H,EAAA9pI,KAAAiK,MAAAy/H,EAAAjnH,GACAqnH,EAAA,IAAAA,EAAA,GACA,IAAAC,EAAA/pI,KAAAiK,MAAAy/H,EAAAjnH,GACAsnH,EAAAtpI,KAAA+K,KAAA,IAAAu+H,EAAAtpI,KAAA+K,KAAA,GACA,IAAAw+H,EAAAhqI,KAAAiK,MAAA0/H,EAAAlnH,GACAunH,EAAA,IAAAA,EAAA,GACA,IAIA7pI,EAAAiX,EAAAC,EAAA4yH,EAAAC,EAAAzC,EAAAC,EAAAC,EAAAiB,EAAAD,EAAAhF,EAJAwG,EAAAnqI,KAAAiK,MAAA0/H,EAAAlnH,GAMA,IALA0nH,EAAA1pI,KAAA+K,KAAA,IAAA2+H,EAAA1pI,KAAA+K,KAAA,GAKA6L,EAAAuyH,EAAqBvyH,EAAAwyH,EAAWxyH,IAGhC,IAFA6yH,EAAAzpI,KAAAwlI,MAAA5uH,EAAAuxH,GAAAjB,EAAAtwH,EAAA5W,KAAA+K,KAAA+9H,GAAA5B,EAEAvwH,EAAA0yH,EAAuB1yH,EAAA2yH,EAAW3yH,IAKlC,IAJA6yH,EAAAC,EAAAzpI,KAAA+K,KAAA4L,EAEAuxH,GADAjB,EAAAtwH,EAAA3W,KAAA+K,KAAA89H,GACA5B,EAEAvnI,EAAA6pI,EAAyB7pI,EAAAgqI,EAAWhqI,KAEpCwjI,EAAA1P,GAAA,MADAwT,EAAAtnI,EAAAM,KAAA+K,KAAA69H,GACA5B,EAAAkB,EAAAC,GAAAY,GACA,IAAA/oI,KAAA6lI,MAAA2D,EAAA9pI,IAAAwjI,IAMAljI,KAAA2pI,UAAA,SAAAnW,EAAAuV,GACA,IAAArpI,EACAiX,EACAC,EAEAssH,EACA0G,EACAC,EAEA9+H,EAAA/K,KAAA+K,KACA46H,EAAA3lI,KAAA2lI,GACAC,EAAA5lI,KAAA4lI,GACAC,EAAA7lI,KAAA6lI,MACA3L,EAAAnvH,EAAAxL,KAAAkM,KAAA+nH,EAAAuV,GAGA,IAFA7O,EAAAnvH,IAAAmvH,EAAAnvH,GAEArL,EAAA,EAAiBA,EAAAw6H,EAAUx6H,IAK3B,IAFAwjI,EAAA1P,GAAA,MAFAoW,EAAAlqI,EAAAqL,GACA6+H,GACAb,GAEA,EACA,IAAApyH,EAAA,EAAqBA,EAAA5L,EAAU4L,IAG/B,IAFAkzH,EAAAnqI,EAAAiX,EAAAgvH,EAEA/uH,EAAA,EAAuBA,EAAA7L,EAAU6L,IACjCivH,EAAAD,EAAAhvH,EAAAizH,IAAA3G,GAOAljI,KAAA8pI,UAAA,SAAAtW,EAAAuV,GACA,IAAArpI,EACAiX,EACAC,EAEAssH,EACA6G,EACA53E,EACA03E,EAEA9+H,EAAA/K,KAAA+K,KACA46H,EAAA3lI,KAAA2lI,GACAC,EAAA5lI,KAAA4lI,GACAC,EAAA7lI,KAAA6lI,MACA3L,EAAAnvH,EAAAxL,KAAAkM,KAAA+nH,EAAAuV,GAGA,IAFA7O,EAAAnvH,IAAAmvH,EAAAnvH,GAEA4L,EAAA,EAAiBA,EAAAujH,EAAUvjH,IAK3B,IAFAusH,EAAA1P,GAAA,MAFAuW,EAAApzH,EAAA5L,GACAg/H,GACAhB,GAEA,EAGA,IAFA52E,EAAAx7C,EAAAgvH,EAEAjmI,EAAA,EAAqBA,EAAAqL,EAAUrL,IAG/B,IAFAmqI,EAAA13E,EAAAzyD,EAEAkX,EAAA,EAAuBA,EAAA7L,EAAU6L,IACjCivH,EAAAD,EAAAhvH,EAAAizH,IAAA3G,GAOAljI,KAAAgqI,UAAA,SAAAxW,EAAAuV,GACA,IAAArpI,EACAiX,EACAC,EAEAssH,EACA+G,EACAC,EACAC,EAEAp/H,EAAA/K,KAAA+K,KACA46H,EAAA3lI,KAAA2lI,GACAC,EAAA5lI,KAAA4lI,GACAC,EAAA7lI,KAAA6lI,MACA3L,EAAAnvH,EAAAxL,KAAAkM,KAAA+nH,EAAAuV,GAGA,IAFA7O,EAAAnvH,IAAAmvH,EAAAnvH,GAEA6L,EAAA,EAAiBA,EAAAsjH,EAAUtjH,IAK3B,IAFAssH,EAAA1P,GAAA,MAFAyW,EAAArzH,EAAA7L,GACAk/H,GACAlB,GAEA,EAGA,IAFAmB,EAAAtE,EAAAhvH,EAEAD,EAAA,EAAqBA,EAAA5L,EAAU4L,IAG/B,IAFAwzH,EAAAD,EAAAvzH,EAAAgvH,EAEAjmI,EAAA,EAAuBA,EAAAqL,EAAUrL,IACjCmmI,EAAAsE,EAAAzqI,IAAAwjI,GAUAljI,KAAAo3C,MAAA,WACA,IAAAnyB,EAEA,IAAAA,EAAA,EAAiBA,EAAAjlB,KAAAylI,MAAgBxgH,IACjCjlB,KAAA8lI,aAAA,EAAA7gH,GAAA,EACAjlB,KAAA6lI,MAAA5gH,GAAA,GAIAjlB,KAAAuxD,OAAA,SAAAw9D,GACA/uH,KAAA0oI,QAIA,IAFA,IAAA0B,EAAApqI,KAAA+K,KAAA,EAEA6L,EAAA,EAAqBA,EAAAwzH,EAAWxzH,IAIhC,IAHA,IAAA6yH,EAAAzpI,KAAAwlI,MAAA5uH,EACAswH,GAAAtwH,EAAA5W,KAAA0lI,UAAA1lI,KAAA0lI,SAEA/uH,EAAA,EAAuBA,EAAAyzH,EAAWzzH,IAIlC,IAHA,IAAA6yH,EAAAC,EAAAzpI,KAAA+K,KAAA4L,EACAswH,GAAAtwH,EAAA3W,KAAA0lI,UAAA1lI,KAAA0lI,SAEAhmI,EAAA,EAAyBA,EAAA0qI,EAAW1qI,IAAA,CACpC,IAAAsnI,GAAAtnI,EAAAM,KAAA0lI,UAAA1lI,KAAA0lI,SAEA97H,EAAA4/H,EAAA9pI,EACAM,KAAA+mI,WAAAC,EAAAC,EAAAC,EAAAt9H,EAAA5J,KAAAulI,UAAAxW,GAKA/uH,KAAA+jB,IAAAgrG,IAGA/uH,KAAAqqI,iBAAA,WACA,IAAAvmH,EAAA,EACAwmH,EAAA,IAAA/rI,EAAA2oB,SACAmmB,EAAA,GAyCA,OAFArtC,KAAAuxD,OArCA,SAAA3qC,GACA,IAAA3B,EAAAvlB,EAAAiX,EAAAC,EAAAm6B,EAAAvvB,EAAAurB,EAAA9yB,EAAApR,EAAAqE,EAAAq9H,EAAAC,EAAA/D,EAAAgE,EAEA,IAAAxlH,EAAA,EAAmBA,EAAA2B,EAAA0iB,MAAkBrkB,IAErCpc,EAAA,GADAoR,EAAA,EAAAgL,GAEA/X,EAAA+M,EAAA,EACAva,EAAAknB,EAAA09D,cAAArqE,GACAtD,EAAAiQ,EAAA09D,cAAAz7E,GACA+N,EAAAgQ,EAAA09D,cAAAp3E,GACA6jC,EAAA,IAAAxyC,EAAA+a,QAAA5Z,EAAAiX,EAAAC,GACAlX,EAAAknB,EAAA89D,YAAAzqE,GACAtD,EAAAiQ,EAAA89D,YAAA77E,GACA+N,EAAAgQ,EAAA89D,YAAAx3E,IACAsU,EAAA,IAAAjjB,EAAA+a,QAAA5Z,EAAAiX,EAAAC,IACA8C,YACA4wH,EAAAnjH,SAAAmV,KAAAyU,GACA1D,EAAA/Q,KAAA9a,GAKA,IAFAipH,EAAA7jH,EAAA0iB,MAAA,EAEArkB,EAAA,EAAmBA,EAAAwlH,EAAYxlH,IAE/Bpc,EAAA,GADAoR,EAAA,GAAA6J,EAAAmB,IAEA/X,EAAA+M,EAAA,EACAswH,EAAAl9F,EAAApzB,GACAuwH,EAAAn9F,EAAAxkC,GACA49H,EAAAp5F,EAAAngC,GACA6/B,EAAA,IAAAxuC,EAAAuqC,MAAA7uB,EAAApR,EAAAqE,EAAA,CAAAq9H,EAAAC,EAAA/D,IACA6D,EAAAt+F,MAAA1P,KAAAyQ,GAGAjpB,GAAA2mH,EACA7jH,EAAA0iB,MAAA,IAKAghG,GAGAtqI,KAAAk5E,KAAAm+B,IAGA94G,EAAA6mI,cAAAzlI,UAAAE,OAAA6/B,OAAAnhC,EAAAu8E,sBAAAn7E,WACApB,EAAA6mI,cAAAzlI,UAAAqJ,YAAAzK,EAAA6mI,cAOA7mI,EAAAypI,UAAA,IAAA78F,WAAA,6rCACA5sC,EAAAgqI,SAAA,IAAAp9F,WAAA,ygUCpkBA1sC,EAAAC,QAAA,SAAAH,GAIAA,EAAA4iI,SAAA,SAAAhwE,EAAA/wC,GACApgB,KAAAmxD,QACAnxD,KAAAogB,SACApgB,KAAA6xC,SAAA,EACA7xC,KAAA61D,OAAA,EACA71D,KAAA+xH,WAAA,EACA/xH,KAAA2Z,SAAA,GAGApb,EAAA4iI,SAAAxhI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACA,IAKAs+H,EAAAC,EALA5+E,EAAAmF,EAAAnF,QAEAA,EAAAmxC,WAAA,YACAnxC,EAAAyxC,WAAA,GAIAx9F,KAAA2Z,SACA+wH,EAAA,EACAC,EAAA,IAEAD,EAAA,EACAC,EAAA,GAGA5+E,EAAAhpB,OAAAgpB,EAAA0yC,cACA1yC,EAAA2yC,UAAA3yC,EAAA6+E,QAAA7+E,EAAA6+E,QAAA7+E,EAAA6+E,SACA7+E,EAAAqvC,YAAArvC,EAAA2xC,OAAAgtC,EAAA,YACA3+E,EAAA23B,aAAAinD,GAEAz5E,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA8xG,EAAAlyH,KAAA61D,OACA3E,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,EAAAjyH,KAAA61D,OAEA9J,EAAAmxC,WAAA,YACAnxC,EAAAyxC,WAAA,GAEAzxC,EAAAqvC,YAAArvC,EAAA8xC,MAAA,cAEA9xC,EAAA2yC,UAAA3yC,EAAA8+E,KAAA9+E,EAAA8+E,KAAA9+E,EAAA8+E,QAIAtsI,EAAA6iI,cAAA,WACAphI,KAAA6xC,SAAA,GAGAtzC,EAAA6iI,cAAAzhI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACA,IAAA2/C,EAAAmF,EAAAnF,QACAA,EAAA9oB,QAAA8oB,EAAA0yC,oCCtDAhgG,EAAAC,QAAA,SAAAH,GASAA,EAAAusI,aAAA,CACAxrE,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA0xD,KAAA,CACA14B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,oBAAqB,gBAAiB,gBAAiB,kBAAmB,kCAAmC,wBAAyB,kCAAmC,wBAAyB,kCAAmC,wBAAyB,kCAAmC,KAAK,uCAAyC,wBAAyB,KAAK7mC,KAAA,2BCrBnbl6B,EAAAC,QAAA,SAAAH,GAOAA,EAAAwsI,gBAAA,CACAzrE,SAAA,CACA0rE,UAAA,CACA/oG,KAAA,IACAh5B,MAAA,MAEAouG,WAAA,CACAp1E,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,UAEAwS,MAAA,CACA+S,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,MAEAE,OAAA,CACAqlB,KAAA,IACAh5B,MAAA,MAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,yBAA2C,2BAA4B,+BAAgC,oBAAqB,gBAAiB,6CAA8C,gFAAiF,gFAAiF,oGAAqG,KAAK7mC,KAAA,2BC3Bvcl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAA0sI,UAAA,SAAAl2E,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,sBACAh1D,KAAAgoC,UAAA,MAGAzpC,EAAA0sI,UAAAtrI,UAAA,CACAqJ,YAAAzK,EAAA0sI,UACAh2E,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAxuC,EAAA7mB,KACAs1D,EAAA,IAAA/2D,EAAAg3D,UAAA1uC,EAAAkuC,SACAO,EAAAyG,QAAA/7D,KAAAuhD,MACA+T,EAAAL,KAAAC,EAAA,SAAAgH,GACA/G,EAAAtuC,EAAA+hB,MAAAszB,KACO9G,EAAAC,IAEP0G,QAAA,SAAA9yD,GACAjJ,KAAAuhD,KAAAt4C,GAEAo7H,aAAA,SAAAr8F,GACAhoC,KAAAgoC,aAEAY,MAAA,SAAAszB,GACA3xD,QAAAisC,KAAA,aACA,IACA5vB,EADAie,EAAA,GAEAqmG,GAAA,EACA/jH,EAAA,GACAkmB,EAAA,GACAC,EAAA,GAEA,SAAA69F,EAAAvrI,GAUAgnB,EAAA,CACAhnB,OACAqnB,SAXA,CACAE,SAAA,GACAkmB,QAAA,GACAC,IAAA,IASA9E,SAPA,CACA5oC,KAAA,GACAwrI,QAAA,IAOAvmG,EAAAvI,KAAA1V,GAGA,SAAAykH,EAAApiI,GACA,IAAA1I,EAAAuK,SAAA7B,GACA,UAAA1I,GAAA,EAAAA,EAAA,EAAAA,EAAA4mB,EAAAroB,OAAA,GAGA,SAAAwsI,EAAAriI,GACA,IAAA1I,EAAAuK,SAAA7B,GACA,UAAA1I,GAAA,EAAAA,EAAA,EAAAA,EAAA8sC,EAAAvuC,OAAA,GAGA,SAAAysI,EAAAtiI,GACA,IAAA1I,EAAAuK,SAAA7B,GACA,UAAA1I,GAAA,EAAAA,EAAA,EAAAA,EAAA+sC,EAAAxuC,OAAA,GAGA,SAAA0sI,EAAAvxH,EAAApR,EAAAqE,GACA0Z,EAAAK,SAAAE,SAAAmV,KAAAnV,EAAAlN,GAAAkN,EAAAlN,EAAA,GAAAkN,EAAAlN,EAAA,GAAAkN,EAAAte,GAAAse,EAAAte,EAAA,GAAAse,EAAAte,EAAA,GAAAse,EAAAja,GAAAia,EAAAja,EAAA,GAAAia,EAAAja,EAAA,IAGA,SAAAu+H,EAAAxxH,EAAApR,EAAAqE,GACA0Z,EAAAK,SAAAomB,QAAA/Q,KAAA+Q,EAAApzB,GAAAozB,EAAApzB,EAAA,GAAAozB,EAAApzB,EAAA,GAAAozB,EAAAxkC,GAAAwkC,EAAAxkC,EAAA,GAAAwkC,EAAAxkC,EAAA,GAAAwkC,EAAAngC,GAAAmgC,EAAAngC,EAAA,GAAAmgC,EAAAngC,EAAA,IAGA,SAAAw+H,EAAAzxH,EAAApR,EAAAqE,GACA0Z,EAAAK,SAAAqmB,IAAAhR,KAAAgR,EAAArzB,GAAAqzB,EAAArzB,EAAA,GAAAqzB,EAAAzkC,GAAAykC,EAAAzkC,EAAA,GAAAykC,EAAApgC,GAAAogC,EAAApgC,EAAA,IAGA,SAAA2gC,EAAA5zB,EAAApR,EAAAqE,EAAAuS,EAAAksH,EAAAC,EAAAC,EAAAC,EAAAvB,EAAAC,EAAA/D,EAAAsF,GACA,IAGA/kG,EAHAglG,EAAAX,EAAApxH,GACAgyH,EAAAZ,EAAAxiI,GACAqjI,EAAAb,EAAAn+H,QAGA9N,IAAAqgB,EACA+rH,EAAAQ,EAAAC,EAAAC,IAGAV,EAAAQ,EAAAC,EADAjlG,EAAAqkG,EAAA5rH,IAEA+rH,EAAAS,EAAAC,EAAAllG,SAGA5nC,IAAAusI,IACAK,EAAAT,EAAAI,GACAM,EAAAV,EAAAK,GACAM,EAAAX,EAAAM,QAEAzsI,IAAAqgB,EACAisH,EAAAM,EAAAC,EAAAC,IAGAR,EAAAM,EAAAC,EADAjlG,EAAAukG,EAAAO,IAEAJ,EAAAO,EAAAC,EAAAllG,UAIA5nC,IAAAmrI,IACAyB,EAAAV,EAAAf,GACA0B,EAAAX,EAAAd,GACA0B,EAAAZ,EAAA7E,QAEArnI,IAAAqgB,EACAgsH,EAAAO,EAAAC,EAAAC,IAGAT,EAAAO,EAAAC,EADAjlG,EAAAskG,EAAAS,IAEAN,EAAAQ,EAAAC,EAAAllG,KAKAmkG,EAAA,IAoBA,IAlBA,IAAAgB,EAAA,0EAEAC,EAAA,2EAEAC,EAAA,oDAEAC,EAAA,kDAEAC,EAAA,8FAEAC,EAAA,kIAEAC,EAAA,sGACAC,EAAA,eACAC,EAAA,oBAEA93C,EAAA34B,EAAA3jC,MAAA,MAEAtT,EAAA,EAAqBA,EAAA4vE,EAAA/1F,OAAkBmmB,IAAA,CACvC,IAEAb,EAFAJ,EAAA6wE,EAAA5vE,GAIA,QAHAjB,IAAAq3B,QAGAv8C,QAAA,MAAAklB,EAAAhZ,OAAA,GAES,WAAAoZ,EAAA+nH,EAAAzhI,KAAAsZ,IAETmD,EAAAmV,KAAAhyB,WAAA8Z,EAAA,IAAA9Z,WAAA8Z,EAAA,IAAA9Z,WAAA8Z,EAAA,UACS,WAAAA,EAAAgoH,EAAA1hI,KAAAsZ,IAETqpB,EAAA/Q,KAAAhyB,WAAA8Z,EAAA,IAAA9Z,WAAA8Z,EAAA,IAAA9Z,WAAA8Z,EAAA,UACS,WAAAA,EAAAioH,EAAA3hI,KAAAsZ,IAETspB,EAAAhR,KAAAhyB,WAAA8Z,EAAA,IAAA9Z,WAAA8Z,EAAA,UACS,WAAAA,EAAAkoH,EAAA5hI,KAAAsZ,IAET6pB,EAAAzpB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,SACS,WAAAA,EAAAmoH,EAAA7hI,KAAAsZ,IAET6pB,EAAAzpB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,UACS,WAAAA,EAAAooH,EAAA9hI,KAAAsZ,IAET6pB,EAAAzpB,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,IAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAAAA,EAAA,UACS,WAAAA,EAAAqoH,EAAA/hI,KAAAsZ,IAET6pB,EAAAzpB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,SAAAhlB,uBAAAglB,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,UACS,WAAAA,EAAAsoH,EAAAhiI,KAAAsZ,IAAA,CAIT,IAAApkB,EAAAwkB,EAAA,GAAAi3B,QAEA,IAAA6vF,GACAA,GAAA,EACAtkH,EAAAhnB,QAEAurI,EAAAvrI,QAES,cAAAsjC,KAAAlf,GAET4C,EAAA4hB,SAAA5oC,KAAAokB,EAAAm4C,UAAA,GAAA9gB,YACS,cAAAnY,KAAAlf,WACA,YAAAI,EAAAuoH,EAAAjiI,KAAAsZ,IAIT,UAAA/kB,MAAA,oBAAA+kB,GAFA4C,EAAA4hB,SAAA4iG,OAAA,MAAAhnH,EAAA,WAAAA,EAAA,IAQA,IAFA,IAAAkiF,EAAA,IAAA/nG,EAAA0kE,MAEAj5D,GAAAib,EAAA,EAAA4f,EAAA/lC,QAAyCmmB,EAAAjb,EAAOib,IAAA,CAEhD,IAcAujB,EAdAvhB,GADAL,EAAAie,EAAA5f,IACAgC,SACA2mE,EAAA,IAAArvF,EAAA6oB,eACAwmE,EAAAz6C,aAAA,eAAA50C,EAAA2qC,gBAAA,IAAA/gB,aAAAlB,EAAAE,UAAA,IAEAF,EAAAomB,QAAAvuC,OAAA,EACA8uF,EAAAz6C,aAAA,aAAA50C,EAAA2qC,gBAAA,IAAA/gB,aAAAlB,EAAAomB,SAAA,IAEAugD,EAAAr/C,uBAGAtnB,EAAAqmB,IAAAxuC,OAAA,GACA8uF,EAAAz6C,aAAA,SAAA50C,EAAA2qC,gBAAA,IAAA/gB,aAAAlB,EAAAqmB,KAAA,IAKA,OAAAttC,KAAAgoC,YACAQ,EAAAxoC,KAAAgoC,UAAAtI,OAAA9Y,EAAA4hB,SAAA5oC,OAGA4oC,KACAA,EAAA,IAAAjqC,EAAAwoE,mBACAnnE,KAAAgnB,EAAA4hB,SAAA5oC,MAGA4oC,EAAAi3B,QAAA74C,EAAA4hB,SAAA4iG,OAAA7sI,EAAAuD,cAAAvD,EAAAsD,YACA,IAAAquC,EAAA,IAAA3xC,EAAAulC,KAAA8pD,EAAAplD,GACA0H,EAAAtwC,KAAAgnB,EAAAhnB,KACA0mG,EAAA/5F,IAAA2jC,GAIA,OADA3lC,QAAAqiI,QAAA,aACAtmC,wBCtOA7nG,EAAAC,QAAA,SAAAH,GAkBAA,EAAAszE,UAAA,kBACAg7D,QAAA,CACAC,IAAA,CACA7qG,KAAA,OAGAs9B,aAAA,qBAAqC,qBAAsB,iCAAkC,sCAAuC,KAAK5mC,KAAA,OAEzIp6B,EAAAszE,UAAA,oBACAvS,SAAA,CACAytE,QAAA,CACA9qG,KAAA,IACAh5B,MAAA,MAEA+jI,gBAAA,CACA/qG,KAAA,IACAh5B,MAAA,KAEAgkI,mBAAA,CACAhrG,KAAA,IACAh5B,MAAA,MAGA4jI,QAAA,CACAC,IAAA,CACA7qG,KAAA,OAGAu9B,eAAA,CACA,yBAA2B,kCAAmC,6BAA8B,iCAAkC,oCAAqC,oBAAqB,0CAA2C,qEAAsE,IAAK,qBAAsB,mEAAqE,uDAAyD,oIAClc,oHAAuH,uHAAwH,wGAA0G,uHAAwH,6EAA+E,mEAAoE,6DAA8D,6DAA8D,yCAA0C,KAAK7mC,KAAA,OAE/wBp6B,EAAAszE,UAAA,wBACAvS,SAAA,CACA4tE,OAAA,CACAjrG,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,QAEAywH,aAAA,CACAlrG,KAAA,IACAh5B,MAAA,KAEAmkI,OAAA,CACAnrG,KAAA,IACAh5B,MAAA,MAGAu2D,eAAA,0BAA4C,kCAAmC,wBAAyB,0BAA2B,yBAA0B,uBAAwB,8BAA+B,wBAAyB,2BAA4B,gBAAiB,IAAK,0BAA2B,+CAAgD,IAAK,yBAA0B,wDAAyD,IAAK,qBAAsB,4CAA6C,iGAAkG,iGAAkG,6CAA8C,uBAAwB,iCAAkC,sBAAuB,yCAA0C,0BAA2B,6BAA8B,2CAA4C,qBAAsB,uDAAwD,wEAAyE,gCAAiC,yEAA0E,sCAAuC,yCAA0C,oEAAqE,gDAAiD,kGAAmG,gDAAiD,+CAAgD,6BAA8B,gCAAiC,2EAA4E,uDAAwD,2GAA4G,gCAAiC,gCAAiC,kCAAmC,WAC7/D,IAAM,yCAA0C,KAAK7mC,KAAA,OAErDp6B,EAAAszE,UAAA,aACAvS,SAAA,CACA+tE,SAAA,CACAprG,KAAA,IACAh5B,MAAA,MAEAqkI,YAAA,CACArrG,KAAA,IACAh5B,MAAA,MAEAkkI,aAAA,CACAlrG,KAAA,IACAh5B,MAAA,MAEAmkI,OAAA,CACAnrG,KAAA,IACAh5B,MAAA,OAGA4jI,QAAA,CACAC,IAAA,CACA7qG,KAAA,OAGAu9B,eAAA,0BAA4C,kCAAmC,wBAAyB,0BAA2B,oBAAqB,8BAA+B,6BAA8B,8BAA+B,wBAAyB,0BAA2B,gDAAiD,IAAK,qBAAsB,gCAAiC,4CAA6C,iGAAkG,iGAAkG,sDAAuD,4CAA6C,8DAA+D,6CAA8C,6CAA8C,KAAK7mC,KAAA,OAE14Bp6B,EAAAszE,UAAA,gBACAvS,SAAA,CACA8tE,OAAA,CACAnrG,KAAA,IACAh5B,MAAA,MAEAkkI,aAAA,CACAlrG,KAAA,IACAh5B,MAAA,MAEAskI,aAAA,CACAtrG,KAAA,IACAh5B,MAAA,MAEAokI,SAAA,CACAprG,KAAA,IACAh5B,MAAA,MAEAukI,kBAAA,CACAvrG,KAAA,IACAh5B,MAAA,OAGA4jI,QAAA,CACAC,IAAA,CACA7qG,KAAA,OAGAu9B,eAAA,0BAA4C,kCAAmC,wBAAyB,0BAA2B,oBAAqB,wBAAyB,8BAA+B,8BAA+B,8BAA+B,uCAAwC,0CAA2C,qEAAsE,IAAK,8BAA+B,4BAA6B,IAAK,0BAA2B,gDAAiD,IAAK,qBAAsB,4CAA6C,iGAAkG,iGAAkG,sDAAuD,4CAA6C,mDAAoD,kDAAmD,uFAAwF,oBAAqB,4GAA6G,kFAAmF,kFAC7zC,oDAAsD,iBAAkB,kBAAmB,kBAAmB,IAAK,gDAAiD,KAAK7mC,KAAA,OAEzKp6B,EAAAszE,UAAA,eACAvS,SAAA,CACAmuE,kBAAA,CACAxrG,KAAA,IACAh5B,MAAA,MAEAkkI,aAAA,CACAlrG,KAAA,IACAh5B,MAAA,MAEAmkI,OAAA,CACAnrG,KAAA,IACAh5B,MAAA,OAGA4jI,QAAA,CACAC,IAAA,CACA7qG,KAAA,OAGAu9B,eAAA,0BAA4C,oBAAqB,uCAAwC,8BAA+B,wBAAyB,qBAAsB,oCAAqC,2CAA4C,uDAAwD,8GAA+G,+GAAgH,8GAA+G,+GAAgH,qCAAsC,mCAAoC,yCAA0C,2CAA4C,sFAAuF,KAAK7mC,KAAA,OAE1/Bp6B,EAAAszE,UAAA,YACAvS,SAAA,CACAmuE,kBAAA,CACAxrG,KAAA,IACAh5B,MAAA,MAEAykI,YAAA,CACAzrG,KAAA,IACAh5B,MAAA,MAEA0kI,eAAA,CACA1rG,KAAA,IACAh5B,MAAA,MAEAmkI,OAAA,CACAnrG,KAAA,IACAh5B,MAAA,MAEA2kI,mBAAA,CACA3rG,KAAA,KACAh5B,MAAA,MAEA4kI,aAAA,CACA5rG,KAAA,KACAh5B,MAAA,MAEA6kI,iBAAA,CACA7rG,KAAA,KACAh5B,MAAA,MAEA8kI,WAAA,CACA9rG,KAAA,KACAh5B,MAAA,MAEA+kI,aAAA,CACA/rG,KAAA,KACAh5B,MAAA,MAEAglI,eAAA,CACAhsG,KAAA,KACAh5B,MAAA,MAEAilI,WAAA,CACAjsG,KAAA,IACAh5B,MAAA,OAGA4jI,QAAA,CACAsB,KAAA,CACAlsG,KAAA,MAEA6qG,IAAA,CACA7qG,KAAA,OAGAs9B,aAAA,0BAA0C,qBAAsB,oBAAqB,mCAAoC,6BAA8B,wBAAyB,gCAAiC,uCAAwC,qBAAsB,6FAA8F,iBAAkB,YAAa,uEAAwE,KAAK5mC,KAAA,MACzd6mC,eAAA,0BAA4C,qBAAsB,oBAAqB,uCAAwC,iCAAkC,iCAAkC,6BAA8B,2BAA4B,+BAAgC,4BAA6B,0CAA2C,uCAAwC,IAAK,qBAAsB,iDAAkD,kDAAmD,mEAAoE,mCAAoC,2EAA4E,sEAAuE,4BAA6B,oDAAqD,KAAK7mC,KAAA,2BC3M/1Bl6B,EAAAC,QAAA,SAAAH,GAcAA,EAAA6vI,cAAA,SAAAxnH,EAAAgtD,GACA5zE,KAAA4mB,SACA5mB,KAAA4zE,gBAAAx0E,IAAAw0E,IAAApX,SAEAx8D,KAAA6xC,SAAA,EAEA7xC,KAAAI,OAAA,IAAA7B,EAAA+a,QAEAtZ,KAAA29B,YAAA,EACA39B,KAAAwvD,YAAA3qC,IAEA7kB,KAAAquI,QAAA,EACAruI,KAAAsuI,QAAAzpH,IAGA7kB,KAAAuuI,cAAA,EAEAvuI,KAAAwuI,cAAAjvI,KAAA0e,GAIAje,KAAAyuI,iBAAA5pH,IAEA7kB,KAAA0uI,gBAAA7pH,IAIA7kB,KAAA2uI,eAAA,EACA3uI,KAAA4uI,cAAA,IAGA5uI,KAAA6uI,YAAA,EACA7uI,KAAA8uI,UAAA,EAEA9uI,KAAA+uI,cAAA,EACA/uI,KAAAgvI,YAAA,EAEAhvI,KAAAivI,WAAA,EACAjvI,KAAAkvI,YAAA,EAIAlvI,KAAAmvI,YAAA,EACAnvI,KAAAovI,gBAAA,EAGApvI,KAAAqvI,YAAA,EAEArvI,KAAA+9C,KAAA,CACAj9C,KAAA,GACAwuI,GAAA,GACAtuI,MAAA,GACAuuI,OAAA,IAGAvvI,KAAAwvI,aAAA,CACAC,MAAAlxI,EAAAsC,MAAAC,KACA4uI,KAAAnxI,EAAAsC,MAAAE,OACA4uI,IAAApxI,EAAAsC,MAAAG,OAGAhB,KAAA4vI,QAAA5vI,KAAAI,OAAA8K,QACAlL,KAAA6vI,UAAA7vI,KAAA4mB,OAAAU,SAAApc,QACAlL,KAAA8vI,MAAA9vI,KAAA4mB,OAAA6qC,KAIAzxD,KAAA+vI,cAAA,WACA,OAAAC,EAAAjuH,KAGA/hB,KAAAiwI,kBAAA,WACA,OAAAD,EAAAtuH,OAGA1hB,KAAAo3C,MAAA,WACAvwB,EAAAzmB,OAAA8I,KAAA2d,EAAA+oH,SACA/oH,EAAAD,OAAAU,SAAApe,KAAA2d,EAAAgpH,WACAhpH,EAAAD,OAAA6qC,KAAA5qC,EAAAipH,MACAjpH,EAAAD,OAAA+qC,yBACA9qC,EAAA6b,cAAAwtG,GACArpH,EAAAvP,SACAmgE,EAAA04D,EAAAC,MAIApwI,KAAAsX,OAAA,WACA,IAAAjK,EAAA,IAAA9O,EAAA+a,QAEA+2H,GAAA,IAAA9xI,EAAAmY,YAAAwC,mBAAA0N,EAAAgG,GAAA,IAAAruB,EAAA+a,QAAA,QACAg3H,EAAAD,EAAAnlI,QAAAyO,UACA42H,EAAA,IAAAhyI,EAAA+a,QACAk3H,EAAA,IAAAjyI,EAAAmY,WACA,kBACA,IAAA4Q,EAAAT,EAAAD,OAAAU,SAyCA,OAxCAja,EAAAnE,KAAAoe,GAAA1a,IAAAia,EAAAzmB,QAEAiN,EAAA8R,gBAAAkxH,GAEAL,EAAAxsH,eAAAnW,GAEAwZ,EAAAsoH,YAAA13D,IAAA04D,EAAAC,MACAK,EAqGA,EAAAlxI,KAAA0e,GAAA,MAAA4I,EAAAuoH,iBAlGAY,EAAAtuH,OAAAgvH,EAAAhvH,MACAsuH,EAAAjuH,KAAA2uH,EAAA3uH,IAEAiuH,EAAAtuH,MAAAniB,KAAA2M,IAAA2a,EAAA4nH,gBAAAlvI,KAAAsL,IAAAgc,EAAA6nH,gBAAAsB,EAAAtuH,QAEAsuH,EAAAjuH,IAAAxiB,KAAA2M,IAAA2a,EAAA0nH,cAAAhvI,KAAAsL,IAAAgc,EAAA2nH,cAAAwB,EAAAjuH,MACAiuH,EAAA93G,WACA83G,EAAAhuH,QAAAkN,EAEA8gH,EAAAhuH,OAAAziB,KAAA2M,IAAA2a,EAAA8W,YAAAp+B,KAAAsL,IAAAgc,EAAA2oC,YAAAwgF,EAAAhuH,SAEA6E,EAAAzmB,OAAAmM,IAAAokI,GACAtjI,EAAAwU,iBAAAmuH,GAEA3iI,EAAA8R,gBAAAmxH,GACAhpH,EAAApe,KAAA2d,EAAAzmB,QAAAmM,IAAAc,GACAwZ,EAAAD,OAAA8F,OAAA7F,EAAAzmB,SAEA,IAAAymB,EAAA8nH,eACA+B,EAAAhvH,OAAA,EAAAmF,EAAA+nH,cACA8B,EAAA3uH,KAAA,EAAA8E,EAAA+nH,eAEA8B,EAAA5nI,IAAA,OAGAomB,EAAA,EACAyhH,EAAA7nI,IAAA,UAIA8nI,GAAAL,EAAApyH,kBAAA0I,EAAAD,OAAAU,UAAAupH,GAAA,KAAAL,EAAAj3H,IAAAsN,EAAAD,OAAAzP,aAAA05H,KACAhqH,EAAA6b,cAAAwtG,GACAK,EAAArnI,KAAA2d,EAAAD,OAAAU,UACAkpH,EAAAtnI,KAAA2d,EAAAD,OAAAzP,YACAy5H,GAAA,GACA,IAtDA,GA6DA5wI,KAAAiyC,QAAA,WACAprB,EAAA+sD,WAAArxC,oBAAA,cAAAuuG,GAAA,GACAjqH,EAAA+sD,WAAArxC,oBAAA,YAAAwuG,GAAA,GACAlqH,EAAA+sD,WAAArxC,oBAAA,aAAAyuG,GAAA,GACAnqH,EAAA+sD,WAAArxC,oBAAA,sBAAAyuG,GAAA,GAEAnqH,EAAA+sD,WAAArxC,oBAAA,aAAA0uG,GAAA,GACApqH,EAAA+sD,WAAArxC,oBAAA,WAAA2uG,GAAA,GACArqH,EAAA+sD,WAAArxC,oBAAA,YAAA4uG,GAAA,GACA30E,SAAAj6B,oBAAA,YAAA6uG,GAAA,GACA50E,SAAAj6B,oBAAA,UAAA8uG,GAAA,GACA70E,SAAAj6B,oBAAA,WAAA8uG,GAAA,GACA7iF,OAAAjsB,oBAAA,UAAA+uG,GAAA,IAMA,IAAAzqH,EAAA7mB,KACAkwI,EAAA,CACAjuG,KAAA,UAEAsvG,EAAA,CACAtvG,KAAA,SAEAuvG,EAAA,CACAvvG,KAAA,OAEAkuG,EAAA,CACAC,MAAA,EACAqB,OAAA,EACAC,MAAA,EACA/B,IAAA,EACAgC,aAAA,EACAC,YAAA,EACAC,UAAA,GAEAp6D,EAAA04D,EAAAC,KACAS,EAAA,KAEAb,EAAA,IAAAzxI,EAAAy5B,UACA04G,EAAA,IAAAnyI,EAAAy5B,UACA9I,EAAA,EACAyhH,EAAA,IAAApyI,EAAA+a,QACAs3H,GAAA,EACAkB,EAAA,IAAAvzI,EAAAme,QACAq1H,EAAA,IAAAxzI,EAAAme,QACAs1H,EAAA,IAAAzzI,EAAAme,QACAu1H,EAAA,IAAA1zI,EAAAme,QACAw1H,EAAA,IAAA3zI,EAAAme,QACAy1H,EAAA,IAAA5zI,EAAAme,QACA01H,EAAA,IAAA7zI,EAAAme,QACA21H,EAAA,IAAA9zI,EAAAme,QACA41H,EAAA,IAAA/zI,EAAAme,QAMA,SAAA61H,IACA,OAAAhzI,KAAAC,IAAA,IAAAqnB,EAAAioH,WAGA,SAAA2B,EAAAt4H,GACAu4H,EAAAhvH,OAAAvJ,EAGA,SAAAq6H,EAAAr6H,GACAu4H,EAAA3uH,KAAA5J,EAGA,IAAAs6H,EAAA,WACA,IAAA54H,EAAA,IAAAtb,EAAA+a,QACA,gBAAA4K,EAAAwuH,GACA74H,EAAAqI,oBAAAwwH,EAAA,GAEA74H,EAAA/M,gBAAAoX,GACAysH,EAAApkI,IAAAsN,IANA,GAUA84H,EAAA,WACA,IAAA94H,EAAA,IAAAtb,EAAA+a,QACA,gBAAA4K,EAAAwuH,GACA74H,EAAAqI,oBAAAwwH,EAAA,GAEA74H,EAAA/M,eAAAoX,GACAysH,EAAApkI,IAAAsN,IANA,GAWA+4H,EAAA,WACA,IAAAvlI,EAAA,IAAA9O,EAAA+a,QACA,gBAAAu5H,EAAAC,GACA,IAAA9Y,EAAAnzG,EAAA+sD,aAAApX,SAAA31C,EAAA+sD,WAAAm/D,KAAAlsH,EAAA+sD,WAEA,GAAA/sD,EAAAD,kBAAAroB,EAAAimC,kBAAA,CAEA,IAAAld,EAAAT,EAAAD,OAAAU,SACAja,EAAAnE,KAAAoe,GAAA1a,IAAAia,EAAAzmB,QACA,IAAA4yI,EAAA3lI,EAAAvO,SAEAk0I,GAAAzzI,KAAAwW,IAAA8Q,EAAAD,OAAAgK,IAAA,EAAArxB,KAAA0e,GAAA,KAEAw0H,EAAA,EAAAI,EAAAG,EAAAhZ,EAAA17C,aAAAz3D,EAAAD,OAAAzG,QACAwyH,EAAA,EAAAG,EAAAE,EAAAhZ,EAAA17C,aAAAz3D,EAAAD,OAAAzG,aACS0G,EAAAD,kBAAAroB,EAAAkmC,oBAETguG,EAAAI,GAAAhsH,EAAAD,OAAA0J,MAAAzJ,EAAAD,OAAAyJ,MAAAxJ,EAAAD,OAAA6qC,KAAAuoE,EAAAiZ,YAAApsH,EAAAD,OAAAzG,QACAwyH,EAAAG,GAAAjsH,EAAAD,OAAA4J,IAAA3J,EAAAD,OAAA2J,QAAA1J,EAAAD,OAAA6qC,KAAAuoE,EAAA17C,aAAAz3D,EAAAD,OAAAzG,UAGA5V,QAAAC,KAAA,gFACAqc,EAAAooH,WAAA,IAtBA,GA2BA,SAAAiE,EAAAC,GACAtsH,EAAAD,kBAAAroB,EAAAimC,kBACAtV,GAAAikH,EACOtsH,EAAAD,kBAAAroB,EAAAkmC,oBACP5d,EAAAD,OAAA6qC,KAAAlyD,KAAA2M,IAAA2a,EAAAwnH,QAAA9uI,KAAAsL,IAAAgc,EAAAynH,QAAAznH,EAAAD,OAAA6qC,KAAA0hF,IACAtsH,EAAAD,OAAA+qC,yBACAi/E,GAAA,IAEArmI,QAAAC,KAAA,uFACAqc,EAAAgoH,YAAA,GAIA,SAAAuE,EAAAD,GACAtsH,EAAAD,kBAAAroB,EAAAimC,kBACAtV,GAAAikH,EACOtsH,EAAAD,kBAAAroB,EAAAkmC,oBACP5d,EAAAD,OAAA6qC,KAAAlyD,KAAA2M,IAAA2a,EAAAwnH,QAAA9uI,KAAAsL,IAAAgc,EAAAynH,QAAAznH,EAAAD,OAAA6qC,KAAA0hF,IACAtsH,EAAAD,OAAA+qC,yBACAi/E,GAAA,IAEArmI,QAAAC,KAAA,uFACAqc,EAAAgoH,YAAA,GA4KA,SAAAkC,EAAApuG,GACA,QAAA9b,EAAAgrB,QAAA,CAGA,GAFAlP,EAAAi3C,iBAEAj3C,EAAA0wG,SAAAxsH,EAAA2oH,aAAAC,MAAA,CACA,QAAA5oH,EAAAkoH,aAAA,QA1KA,SAAApsG,GAEAmvG,EAAAhpI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SAyKAC,CAAA7wG,GACA80C,EAAA04D,EAAAsB,YACO,GAAA9uG,EAAA0wG,SAAAxsH,EAAA2oH,aAAAE,KAAA,CACP,QAAA7oH,EAAAgoH,WAAA,QAzKA,SAAAlsG,GAEAyvG,EAAAtpI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SAwKAE,CAAA9wG,GACA80C,EAAA04D,EAAAuB,WACO,GAAA/uG,EAAA0wG,SAAAxsH,EAAA2oH,aAAAG,IAAA,CACP,QAAA9oH,EAAAooH,UAAA,QAxKA,SAAAtsG,GAEAsvG,EAAAnpI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SAuKAG,CAAA/wG,GACA80C,EAAA04D,EAAAR,IAGAl4D,IAAA04D,EAAAC,OACA5zE,SAAAx6B,iBAAA,YAAAovG,GAAA,GACA50E,SAAAx6B,iBAAA,UAAAqvG,GAAA,GACA70E,SAAAx6B,iBAAA,WAAAqvG,GAAA,GACAxqH,EAAA6b,cAAA6uG,KAIA,SAAAH,EAAAzuG,GACA,QAAA9b,EAAAgrB,QAGA,GAFAlP,EAAAi3C,iBAEAnC,IAAA04D,EAAAsB,OAAA,CACA,QAAA5qH,EAAAkoH,aAAA,QArLA,SAAApsG,GAEAovG,EAAAjpI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SACAvB,EAAA70H,WAAA40H,EAAAD,GACA,IAAA9X,EAAAnzG,EAAA+sD,aAAApX,SAAA31C,EAAA+sD,WAAAm/D,KAAAlsH,EAAA+sD,WAEA68D,EAAA,EAAAlxI,KAAA0e,GAAA+zH,EAAAtyI,EAAAs6H,EAAAiZ,YAAApsH,EAAAmoH,aAEAwD,EAAA,EAAAjzI,KAAA0e,GAAA+zH,EAAAr7H,EAAAqjH,EAAA17C,aAAAz3D,EAAAmoH,aACA8C,EAAA5oI,KAAA6oI,GACAlrH,EAAAvP,SA4KAq8H,CAAAhxG,QACO,GAAA80C,IAAA04D,EAAAuB,MAAA,CACP,QAAA7qH,EAAAgoH,WAAA,QA3KA,SAAAlsG,GAEA0vG,EAAAvpI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SACAjB,EAAAn1H,WAAAk1H,EAAAD,GAEAE,EAAA37H,EAAA,EACAu8H,EAAAX,KACOD,EAAA37H,EAAA,GACPy8H,EAAAb,KAGAH,EAAAlpI,KAAAmpI,GACAxrH,EAAAvP,SAgKAs8H,CAAAjxG,QACO,GAAA80C,IAAA04D,EAAAR,IAAA,CACP,QAAA9oH,EAAAooH,UAAA,QA/JA,SAAAtsG,GAEAuvG,EAAAppI,IAAA65B,EAAA2wG,QAAA3wG,EAAA4wG,SACApB,EAAAh1H,WAAA+0H,EAAAD,GACAW,EAAAT,EAAAzyI,EAAAyyI,EAAAx7H,GACAs7H,EAAA/oI,KAAAgpI,GACArrH,EAAAvP,SA0JAu8H,CAAAlxG,IAIA,SAAA0uG,EAAA1uG,IACA,IAAA9b,EAAAgrB,UAEA2qB,SAAAj6B,oBAAA,YAAA6uG,GAAA,GACA50E,SAAAj6B,oBAAA,UAAA8uG,GAAA,GACA70E,SAAAj6B,oBAAA,WAAA8uG,GAAA,GACAxqH,EAAA6b,cAAA8uG,GACA/5D,EAAA04D,EAAAC,MAGA,SAAAY,EAAAruG,IACA,IAAA9b,EAAAgrB,UAAA,IAAAhrB,EAAAgoH,YAAAp3D,IAAA04D,EAAAC,MAAA34D,IAAA04D,EAAAsB,SACA9uG,EAAAi3C,iBACAj3C,EAAAmxG,kBArKA,SAAAnxG,GAEA,IAAAv2B,EAAA,OAEAhN,IAAAujC,EAAAoxG,WAEA3nI,EAAAu2B,EAAAoxG,gBACO30I,IAAAujC,EAAAq/B,SAEP51D,GAAAu2B,EAAAq/B,QAGA51D,EAAA,EACAgnI,EAAAb,KACOnmI,EAAA,GACP8mI,EAAAX,KAGA1rH,EAAAvP,SAoJA08H,CAAArxG,GACA9b,EAAA6b,cAAA6uG,GAEA1qH,EAAA6b,cAAA8uG,IAGA,SAAAF,EAAA3uG,IACA,IAAA9b,EAAAgrB,UAAA,IAAAhrB,EAAAwoH,aAAA,IAAAxoH,EAAAooH,WAxJA,SAAAtsG,GAEA,OAAAA,EAAAsxG,SACA,KAAAptH,EAAAk3B,KAAAuxF,GACAsD,EAAA,EAAA/rH,EAAAqoH,aACAroH,EAAAvP,SACA,MAEA,KAAAuP,EAAAk3B,KAAAwxF,OACAqD,EAAA,GAAA/rH,EAAAqoH,aACAroH,EAAAvP,SACA,MAEA,KAAAuP,EAAAk3B,KAAAj9C,KACA8xI,EAAA/rH,EAAAqoH,YAAA,GACAroH,EAAAvP,SACA,MAEA,KAAAuP,EAAAk3B,KAAA/8C,MACA4xI,GAAA/rH,EAAAqoH,YAAA,GACAroH,EAAAvP,UAqIA48H,CAAAvxG,GAGA,SAAAsuG,EAAAtuG,GACA,QAAA9b,EAAAgrB,QAAA,CAEA,OAAAlP,EAAAwxG,QAAAr1I,QACA,OAEA,QAAA+nB,EAAAkoH,aAAA,QAzIA,SAAApsG,GAEAmvG,EAAAhpI,IAAA65B,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAE,OAwIAC,CAAA3xG,GACA80C,EAAA04D,EAAAwB,aACA,MAEA,OAEA,QAAA9qH,EAAAgoH,WAAA,QA3IA,SAAAlsG,GAEA,IAAAvkB,EAAAukB,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAC,MACA/1H,EAAAskB,EAAAwxG,QAAA,GAAAE,MAAA1xG,EAAAwxG,QAAA,GAAAE,MACAnwH,EAAA3kB,KAAAkM,KAAA2S,IAAAC,KACA+zH,EAAAtpI,IAAA,EAAAob,GAuIAqwH,CAAA5xG,GACA80C,EAAA04D,EAAAyB,YACA,MAEA,OAEA,QAAA/qH,EAAAooH,UAAA,QA1IA,SAAAtsG,GAEAsvG,EAAAnpI,IAAA65B,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAE,OAyIAG,CAAA7xG,GACA80C,EAAA04D,EAAA0B,UACA,MAEA,QACAp6D,EAAA04D,EAAAC,KAGA34D,IAAA04D,EAAAC,MACAvpH,EAAA6b,cAAA6uG,IAIA,SAAAJ,EAAAxuG,GACA,QAAA9b,EAAAgrB,QAIA,OAHAlP,EAAAi3C,iBACAj3C,EAAAmxG,kBAEAnxG,EAAAwxG,QAAAr1I,QACA,OAEA,QAAA+nB,EAAAkoH,aAAA,OACA,GAAAt3D,IAAA04D,EAAAwB,aAAA,QA5JA,SAAAhvG,GAEAovG,EAAAjpI,IAAA65B,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAE,OACArC,EAAA70H,WAAA40H,EAAAD,GACA,IAAA9X,EAAAnzG,EAAA+sD,aAAApX,SAAA31C,EAAA+sD,WAAAm/D,KAAAlsH,EAAA+sD,WAEA68D,EAAA,EAAAlxI,KAAA0e,GAAA+zH,EAAAtyI,EAAAs6H,EAAAiZ,YAAApsH,EAAAmoH,aAEAwD,EAAA,EAAAjzI,KAAA0e,GAAA+zH,EAAAr7H,EAAAqjH,EAAA17C,aAAAz3D,EAAAmoH,aACA8C,EAAA5oI,KAAA6oI,GACAlrH,EAAAvP,SAoJAm9H,CAAA9xG,GACA,MAEA,OAEA,QAAA9b,EAAAgoH,WAAA,OACA,GAAAp3D,IAAA04D,EAAAyB,YAAA,QAvJA,SAAAjvG,GAEA,IAAAvkB,EAAAukB,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAC,MACA/1H,EAAAskB,EAAAwxG,QAAA,GAAAE,MAAA1xG,EAAAwxG,QAAA,GAAAE,MACAnwH,EAAA3kB,KAAAkM,KAAA2S,IAAAC,KACAg0H,EAAAvpI,IAAA,EAAAob,GACAouH,EAAAn1H,WAAAk1H,EAAAD,GAEAE,EAAA37H,EAAA,EACAy8H,EAAAb,KACOD,EAAA37H,EAAA,GACPu8H,EAAAX,KAGAH,EAAAlpI,KAAAmpI,GACAxrH,EAAAvP,SA0IAo9H,CAAA/xG,GACA,MAEA,OAEA,QAAA9b,EAAAooH,UAAA,OACA,GAAAx3D,IAAA04D,EAAA0B,UAAA,QA7IA,SAAAlvG,GAEAuvG,EAAAppI,IAAA65B,EAAAwxG,QAAA,GAAAC,MAAAzxG,EAAAwxG,QAAA,GAAAE,OACAlC,EAAAh1H,WAAA+0H,EAAAD,GACAW,EAAAT,EAAAzyI,EAAAyyI,EAAAx7H,GACAs7H,EAAA/oI,KAAAgpI,GACArrH,EAAAvP,SAyIAq9H,CAAAhyG,GACA,MAEA,QACA80C,EAAA04D,EAAAC,MAIA,SAAAc,EAAAvuG,IACA,IAAA9b,EAAAgrB,UAEAhrB,EAAA6b,cAAA8uG,GACA/5D,EAAA04D,EAAAC,MAGA,SAAAU,EAAAnuG,GACAA,EAAAi3C,iBAIA/yD,EAAA+sD,WAAA5xC,iBAAA,cAAA8uG,GAAA,GACAjqH,EAAA+sD,WAAA5xC,iBAAA,YAAA+uG,GAAA,GACAlqH,EAAA+sD,WAAA5xC,iBAAA,aAAAgvG,GAAA,GACAnqH,EAAA+sD,WAAA5xC,iBAAA,sBAAAgvG,GAAA,GAEAnqH,EAAA+sD,WAAA5xC,iBAAA,aAAAivG,GAAA,GACApqH,EAAA+sD,WAAA5xC,iBAAA,WAAAkvG,GAAA,GACArqH,EAAA+sD,WAAA5xC,iBAAA,YAAAmvG,GAAA,GACA3iF,OAAAxsB,iBAAA,UAAAsvG,GAAA,GAEAtxI,KAAAsX,UAGA/Y,EAAA6vI,cAAAzuI,UAAAE,OAAA6/B,OAAAnhC,EAAAwjC,gBAAApiC,WACApB,EAAA6vI,cAAAzuI,UAAAqJ,YAAAzK,EAAA6vI,cACAvuI,OAAAukC,iBAAA7lC,EAAA6vI,cAAAzuI,UAAA,CACAmf,OAAA,CACA/e,IAAA,WAEA,OADAwK,QAAAC,KAAA,4DACAxK,KAAAI,SAIAw0I,OAAA,CACA70I,IAAA,WAEA,OADAwK,QAAAC,KAAA,+EACAxK,KAAA6uI,YAEA/lI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8EACAxK,KAAA6uI,YAAA5lI,IAGA4rI,SAAA,CACA90I,IAAA,WAEA,OADAwK,QAAAC,KAAA,mFACAxK,KAAA+uI,cAEAjmI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,kFACAxK,KAAA+uI,cAAA9lI,IAGA6rI,MAAA,CACA/0I,IAAA,WAEA,OADAwK,QAAAC,KAAA,6EACAxK,KAAAivI,WAEAnmI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4EACAxK,KAAAivI,WAAAhmI,IAGA8rI,OAAA,CACAh1I,IAAA,WAEA,OADAwK,QAAAC,KAAA,+EACAxK,KAAAqvI,YAEAvmI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,8EACAxK,KAAAqvI,YAAApmI,IAGA+rI,aAAA,CACAj1I,IAAA,WAEA,OADAwK,QAAAC,KAAA,wFACAxK,KAAA2uI,eAEA7lI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,uFACAxK,KAAA2uI,eAAA1lI,IAGAgsI,qBAAA,CACAl1I,IAAA,WAEA,OADAwK,QAAAC,KAAA,4FACAxK,KAAA4uI,eAEA9lI,IAAA,SAAAG,GACAsB,QAAAC,KAAA,4FACAxK,KAAA4uI,cAAA3lI,0BC9rBAxK,EAAAC,QAAA,SAAAH,GAKAA,EAAA22I,eAAA,CAEAC,MAAA,CACAC,KAAA,cACAtjE,MAAA,qBACAujE,MAAA,qBACAC,UAAA,wBAEAC,OAAA,uBAEAj2E,SAAA,CACA3G,QAAA,CACA12B,KAAA,IACAh5B,MAAA,MAEAirD,IAAA,CACAjyB,KAAA,IACAh5B,MAAA,MAEAusI,cAAA,CACAvzG,KAAA,IACAh5B,MAAA,MAEAwsI,kBAAA,CACAxzG,KAAA,IACAh5B,MAAA,MAEAysI,kBAAA,CACAzzG,KAAA,IACAh5B,MAAA,OAGAs2D,aAAA,qBAAqC,8BAA+B,wBAAyB,gBAAiB,YAAa,6DAA8D,mCAAoC,gDAAiD,+CAAgD,KAAK5mC,KAAA,MACnU6mC,eAAA,8BAAgD,yBAA0B,+BAAgC,mCAAoC,mCAAoC,oBAAqB,8BAA+B,wBAAyB,8DAAgE,qDAG/T,8DAAgE,+BAAgC,IAAK,0CACrG,yGAA2G,uCAAwC,kCACnJ,sDAAwD,mCAAoC,0EAG5F,sCAAwC,mDAAoD,SAAU,IAAK,qCAC3G,gCAAkC,oEAAqE,IAAK,2DAA6D,0EAA4E,yCACrP,yCAA2C,qCAC3C,6BAA+B,+CAAgD,wBAAyB,sBAAuB,oEAC/H,iDACA,yCAA2C,qCAAsC,WACjF,yCAA2C,qCAAsC,IAAK,IAAK,+BAAgC,2FAC3H,wDAA0D,wFAC1D,4CACA,yEAA2E,QAC3E,cAAgB,aAAe,qFAAuF,4BAA6B,4BAA6B,uCAAwC,uCAAwC,2CAA4C,2CAA4C,oCAAqC,gGAAiG,kBAAmB,4DAA6D,iDAAkD,mCAAoC,IAAK,gBAAiB,8FAA+F,0CAA2C,KAAK7mC,KAAA,2BCxDzyBl6B,EAAAC,QAAA,SAAAH,GAMAA,EAAAo3I,iBAAA,WACA31I,KAAAgnC,GAAA,EACAhnC,KAAA4mB,OAAA,KACA5mB,KAAA4W,EAAA,EACA5W,KAAA4lC,YAAA,GAIArnC,EAAAm/H,eAAA,WACA19H,KAAAgnC,GAAA,EACAhnC,KAAAmZ,GAAA,IAAA5a,EAAA06H,iBACAj5H,KAAAye,GAAA,IAAAlgB,EAAA06H,iBACAj5H,KAAA26B,GAAA,IAAAp8B,EAAA06H,iBACAj5H,KAAA27H,YAAA,IAAAp9H,EAAA+a,QACAtZ,KAAA+7H,mBAAA,KAAAx9H,EAAA+a,QAAA,IAAA/a,EAAA+a,QAAA,IAAA/a,EAAA+a,SACAtZ,KAAA41I,oBAAA,EACA51I,KAAA2K,MAAA,IAAApM,EAAAmK,MACA1I,KAAAwoC,SAAA,KACAxoC,KAAAstC,IAAA,KAAA/uC,EAAAme,QAAA,IAAAne,EAAAme,QAAA,IAAAne,EAAAme,SACA1c,KAAA4W,EAAA,EACA5W,KAAA4lC,YAAA,GAIArnC,EAAA06H,iBAAA,WACAj5H,KAAAsnB,SAAA,IAAA/oB,EAAA+a,QACAtZ,KAAAw7H,cAAA,IAAAj9H,EAAA+a,QACAtZ,KAAA2uE,eAAA,IAAApwE,EAAAikB,QACAxiB,KAAAyjC,SAAA,GAGAllC,EAAA06H,iBAAAt5H,UAAAuJ,KAAA,SAAA6nC,GACA/wC,KAAAw7H,cAAAtyH,KAAA6nC,EAAAyqF,eACAx7H,KAAA2uE,eAAAzlE,KAAA6nC,EAAA49B,iBAIApwE,EAAAk/H,eAAA,WACAz9H,KAAAgnC,GAAA,EACAhnC,KAAAmZ,GAAA,IAAA5a,EAAA06H,iBACAj5H,KAAAye,GAAA,IAAAlgB,EAAA06H,iBACAj5H,KAAAipC,aAAA,KAAA1qC,EAAAmK,MAAA,IAAAnK,EAAAmK,OACA1I,KAAAwoC,SAAA,KACAxoC,KAAA4W,EAAA,EACA5W,KAAA4lC,YAAA,GAIArnC,EAAAi/H,iBAAA,WACAx9H,KAAAgnC,GAAA,EACAhnC,KAAA4mB,OAAA,KACA5mB,KAAAN,EAAA,EACAM,KAAA2W,EAAA,EACA3W,KAAA4W,EAAA,EACA5W,KAAAmlC,SAAA,EACAnlC,KAAAkvB,MAAA,IAAA3wB,EAAAme,QACA1c,KAAAwoC,SAAA,KACAxoC,KAAA4lC,YAAA,GAIArnC,EAAA0uG,UAAA,WACA,IAAA4oC,EACAC,EAGAC,EACAC,EAGAC,EACAC,EAGAC,EACAC,EAGAC,EACAC,EAgBAC,EA/BAC,EAAA,GACAC,EAAA,EAGAC,EAAA,GACAC,EAAA,EAGAC,EAAA,GACAC,EAAA,EAGAC,EAAA,GACAC,EAAA,EAGAC,EAAA,GACAC,EAAA,EACArgB,EAAA,CACA/xF,QAAA,GACA4/B,OAAA,GACAlsD,SAAA,IAEA+9D,EAAA,IAAA/3E,EAAA+a,QACA49H,EAAA,IAAA34I,EAAAikB,QACA82G,EAAA,IAAA/6H,EAAA4nB,KAAA,IAAA5nB,EAAA+a,SAAA,aAAA/a,EAAA+a,QAAA,QACA69H,EAAA,IAAA54I,EAAA4nB,KACAixH,EAAA,IAAAx4I,MAAA,GAEAy4I,GADA,IAAAz4I,MAAA,GACA,IAAAL,EAAA8hB,SACAi3H,EAAA,IAAA/4I,EAAA8hB,QAEAk3H,EAAA,IAAAh5I,EAAA8hB,QACAm3H,EAAA,IAAAj5I,EAAA2pB,QACA6tD,EAAA,IAAAx3E,EAAAs2B,QACA4iH,EAAA,IAAAl5I,EAAAikB,QACAk1H,EAAA,IAAAn5I,EAAAikB,QAGAxiB,KAAAktG,cAAA,SAAA9rF,EAAAhB,GACA7V,QAAAC,KAAA,8DACA4W,EAAAlB,QAAAE,IAGApgB,KAAAmtG,gBAAA,SAAA/rF,EAAAhB,GACA7V,QAAAC,KAAA,kEACA4W,EAAAV,UAAAN,IAGApgB,KAAAotG,WAAA,SAAAhsF,EAAAhB,GACA7V,QAAA2U,MAAA,qEAIA,IA4HA27D,EAAA,IA5HA,WACA,IAAAxtC,EAAA,GACAC,EAAA,GACA1mB,EAAA,KACA4hB,EAAA,KACAzQ,EAAA,IAAAx5B,EAAA2pB,QAUA,SAAAyvH,EAAA5mG,GACA,IAAAzpB,EAAAypB,EAAAzpB,SACAk0G,EAAAzqF,EAAAyqF,cACA7sD,EAAA59B,EAAA49B,eACA6sD,EAAAtyH,KAAAoe,GAAA/H,aAAAg3H,GACA5nE,EAAAzlE,KAAAsyH,GAAAj8G,aAAA+3H,GACA,IAAAM,EAAA,EAAAjpE,EAAA93D,EACA83D,EAAAjvE,GAAAk4I,EACAjpE,EAAAh4D,GAAAihI,EACAjpE,EAAA/3D,GAAAghI,EACA7mG,EAAAtN,QAAAkrC,EAAAjvE,IAAA,GAAAivE,EAAAjvE,GAAA,GAAAivE,EAAAh4D,IAAA,GAAAg4D,EAAAh4D,GAAA,GAAAg4D,EAAA/3D,IAAA,GAAA+3D,EAAA/3D,GAAA,EAmBA,SAAAihI,EAAA1+H,EAAAsF,EAAAkc,GACA,WAAAxhB,EAAAsqB,UAAA,IAAAhlB,EAAAglB,UAAA,IAAA9I,EAAA8I,UACA2zG,EAAA,GAAAj+H,EAAAw1D,eACAyoE,EAAA,GAAA34H,EAAAkwD,eACAyoE,EAAA,GAAAz8G,EAAAg0C,eACA2qD,EAAAzzG,cAAAsxH,EAAAryH,cAAAsyH,KAGA,SAAAU,EAAA3+H,EAAAsF,EAAAkc,GACA,OAAAA,EAAAg0C,eAAAjvE,EAAAyZ,EAAAw1D,eAAAjvE,IAAA+e,EAAAkwD,eAAAh4D,EAAAwC,EAAAw1D,eAAAh4D,IAAAgkB,EAAAg0C,eAAAh4D,EAAAwC,EAAAw1D,eAAAh4D,IAAA8H,EAAAkwD,eAAAjvE,EAAAyZ,EAAAw1D,eAAAjvE,GAAA,EA0DA,OACAq4I,UAzGA,SAAA9uI,GAEAu/B,GADA5hB,EAAA3d,GACAu/B,SACAzQ,EAAA5N,gBAAAvD,EAAAnG,aACA4sB,EAAAvuC,OAAA,EACAwuC,EAAAxuC,OAAA,GAqGA64I,gBACAE,0BACAC,uBACAE,WAxFA,SAAAt4I,EAAAiX,EAAAC,IACAm/H,EAAAkC,KAEA3wH,SAAAxe,IAAApJ,EAAAiX,EAAAC,GAEA+gI,EAAA5B,IAoFAmC,WAjFA,SAAAx4I,EAAAiX,EAAAC,GACAy2B,EAAA/Q,KAAA58B,EAAAiX,EAAAC,IAiFAuhI,OA9EA,SAAAz4I,EAAAiX,GACA22B,EAAAhR,KAAA58B,EAAAiX,IA8EAyhI,SA/DA,SAAAn+H,EAAApR,GACA,IAAAsQ,EAAAu9H,EAAAz8H,GACAwE,EAAAi4H,EAAA7tI,IACAstI,EAAAkC,KACArxG,GAAApgB,EAAAogB,GAEAmvG,EAAAh9H,GAAAjQ,KAAAiQ,GAEAg9H,EAAA13H,GAAAvV,KAAAuV,GAEA03H,EAAAv/H,GAAAuC,EAAAw1D,eAAA/3D,EAAA6H,EAAAkwD,eAAA/3D,GAAA,EACAu/H,EAAAvwG,YAAAhf,EAAAgf,YACAuwG,EAAA3tG,SAAA5hB,EAAA4hB,SAEAouF,EAAAr+G,SAAA+jB,KAAA65G,IAkDAmC,aA/CA,SAAAr+H,EAAApR,EAAAqE,GACA,IAAAiM,EAAAu9H,EAAAz8H,GACAwE,EAAAi4H,EAAA7tI,GACA8xB,EAAA+7G,EAAAxpI,GACA,QAAA2qI,EAAA1+H,EAAAsF,EAAAkc,KAEA6N,EAAAmyB,OAAAp8D,EAAAqD,aAAA,IAAAk2I,EAAA3+H,EAAAsF,EAAAkc,IAAA,EACAs7G,EAAAsC,KACAvxG,GAAApgB,EAAAogB,GAEAivG,EAAA98H,GAAAjQ,KAAAiQ,GAEA88H,EAAAx3H,GAAAvV,KAAAuV,GAEAw3H,EAAAt7G,GAAAzxB,KAAAyxB,GAEAs7G,EAAAr/H,GAAAuC,EAAAw1D,eAAA/3D,EAAA6H,EAAAkwD,eAAA/3D,EAAA+jB,EAAAg0C,eAAA/3D,GAAA,EACAq/H,EAAArwG,YAAAhf,EAAAgf,YAEAqwG,EAAAta,YAAAxuH,UAAAkgC,EAAA,EAAApzB,GAEAg8H,EAAAta,YAAAt8G,aAAA0Y,GAAAre,YAEA,QAAAuL,EAAA,EAAyBA,EAAA,EAAOA,IAAA,CAChC,IAAAzD,EAAAy0H,EAAAla,mBAAA92G,GACAzD,EAAArU,UAAAkgC,EAAA,EAAA7sC,UAAAykB,IACAzD,EAAAnC,aAAA0Y,GAAAre,YACAu8H,EAAA3oG,IAAAroB,GACA9X,UAAAmgC,EAAA,EAAA9sC,UAAAykB,IAGAgxH,EAAAL,oBAAA,EACAK,EAAAztG,SAAA5hB,EAAA4hB,SAEAouF,EAAAr+G,SAAA+jB,KAAA25G,OAiVA,SAAAgC,IACA,GAAAjC,IAAAW,EAAA,CACA,IAAA5lG,EAAA,IAAAxyC,EAAA06H,iBAMA,OAJAyd,EAAAp6G,KAAAyU,GAEA4lG,IACAX,IACAjlG,EAGA,OAAA2lG,EAAAV,KAGA,SAAAuC,IACA,GAAArC,IAAAW,EAAA,CACA,IAAA9pG,EAAA,IAAAxuC,EAAAm/H,eAMA,OAJAkZ,EAAAt6G,KAAAyQ,GAEA8pG,IACAX,IACAnpG,EAGA,OAAA6pG,EAAAV,KAGA,SAAAmC,IACA,GAAAjC,IAAAW,EAAA,CACA,IAAA/yH,EAAA,IAAAzlB,EAAAk/H,eAMA,OAJAqZ,EAAAx6G,KAAAtY,GAEA+yH,IACAX,IACApyH,EAGA,OAAA8yH,EAAAV,KAGA,SAAAoC,IACA,GAAAlC,IAAAW,EAAA,CACA,IAAApgH,EAAA,IAAAt4B,EAAAi/H,iBAMA,OAJAwZ,EAAA16G,KAAAzF,GAEAogH,IACAX,IACAz/G,EAGA,OAAAmgH,EAAAV,KAIA,SAAAmC,EAAAx+H,EAAApR,GACA,OAAAoR,EAAA2rB,cAAA/8B,EAAA+8B,YACA3rB,EAAA2rB,YAAA/8B,EAAA+8B,YACO3rB,EAAArD,IAAA/N,EAAA+N,EACP/N,EAAA+N,EAAAqD,EAAArD,EACOqD,EAAA+sB,KAAAn+B,EAAAm+B,GACP/sB,EAAA+sB,GAAAn+B,EAAAm+B,GAEA,EAIA,SAAA0xG,EAAA9gI,EAAAE,GACA,IAAA6gI,EAAA,EACAC,EAAA,EAGAC,EAAAjhI,EAAAhB,EAAAgB,EAAAf,EACAiiI,EAAAhhI,EAAAlB,EAAAkB,EAAAjB,EACAkiI,GAAAnhI,EAAAhB,EAAAgB,EAAAf,EACAmiI,GAAAlhI,EAAAlB,EAAAkB,EAAAjB,EAEA,OAAAgiI,GAAA,GAAAC,GAAA,GAAAC,GAAA,GAAAC,GAAA,KAGOH,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,KAKPH,EAAA,EAEAF,EAAAp5I,KAAA2M,IAAAysI,EAAAE,KAAAC,IACSA,EAAA,IAETF,EAAAr5I,KAAAsL,IAAA+tI,EAAAC,KAAAC,KAGAC,EAAA,EAEAJ,EAAAp5I,KAAA2M,IAAAysI,EAAAI,KAAAC,IACSA,EAAA,IAETJ,EAAAr5I,KAAAsL,IAAA+tI,EAAAG,KAAAC,OAGAJ,EAAAD,KAOA/gI,EAAA7K,KAAA+K,EAAA6gI,GACA7gI,EAAA/K,KAAA6K,EAAA,EAAAghI,IACA,IA9aA54I,KAAAo9H,aAAA,SAAAjsE,EAAA/wC,EAAA6zD,EAAAgpD,GACAiZ,EAAA,EACAE,EAAA,EACAE,EAAA,EACA1f,EAAAr+G,SAAAzZ,OAAA,GACA,IAAAqyD,EAAAie,YAAAje,EAAArqC,oBACA,OAAA1G,EAAA6kB,QAAA7kB,EAAA0G,oBAEAuwH,EAAAnuI,KAAAkX,EAAA8vC,mBAAA1vC,WAAAJ,EAAAK,cAEA62H,EAAAh3H,iBAAAF,EAAAG,iBAAA82H,GAEAthE,EAAAxgD,cAAA+hH,GAGAxB,EAAA,EACAlf,EAAA/xF,QAAA/lC,OAAA,EACA83H,EAAAnyD,OAAA3lE,OAAA,EACAqyD,EAAA3pB,gBAAA,SAAA5gB,GACA,GAAAA,aAAAroB,EAAAm1D,MACAkjE,EAAAnyD,OAAAnoC,KAAA1V,QACS,GAAAA,aAAAroB,EAAAulC,MAAAld,aAAAroB,EAAAwlC,MAAAnd,aAAAroB,EAAA4lC,OAAA,CAET,QADAvd,EAAA4hB,SACA/E,QAAA,QAEA,IAAA7c,EAAA+e,gBAAA,IAAAowC,EAAAt/C,iBAAA7P,MACAivH,EAsRA,WACA,GAAAC,IAAAW,EAAA,CACA,IAAA7vH,EAAA,IAAAroB,EAAAo3I,iBAMA,OAJAa,EAAAl6G,KAAA1V,GAEA6vH,IACAX,IACAlvH,EAGA,OAAA4vH,EAAAV,KAjSAmD,IACAjyG,GAAApgB,EAAAogB,GACA6uG,EAAAjvH,SAEA0vD,EAAAr0D,sBAAA2E,EAAAnG,aAEA61D,EAAA92D,gBAAA83H,GAEAzB,EAAAj/H,EAAA0/D,EAAA1/D,EACAi/H,EAAAjwG,YAAAhf,EAAAgf,YAEAgxF,EAAA/xF,QAAAvI,KAAAu5G,QAKA,IAAA5hE,GACA2iD,EAAA/xF,QAAAF,KAAA8zG,GAIA,QAAAh8F,EAAA,EAAA0vE,EAAAyK,EAAA/xF,QAAA/lC,OAAsD29C,EAAA0vE,EAAQ1vE,IAAA,CAC9D,IAAA71B,EAAAgwG,EAAA/xF,QAAA4X,GAAA71B,OACAK,EAAAL,EAAAK,SAKA,GAJA4zD,EAAAk9D,UAAAnxH,GACA2vH,EAAA3vH,EAAAnG,YACAu1H,EAAA,EAEApvH,aAAAroB,EAAAulC,MACA,GAAA7c,aAAA1oB,EAAA6oB,eAAA,CACA,IAAAC,EAAAJ,EAAAI,WACAymB,EAAA7mB,EAAA6mB,OACA,QAAA1uC,IAAAioB,EAAAC,SAAA,SAGA,IAFA,IAEArC,EAAA,EAAAjb,GAFAojC,GAAA/lB,EAAAC,SAAAla,OAEAtO,OAAiDmmB,EAAAjb,EAAOib,GAAA,EACxD41D,EAAAm9D,WAAA5qG,GAAAnoB,GAAAmoB,GAAAnoB,EAAA,GAAAmoB,GAAAnoB,EAAA,IAGA,QAAA7lB,IAAAioB,EAAA7F,OACA,KAAA6rB,EAAAhmB,EAAA7F,OAAApU,MAEA,IAAA6X,EAAA,EAAAjb,EAAAqjC,EAAAvuC,OAAiDmmB,EAAAjb,EAAOib,GAAA,EACxD41D,EAAAq9D,WAAA7qG,EAAApoB,GAAAooB,EAAApoB,EAAA,GAAAooB,EAAApoB,EAAA,IAIA,QAAA7lB,IAAAioB,EAAAkmB,GACA,KAAAD,EAAAjmB,EAAAkmB,GAAAngC,MAEA,IAAA6X,EAAA,EAAAjb,EAAAsjC,EAAAxuC,OAA6CmmB,EAAAjb,EAAOib,GAAA,EACpD41D,EAAAs9D,OAAA7qG,EAAAroB,GAAAqoB,EAAAroB,EAAA,IAIA,UAAAgC,EAAA1mB,MAAA,CACA,IAAAypC,EAAA/iB,EAAA1mB,MAAA6M,MAEA,GAAA0gC,EAAAhvC,OAAA,EACA,IAAA29C,EAAA,EAA+BA,EAAA3O,EAAAhvC,OAAmB29C,IAClD,KAAA1O,EAAAD,EAAA2O,GAEA,IAAAx3B,EAAA8oB,EAAAjqB,MAAA9Z,EAAA+jC,EAAAjqB,MAAAiqB,EAAAzE,MAA0ErkB,EAAAjb,EAAOib,GAAA,EACjF41D,EAAAy9D,aAAAtuG,EAAA/kB,GAAA+kB,EAAA/kB,EAAA,GAAA+kB,EAAA/kB,EAAA,SAIA,IAAAA,EAAA,EAAAjb,EAAAggC,EAAAlrC,OAAmDmmB,EAAAjb,EAAOib,GAAA,EAC1D41D,EAAAy9D,aAAAtuG,EAAA/kB,GAAA+kB,EAAA/kB,EAAA,GAAA+kB,EAAA/kB,EAAA,SAIA,IAAAA,EAAA,EAAAjb,EAAAojC,GAAAtuC,OAAA,EAAuDmmB,EAAAjb,EAAOib,GAAA,EAC9D41D,EAAAy9D,aAAArzH,IAAA,EAAAA,EAAA,QAGW,GAAAgC,aAAA1oB,EAAA2oB,SAAA,CACX,IAAAC,EAAAF,EAAAE,SACA6kB,EAAA/kB,EAAA+kB,MACAC,EAAAhlB,EAAAglB,cAAA,GAEAurG,EAAArtH,gBAAAosH,GAMA,IAJA,IAAA/tG,EAAA5hB,EAAA4hB,SACA+jC,EAAA/jC,aAAAjqC,EAAAipE,cACA0xE,GAAA,IAAA3sE,EAAA3lD,EAAA4hB,SAAA,KAEA3uB,EAAA,EAAA40B,GAAAtnB,EAAAroB,OAAiD+a,EAAA40B,GAAQ50B,IAAA,CACzD,IAAAk3B,GAAA5pB,EAAAtN,GAIA,GAFAy8D,EAAAptE,KAAA6nC,KAEA,IAAAvI,EAAA0D,aAIA,IAHA,IAAAA,GAAAjlB,EAAAilB,aACAugC,GAAA7lD,EAAAqkD,sBAEAphE,GAAA,EAAA6iE,GAAAxgC,GAAAptC,OAAyD+K,GAAA6iE,GAAQ7iE,KAAA,CACjE,IAAA8iE,GAAAF,GAAA5iE,IACA,OAAA8iE,GAAA,CACA,IACAwsE,GADAjtG,GAAAriC,IACAsd,SAAAtN,GACAy8D,EAAA52E,IAAAy5I,GAAAz5I,EAAAqxC,GAAArxC,GAAAitE,GACA2J,EAAA3/D,IAAAwiI,GAAAxiI,EAAAo6B,GAAAp6B,GAAAg2D,GACA2J,EAAA1/D,IAAAuiI,GAAAviI,EAAAm6B,GAAAn6B,GAAA+1D,IAIAkO,EAAAm9D,WAAA1hE,EAAA52E,EAAA42E,EAAA3/D,EAAA2/D,EAAA1/D,GAGA,QAAA6F,GAAA,EAAA0xB,GAAAnC,EAAAltC,OAA8C2d,GAAA0xB,GAAQ1xB,KAAA,CACtD,IAAAswB,GAAAf,EAAAvvB,IAEA,QAAArd,KADAopC,GAAA,IAAA+jC,EAAA2sE,EAAAlxG,UAAA+E,GAAAhE,eAAAniB,EAAA4hB,UACA,CACA,IAAAmyB,GAAAnyB,EAAAmyB,KACAxhD,GAAAu9H,EAAA3pG,GAAA9yB,GACAwE,GAAAi4H,EAAA3pG,GAAAlkC,GACA8xB,GAAA+7G,EAAA3pG,GAAA7/B,GACA,QAAA2tE,EAAAg9D,wBAAA1+H,GAAAsF,GAAAkc,IAAA,CACA,IAAA8I,GAAAo3C,EAAAi9D,qBAAA3+H,GAAAsF,GAAAkc,IAEA,GAAAggC,KAAAp8D,EAAAqD,WAAA,CACA,GAAA+4D,KAAAp8D,EAAAmD,YAAA,IAAA+hC,GAAA,SACA,GAAAk3B,KAAAp8D,EAAAoD,WAAA,IAAA8hC,GAAA,UAGAwyG,EAAAsC,KACAvxG,GAAApgB,EAAAogB,GAEAivG,EAAA98H,GAAAjQ,KAAAiQ,IAEA88H,EAAAx3H,GAAAvV,KAAAuV,IAEAw3H,EAAAt7G,GAAAzxB,KAAAyxB,IAEAs7G,EAAAta,YAAAzyH,KAAA6jC,GAAAvrB,SAEA,IAAAiiB,IAAAk3B,KAAAp8D,EAAAoD,UAAAg5D,KAAAp8D,EAAAqD,YACAq0I,EAAAta,YAAA59G,SAGAk4H,EAAAta,YAAAt8G,aAAAm4H,GAAA99H,YAIA,IAFA,IAAAo2B,GAAA/C,GAAA/D,cAEAnc,GAAA,EAAAusH,GAAA75I,KAAAsL,IAAAilC,GAAAhxC,OAAA,GAAyE+tB,GAAAusH,GAAQvsH,KAAA,CACjF,IAAA8uG,GAAAsa,EAAAla,mBAAAlvG,IACA8uG,GAAAzyH,KAAA4mC,GAAAjjB,MAEA,IAAA4W,IAAAk3B,KAAAp8D,EAAAoD,UAAAg5D,KAAAp8D,EAAAqD,YACA+5H,GAAA59G,SAGA49G,GAAAt8G,aAAAm4H,GAAA99H,YAGAu8H,EAAAL,oBAAA9lG,GAAAhxC,OACA,IAAA8zC,GAAA3G,EAAAxvB,IAEA,QAAArd,IAAAwzC,GACA,QAAA3V,GAAA,EAA+BA,GAAA,EAAOA,KACtCg5G,EAAA3oG,IAAArQ,IAAA/zB,KAAA0pC,GAAA3V,KAIAg5G,EAAAtrI,MAAAoiC,GAAApiC,MACAsrI,EAAAztG,WACAytG,EAAAr/H,GAAAuC,GAAAw1D,eAAA/3D,EAAA6H,GAAAkwD,eAAA/3D,EAAA+jB,GAAAg0C,eAAA/3D,GAAA,EACAq/H,EAAArwG,YAAAhf,EAAAgf,YAEAgxF,EAAAr+G,SAAA+jB,KAAA25G,YAGS,GAAArvH,aAAAroB,EAAAwlC,KAAA,CACT,GAAA9c,aAAA1oB,EAAA6oB,gBAGA,QAAAhoB,KAFAioB,EAAAJ,EAAAI,YAEAC,SAAA,CACA,IAAA8lB,GAEA,IAAAnoB,EAAA,EAAAjb,GAFAojC,GAAA/lB,EAAAC,SAAAla,OAEAtO,OAAmDmmB,EAAAjb,EAAOib,GAAA,EAC1D41D,EAAAm9D,WAAA5qG,GAAAnoB,GAAAmoB,GAAAnoB,EAAA,GAAAmoB,GAAAnoB,EAAA,IAGA,UAAAgC,EAAA1mB,MAGA,IAAA0kB,EAAA,EAAAjb,GAFAggC,EAAA/iB,EAAA1mB,MAAA6M,OAEAtO,OAAmDmmB,EAAAjb,EAAOib,GAAA,EAC1D41D,EAAAu9D,SAAApuG,EAAA/kB,GAAA+kB,EAAA/kB,EAAA,QAGA,KAAAylD,GAAA9jD,aAAAroB,EAAA6rE,aAAA,IAEA,IAAAnlD,EAAA,EAAAjb,EAAAojC,GAAAtuC,OAAA,IAA6DmmB,EAAAjb,EAAOib,GAAAylD,GACpEmQ,EAAAu9D,SAAAnzH,IAAA,UAIW,GAAAgC,aAAA1oB,EAAA2oB,SAAA,CAIX,GAHAqwH,EAAAj3H,iBAAAg3H,EAAAf,GAGA,KADApvH,EAAAP,EAAAK,SAAAE,UACAroB,OAAA,UACAqa,GAAA8+H,KACAtpE,eAAAzlE,KAAAie,EAAA,IAAA5H,aAAAg4H,GAGA,IAFA7sE,GAAA9jD,aAAAroB,EAAA6rE,aAAA,IAEAvwD,EAAA,EAAA40B,GAAAtnB,EAAAroB,OAAiD+a,EAAA40B,GAAQ50B,KACzDV,GAAA8+H,KACAtpE,eAAAzlE,KAAAie,EAAAtN,IAAA0F,aAAAg4H,IACA19H,EAAA,GAAA6wD,GAAA,IACAjsD,GAAAi4H,EAAAV,EAAA,GAEAyB,EAAAvuI,KAAAiQ,GAAAw1D,gBAEA+oE,EAAAxuI,KAAAuV,GAAAkwD,iBAEA,IAAA+pE,EAAAjB,EAAAC,KAEAD,EAAA3qI,eAAA,EAAA2qI,EAAA5gI,GAEA6gI,EAAA5qI,eAAA,EAAA4qI,EAAA7gI,IAEAs/H,EAAAkC,KACArxG,GAAApgB,EAAAogB,GAEAmvG,EAAAh9H,GAAAw1D,eAAAzlE,KAAAuuI,GAEAtB,EAAA13H,GAAAkwD,eAAAzlE,KAAAwuI,GAEAvB,EAAAv/H,EAAArX,KAAA2M,IAAAurI,EAAA7gI,EAAA8gI,EAAA9gI,GACAu/H,EAAAvwG,YAAAhf,EAAAgf,YACAuwG,EAAA3tG,SAAA5hB,EAAA4hB,SAEA5hB,EAAA4hB,SAAAS,eAAA1qC,EAAA0D,eACAk0I,EAAAltG,aAAA,GAAA//B,KAAA0d,EAAAK,SAAA6iB,OAAAjwB,IAEAs8H,EAAAltG,aAAA,GAAA//B,KAAA0d,EAAAK,SAAA6iB,OAAAjwB,EAAA,KAGA+8G,EAAAr+G,SAAA+jB,KAAA65G,WAIS,GAAAvvH,aAAAroB,EAAA4lC,OAAA,CACT+yG,EAAApuI,IAAAytI,EAAAh+H,SAAA,IAAAg+H,EAAAh+H,SAAA,IAAAg+H,EAAAh+H,SAAA,OAEA2+H,EAAA33H,aAAA+3H,GAEA,IAAAM,GAAA,EAAAV,EAAArgI,EACAqgI,EAAAtgI,GAAAghI,GAEAV,EAAAtgI,IAAA,GAAAsgI,EAAAtgI,GAAA,KACAy/H,EAAAmC,KACAxxG,GAAApgB,EAAAogB,GACAqvG,EAAA32I,EAAAw3I,EAAAx3I,EAAAk4I,GACAvB,EAAA1/H,EAAAugI,EAAAvgI,EAAAihI,GACAvB,EAAAz/H,EAAAsgI,EAAAtgI,EACAy/H,EAAAzwG,YAAAhf,EAAAgf,YACAywG,EAAAzvH,SACAyvH,EAAAlxG,SAAAve,EAAAue,SACAkxG,EAAAnnH,MAAAxvB,EAAAknB,EAAAsI,MAAAxvB,EAAAH,KAAAia,IAAA68H,EAAA32I,GAAAw3I,EAAAx3I,EAAA0gB,EAAAG,iBAAAhI,SAAA,KAAA2+H,EAAArgI,EAAAuJ,EAAAG,iBAAAhI,SAAA,MACA89H,EAAAnnH,MAAAvY,EAAAiQ,EAAAsI,MAAAvY,EAAApX,KAAAia,IAAA68H,EAAA1/H,GAAAugI,EAAAvgI,EAAAyJ,EAAAG,iBAAAhI,SAAA,KAAA2+H,EAAArgI,EAAAuJ,EAAAG,iBAAAhI,SAAA,MACA89H,EAAA7tG,SAAA5hB,EAAA4hB,SAEAouF,EAAAr+G,SAAA+jB,KAAA+5G,KASA,OAJA,IAAApZ,GACArG,EAAAr+G,SAAAosB,KAAA8zG,GAGA7hB,wBCtiBAn4H,EAAAC,QAAA,SAAAH,GAYAA,EAAA86I,eAAA,CACA/5E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA85G,OAAA,CACA9gF,KAAA,IACAh5B,MAAA,MAEAkP,MAAA,CACA8pB,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,wBAAyB,uBAAwB,oBAAqB,gBAAiB,wDAAyD,+CAAgD,uCAAwC,+CAAgD,iDAAkD,KAAK7mC,KAAA,2BC5BhYl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAA+6I,WAAA,SAAAnoF,EAAA/wC,EAAA+uD,EAAA6J,EAAA8e,GACA93F,KAAAmxD,QACAnxD,KAAAogB,SACApgB,KAAAmvE,mBACAnvE,KAAAg5E,aACAh5E,KAAA83F,gBAAA14F,IAAA04F,IAAA,EACA93F,KAAAu5I,cAAA,IAAAh7I,EAAAmK,MACA1I,KAAAw5I,cAAA,EACAx5I,KAAA6xC,SAAA,EACA7xC,KAAA61D,OAAA,EACA71D,KAAA+xH,WAAA,GAGAxzH,EAAA+6I,WAAA35I,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAmxD,MAAAge,iBAAAnvE,KAAAmvE,iBAEAnvE,KAAAg5E,aACAh5E,KAAAu5I,cAAArwI,KAAAgoD,EAAA+xB,iBACAjjF,KAAAw5I,cAAAtoF,EAAAiyB,gBACAjyB,EAAAgyB,cAAAljF,KAAAg5E,WAAAh5E,KAAA83F,aAGA5mC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA8xG,EAAAlyH,KAAA61D,OAEA71D,KAAAg5E,YACA9nB,EAAAgyB,cAAAljF,KAAAu5I,cAAAv5I,KAAAw5I,eAGAx5I,KAAAmxD,MAAAge,iBAAA,2BCjCA1wE,EAAAC,QAAA,SAAAH,GAaAA,EAAAk7I,WAAA,CACAn6E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAssH,OAAA,CACAtzF,KAAA,IACAh5B,MAAA,MAEA8B,KAAA,CACAk3B,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,UAEAg9H,WAAA,CACAz3G,KAAA,IACAh5B,MAAA,GAEA0wI,UAAA,CACA13G,KAAA,IACAh5B,MAAA,KAEA2wI,OAAA,CACA33G,KAAA,IACAh5B,MAAA,GAEA4wI,QAAA,CACA53G,KAAA,IACAh5B,MAAA,IAEA6wI,aAAA,CACA73G,KAAA,IACAh5B,MAAA,KAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,6BAA+C,2BAA4B,uBAC3E,qBACA,yBACA,8BACA,8BAAgC,4BAA6B,oBAC7D,+BACA,kCACA,yBACA,4BACA,+BACA,oCACA,8BACA,+BAEA,kDAAoD,6GAA8G,8CAA+C,gBAAiB,IAClO,kCAAoC,cAAe,oBAAqB,qDAAsD,2DAA4D,2EAA4E,WAAY,wDAAyD,kDAAmD,qEAAsE,IAAK,+CAAgD,IAAK,2CAA4C,oDAAqD,qDAAsD,uCACrpB,8GAAgH,IAAK,uFAAwF,qBAC7M,4CAEA,4BAA8B,oBAAqB,WAAY,WAAY,IAAK,+BAAgC,kEAAmE,gBAAiB,IAAK,oDAAqD,sCAAuC,4BAA6B,+BAAgC,+BAAgC,qBAAsB,qBAAsB,eAAgB,4DAC9b,mBAAqB,4DAA6D,oCAAqC,IAAK,gBAAiB,IAAK,gBAAiB,4BAA6B,kCAAmC,2CAA4C,sEAAuE,qEAAsE,kBAAmB,qCAAsC,4BAA6B,iBAAkB,0CAA2C,6BAA8B,2BAA4B,2BAA4B,yCAA0C,cAAe,cAAe,IAAK,0BAA2B,iBAAkB,+CAAgD,+CAAgD,0CAA2C,gCAAiC,yFAC36B,kBAAoB,4EACpB,IAAM,qCAAsC,KAAK7mC,KAAA,2BCvEjDl6B,EAAAC,QAAA,SAAAH,GAKAA,EAAAw7I,UAAA,SAAAhlF,GACA/0D,KAAA+0D,aAAA31D,IAAA21D,IAAAx2D,EAAAy2D,uBAGAz2D,EAAAw7I,UAAAp6I,UAAA,CACAqJ,YAAAzK,EAAAw7I,UACA9kF,KAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,IACA2kF,EAAA,IAAAC,UACA,IAAA17I,EAAAg3D,UAFAv1D,KAEA+0D,SACAE,KAAAC,EAAA,SAAAglF,GACA,IAAAC,EAAAH,EAAAI,gBAAAF,EAAA,iBAEA/kF,EAAAglF,EAAAE,kBACOjlF,EAAAC,yBCnBP52D,EAAAC,QAAA,SAAAH,GAIAA,EAAA+7I,SAAA,SAAAvpF,QACA3xD,IAAAb,EAAAyyH,YAAAzmH,QAAA2U,MAAA,6CACA,IAAAm9D,EAAA99E,EAAAyyH,WACAhxH,KAAAu6I,UAAA,WACAv6I,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,UACAt/D,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,iBAEAx/D,KAAA+wD,oBAEA3xD,IAAAY,KAAA+wD,eACA/wD,KAAAw6I,uBAAA,CACA1pF,UAAAvyD,EAAA+G,aACAurD,UAAAtyD,EAAA+G,aACAsrD,OAAAryD,EAAA8H,UACAqkF,eAAA,GAEA1qF,KAAA+wD,aAAA,IAAAxyD,EAAA2/E,kBAAA1vB,OAAAimE,WAAAjmE,OAAAkmE,YAAA10H,KAAAw6I,yBAGAx6I,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAA61D,OAAA,EACA71D,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAA+7I,SAAA36I,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAs/D,SAAAt/D,KAAAu6I,aACAv6I,KAAAs/D,SAAAt/D,KAAAu6I,WAAAtxI,MAAAipH,GAGAlyH,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SACA0oB,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAApgB,KAAA+wD,aAAA/wD,KAAA61D,6BC1CAp3D,EAAAC,QAAA,SAAAH,GAQAA,EAAAk8I,YAAA,CACAn7E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA85G,OAAA,CACA9gF,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,yBAA2C,8BAA+B,oBAAqB,gBAAiB,2CAA4C,sBAAuB,oFAAqF,oFAAqF,oFAAqF,iEAAkE,KAAK7mC,KAAA,2BCpBzfl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAuiI,WAAA,SAAAzkD,EAAAk+D,GACAv6I,KAAAu6I,eAAAn7I,IAAAm7I,IAAA,WACAv6I,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,UACAt/D,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACAT,QAAAoV,EAAApV,SAAA,GACA3H,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,iBAEAx/D,KAAAk1H,gBAAA,EACAl1H,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAA61D,OAAA,EACA71D,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAAuiI,WAAAnhI,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAs/D,SAAAt/D,KAAAu6I,aACAv6I,KAAAs/D,SAAAt/D,KAAAu6I,WAAAtxI,MAAAipH,GAGAlyH,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SAEAxoC,KAAAk1H,eACAhkE,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,QAEA8wC,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA6xG,EAAAjyH,KAAA61D,6BClCAp3D,EAAAC,QAAA,SAAAH,GASAA,EAAAm8I,kBAAA,CACAp7E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,OAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,gBAAiB,0DAA2D,8EAA+E,yBAA0B,KAAK7mC,KAAA,2BCjBhQl6B,EAAAC,QAAA,SAAAH,GAIAA,EAAAo8I,YAAA,SAAAtpF,EAAAuJ,QACAx7D,IAAAb,EAAAyyH,YAAAzmH,QAAA2U,MAAA,gDACA,IAAAm9D,EAAA99E,EAAAyyH,WACAhxH,KAAAs/D,SAAA/gE,EAAA4pE,cAAAj9D,MAAAmxE,EAAA/c,UACAt/D,KAAAs/D,SAAA,QAAAr2D,WAAA7J,IAAAw7D,IAAA,EACA56D,KAAAs/D,SAAA,SAAAr2D,MAAAooD,EACArxD,KAAAwoC,SAAA,IAAAjqC,EAAAmpE,eAAA,CACApI,SAAAt/D,KAAAs/D,SACAC,aAAA8c,EAAA9c,aACAC,eAAA6c,EAAA7c,iBAEAx/D,KAAA6xC,SAAA,EACA7xC,KAAA+xH,WAAA,EACA/xH,KAAAogB,OAAA,IAAA7hB,EAAAkmC,oBAAA,cACAzkC,KAAAmxD,MAAA,IAAA5yD,EAAAwkE,MACA/iE,KAAAgyH,KAAA,IAAAzzH,EAAAulC,KAAA,IAAAvlC,EAAAm6E,oBAAA,WACA14E,KAAAmxD,MAAA5kD,IAAAvM,KAAAgyH,OAGAzzH,EAAAo8I,YAAAh7I,UAAA,CACA4xD,OAAA,SAAAL,EAAA+gE,EAAAC,EAAA9lH,GACApM,KAAAgyH,KAAAxpF,SAAAxoC,KAAAwoC,SACA0oB,EAAAK,OAAAvxD,KAAAmxD,MAAAnxD,KAAAogB,OAAA8xG,yBC1BAzzH,EAAAC,QAAA,SAAAH,GAMAA,EAAAszH,cAAA,CACAvyD,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA6pH,iBAAA,CACA7wF,KAAA,IACAh5B,MAAA,GAEAopH,aAAA,CACApwF,KAAA,IACAh5B,MAAA,MAEA0pH,aAAA,CACA1wF,KAAA,IACAh5B,MAAA,IAEA+pH,WAAA,CACA/wF,KAAA,IACAh5B,MAAA,KAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,oBAAqB,4BAA6B,8BAA+B,6DAA+D,0CAA4C,+DAAiE,gCAAiC,2BAC/U,6DAA+D,4CAA8C,SAC7G,8CACA,yDAA2D,mHAAoH,kCAAmC,IAAK,gBAAiB,2CAA4C,wDAAyD,KAAK7mC,KAAA,2BCjClVl6B,EAAAC,QAAA,SAAAH,GAYAA,EAAAq8I,mBAAA,CACAt7E,SAAA,CACAjO,QAAA,CACApvB,KAAA,IACAh5B,MAAA,MAEAmD,MAAA,CACA61B,KAAA,KACAh5B,MAAA,IAAA1K,EAAAme,QAAA,OAGA6iD,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,wDAA2E,sBAAuB,oBAAqB,2CACvH,oFAAsF,IAAK,gBAAiB,4BAA6B,qBACzI,mEAAqE,yDAA0D,qDAAsD,uCAAwC,iEAAkE,mBAAoB,IAAK,gCAAiC,KAAK7mC,KAAA,2BC1B9Vl6B,EAAAC,QAAA,SAAAH,GAOAA,EAAAs8I,sBAAA,CACAv7E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA2xD,QAAA,CACA34B,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,0BAA4C,8BAA+B,oBAC3E,kDAAoD,6GAA8G,8CAA+C,gBAAiB,IAAK,gBAAiB,iEAAkE,uDAAwD,KAAK7mC,KAAA,2BCpBvXl6B,EAAAC,QAAA,SAAAH,GAYAA,EAAAu8I,mBAAA,CACAx7E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA4Q,EAAA,CACAooB,KAAA,IACAh5B,MAAA,QAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,mBAAoB,oBAAqB,gBAAiB,0BAA2B,wEAAyE,yEAA0E,0EAA2E,yEAA0E,+DAAgE,yEAA0E,0EAA2E,yEAA0E,wEAAyE,sBAAuB,KAAK7mC,KAAA,2BCxBlzBl6B,EAAAC,QAAA,SAAAH,GAWAA,EAAAw8I,wBAAA,CACAz7E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEA4Q,EAAA,CACAooB,KAAA,IACAh5B,MAAA,OAEAN,EAAA,CACAs5B,KAAA,IACAh5B,MAAA,MAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,+BAAiD,mBAAoB,mBAAoB,oBAAqB,gBAAiB,0BAA2B,mCAAoC,yEAA0E,0EAA2E,2EAA4E,0EAA2E,+DAAgE,0EAA2E,2EAA4E,0EAA2E,yEAA0E,sBAAuB,KAAK7mC,KAAA,2BC3Bl3Bl6B,EAAAC,QAAA,SAAAH,GAQAA,EAAAy8I,eAAA,CACA17E,SAAA,CACA8yD,SAAA,CACAnwF,KAAA,IACAh5B,MAAA,MAEAoE,OAAA,CACA40B,KAAA,IACAh5B,MAAA,GAEAgyI,SAAA,CACAh5G,KAAA,IACAh5B,MAAA,IAGAs2D,aAAA,qBAAqC,gBAAiB,YAAa,4EAA6E,KAAK5mC,KAAA,MACrJ6mC,eAAA,yBAA2C,0BAA2B,8BAA+B,oBAAqB,gBAC1H,2CAA6C,oDAAqD,2FASlG,KAAM7mC,KAAA","file":"static/js/20.9bc3eabd.chunk.js","sourcesContent":["(function (self) {\n  var THREE = require(\"./three.js\");\n\n  module.exports = function (addons) {\n    if (addons instanceof Array) {\n      for (var addonIndex = 0, length = addons.length; addonIndex < length; addonIndex++) {\n        var addon = addons[addonIndex];\n\n        if (addon instanceof Function) {\n          addon(THREE);\n        } else if (typeof addon === \"string\") {\n          require(\"./addons/\" + addon + \".js\")(THREE);\n        } else {\n          throw new Error(\"Invalid module type provided\");\n        }\n\n        ;\n      }\n\n      ;\n    }\n\n    ;\n    return THREE;\n  };\n})(this || {});","(function (self) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n  var THREE = {\n    REVISION: '79'\n  }; // Polyfills\n\n  if (Number.EPSILON === undefined) {\n    Number.EPSILON = Math.pow(2, -52);\n  } //\n\n\n  if (Math.sign === undefined) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\n    Math.sign = function (x) {\n      return x < 0 ? -1 : x > 0 ? 1 : +x;\n    };\n  }\n\n  if (Function.prototype.name === undefined) {\n    // Missing in IE9-11.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\n    Object.defineProperty(Function.prototype, 'name', {\n      get: function get() {\n        return this.toString().match(/^\\s*function\\s*(\\S*)\\s*\\(/)[1];\n      }\n    });\n  }\n\n  if (Object.assign === undefined) {\n    // Missing in IE.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    (function () {\n      Object.assign = function (target) {\n        'use strict';\n\n        if (target === undefined || target === null) {\n          throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n          var source = arguments[index];\n\n          if (source !== undefined && source !== null) {\n            for (var nextKey in source) {\n              if (Object.prototype.hasOwnProperty.call(source, nextKey)) {\n                output[nextKey] = source[nextKey];\n              }\n            }\n          }\n        }\n\n        return output;\n      };\n    })();\n  } //\n\n\n  Object.assign(THREE, {\n    // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\n    MOUSE: {\n      LEFT: 0,\n      MIDDLE: 1,\n      RIGHT: 2\n    },\n    // GL STATE CONSTANTS\n    CullFaceNone: 0,\n    CullFaceBack: 1,\n    CullFaceFront: 2,\n    CullFaceFrontBack: 3,\n    FrontFaceDirectionCW: 0,\n    FrontFaceDirectionCCW: 1,\n    // SHADOWING TYPES\n    BasicShadowMap: 0,\n    PCFShadowMap: 1,\n    PCFSoftShadowMap: 2,\n    // MATERIAL CONSTANTS\n    // side\n    FrontSide: 0,\n    BackSide: 1,\n    DoubleSide: 2,\n    // shading\n    FlatShading: 1,\n    SmoothShading: 2,\n    // colors\n    NoColors: 0,\n    FaceColors: 1,\n    VertexColors: 2,\n    // blending modes\n    NoBlending: 0,\n    NormalBlending: 1,\n    AdditiveBlending: 2,\n    SubtractiveBlending: 3,\n    MultiplyBlending: 4,\n    CustomBlending: 5,\n    // custom blending equations\n    // (numbers start from 100 not to clash with other\n    // mappings to OpenGL constants defined in Texture.js)\n    AddEquation: 100,\n    SubtractEquation: 101,\n    ReverseSubtractEquation: 102,\n    MinEquation: 103,\n    MaxEquation: 104,\n    // custom blending destination factors\n    ZeroFactor: 200,\n    OneFactor: 201,\n    SrcColorFactor: 202,\n    OneMinusSrcColorFactor: 203,\n    SrcAlphaFactor: 204,\n    OneMinusSrcAlphaFactor: 205,\n    DstAlphaFactor: 206,\n    OneMinusDstAlphaFactor: 207,\n    // custom blending source factors\n    //ZeroFactor: 200,\n    //OneFactor: 201,\n    //SrcAlphaFactor: 204,\n    //OneMinusSrcAlphaFactor: 205,\n    //DstAlphaFactor: 206,\n    //OneMinusDstAlphaFactor: 207,\n    DstColorFactor: 208,\n    OneMinusDstColorFactor: 209,\n    SrcAlphaSaturateFactor: 210,\n    // depth modes\n    NeverDepth: 0,\n    AlwaysDepth: 1,\n    LessDepth: 2,\n    LessEqualDepth: 3,\n    EqualDepth: 4,\n    GreaterEqualDepth: 5,\n    GreaterDepth: 6,\n    NotEqualDepth: 7,\n    // TEXTURE CONSTANTS\n    MultiplyOperation: 0,\n    MixOperation: 1,\n    AddOperation: 2,\n    // Tone Mapping modes\n    NoToneMapping: 0,\n    // do not do any tone mapping, not even exposure (required for special purpose passes.)\n    LinearToneMapping: 1,\n    // only apply exposure.\n    ReinhardToneMapping: 2,\n    Uncharted2ToneMapping: 3,\n    // John Hable\n    CineonToneMapping: 4,\n    // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n    // Mapping modes\n    UVMapping: 300,\n    CubeReflectionMapping: 301,\n    CubeRefractionMapping: 302,\n    EquirectangularReflectionMapping: 303,\n    EquirectangularRefractionMapping: 304,\n    SphericalReflectionMapping: 305,\n    CubeUVReflectionMapping: 306,\n    CubeUVRefractionMapping: 307,\n    // Wrapping modes\n    RepeatWrapping: 1000,\n    ClampToEdgeWrapping: 1001,\n    MirroredRepeatWrapping: 1002,\n    // Filters\n    NearestFilter: 1003,\n    NearestMipMapNearestFilter: 1004,\n    NearestMipMapLinearFilter: 1005,\n    LinearFilter: 1006,\n    LinearMipMapNearestFilter: 1007,\n    LinearMipMapLinearFilter: 1008,\n    // Data types\n    UnsignedByteType: 1009,\n    ByteType: 1010,\n    ShortType: 1011,\n    UnsignedShortType: 1012,\n    IntType: 1013,\n    UnsignedIntType: 1014,\n    FloatType: 1015,\n    HalfFloatType: 1025,\n    // Pixel types\n    //UnsignedByteType: 1009,\n    UnsignedShort4444Type: 1016,\n    UnsignedShort5551Type: 1017,\n    UnsignedShort565Type: 1018,\n    // Pixel formats\n    AlphaFormat: 1019,\n    RGBFormat: 1020,\n    RGBAFormat: 1021,\n    LuminanceFormat: 1022,\n    LuminanceAlphaFormat: 1023,\n    // THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\n    RGBEFormat: THREE.RGBAFormat,\n    //1024;\n    DepthFormat: 1026,\n    // DDS / ST3C Compressed texture formats\n    RGB_S3TC_DXT1_Format: 2001,\n    RGBA_S3TC_DXT1_Format: 2002,\n    RGBA_S3TC_DXT3_Format: 2003,\n    RGBA_S3TC_DXT5_Format: 2004,\n    // PVRTC compressed texture formats\n    RGB_PVRTC_4BPPV1_Format: 2100,\n    RGB_PVRTC_2BPPV1_Format: 2101,\n    RGBA_PVRTC_4BPPV1_Format: 2102,\n    RGBA_PVRTC_2BPPV1_Format: 2103,\n    // ETC compressed texture formats\n    RGB_ETC1_Format: 2151,\n    // Loop styles for AnimationAction\n    LoopOnce: 2200,\n    LoopRepeat: 2201,\n    LoopPingPong: 2202,\n    // Interpolation\n    InterpolateDiscrete: 2300,\n    InterpolateLinear: 2301,\n    InterpolateSmooth: 2302,\n    // Interpolant ending modes\n    ZeroCurvatureEnding: 2400,\n    ZeroSlopeEnding: 2401,\n    WrapAroundEnding: 2402,\n    // Triangle Draw modes\n    TrianglesDrawMode: 0,\n    TriangleStripDrawMode: 1,\n    TriangleFanDrawMode: 2,\n    // Texture Encodings\n    LinearEncoding: 3000,\n    // No encoding at all.\n    sRGBEncoding: 3001,\n    GammaEncoding: 3007,\n    // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\n    // The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\n    // These encodings should not specified as output encodings except in rare situations.\n    RGBEEncoding: 3002,\n    // AKA Radiance.\n    LogLuvEncoding: 3003,\n    RGBM7Encoding: 3004,\n    RGBM16Encoding: 3005,\n    RGBDEncoding: 3006,\n    // MaxRange is 256.\n    // Depth packing strategies\n    BasicDepthPacking: 3200,\n    // for writing to float textures for high precision or for visualizing results in RGB buffers\n    RGBADepthPacking: 3201 // for packing into RGBA buffers.\n\n  }); // File:src/math/Color.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Color = function (r, g, b) {\n    if (g === undefined && b === undefined) {\n      // r is THREE.Color, hex or string\n      return this.set(r);\n    }\n\n    return this.setRGB(r, g, b);\n  };\n\n  THREE.Color.prototype = {\n    constructor: THREE.Color,\n    r: 1,\n    g: 1,\n    b: 1,\n    set: function set(value) {\n      if (value instanceof THREE.Color) {\n        this.copy(value);\n      } else if (typeof value === 'number') {\n        this.setHex(value);\n      } else if (typeof value === 'string') {\n        this.setStyle(value);\n      }\n\n      return this;\n    },\n    setScalar: function setScalar(scalar) {\n      this.r = scalar;\n      this.g = scalar;\n      this.b = scalar;\n    },\n    setHex: function setHex(hex) {\n      hex = Math.floor(hex);\n      this.r = (hex >> 16 & 255) / 255;\n      this.g = (hex >> 8 & 255) / 255;\n      this.b = (hex & 255) / 255;\n      return this;\n    },\n    setRGB: function setRGB(r, g, b) {\n      this.r = r;\n      this.g = g;\n      this.b = b;\n      return this;\n    },\n    setHSL: function () {\n      function hue2rgb(p, q, t) {\n        if (t < 0) t += 1;\n        if (t > 1) t -= 1;\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\n        if (t < 1 / 2) return q;\n        if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);\n        return p;\n      }\n\n      return function setHSL(h, s, l) {\n        // h,s,l ranges are in 0.0 - 1.0\n        h = THREE.Math.euclideanModulo(h, 1);\n        s = THREE.Math.clamp(s, 0, 1);\n        l = THREE.Math.clamp(l, 0, 1);\n\n        if (s === 0) {\n          this.r = this.g = this.b = l;\n        } else {\n          var p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\n          var q = 2 * l - p;\n          this.r = hue2rgb(q, p, h + 1 / 3);\n          this.g = hue2rgb(q, p, h);\n          this.b = hue2rgb(q, p, h - 1 / 3);\n        }\n\n        return this;\n      };\n    }(),\n    setStyle: function setStyle(style) {\n      function handleAlpha(string) {\n        if (string === undefined) return;\n\n        if (parseFloat(string) < 1) {\n          console.warn('THREE.Color: Alpha component of ' + style + ' will be ignored.');\n        }\n      }\n\n      var m;\n\n      if (m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec(style)) {\n        // rgb / hsl\n        var color;\n        var name = m[1];\n        var components = m[2];\n\n        switch (name) {\n          case 'rgb':\n          case 'rgba':\n            if (color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n              // rgb(255,0,0) rgba(255,0,0,0.5)\n              this.r = Math.min(255, parseInt(color[1], 10)) / 255;\n              this.g = Math.min(255, parseInt(color[2], 10)) / 255;\n              this.b = Math.min(255, parseInt(color[3], 10)) / 255;\n              handleAlpha(color[5]);\n              return this;\n            }\n\n            if (color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n              this.r = Math.min(100, parseInt(color[1], 10)) / 100;\n              this.g = Math.min(100, parseInt(color[2], 10)) / 100;\n              this.b = Math.min(100, parseInt(color[3], 10)) / 100;\n              handleAlpha(color[5]);\n              return this;\n            }\n\n            break;\n\n          case 'hsl':\n          case 'hsla':\n            if (color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec(components)) {\n              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n              var h = parseFloat(color[1]) / 360;\n              var s = parseInt(color[2], 10) / 100;\n              var l = parseInt(color[3], 10) / 100;\n              handleAlpha(color[5]);\n              return this.setHSL(h, s, l);\n            }\n\n            break;\n        }\n      } else if (m = /^\\#([A-Fa-f0-9]+)$/.exec(style)) {\n        // hex color\n        var hex = m[1];\n        var size = hex.length;\n\n        if (size === 3) {\n          // #ff0\n          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;\n          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;\n          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;\n          return this;\n        } else if (size === 6) {\n          // #ff0000\n          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;\n          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;\n          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;\n          return this;\n        }\n      }\n\n      if (style && style.length > 0) {\n        // color keywords\n        var hex = THREE.ColorKeywords[style];\n\n        if (hex !== undefined) {\n          // red\n          this.setHex(hex);\n        } else {\n          // unknown color\n          console.warn('THREE.Color: Unknown color ' + style);\n        }\n      }\n\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor(this.r, this.g, this.b);\n    },\n    copy: function copy(color) {\n      this.r = color.r;\n      this.g = color.g;\n      this.b = color.b;\n      return this;\n    },\n    copyGammaToLinear: function copyGammaToLinear(color, gammaFactor) {\n      if (gammaFactor === undefined) gammaFactor = 2.0;\n      this.r = Math.pow(color.r, gammaFactor);\n      this.g = Math.pow(color.g, gammaFactor);\n      this.b = Math.pow(color.b, gammaFactor);\n      return this;\n    },\n    copyLinearToGamma: function copyLinearToGamma(color, gammaFactor) {\n      if (gammaFactor === undefined) gammaFactor = 2.0;\n      var safeInverse = gammaFactor > 0 ? 1.0 / gammaFactor : 1.0;\n      this.r = Math.pow(color.r, safeInverse);\n      this.g = Math.pow(color.g, safeInverse);\n      this.b = Math.pow(color.b, safeInverse);\n      return this;\n    },\n    convertGammaToLinear: function convertGammaToLinear() {\n      var r = this.r,\n          g = this.g,\n          b = this.b;\n      this.r = r * r;\n      this.g = g * g;\n      this.b = b * b;\n      return this;\n    },\n    convertLinearToGamma: function convertLinearToGamma() {\n      this.r = Math.sqrt(this.r);\n      this.g = Math.sqrt(this.g);\n      this.b = Math.sqrt(this.b);\n      return this;\n    },\n    getHex: function getHex() {\n      return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0;\n    },\n    getHexString: function getHexString() {\n      return ('000000' + this.getHex().toString(16)).slice(-6);\n    },\n    getHSL: function getHSL(optionalTarget) {\n      // h,s,l ranges are in 0.0 - 1.0\n      var hsl = optionalTarget || {\n        h: 0,\n        s: 0,\n        l: 0\n      };\n      var r = this.r,\n          g = this.g,\n          b = this.b;\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var hue, saturation;\n      var lightness = (min + max) / 2.0;\n\n      if (min === max) {\n        hue = 0;\n        saturation = 0;\n      } else {\n        var delta = max - min;\n        saturation = lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);\n\n        switch (max) {\n          case r:\n            hue = (g - b) / delta + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            hue = (b - r) / delta + 2;\n            break;\n\n          case b:\n            hue = (r - g) / delta + 4;\n            break;\n        }\n\n        hue /= 6;\n      }\n\n      hsl.h = hue;\n      hsl.s = saturation;\n      hsl.l = lightness;\n      return hsl;\n    },\n    getStyle: function getStyle() {\n      return 'rgb(' + (this.r * 255 | 0) + ',' + (this.g * 255 | 0) + ',' + (this.b * 255 | 0) + ')';\n    },\n    offsetHSL: function offsetHSL(h, s, l) {\n      var hsl = this.getHSL();\n      hsl.h += h;\n      hsl.s += s;\n      hsl.l += l;\n      this.setHSL(hsl.h, hsl.s, hsl.l);\n      return this;\n    },\n    add: function add(color) {\n      this.r += color.r;\n      this.g += color.g;\n      this.b += color.b;\n      return this;\n    },\n    addColors: function addColors(color1, color2) {\n      this.r = color1.r + color2.r;\n      this.g = color1.g + color2.g;\n      this.b = color1.b + color2.b;\n      return this;\n    },\n    addScalar: function addScalar(s) {\n      this.r += s;\n      this.g += s;\n      this.b += s;\n      return this;\n    },\n    sub: function sub(color) {\n      this.r = Math.max(0, this.r - color.r);\n      this.g = Math.max(0, this.g - color.g);\n      this.b = Math.max(0, this.b - color.b);\n      return this;\n    },\n    multiply: function multiply(color) {\n      this.r *= color.r;\n      this.g *= color.g;\n      this.b *= color.b;\n      return this;\n    },\n    multiplyScalar: function multiplyScalar(s) {\n      this.r *= s;\n      this.g *= s;\n      this.b *= s;\n      return this;\n    },\n    lerp: function lerp(color, alpha) {\n      this.r += (color.r - this.r) * alpha;\n      this.g += (color.g - this.g) * alpha;\n      this.b += (color.b - this.b) * alpha;\n      return this;\n    },\n    equals: function equals(c) {\n      return c.r === this.r && c.g === this.g && c.b === this.b;\n    },\n    fromArray: function fromArray(array, offset) {\n      if (offset === undefined) offset = 0;\n      this.r = array[offset];\n      this.g = array[offset + 1];\n      this.b = array[offset + 2];\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this.r;\n      array[offset + 1] = this.g;\n      array[offset + 2] = this.b;\n      return array;\n    }\n  };\n  THREE.ColorKeywords = {\n    'aliceblue': 0xF0F8FF,\n    'antiquewhite': 0xFAEBD7,\n    'aqua': 0x00FFFF,\n    'aquamarine': 0x7FFFD4,\n    'azure': 0xF0FFFF,\n    'beige': 0xF5F5DC,\n    'bisque': 0xFFE4C4,\n    'black': 0x000000,\n    'blanchedalmond': 0xFFEBCD,\n    'blue': 0x0000FF,\n    'blueviolet': 0x8A2BE2,\n    'brown': 0xA52A2A,\n    'burlywood': 0xDEB887,\n    'cadetblue': 0x5F9EA0,\n    'chartreuse': 0x7FFF00,\n    'chocolate': 0xD2691E,\n    'coral': 0xFF7F50,\n    'cornflowerblue': 0x6495ED,\n    'cornsilk': 0xFFF8DC,\n    'crimson': 0xDC143C,\n    'cyan': 0x00FFFF,\n    'darkblue': 0x00008B,\n    'darkcyan': 0x008B8B,\n    'darkgoldenrod': 0xB8860B,\n    'darkgray': 0xA9A9A9,\n    'darkgreen': 0x006400,\n    'darkgrey': 0xA9A9A9,\n    'darkkhaki': 0xBDB76B,\n    'darkmagenta': 0x8B008B,\n    'darkolivegreen': 0x556B2F,\n    'darkorange': 0xFF8C00,\n    'darkorchid': 0x9932CC,\n    'darkred': 0x8B0000,\n    'darksalmon': 0xE9967A,\n    'darkseagreen': 0x8FBC8F,\n    'darkslateblue': 0x483D8B,\n    'darkslategray': 0x2F4F4F,\n    'darkslategrey': 0x2F4F4F,\n    'darkturquoise': 0x00CED1,\n    'darkviolet': 0x9400D3,\n    'deeppink': 0xFF1493,\n    'deepskyblue': 0x00BFFF,\n    'dimgray': 0x696969,\n    'dimgrey': 0x696969,\n    'dodgerblue': 0x1E90FF,\n    'firebrick': 0xB22222,\n    'floralwhite': 0xFFFAF0,\n    'forestgreen': 0x228B22,\n    'fuchsia': 0xFF00FF,\n    'gainsboro': 0xDCDCDC,\n    'ghostwhite': 0xF8F8FF,\n    'gold': 0xFFD700,\n    'goldenrod': 0xDAA520,\n    'gray': 0x808080,\n    'green': 0x008000,\n    'greenyellow': 0xADFF2F,\n    'grey': 0x808080,\n    'honeydew': 0xF0FFF0,\n    'hotpink': 0xFF69B4,\n    'indianred': 0xCD5C5C,\n    'indigo': 0x4B0082,\n    'ivory': 0xFFFFF0,\n    'khaki': 0xF0E68C,\n    'lavender': 0xE6E6FA,\n    'lavenderblush': 0xFFF0F5,\n    'lawngreen': 0x7CFC00,\n    'lemonchiffon': 0xFFFACD,\n    'lightblue': 0xADD8E6,\n    'lightcoral': 0xF08080,\n    'lightcyan': 0xE0FFFF,\n    'lightgoldenrodyellow': 0xFAFAD2,\n    'lightgray': 0xD3D3D3,\n    'lightgreen': 0x90EE90,\n    'lightgrey': 0xD3D3D3,\n    'lightpink': 0xFFB6C1,\n    'lightsalmon': 0xFFA07A,\n    'lightseagreen': 0x20B2AA,\n    'lightskyblue': 0x87CEFA,\n    'lightslategray': 0x778899,\n    'lightslategrey': 0x778899,\n    'lightsteelblue': 0xB0C4DE,\n    'lightyellow': 0xFFFFE0,\n    'lime': 0x00FF00,\n    'limegreen': 0x32CD32,\n    'linen': 0xFAF0E6,\n    'magenta': 0xFF00FF,\n    'maroon': 0x800000,\n    'mediumaquamarine': 0x66CDAA,\n    'mediumblue': 0x0000CD,\n    'mediumorchid': 0xBA55D3,\n    'mediumpurple': 0x9370DB,\n    'mediumseagreen': 0x3CB371,\n    'mediumslateblue': 0x7B68EE,\n    'mediumspringgreen': 0x00FA9A,\n    'mediumturquoise': 0x48D1CC,\n    'mediumvioletred': 0xC71585,\n    'midnightblue': 0x191970,\n    'mintcream': 0xF5FFFA,\n    'mistyrose': 0xFFE4E1,\n    'moccasin': 0xFFE4B5,\n    'navajowhite': 0xFFDEAD,\n    'navy': 0x000080,\n    'oldlace': 0xFDF5E6,\n    'olive': 0x808000,\n    'olivedrab': 0x6B8E23,\n    'orange': 0xFFA500,\n    'orangered': 0xFF4500,\n    'orchid': 0xDA70D6,\n    'palegoldenrod': 0xEEE8AA,\n    'palegreen': 0x98FB98,\n    'paleturquoise': 0xAFEEEE,\n    'palevioletred': 0xDB7093,\n    'papayawhip': 0xFFEFD5,\n    'peachpuff': 0xFFDAB9,\n    'peru': 0xCD853F,\n    'pink': 0xFFC0CB,\n    'plum': 0xDDA0DD,\n    'powderblue': 0xB0E0E6,\n    'purple': 0x800080,\n    'red': 0xFF0000,\n    'rosybrown': 0xBC8F8F,\n    'royalblue': 0x4169E1,\n    'saddlebrown': 0x8B4513,\n    'salmon': 0xFA8072,\n    'sandybrown': 0xF4A460,\n    'seagreen': 0x2E8B57,\n    'seashell': 0xFFF5EE,\n    'sienna': 0xA0522D,\n    'silver': 0xC0C0C0,\n    'skyblue': 0x87CEEB,\n    'slateblue': 0x6A5ACD,\n    'slategray': 0x708090,\n    'slategrey': 0x708090,\n    'snow': 0xFFFAFA,\n    'springgreen': 0x00FF7F,\n    'steelblue': 0x4682B4,\n    'tan': 0xD2B48C,\n    'teal': 0x008080,\n    'thistle': 0xD8BFD8,\n    'tomato': 0xFF6347,\n    'turquoise': 0x40E0D0,\n    'violet': 0xEE82EE,\n    'wheat': 0xF5DEB3,\n    'white': 0xFFFFFF,\n    'whitesmoke': 0xF5F5F5,\n    'yellow': 0xFFFF00,\n    'yellowgreen': 0x9ACD32\n  }; // File:src/math/Quaternion.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Quaternion = function (x, y, z, w) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._w = w !== undefined ? w : 1;\n  };\n\n  THREE.Quaternion.prototype = {\n    constructor: THREE.Quaternion,\n\n    get x() {\n      return this._x;\n    },\n\n    set x(value) {\n      this._x = value;\n      this.onChangeCallback();\n    },\n\n    get y() {\n      return this._y;\n    },\n\n    set y(value) {\n      this._y = value;\n      this.onChangeCallback();\n    },\n\n    get z() {\n      return this._z;\n    },\n\n    set z(value) {\n      this._z = value;\n      this.onChangeCallback();\n    },\n\n    get w() {\n      return this._w;\n    },\n\n    set w(value) {\n      this._w = value;\n      this.onChangeCallback();\n    },\n\n    set: function set(x, y, z, w) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._w = w;\n      this.onChangeCallback();\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor(this._x, this._y, this._z, this._w);\n    },\n    copy: function copy(quaternion) {\n      this._x = quaternion.x;\n      this._y = quaternion.y;\n      this._z = quaternion.z;\n      this._w = quaternion.w;\n      this.onChangeCallback();\n      return this;\n    },\n    setFromEuler: function setFromEuler(euler, update) {\n      if (euler instanceof THREE.Euler === false) {\n        throw new Error('THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n      } // http://www.mathworks.com/matlabcentral/fileexchange/\n      // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n      //\tcontent/SpinCalc.m\n\n\n      var c1 = Math.cos(euler._x / 2);\n      var c2 = Math.cos(euler._y / 2);\n      var c3 = Math.cos(euler._z / 2);\n      var s1 = Math.sin(euler._x / 2);\n      var s2 = Math.sin(euler._y / 2);\n      var s3 = Math.sin(euler._z / 2);\n      var order = euler.order;\n\n      if (order === 'XYZ') {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'YXZ') {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === 'ZXY') {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'ZYX') {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      } else if (order === 'YZX') {\n        this._x = s1 * c2 * c3 + c1 * s2 * s3;\n        this._y = c1 * s2 * c3 + s1 * c2 * s3;\n        this._z = c1 * c2 * s3 - s1 * s2 * c3;\n        this._w = c1 * c2 * c3 - s1 * s2 * s3;\n      } else if (order === 'XZY') {\n        this._x = s1 * c2 * c3 - c1 * s2 * s3;\n        this._y = c1 * s2 * c3 - s1 * c2 * s3;\n        this._z = c1 * c2 * s3 + s1 * s2 * c3;\n        this._w = c1 * c2 * c3 + s1 * s2 * s3;\n      }\n\n      if (update !== false) this.onChangeCallback();\n      return this;\n    },\n    setFromAxisAngle: function setFromAxisAngle(axis, angle) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n      // assumes axis is normalized\n      var halfAngle = angle / 2,\n          s = Math.sin(halfAngle);\n      this._x = axis.x * s;\n      this._y = axis.y * s;\n      this._z = axis.z * s;\n      this._w = Math.cos(halfAngle);\n      this.onChangeCallback();\n      return this;\n    },\n    setFromRotationMatrix: function setFromRotationMatrix(m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      var te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10],\n          trace = m11 + m22 + m33,\n          s;\n\n      if (trace > 0) {\n        s = 0.5 / Math.sqrt(trace + 1.0);\n        this._w = 0.25 / s;\n        this._x = (m32 - m23) * s;\n        this._y = (m13 - m31) * s;\n        this._z = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n        this._w = (m32 - m23) / s;\n        this._x = 0.25 * s;\n        this._y = (m12 + m21) / s;\n        this._z = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n        this._w = (m13 - m31) / s;\n        this._x = (m12 + m21) / s;\n        this._y = 0.25 * s;\n        this._z = (m23 + m32) / s;\n      } else {\n        s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n        this._w = (m21 - m12) / s;\n        this._x = (m13 + m31) / s;\n        this._y = (m23 + m32) / s;\n        this._z = 0.25 * s;\n      }\n\n      this.onChangeCallback();\n      return this;\n    },\n    setFromUnitVectors: function () {\n      // http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\n      // assumes direction vectors vFrom and vTo are normalized\n      var v1, r;\n      var EPS = 0.000001;\n      return function setFromUnitVectors(vFrom, vTo) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        r = vFrom.dot(vTo) + 1;\n\n        if (r < EPS) {\n          r = 0;\n\n          if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {\n            v1.set(-vFrom.y, vFrom.x, 0);\n          } else {\n            v1.set(0, -vFrom.z, vFrom.y);\n          }\n        } else {\n          v1.crossVectors(vFrom, vTo);\n        }\n\n        this._x = v1.x;\n        this._y = v1.y;\n        this._z = v1.z;\n        this._w = r;\n        return this.normalize();\n      };\n    }(),\n    inverse: function inverse() {\n      return this.conjugate().normalize();\n    },\n    conjugate: function conjugate() {\n      this._x *= -1;\n      this._y *= -1;\n      this._z *= -1;\n      this.onChangeCallback();\n      return this;\n    },\n    dot: function dot(v) {\n      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n    },\n    lengthSq: function lengthSq() {\n      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n    },\n    length: function length() {\n      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n    },\n    normalize: function normalize() {\n      var l = this.length();\n\n      if (l === 0) {\n        this._x = 0;\n        this._y = 0;\n        this._z = 0;\n        this._w = 1;\n      } else {\n        l = 1 / l;\n        this._x = this._x * l;\n        this._y = this._y * l;\n        this._z = this._z * l;\n        this._w = this._w * l;\n      }\n\n      this.onChangeCallback();\n      return this;\n    },\n    multiply: function multiply(q, p) {\n      if (p !== undefined) {\n        console.warn('THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.');\n        return this.multiplyQuaternions(q, p);\n      }\n\n      return this.multiplyQuaternions(this, q);\n    },\n    premultiply: function premultiply(q) {\n      return this.multiplyQuaternions(q, this);\n    },\n    multiplyQuaternions: function multiplyQuaternions(a, b) {\n      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n      var qax = a._x,\n          qay = a._y,\n          qaz = a._z,\n          qaw = a._w;\n      var qbx = b._x,\n          qby = b._y,\n          qbz = b._z,\n          qbw = b._w;\n      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n      this.onChangeCallback();\n      return this;\n    },\n    slerp: function slerp(qb, t) {\n      if (t === 0) return this;\n      if (t === 1) return this.copy(qb);\n      var x = this._x,\n          y = this._y,\n          z = this._z,\n          w = this._w; // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n      var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n      if (cosHalfTheta < 0) {\n        this._w = -qb._w;\n        this._x = -qb._x;\n        this._y = -qb._y;\n        this._z = -qb._z;\n        cosHalfTheta = -cosHalfTheta;\n      } else {\n        this.copy(qb);\n      }\n\n      if (cosHalfTheta >= 1.0) {\n        this._w = w;\n        this._x = x;\n        this._y = y;\n        this._z = z;\n        return this;\n      }\n\n      var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\n\n      if (Math.abs(sinHalfTheta) < 0.001) {\n        this._w = 0.5 * (w + this._w);\n        this._x = 0.5 * (x + this._x);\n        this._y = 0.5 * (y + this._y);\n        this._z = 0.5 * (z + this._z);\n        return this;\n      }\n\n      var halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n      var ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,\n          ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n      this._w = w * ratioA + this._w * ratioB;\n      this._x = x * ratioA + this._x * ratioB;\n      this._y = y * ratioA + this._y * ratioB;\n      this._z = z * ratioA + this._z * ratioB;\n      this.onChangeCallback();\n      return this;\n    },\n    equals: function equals(quaternion) {\n      return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;\n    },\n    fromArray: function fromArray(array, offset) {\n      if (offset === undefined) offset = 0;\n      this._x = array[offset];\n      this._y = array[offset + 1];\n      this._z = array[offset + 2];\n      this._w = array[offset + 3];\n      this.onChangeCallback();\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._w;\n      return array;\n    },\n    onChange: function onChange(callback) {\n      this.onChangeCallback = callback;\n      return this;\n    },\n    onChangeCallback: function onChangeCallback() {}\n  };\n  Object.assign(THREE.Quaternion, {\n    slerp: function slerp(qa, qb, qm, t) {\n      return qm.copy(qa).slerp(qb, t);\n    },\n    slerpFlat: function slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\n      // fuzz-free, array-based Quaternion SLERP operation\n      var x0 = src0[srcOffset0 + 0],\n          y0 = src0[srcOffset0 + 1],\n          z0 = src0[srcOffset0 + 2],\n          w0 = src0[srcOffset0 + 3],\n          x1 = src1[srcOffset1 + 0],\n          y1 = src1[srcOffset1 + 1],\n          z1 = src1[srcOffset1 + 2],\n          w1 = src1[srcOffset1 + 3];\n\n      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {\n        var s = 1 - t,\n            cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n            dir = cos >= 0 ? 1 : -1,\n            sqrSin = 1 - cos * cos; // Skip the Slerp for tiny steps to avoid numeric problems:\n\n        if (sqrSin > Number.EPSILON) {\n          var sin = Math.sqrt(sqrSin),\n              len = Math.atan2(sin, cos * dir);\n          s = Math.sin(s * len) / sin;\n          t = Math.sin(t * len) / sin;\n        }\n\n        var tDir = t * dir;\n        x0 = x0 * s + x1 * tDir;\n        y0 = y0 * s + y1 * tDir;\n        z0 = z0 * s + z1 * tDir;\n        w0 = w0 * s + w1 * tDir; // Normalize in case we just did a lerp:\n\n        if (s === 1 - t) {\n          var f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);\n          x0 *= f;\n          y0 *= f;\n          z0 *= f;\n          w0 *= f;\n        }\n      }\n\n      dst[dstOffset] = x0;\n      dst[dstOffset + 1] = y0;\n      dst[dstOffset + 2] = z0;\n      dst[dstOffset + 3] = w0;\n    }\n  }); // File:src/math/Vector2.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author philogb / http://blog.thejit.org/\n   * @author egraether / http://egraether.com/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   */\n\n  THREE.Vector2 = function (x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  };\n\n  THREE.Vector2.prototype = {\n    constructor: THREE.Vector2,\n\n    get width() {\n      return this.x;\n    },\n\n    set width(value) {\n      this.x = value;\n    },\n\n    get height() {\n      return this.y;\n    },\n\n    set height(value) {\n      this.y = value;\n    },\n\n    //\n    set: function set(x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    },\n    setScalar: function setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      return this;\n    },\n    setX: function setX(x) {\n      this.x = x;\n      return this;\n    },\n    setY: function setY(y) {\n      this.y = y;\n      return this;\n    },\n    setComponent: function setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    getComponent: function getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    clone: function clone() {\n      return new this.constructor(this.x, this.y);\n    },\n    copy: function copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      return this;\n    },\n    add: function add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      return this;\n    },\n    addScalar: function addScalar(s) {\n      this.x += s;\n      this.y += s;\n      return this;\n    },\n    addVectors: function addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      return this;\n    },\n    addScaledVector: function addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      return this;\n    },\n    sub: function sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      return this;\n    },\n    subScalar: function subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      return this;\n    },\n    subVectors: function subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      return this;\n    },\n    multiply: function multiply(v) {\n      this.x *= v.x;\n      this.y *= v.y;\n      return this;\n    },\n    multiplyScalar: function multiplyScalar(scalar) {\n      if (isFinite(scalar)) {\n        this.x *= scalar;\n        this.y *= scalar;\n      } else {\n        this.x = 0;\n        this.y = 0;\n      }\n\n      return this;\n    },\n    divide: function divide(v) {\n      this.x /= v.x;\n      this.y /= v.y;\n      return this;\n    },\n    divideScalar: function divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n    min: function min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      return this;\n    },\n    max: function max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      return this;\n    },\n    clamp: function clamp(min, max) {\n      // This function assumes min < max, if this assumption isn't true it will not operate correctly\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      return this;\n    },\n    clampScalar: function () {\n      var min, max;\n      return function clampScalar(minVal, maxVal) {\n        if (min === undefined) {\n          min = new THREE.Vector2();\n          max = new THREE.Vector2();\n        }\n\n        min.set(minVal, minVal);\n        max.set(maxVal, maxVal);\n        return this.clamp(min, max);\n      };\n    }(),\n    clampLength: function clampLength(min, max) {\n      var length = this.length();\n      return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);\n    },\n    floor: function floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      return this;\n    },\n    ceil: function ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      return this;\n    },\n    round: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      return this;\n    },\n    roundToZero: function roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      return this;\n    },\n    negate: function negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      return this;\n    },\n    dot: function dot(v) {\n      return this.x * v.x + this.y * v.y;\n    },\n    lengthSq: function lengthSq() {\n      return this.x * this.x + this.y * this.y;\n    },\n    length: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    },\n    lengthManhattan: function lengthManhattan() {\n      return Math.abs(this.x) + Math.abs(this.y);\n    },\n    normalize: function normalize() {\n      return this.divideScalar(this.length());\n    },\n    angle: function angle() {\n      // computes the angle in radians with respect to the positive x-axis\n      var angle = Math.atan2(this.y, this.x);\n      if (angle < 0) angle += 2 * Math.PI;\n      return angle;\n    },\n    distanceTo: function distanceTo(v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    },\n    distanceToSquared: function distanceToSquared(v) {\n      var dx = this.x - v.x,\n          dy = this.y - v.y;\n      return dx * dx + dy * dy;\n    },\n    distanceToManhattan: function distanceToManhattan(v) {\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);\n    },\n    setLength: function setLength(length) {\n      return this.multiplyScalar(length / this.length());\n    },\n    lerp: function lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      return this;\n    },\n    lerpVectors: function lerpVectors(v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    equals: function equals(v) {\n      return v.x === this.x && v.y === this.y;\n    },\n    fromArray: function fromArray(array, offset) {\n      if (offset === undefined) offset = 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      return array;\n    },\n    fromAttribute: function fromAttribute(attribute, index, offset) {\n      if (offset === undefined) offset = 0;\n      index = index * attribute.itemSize + offset;\n      this.x = attribute.array[index];\n      this.y = attribute.array[index + 1];\n      return this;\n    },\n    rotateAround: function rotateAround(center, angle) {\n      var c = Math.cos(angle),\n          s = Math.sin(angle);\n      var x = this.x - center.x;\n      var y = this.y - center.y;\n      this.x = x * c - y * s + center.x;\n      this.y = x * s + y * c + center.y;\n      return this;\n    }\n  }; // File:src/math/Vector3.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author *kile / http://kile.stravaganza.org/\n   * @author philogb / http://blog.thejit.org/\n   * @author mikael emtinger / http://gomo.se/\n   * @author egraether / http://egraether.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  THREE.Vector3 = function (x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n  };\n\n  THREE.Vector3.prototype = {\n    constructor: THREE.Vector3,\n    set: function set(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    },\n    setScalar: function setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      this.z = scalar;\n      return this;\n    },\n    setX: function setX(x) {\n      this.x = x;\n      return this;\n    },\n    setY: function setY(y) {\n      this.y = y;\n      return this;\n    },\n    setZ: function setZ(z) {\n      this.z = z;\n      return this;\n    },\n    setComponent: function setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        case 2:\n          this.z = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    getComponent: function getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        case 2:\n          return this.z;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    clone: function clone() {\n      return new this.constructor(this.x, this.y, this.z);\n    },\n    copy: function copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      return this;\n    },\n    add: function add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      return this;\n    },\n    addScalar: function addScalar(s) {\n      this.x += s;\n      this.y += s;\n      this.z += s;\n      return this;\n    },\n    addVectors: function addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      this.z = a.z + b.z;\n      return this;\n    },\n    addScaledVector: function addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      this.z += v.z * s;\n      return this;\n    },\n    sub: function sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      return this;\n    },\n    subScalar: function subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      this.z -= s;\n      return this;\n    },\n    subVectors: function subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      this.z = a.z - b.z;\n      return this;\n    },\n    multiply: function multiply(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n        return this.multiplyVectors(v, w);\n      }\n\n      this.x *= v.x;\n      this.y *= v.y;\n      this.z *= v.z;\n      return this;\n    },\n    multiplyScalar: function multiplyScalar(scalar) {\n      if (isFinite(scalar)) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n      } else {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n      }\n\n      return this;\n    },\n    multiplyVectors: function multiplyVectors(a, b) {\n      this.x = a.x * b.x;\n      this.y = a.y * b.y;\n      this.z = a.z * b.z;\n      return this;\n    },\n    applyEuler: function () {\n      var quaternion;\n      return function applyEuler(euler) {\n        if (euler instanceof THREE.Euler === false) {\n          console.error('THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.');\n        }\n\n        if (quaternion === undefined) quaternion = new THREE.Quaternion();\n        return this.applyQuaternion(quaternion.setFromEuler(euler));\n      };\n    }(),\n    applyAxisAngle: function () {\n      var quaternion;\n      return function applyAxisAngle(axis, angle) {\n        if (quaternion === undefined) quaternion = new THREE.Quaternion();\n        return this.applyQuaternion(quaternion.setFromAxisAngle(axis, angle));\n      };\n    }(),\n    applyMatrix3: function applyMatrix3(m) {\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var e = m.elements;\n      this.x = e[0] * x + e[3] * y + e[6] * z;\n      this.y = e[1] * x + e[4] * y + e[7] * z;\n      this.z = e[2] * x + e[5] * y + e[8] * z;\n      return this;\n    },\n    applyMatrix4: function applyMatrix4(m) {\n      // input: THREE.Matrix4 affine matrix\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var e = m.elements;\n      this.x = e[0] * x + e[4] * y + e[8] * z + e[12];\n      this.y = e[1] * x + e[5] * y + e[9] * z + e[13];\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n      return this;\n    },\n    applyProjection: function applyProjection(m) {\n      // input: THREE.Matrix4 projection matrix\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var e = m.elements;\n      var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide\n\n      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;\n      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;\n      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;\n      return this;\n    },\n    applyQuaternion: function applyQuaternion(q) {\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var qx = q.x,\n          qy = q.y,\n          qz = q.z,\n          qw = q.w; // calculate quat * vector\n\n      var ix = qw * x + qy * z - qz * y;\n      var iy = qw * y + qz * x - qx * z;\n      var iz = qw * z + qx * y - qy * x;\n      var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n      return this;\n    },\n    project: function () {\n      var matrix;\n      return function project(camera) {\n        if (matrix === undefined) matrix = new THREE.Matrix4();\n        matrix.multiplyMatrices(camera.projectionMatrix, matrix.getInverse(camera.matrixWorld));\n        return this.applyProjection(matrix);\n      };\n    }(),\n    unproject: function () {\n      var matrix;\n      return function unproject(camera) {\n        if (matrix === undefined) matrix = new THREE.Matrix4();\n        matrix.multiplyMatrices(camera.matrixWorld, matrix.getInverse(camera.projectionMatrix));\n        return this.applyProjection(matrix);\n      };\n    }(),\n    transformDirection: function transformDirection(m) {\n      // input: THREE.Matrix4 affine matrix\n      // vector interpreted as a direction\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      var e = m.elements;\n      this.x = e[0] * x + e[4] * y + e[8] * z;\n      this.y = e[1] * x + e[5] * y + e[9] * z;\n      this.z = e[2] * x + e[6] * y + e[10] * z;\n      return this.normalize();\n    },\n    divide: function divide(v) {\n      this.x /= v.x;\n      this.y /= v.y;\n      this.z /= v.z;\n      return this;\n    },\n    divideScalar: function divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n    min: function min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      this.z = Math.min(this.z, v.z);\n      return this;\n    },\n    max: function max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      this.z = Math.max(this.z, v.z);\n      return this;\n    },\n    clamp: function clamp(min, max) {\n      // This function assumes min < max, if this assumption isn't true it will not operate correctly\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\n      return this;\n    },\n    clampScalar: function () {\n      var min, max;\n      return function clampScalar(minVal, maxVal) {\n        if (min === undefined) {\n          min = new THREE.Vector3();\n          max = new THREE.Vector3();\n        }\n\n        min.set(minVal, minVal, minVal);\n        max.set(maxVal, maxVal, maxVal);\n        return this.clamp(min, max);\n      };\n    }(),\n    clampLength: function clampLength(min, max) {\n      var length = this.length();\n      return this.multiplyScalar(Math.max(min, Math.min(max, length)) / length);\n    },\n    floor: function floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      this.z = Math.floor(this.z);\n      return this;\n    },\n    ceil: function ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      this.z = Math.ceil(this.z);\n      return this;\n    },\n    round: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n      return this;\n    },\n    roundToZero: function roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n      return this;\n    },\n    negate: function negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      return this;\n    },\n    dot: function dot(v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z;\n    },\n    lengthSq: function lengthSq() {\n      return this.x * this.x + this.y * this.y + this.z * this.z;\n    },\n    length: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n    },\n    lengthManhattan: function lengthManhattan() {\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n    },\n    normalize: function normalize() {\n      return this.divideScalar(this.length());\n    },\n    setLength: function setLength(length) {\n      return this.multiplyScalar(length / this.length());\n    },\n    lerp: function lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      this.z += (v.z - this.z) * alpha;\n      return this;\n    },\n    lerpVectors: function lerpVectors(v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    cross: function cross(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n        return this.crossVectors(v, w);\n      }\n\n      var x = this.x,\n          y = this.y,\n          z = this.z;\n      this.x = y * v.z - z * v.y;\n      this.y = z * v.x - x * v.z;\n      this.z = x * v.y - y * v.x;\n      return this;\n    },\n    crossVectors: function crossVectors(a, b) {\n      var ax = a.x,\n          ay = a.y,\n          az = a.z;\n      var bx = b.x,\n          by = b.y,\n          bz = b.z;\n      this.x = ay * bz - az * by;\n      this.y = az * bx - ax * bz;\n      this.z = ax * by - ay * bx;\n      return this;\n    },\n    projectOnVector: function projectOnVector(vector) {\n      var scalar = vector.dot(this) / vector.lengthSq();\n      return this.copy(vector).multiplyScalar(scalar);\n    },\n    projectOnPlane: function () {\n      var v1;\n      return function projectOnPlane(planeNormal) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        v1.copy(this).projectOnVector(planeNormal);\n        return this.sub(v1);\n      };\n    }(),\n    reflect: function () {\n      // reflect incident vector off plane orthogonal to normal\n      // normal is assumed to have unit length\n      var v1;\n      return function reflect(normal) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n      };\n    }(),\n    angleTo: function angleTo(v) {\n      var theta = this.dot(v) / Math.sqrt(this.lengthSq() * v.lengthSq()); // clamp, to handle numerical problems\n\n      return Math.acos(THREE.Math.clamp(theta, -1, 1));\n    },\n    distanceTo: function distanceTo(v) {\n      return Math.sqrt(this.distanceToSquared(v));\n    },\n    distanceToSquared: function distanceToSquared(v) {\n      var dx = this.x - v.x,\n          dy = this.y - v.y,\n          dz = this.z - v.z;\n      return dx * dx + dy * dy + dz * dz;\n    },\n    distanceToManhattan: function distanceToManhattan(v) {\n      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\n    },\n    setFromSpherical: function setFromSpherical(s) {\n      var sinPhiRadius = Math.sin(s.phi) * s.radius;\n      this.x = sinPhiRadius * Math.sin(s.theta);\n      this.y = Math.cos(s.phi) * s.radius;\n      this.z = sinPhiRadius * Math.cos(s.theta);\n      return this;\n    },\n    setFromMatrixPosition: function setFromMatrixPosition(m) {\n      return this.setFromMatrixColumn(m, 3);\n    },\n    setFromMatrixScale: function setFromMatrixScale(m) {\n      var sx = this.setFromMatrixColumn(m, 0).length();\n      var sy = this.setFromMatrixColumn(m, 1).length();\n      var sz = this.setFromMatrixColumn(m, 2).length();\n      this.x = sx;\n      this.y = sy;\n      this.z = sz;\n      return this;\n    },\n    setFromMatrixColumn: function setFromMatrixColumn(m, index) {\n      if (typeof m === 'number') {\n        console.warn('THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).');\n        var temp = m;\n        m = index;\n        index = temp;\n      }\n\n      return this.fromArray(m.elements, index * 4);\n    },\n    equals: function equals(v) {\n      return v.x === this.x && v.y === this.y && v.z === this.z;\n    },\n    fromArray: function fromArray(array, offset) {\n      if (offset === undefined) offset = 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      this.z = array[offset + 2];\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      array[offset + 2] = this.z;\n      return array;\n    },\n    fromAttribute: function fromAttribute(attribute, index, offset) {\n      if (offset === undefined) offset = 0;\n      index = index * attribute.itemSize + offset;\n      this.x = attribute.array[index];\n      this.y = attribute.array[index + 1];\n      this.z = attribute.array[index + 2];\n      return this;\n    }\n  }; // File:src/math/Vector4.js\n\n  /**\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author philogb / http://blog.thejit.org/\n   * @author mikael emtinger / http://gomo.se/\n   * @author egraether / http://egraether.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  THREE.Vector4 = function (x, y, z, w) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n    this.w = w !== undefined ? w : 1;\n  };\n\n  THREE.Vector4.prototype = {\n    constructor: THREE.Vector4,\n    set: function set(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    },\n    setScalar: function setScalar(scalar) {\n      this.x = scalar;\n      this.y = scalar;\n      this.z = scalar;\n      this.w = scalar;\n      return this;\n    },\n    setX: function setX(x) {\n      this.x = x;\n      return this;\n    },\n    setY: function setY(y) {\n      this.y = y;\n      return this;\n    },\n    setZ: function setZ(z) {\n      this.z = z;\n      return this;\n    },\n    setW: function setW(w) {\n      this.w = w;\n      return this;\n    },\n    setComponent: function setComponent(index, value) {\n      switch (index) {\n        case 0:\n          this.x = value;\n          break;\n\n        case 1:\n          this.y = value;\n          break;\n\n        case 2:\n          this.z = value;\n          break;\n\n        case 3:\n          this.w = value;\n          break;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    getComponent: function getComponent(index) {\n      switch (index) {\n        case 0:\n          return this.x;\n\n        case 1:\n          return this.y;\n\n        case 2:\n          return this.z;\n\n        case 3:\n          return this.w;\n\n        default:\n          throw new Error('index is out of range: ' + index);\n      }\n    },\n    clone: function clone() {\n      return new this.constructor(this.x, this.y, this.z, this.w);\n    },\n    copy: function copy(v) {\n      this.x = v.x;\n      this.y = v.y;\n      this.z = v.z;\n      this.w = v.w !== undefined ? v.w : 1;\n      return this;\n    },\n    add: function add(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n        return this.addVectors(v, w);\n      }\n\n      this.x += v.x;\n      this.y += v.y;\n      this.z += v.z;\n      this.w += v.w;\n      return this;\n    },\n    addScalar: function addScalar(s) {\n      this.x += s;\n      this.y += s;\n      this.z += s;\n      this.w += s;\n      return this;\n    },\n    addVectors: function addVectors(a, b) {\n      this.x = a.x + b.x;\n      this.y = a.y + b.y;\n      this.z = a.z + b.z;\n      this.w = a.w + b.w;\n      return this;\n    },\n    addScaledVector: function addScaledVector(v, s) {\n      this.x += v.x * s;\n      this.y += v.y * s;\n      this.z += v.z * s;\n      this.w += v.w * s;\n      return this;\n    },\n    sub: function sub(v, w) {\n      if (w !== undefined) {\n        console.warn('THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n        return this.subVectors(v, w);\n      }\n\n      this.x -= v.x;\n      this.y -= v.y;\n      this.z -= v.z;\n      this.w -= v.w;\n      return this;\n    },\n    subScalar: function subScalar(s) {\n      this.x -= s;\n      this.y -= s;\n      this.z -= s;\n      this.w -= s;\n      return this;\n    },\n    subVectors: function subVectors(a, b) {\n      this.x = a.x - b.x;\n      this.y = a.y - b.y;\n      this.z = a.z - b.z;\n      this.w = a.w - b.w;\n      return this;\n    },\n    multiplyScalar: function multiplyScalar(scalar) {\n      if (isFinite(scalar)) {\n        this.x *= scalar;\n        this.y *= scalar;\n        this.z *= scalar;\n        this.w *= scalar;\n      } else {\n        this.x = 0;\n        this.y = 0;\n        this.z = 0;\n        this.w = 0;\n      }\n\n      return this;\n    },\n    applyMatrix4: function applyMatrix4(m) {\n      var x = this.x,\n          y = this.y,\n          z = this.z,\n          w = this.w;\n      var e = m.elements;\n      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n      return this;\n    },\n    divideScalar: function divideScalar(scalar) {\n      return this.multiplyScalar(1 / scalar);\n    },\n    setAxisAngleFromQuaternion: function setAxisAngleFromQuaternion(q) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n      // q is assumed to be normalized\n      this.w = 2 * Math.acos(q.w);\n      var s = Math.sqrt(1 - q.w * q.w);\n\n      if (s < 0.0001) {\n        this.x = 1;\n        this.y = 0;\n        this.z = 0;\n      } else {\n        this.x = q.x / s;\n        this.y = q.y / s;\n        this.z = q.z / s;\n      }\n\n      return this;\n    },\n    setAxisAngleFromRotationMatrix: function setAxisAngleFromRotationMatrix(m) {\n      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      var angle,\n          x,\n          y,\n          z,\n          // variables for result\n      epsilon = 0.01,\n          // margin to allow for rounding errors\n      epsilon2 = 0.1,\n          // margin to distinguish between 0 and 180 degrees\n      te = m.elements,\n          m11 = te[0],\n          m12 = te[4],\n          m13 = te[8],\n          m21 = te[1],\n          m22 = te[5],\n          m23 = te[9],\n          m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n\n      if (Math.abs(m12 - m21) < epsilon && Math.abs(m13 - m31) < epsilon && Math.abs(m23 - m32) < epsilon) {\n        // singularity found\n        // first check for identity matrix which must have +1 for all terms\n        // in leading diagonal and zero in other terms\n        if (Math.abs(m12 + m21) < epsilon2 && Math.abs(m13 + m31) < epsilon2 && Math.abs(m23 + m32) < epsilon2 && Math.abs(m11 + m22 + m33 - 3) < epsilon2) {\n          // this singularity is identity matrix so angle = 0\n          this.set(1, 0, 0, 0);\n          return this; // zero angle, arbitrary axis\n        } // otherwise this singularity is angle = 180\n\n\n        angle = Math.PI;\n        var xx = (m11 + 1) / 2;\n        var yy = (m22 + 1) / 2;\n        var zz = (m33 + 1) / 2;\n        var xy = (m12 + m21) / 4;\n        var xz = (m13 + m31) / 4;\n        var yz = (m23 + m32) / 4;\n\n        if (xx > yy && xx > zz) {\n          // m11 is the largest diagonal term\n          if (xx < epsilon) {\n            x = 0;\n            y = 0.707106781;\n            z = 0.707106781;\n          } else {\n            x = Math.sqrt(xx);\n            y = xy / x;\n            z = xz / x;\n          }\n        } else if (yy > zz) {\n          // m22 is the largest diagonal term\n          if (yy < epsilon) {\n            x = 0.707106781;\n            y = 0;\n            z = 0.707106781;\n          } else {\n            y = Math.sqrt(yy);\n            x = xy / y;\n            z = yz / y;\n          }\n        } else {\n          // m33 is the largest diagonal term so base result on this\n          if (zz < epsilon) {\n            x = 0.707106781;\n            y = 0.707106781;\n            z = 0;\n          } else {\n            z = Math.sqrt(zz);\n            x = xz / z;\n            y = yz / z;\n          }\n        }\n\n        this.set(x, y, z, angle);\n        return this; // return 180 deg rotation\n      } // as we have reached here there are no singularities so we can handle normally\n\n\n      var s = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12)); // used to normalize\n\n      if (Math.abs(s) < 0.001) s = 1; // prevent divide by zero, should not happen if matrix is orthogonal and should be\n      // caught by singularity test above, but I've left it in just in case\n\n      this.x = (m32 - m23) / s;\n      this.y = (m13 - m31) / s;\n      this.z = (m21 - m12) / s;\n      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);\n      return this;\n    },\n    min: function min(v) {\n      this.x = Math.min(this.x, v.x);\n      this.y = Math.min(this.y, v.y);\n      this.z = Math.min(this.z, v.z);\n      this.w = Math.min(this.w, v.w);\n      return this;\n    },\n    max: function max(v) {\n      this.x = Math.max(this.x, v.x);\n      this.y = Math.max(this.y, v.y);\n      this.z = Math.max(this.z, v.z);\n      this.w = Math.max(this.w, v.w);\n      return this;\n    },\n    clamp: function clamp(min, max) {\n      // This function assumes min < max, if this assumption isn't true it will not operate correctly\n      this.x = Math.max(min.x, Math.min(max.x, this.x));\n      this.y = Math.max(min.y, Math.min(max.y, this.y));\n      this.z = Math.max(min.z, Math.min(max.z, this.z));\n      this.w = Math.max(min.w, Math.min(max.w, this.w));\n      return this;\n    },\n    clampScalar: function () {\n      var min, max;\n      return function clampScalar(minVal, maxVal) {\n        if (min === undefined) {\n          min = new THREE.Vector4();\n          max = new THREE.Vector4();\n        }\n\n        min.set(minVal, minVal, minVal, minVal);\n        max.set(maxVal, maxVal, maxVal, maxVal);\n        return this.clamp(min, max);\n      };\n    }(),\n    floor: function floor() {\n      this.x = Math.floor(this.x);\n      this.y = Math.floor(this.y);\n      this.z = Math.floor(this.z);\n      this.w = Math.floor(this.w);\n      return this;\n    },\n    ceil: function ceil() {\n      this.x = Math.ceil(this.x);\n      this.y = Math.ceil(this.y);\n      this.z = Math.ceil(this.z);\n      this.w = Math.ceil(this.w);\n      return this;\n    },\n    round: function round() {\n      this.x = Math.round(this.x);\n      this.y = Math.round(this.y);\n      this.z = Math.round(this.z);\n      this.w = Math.round(this.w);\n      return this;\n    },\n    roundToZero: function roundToZero() {\n      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);\n      return this;\n    },\n    negate: function negate() {\n      this.x = -this.x;\n      this.y = -this.y;\n      this.z = -this.z;\n      this.w = -this.w;\n      return this;\n    },\n    dot: function dot(v) {\n      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n    },\n    lengthSq: function lengthSq() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    },\n    length: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    },\n    lengthManhattan: function lengthManhattan() {\n      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);\n    },\n    normalize: function normalize() {\n      return this.divideScalar(this.length());\n    },\n    setLength: function setLength(length) {\n      return this.multiplyScalar(length / this.length());\n    },\n    lerp: function lerp(v, alpha) {\n      this.x += (v.x - this.x) * alpha;\n      this.y += (v.y - this.y) * alpha;\n      this.z += (v.z - this.z) * alpha;\n      this.w += (v.w - this.w) * alpha;\n      return this;\n    },\n    lerpVectors: function lerpVectors(v1, v2, alpha) {\n      return this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n    },\n    equals: function equals(v) {\n      return v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w;\n    },\n    fromArray: function fromArray(array, offset) {\n      if (offset === undefined) offset = 0;\n      this.x = array[offset];\n      this.y = array[offset + 1];\n      this.z = array[offset + 2];\n      this.w = array[offset + 3];\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this.x;\n      array[offset + 1] = this.y;\n      array[offset + 2] = this.z;\n      array[offset + 3] = this.w;\n      return array;\n    },\n    fromAttribute: function fromAttribute(attribute, index, offset) {\n      if (offset === undefined) offset = 0;\n      index = index * attribute.itemSize + offset;\n      this.x = attribute.array[index];\n      this.y = attribute.array[index + 1];\n      this.z = attribute.array[index + 2];\n      this.w = attribute.array[index + 3];\n      return this;\n    }\n  }; // File:src/math/Euler.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Euler = function (x, y, z, order) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this._z = z || 0;\n    this._order = order || THREE.Euler.DefaultOrder;\n  };\n\n  THREE.Euler.RotationOrders = ['XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX'];\n  THREE.Euler.DefaultOrder = 'XYZ';\n  THREE.Euler.prototype = {\n    constructor: THREE.Euler,\n\n    get x() {\n      return this._x;\n    },\n\n    set x(value) {\n      this._x = value;\n      this.onChangeCallback();\n    },\n\n    get y() {\n      return this._y;\n    },\n\n    set y(value) {\n      this._y = value;\n      this.onChangeCallback();\n    },\n\n    get z() {\n      return this._z;\n    },\n\n    set z(value) {\n      this._z = value;\n      this.onChangeCallback();\n    },\n\n    get order() {\n      return this._order;\n    },\n\n    set order(value) {\n      this._order = value;\n      this.onChangeCallback();\n    },\n\n    set: function set(x, y, z, order) {\n      this._x = x;\n      this._y = y;\n      this._z = z;\n      this._order = order || this._order;\n      this.onChangeCallback();\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor(this._x, this._y, this._z, this._order);\n    },\n    copy: function copy(euler) {\n      this._x = euler._x;\n      this._y = euler._y;\n      this._z = euler._z;\n      this._order = euler._order;\n      this.onChangeCallback();\n      return this;\n    },\n    setFromRotationMatrix: function setFromRotationMatrix(m, order, update) {\n      var clamp = THREE.Math.clamp; // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n      var te = m.elements;\n      var m11 = te[0],\n          m12 = te[4],\n          m13 = te[8];\n      var m21 = te[1],\n          m22 = te[5],\n          m23 = te[9];\n      var m31 = te[2],\n          m32 = te[6],\n          m33 = te[10];\n      order = order || this._order;\n\n      if (order === 'XYZ') {\n        this._y = Math.asin(clamp(m13, -1, 1));\n\n        if (Math.abs(m13) < 0.99999) {\n          this._x = Math.atan2(-m23, m33);\n          this._z = Math.atan2(-m12, m11);\n        } else {\n          this._x = Math.atan2(m32, m22);\n          this._z = 0;\n        }\n      } else if (order === 'YXZ') {\n        this._x = Math.asin(-clamp(m23, -1, 1));\n\n        if (Math.abs(m23) < 0.99999) {\n          this._y = Math.atan2(m13, m33);\n          this._z = Math.atan2(m21, m22);\n        } else {\n          this._y = Math.atan2(-m31, m11);\n          this._z = 0;\n        }\n      } else if (order === 'ZXY') {\n        this._x = Math.asin(clamp(m32, -1, 1));\n\n        if (Math.abs(m32) < 0.99999) {\n          this._y = Math.atan2(-m31, m33);\n          this._z = Math.atan2(-m12, m22);\n        } else {\n          this._y = 0;\n          this._z = Math.atan2(m21, m11);\n        }\n      } else if (order === 'ZYX') {\n        this._y = Math.asin(-clamp(m31, -1, 1));\n\n        if (Math.abs(m31) < 0.99999) {\n          this._x = Math.atan2(m32, m33);\n          this._z = Math.atan2(m21, m11);\n        } else {\n          this._x = 0;\n          this._z = Math.atan2(-m12, m22);\n        }\n      } else if (order === 'YZX') {\n        this._z = Math.asin(clamp(m21, -1, 1));\n\n        if (Math.abs(m21) < 0.99999) {\n          this._x = Math.atan2(-m23, m22);\n          this._y = Math.atan2(-m31, m11);\n        } else {\n          this._x = 0;\n          this._y = Math.atan2(m13, m33);\n        }\n      } else if (order === 'XZY') {\n        this._z = Math.asin(-clamp(m12, -1, 1));\n\n        if (Math.abs(m12) < 0.99999) {\n          this._x = Math.atan2(m32, m22);\n          this._y = Math.atan2(m13, m11);\n        } else {\n          this._x = Math.atan2(-m23, m33);\n          this._y = 0;\n        }\n      } else {\n        console.warn('THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order);\n      }\n\n      this._order = order;\n      if (update !== false) this.onChangeCallback();\n      return this;\n    },\n    setFromQuaternion: function () {\n      var matrix;\n      return function setFromQuaternion(q, order, update) {\n        if (matrix === undefined) matrix = new THREE.Matrix4();\n        matrix.makeRotationFromQuaternion(q);\n        return this.setFromRotationMatrix(matrix, order, update);\n      };\n    }(),\n    setFromVector3: function setFromVector3(v, order) {\n      return this.set(v.x, v.y, v.z, order || this._order);\n    },\n    reorder: function () {\n      // WARNING: this discards revolution information -bhouston\n      var q = new THREE.Quaternion();\n      return function reorder(newOrder) {\n        q.setFromEuler(this);\n        return this.setFromQuaternion(q, newOrder);\n      };\n    }(),\n    equals: function equals(euler) {\n      return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;\n    },\n    fromArray: function fromArray(array) {\n      this._x = array[0];\n      this._y = array[1];\n      this._z = array[2];\n      if (array[3] !== undefined) this._order = array[3];\n      this.onChangeCallback();\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      array[offset] = this._x;\n      array[offset + 1] = this._y;\n      array[offset + 2] = this._z;\n      array[offset + 3] = this._order;\n      return array;\n    },\n    toVector3: function toVector3(optionalResult) {\n      if (optionalResult) {\n        return optionalResult.set(this._x, this._y, this._z);\n      } else {\n        return new THREE.Vector3(this._x, this._y, this._z);\n      }\n    },\n    onChange: function onChange(callback) {\n      this.onChangeCallback = callback;\n      return this;\n    },\n    onChangeCallback: function onChangeCallback() {}\n  }; // File:src/math/Line3.js\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Line3 = function (start, end) {\n    this.start = start !== undefined ? start : new THREE.Vector3();\n    this.end = end !== undefined ? end : new THREE.Vector3();\n  };\n\n  THREE.Line3.prototype = {\n    constructor: THREE.Line3,\n    set: function set(start, end) {\n      this.start.copy(start);\n      this.end.copy(end);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(line) {\n      this.start.copy(line.start);\n      this.end.copy(line.end);\n      return this;\n    },\n    center: function center(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.addVectors(this.start, this.end).multiplyScalar(0.5);\n    },\n    delta: function delta(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.subVectors(this.end, this.start);\n    },\n    distanceSq: function distanceSq() {\n      return this.start.distanceToSquared(this.end);\n    },\n    distance: function distance() {\n      return this.start.distanceTo(this.end);\n    },\n    at: function at(t, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return this.delta(result).multiplyScalar(t).add(this.start);\n    },\n    closestPointToPointParameter: function () {\n      var startP = new THREE.Vector3();\n      var startEnd = new THREE.Vector3();\n      return function closestPointToPointParameter(point, clampToLine) {\n        startP.subVectors(point, this.start);\n        startEnd.subVectors(this.end, this.start);\n        var startEnd2 = startEnd.dot(startEnd);\n        var startEnd_startP = startEnd.dot(startP);\n        var t = startEnd_startP / startEnd2;\n\n        if (clampToLine) {\n          t = THREE.Math.clamp(t, 0, 1);\n        }\n\n        return t;\n      };\n    }(),\n    closestPointToPoint: function closestPointToPoint(point, clampToLine, optionalTarget) {\n      var t = this.closestPointToPointParameter(point, clampToLine);\n      var result = optionalTarget || new THREE.Vector3();\n      return this.delta(result).multiplyScalar(t).add(this.start);\n    },\n    applyMatrix4: function applyMatrix4(matrix) {\n      this.start.applyMatrix4(matrix);\n      this.end.applyMatrix4(matrix);\n      return this;\n    },\n    equals: function equals(line) {\n      return line.start.equals(this.start) && line.end.equals(this.end);\n    }\n  }; // File:src/math/Box2.js\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Box2 = function (min, max) {\n    this.min = min !== undefined ? min : new THREE.Vector2(+Infinity, +Infinity);\n    this.max = max !== undefined ? max : new THREE.Vector2(-Infinity, -Infinity);\n  };\n\n  THREE.Box2.prototype = {\n    constructor: THREE.Box2,\n    set: function set(min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n      return this;\n    },\n    setFromPoints: function setFromPoints(points) {\n      this.makeEmpty();\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    },\n    setFromCenterAndSize: function () {\n      var v1 = new THREE.Vector2();\n      return function setFromCenterAndSize(center, size) {\n        var halfSize = v1.copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n      return this;\n    },\n    makeEmpty: function makeEmpty() {\n      this.min.x = this.min.y = +Infinity;\n      this.max.x = this.max.y = -Infinity;\n      return this;\n    },\n    isEmpty: function isEmpty() {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n      return this.max.x < this.min.x || this.max.y < this.min.y;\n    },\n    center: function center(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector2();\n      return result.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n    size: function size(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector2();\n      return result.subVectors(this.max, this.min);\n    },\n    expandByPoint: function expandByPoint(point) {\n      this.min.min(point);\n      this.max.max(point);\n      return this;\n    },\n    expandByVector: function expandByVector(vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n      return this;\n    },\n    expandByScalar: function expandByScalar(scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n      return this;\n    },\n    containsPoint: function containsPoint(point) {\n      if (point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y) {\n        return false;\n      }\n\n      return true;\n    },\n    containsBox: function containsBox(box) {\n      if (this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y) {\n        return true;\n      }\n\n      return false;\n    },\n    getParameter: function getParameter(point, optionalTarget) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n      var result = optionalTarget || new THREE.Vector2();\n      return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y));\n    },\n    intersectsBox: function intersectsBox(box) {\n      // using 6 splitting planes to rule out intersections.\n      if (box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y) {\n        return false;\n      }\n\n      return true;\n    },\n    clampPoint: function clampPoint(point, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector2();\n      return result.copy(point).clamp(this.min, this.max);\n    },\n    distanceToPoint: function () {\n      var v1 = new THREE.Vector2();\n      return function distanceToPoint(point) {\n        var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n      };\n    }(),\n    intersect: function intersect(box) {\n      this.min.max(box.min);\n      this.max.min(box.max);\n      return this;\n    },\n    union: function union(box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n      return this;\n    },\n    translate: function translate(offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n      return this;\n    },\n    equals: function equals(box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n  }; // File:src/math/Box3.js\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  THREE.Box3 = function (min, max) {\n    this.min = min !== undefined ? min : new THREE.Vector3(+Infinity, +Infinity, +Infinity);\n    this.max = max !== undefined ? max : new THREE.Vector3(-Infinity, -Infinity, -Infinity);\n  };\n\n  THREE.Box3.prototype = {\n    constructor: THREE.Box3,\n    set: function set(min, max) {\n      this.min.copy(min);\n      this.max.copy(max);\n      return this;\n    },\n    setFromArray: function setFromArray(array) {\n      var minX = +Infinity;\n      var minY = +Infinity;\n      var minZ = +Infinity;\n      var maxX = -Infinity;\n      var maxY = -Infinity;\n      var maxZ = -Infinity;\n\n      for (var i = 0, l = array.length; i < l; i += 3) {\n        var x = array[i];\n        var y = array[i + 1];\n        var z = array[i + 2];\n        if (x < minX) minX = x;\n        if (y < minY) minY = y;\n        if (z < minZ) minZ = z;\n        if (x > maxX) maxX = x;\n        if (y > maxY) maxY = y;\n        if (z > maxZ) maxZ = z;\n      }\n\n      this.min.set(minX, minY, minZ);\n      this.max.set(maxX, maxY, maxZ);\n    },\n    setFromPoints: function setFromPoints(points) {\n      this.makeEmpty();\n\n      for (var i = 0, il = points.length; i < il; i++) {\n        this.expandByPoint(points[i]);\n      }\n\n      return this;\n    },\n    setFromCenterAndSize: function () {\n      var v1 = new THREE.Vector3();\n      return function setFromCenterAndSize(center, size) {\n        var halfSize = v1.copy(size).multiplyScalar(0.5);\n        this.min.copy(center).sub(halfSize);\n        this.max.copy(center).add(halfSize);\n        return this;\n      };\n    }(),\n    setFromObject: function () {\n      // Computes the world-axis-aligned bounding box of an object (including its children),\n      // accounting for both the object's, and children's, world transforms\n      var v1 = new THREE.Vector3();\n      return function setFromObject(object) {\n        var scope = this;\n        object.updateMatrixWorld(true);\n        this.makeEmpty();\n        object.traverse(function (node) {\n          var geometry = node.geometry;\n\n          if (geometry !== undefined) {\n            if (geometry instanceof THREE.Geometry) {\n              var vertices = geometry.vertices;\n\n              for (var i = 0, il = vertices.length; i < il; i++) {\n                v1.copy(vertices[i]);\n                v1.applyMatrix4(node.matrixWorld);\n                scope.expandByPoint(v1);\n              }\n            } else if (geometry instanceof THREE.BufferGeometry) {\n              var attribute = geometry.attributes.position;\n\n              if (attribute !== undefined) {\n                var array, offset, stride;\n\n                if (attribute instanceof THREE.InterleavedBufferAttribute) {\n                  array = attribute.data.array;\n                  offset = attribute.offset;\n                  stride = attribute.data.stride;\n                } else {\n                  array = attribute.array;\n                  offset = 0;\n                  stride = 3;\n                }\n\n                for (var i = offset, il = array.length; i < il; i += stride) {\n                  v1.fromArray(array, i);\n                  v1.applyMatrix4(node.matrixWorld);\n                  scope.expandByPoint(v1);\n                }\n              }\n            }\n          }\n        });\n        return this;\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(box) {\n      this.min.copy(box.min);\n      this.max.copy(box.max);\n      return this;\n    },\n    makeEmpty: function makeEmpty() {\n      this.min.x = this.min.y = this.min.z = +Infinity;\n      this.max.x = this.max.y = this.max.z = -Infinity;\n      return this;\n    },\n    isEmpty: function isEmpty() {\n      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n      return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n    },\n    center: function center(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.addVectors(this.min, this.max).multiplyScalar(0.5);\n    },\n    size: function size(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.subVectors(this.max, this.min);\n    },\n    expandByPoint: function expandByPoint(point) {\n      this.min.min(point);\n      this.max.max(point);\n      return this;\n    },\n    expandByVector: function expandByVector(vector) {\n      this.min.sub(vector);\n      this.max.add(vector);\n      return this;\n    },\n    expandByScalar: function expandByScalar(scalar) {\n      this.min.addScalar(-scalar);\n      this.max.addScalar(scalar);\n      return this;\n    },\n    containsPoint: function containsPoint(point) {\n      if (point.x < this.min.x || point.x > this.max.x || point.y < this.min.y || point.y > this.max.y || point.z < this.min.z || point.z > this.max.z) {\n        return false;\n      }\n\n      return true;\n    },\n    containsBox: function containsBox(box) {\n      if (this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z) {\n        return true;\n      }\n\n      return false;\n    },\n    getParameter: function getParameter(point, optionalTarget) {\n      // This can potentially have a divide by zero if the box\n      // has a size dimension of 0.\n      var result = optionalTarget || new THREE.Vector3();\n      return result.set((point.x - this.min.x) / (this.max.x - this.min.x), (point.y - this.min.y) / (this.max.y - this.min.y), (point.z - this.min.z) / (this.max.z - this.min.z));\n    },\n    intersectsBox: function intersectsBox(box) {\n      // using 6 splitting planes to rule out intersections.\n      if (box.max.x < this.min.x || box.min.x > this.max.x || box.max.y < this.min.y || box.min.y > this.max.y || box.max.z < this.min.z || box.min.z > this.max.z) {\n        return false;\n      }\n\n      return true;\n    },\n    intersectsSphere: function () {\n      var closestPoint;\n      return function intersectsSphere(sphere) {\n        if (closestPoint === undefined) closestPoint = new THREE.Vector3(); // Find the point on the AABB closest to the sphere center.\n\n        this.clampPoint(sphere.center, closestPoint); // If that point is inside the sphere, the AABB and sphere intersect.\n\n        return closestPoint.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;\n      };\n    }(),\n    intersectsPlane: function intersectsPlane(plane) {\n      // We compute the minimum and maximum dot product values. If those values\n      // are on the same side (back or front) of the plane, then there is no intersection.\n      var min, max;\n\n      if (plane.normal.x > 0) {\n        min = plane.normal.x * this.min.x;\n        max = plane.normal.x * this.max.x;\n      } else {\n        min = plane.normal.x * this.max.x;\n        max = plane.normal.x * this.min.x;\n      }\n\n      if (plane.normal.y > 0) {\n        min += plane.normal.y * this.min.y;\n        max += plane.normal.y * this.max.y;\n      } else {\n        min += plane.normal.y * this.max.y;\n        max += plane.normal.y * this.min.y;\n      }\n\n      if (plane.normal.z > 0) {\n        min += plane.normal.z * this.min.z;\n        max += plane.normal.z * this.max.z;\n      } else {\n        min += plane.normal.z * this.max.z;\n        max += plane.normal.z * this.min.z;\n      }\n\n      return min <= plane.constant && max >= plane.constant;\n    },\n    clampPoint: function clampPoint(point, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.copy(point).clamp(this.min, this.max);\n    },\n    distanceToPoint: function () {\n      var v1 = new THREE.Vector3();\n      return function distanceToPoint(point) {\n        var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n        return clampedPoint.sub(point).length();\n      };\n    }(),\n    getBoundingSphere: function () {\n      var v1 = new THREE.Vector3();\n      return function getBoundingSphere(optionalTarget) {\n        var result = optionalTarget || new THREE.Sphere();\n        result.center = this.center();\n        result.radius = this.size(v1).length() * 0.5;\n        return result;\n      };\n    }(),\n    intersect: function intersect(box) {\n      this.min.max(box.min);\n      this.max.min(box.max); // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\n      if (this.isEmpty()) this.makeEmpty();\n      return this;\n    },\n    union: function union(box) {\n      this.min.min(box.min);\n      this.max.max(box.max);\n      return this;\n    },\n    applyMatrix4: function () {\n      var points = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n      return function applyMatrix4(matrix) {\n        // transform of empty box is an empty box.\n        if (this.isEmpty()) return this; // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\n        points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n\n        points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n\n        points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n\n        points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n\n        points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n\n        points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n\n        points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n\n        points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n        this.setFromPoints(points);\n        return this;\n      };\n    }(),\n    translate: function translate(offset) {\n      this.min.add(offset);\n      this.max.add(offset);\n      return this;\n    },\n    equals: function equals(box) {\n      return box.min.equals(this.min) && box.max.equals(this.max);\n    }\n  }; // File:src/math/Matrix3.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author bhouston / http://clara.io\n   * @author tschw\n   */\n\n  THREE.Matrix3 = function () {\n    this.elements = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);\n\n    if (arguments.length > 0) {\n      console.error('THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.');\n    }\n  };\n\n  THREE.Matrix3.prototype = {\n    constructor: THREE.Matrix3,\n    set: function set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\n      var te = this.elements;\n      te[0] = n11;\n      te[1] = n21;\n      te[2] = n31;\n      te[3] = n12;\n      te[4] = n22;\n      te[5] = n32;\n      te[6] = n13;\n      te[7] = n23;\n      te[8] = n33;\n      return this;\n    },\n    identity: function identity() {\n      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().fromArray(this.elements);\n    },\n    copy: function copy(m) {\n      var me = m.elements;\n      this.set(me[0], me[3], me[6], me[1], me[4], me[7], me[2], me[5], me[8]);\n      return this;\n    },\n    setFromMatrix4: function setFromMatrix4(m) {\n      var me = m.elements;\n      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);\n      return this;\n    },\n    applyToVector3Array: function () {\n      var v1;\n      return function applyToVector3Array(array, offset, length) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        if (offset === undefined) offset = 0;\n        if (length === undefined) length = array.length;\n\n        for (var i = 0, j = offset; i < length; i += 3, j += 3) {\n          v1.fromArray(array, j);\n          v1.applyMatrix3(this);\n          v1.toArray(array, j);\n        }\n\n        return array;\n      };\n    }(),\n    applyToBuffer: function () {\n      var v1;\n      return function applyToBuffer(buffer, offset, length) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        if (offset === undefined) offset = 0;\n        if (length === undefined) length = buffer.length / buffer.itemSize;\n\n        for (var i = 0, j = offset; i < length; i++, j++) {\n          v1.x = buffer.getX(j);\n          v1.y = buffer.getY(j);\n          v1.z = buffer.getZ(j);\n          v1.applyMatrix3(this);\n          buffer.setXYZ(v1.x, v1.y, v1.z);\n        }\n\n        return buffer;\n      };\n    }(),\n    multiplyScalar: function multiplyScalar(s) {\n      var te = this.elements;\n      te[0] *= s;\n      te[3] *= s;\n      te[6] *= s;\n      te[1] *= s;\n      te[4] *= s;\n      te[7] *= s;\n      te[2] *= s;\n      te[5] *= s;\n      te[8] *= s;\n      return this;\n    },\n    determinant: function determinant() {\n      var te = this.elements;\n      var a = te[0],\n          b = te[1],\n          c = te[2],\n          d = te[3],\n          e = te[4],\n          f = te[5],\n          g = te[6],\n          h = te[7],\n          i = te[8];\n      return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n    },\n    getInverse: function getInverse(matrix, throwOnDegenerate) {\n      if (matrix instanceof THREE.Matrix4) {\n        console.error(\"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\");\n      }\n\n      var me = matrix.elements,\n          te = this.elements,\n          n11 = me[0],\n          n21 = me[1],\n          n31 = me[2],\n          n12 = me[3],\n          n22 = me[4],\n          n32 = me[5],\n          n13 = me[6],\n          n23 = me[7],\n          n33 = me[8],\n          t11 = n33 * n22 - n32 * n23,\n          t12 = n32 * n13 - n33 * n12,\n          t13 = n23 * n12 - n22 * n13,\n          det = n11 * t11 + n21 * t12 + n31 * t13;\n\n      if (det === 0) {\n        var msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\n\n        if (throwOnDegenerate || false) {\n          throw new Error(msg);\n        } else {\n          console.warn(msg);\n        }\n\n        return this.identity();\n      }\n\n      var detInv = 1 / det;\n      te[0] = t11 * detInv;\n      te[1] = (n31 * n23 - n33 * n21) * detInv;\n      te[2] = (n32 * n21 - n31 * n22) * detInv;\n      te[3] = t12 * detInv;\n      te[4] = (n33 * n11 - n31 * n13) * detInv;\n      te[5] = (n31 * n12 - n32 * n11) * detInv;\n      te[6] = t13 * detInv;\n      te[7] = (n21 * n13 - n23 * n11) * detInv;\n      te[8] = (n22 * n11 - n21 * n12) * detInv;\n      return this;\n    },\n    transpose: function transpose() {\n      var tmp,\n          m = this.elements;\n      tmp = m[1];\n      m[1] = m[3];\n      m[3] = tmp;\n      tmp = m[2];\n      m[2] = m[6];\n      m[6] = tmp;\n      tmp = m[5];\n      m[5] = m[7];\n      m[7] = tmp;\n      return this;\n    },\n    flattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n      console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated \" + \"- just use .toArray instead.\");\n      return this.toArray(array, offset);\n    },\n    getNormalMatrix: function getNormalMatrix(matrix4) {\n      return this.setFromMatrix4(matrix4).getInverse(this).transpose();\n    },\n    transposeIntoArray: function transposeIntoArray(r) {\n      var m = this.elements;\n      r[0] = m[0];\n      r[1] = m[3];\n      r[2] = m[6];\n      r[3] = m[1];\n      r[4] = m[4];\n      r[5] = m[7];\n      r[6] = m[2];\n      r[7] = m[5];\n      r[8] = m[8];\n      return this;\n    },\n    fromArray: function fromArray(array) {\n      this.elements.set(array);\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      var te = this.elements;\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n      array[offset + 3] = te[3];\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n      array[offset + 8] = te[8];\n      return array;\n    }\n  }; // File:src/math/Matrix4.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author philogb / http://blog.thejit.org/\n   * @author jordi_ros / http://plattsoft.com\n   * @author D1plo1d / http://github.com/D1plo1d\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author timknip / http://www.floorplanner.com/\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  THREE.Matrix4 = function () {\n    this.elements = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n    if (arguments.length > 0) {\n      console.error('THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.');\n    }\n  };\n\n  THREE.Matrix4.prototype = {\n    constructor: THREE.Matrix4,\n    set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n      var te = this.elements;\n      te[0] = n11;\n      te[4] = n12;\n      te[8] = n13;\n      te[12] = n14;\n      te[1] = n21;\n      te[5] = n22;\n      te[9] = n23;\n      te[13] = n24;\n      te[2] = n31;\n      te[6] = n32;\n      te[10] = n33;\n      te[14] = n34;\n      te[3] = n41;\n      te[7] = n42;\n      te[11] = n43;\n      te[15] = n44;\n      return this;\n    },\n    identity: function identity() {\n      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n      return this;\n    },\n    clone: function clone() {\n      return new THREE.Matrix4().fromArray(this.elements);\n    },\n    copy: function copy(m) {\n      this.elements.set(m.elements);\n      return this;\n    },\n    copyPosition: function copyPosition(m) {\n      var te = this.elements;\n      var me = m.elements;\n      te[12] = me[12];\n      te[13] = me[13];\n      te[14] = me[14];\n      return this;\n    },\n    extractBasis: function extractBasis(xAxis, yAxis, zAxis) {\n      xAxis.setFromMatrixColumn(this, 0);\n      yAxis.setFromMatrixColumn(this, 1);\n      zAxis.setFromMatrixColumn(this, 2);\n      return this;\n    },\n    makeBasis: function makeBasis(xAxis, yAxis, zAxis) {\n      this.set(xAxis.x, yAxis.x, zAxis.x, 0, xAxis.y, yAxis.y, zAxis.y, 0, xAxis.z, yAxis.z, zAxis.z, 0, 0, 0, 0, 1);\n      return this;\n    },\n    extractRotation: function () {\n      var v1;\n      return function extractRotation(m) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        var te = this.elements;\n        var me = m.elements;\n        var scaleX = 1 / v1.setFromMatrixColumn(m, 0).length();\n        var scaleY = 1 / v1.setFromMatrixColumn(m, 1).length();\n        var scaleZ = 1 / v1.setFromMatrixColumn(m, 2).length();\n        te[0] = me[0] * scaleX;\n        te[1] = me[1] * scaleX;\n        te[2] = me[2] * scaleX;\n        te[4] = me[4] * scaleY;\n        te[5] = me[5] * scaleY;\n        te[6] = me[6] * scaleY;\n        te[8] = me[8] * scaleZ;\n        te[9] = me[9] * scaleZ;\n        te[10] = me[10] * scaleZ;\n        return this;\n      };\n    }(),\n    makeRotationFromEuler: function makeRotationFromEuler(euler) {\n      if (euler instanceof THREE.Euler === false) {\n        console.error('THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.');\n      }\n\n      var te = this.elements;\n      var x = euler.x,\n          y = euler.y,\n          z = euler.z;\n      var a = Math.cos(x),\n          b = Math.sin(x);\n      var c = Math.cos(y),\n          d = Math.sin(y);\n      var e = Math.cos(z),\n          f = Math.sin(z);\n\n      if (euler.order === 'XYZ') {\n        var ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n        te[0] = c * e;\n        te[4] = -c * f;\n        te[8] = d;\n        te[1] = af + be * d;\n        te[5] = ae - bf * d;\n        te[9] = -b * c;\n        te[2] = bf - ae * d;\n        te[6] = be + af * d;\n        te[10] = a * c;\n      } else if (euler.order === 'YXZ') {\n        var ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n        te[0] = ce + df * b;\n        te[4] = de * b - cf;\n        te[8] = a * d;\n        te[1] = a * f;\n        te[5] = a * e;\n        te[9] = -b;\n        te[2] = cf * b - de;\n        te[6] = df + ce * b;\n        te[10] = a * c;\n      } else if (euler.order === 'ZXY') {\n        var ce = c * e,\n            cf = c * f,\n            de = d * e,\n            df = d * f;\n        te[0] = ce - df * b;\n        te[4] = -a * f;\n        te[8] = de + cf * b;\n        te[1] = cf + de * b;\n        te[5] = a * e;\n        te[9] = df - ce * b;\n        te[2] = -a * d;\n        te[6] = b;\n        te[10] = a * c;\n      } else if (euler.order === 'ZYX') {\n        var ae = a * e,\n            af = a * f,\n            be = b * e,\n            bf = b * f;\n        te[0] = c * e;\n        te[4] = be * d - af;\n        te[8] = ae * d + bf;\n        te[1] = c * f;\n        te[5] = bf * d + ae;\n        te[9] = af * d - be;\n        te[2] = -d;\n        te[6] = b * c;\n        te[10] = a * c;\n      } else if (euler.order === 'YZX') {\n        var ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n        te[0] = c * e;\n        te[4] = bd - ac * f;\n        te[8] = bc * f + ad;\n        te[1] = f;\n        te[5] = a * e;\n        te[9] = -b * e;\n        te[2] = -d * e;\n        te[6] = ad * f + bc;\n        te[10] = ac - bd * f;\n      } else if (euler.order === 'XZY') {\n        var ac = a * c,\n            ad = a * d,\n            bc = b * c,\n            bd = b * d;\n        te[0] = c * e;\n        te[4] = -f;\n        te[8] = d * e;\n        te[1] = ac * f + bd;\n        te[5] = a * e;\n        te[9] = ad * f - bc;\n        te[2] = bc * f - ad;\n        te[6] = b * e;\n        te[10] = bd * f + ac;\n      } // last column\n\n\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0; // bottom row\n\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return this;\n    },\n    makeRotationFromQuaternion: function makeRotationFromQuaternion(q) {\n      var te = this.elements;\n      var x = q.x,\n          y = q.y,\n          z = q.z,\n          w = q.w;\n      var x2 = x + x,\n          y2 = y + y,\n          z2 = z + z;\n      var xx = x * x2,\n          xy = x * y2,\n          xz = x * z2;\n      var yy = y * y2,\n          yz = y * z2,\n          zz = z * z2;\n      var wx = w * x2,\n          wy = w * y2,\n          wz = w * z2;\n      te[0] = 1 - (yy + zz);\n      te[4] = xy - wz;\n      te[8] = xz + wy;\n      te[1] = xy + wz;\n      te[5] = 1 - (xx + zz);\n      te[9] = yz - wx;\n      te[2] = xz - wy;\n      te[6] = yz + wx;\n      te[10] = 1 - (xx + yy); // last column\n\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0; // bottom row\n\n      te[12] = 0;\n      te[13] = 0;\n      te[14] = 0;\n      te[15] = 1;\n      return this;\n    },\n    lookAt: function () {\n      var x, y, z;\n      return function lookAt(eye, target, up) {\n        if (x === undefined) {\n          x = new THREE.Vector3();\n          y = new THREE.Vector3();\n          z = new THREE.Vector3();\n        }\n\n        var te = this.elements;\n        z.subVectors(eye, target).normalize();\n\n        if (z.lengthSq() === 0) {\n          z.z = 1;\n        }\n\n        x.crossVectors(up, z).normalize();\n\n        if (x.lengthSq() === 0) {\n          z.z += 0.0001;\n          x.crossVectors(up, z).normalize();\n        }\n\n        y.crossVectors(z, x);\n        te[0] = x.x;\n        te[4] = y.x;\n        te[8] = z.x;\n        te[1] = x.y;\n        te[5] = y.y;\n        te[9] = z.y;\n        te[2] = x.z;\n        te[6] = y.z;\n        te[10] = z.z;\n        return this;\n      };\n    }(),\n    multiply: function multiply(m, n) {\n      if (n !== undefined) {\n        console.warn('THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.');\n        return this.multiplyMatrices(m, n);\n      }\n\n      return this.multiplyMatrices(this, m);\n    },\n    premultiply: function premultiply(m) {\n      return this.multiplyMatrices(m, this);\n    },\n    multiplyMatrices: function multiplyMatrices(a, b) {\n      var ae = a.elements;\n      var be = b.elements;\n      var te = this.elements;\n      var a11 = ae[0],\n          a12 = ae[4],\n          a13 = ae[8],\n          a14 = ae[12];\n      var a21 = ae[1],\n          a22 = ae[5],\n          a23 = ae[9],\n          a24 = ae[13];\n      var a31 = ae[2],\n          a32 = ae[6],\n          a33 = ae[10],\n          a34 = ae[14];\n      var a41 = ae[3],\n          a42 = ae[7],\n          a43 = ae[11],\n          a44 = ae[15];\n      var b11 = be[0],\n          b12 = be[4],\n          b13 = be[8],\n          b14 = be[12];\n      var b21 = be[1],\n          b22 = be[5],\n          b23 = be[9],\n          b24 = be[13];\n      var b31 = be[2],\n          b32 = be[6],\n          b33 = be[10],\n          b34 = be[14];\n      var b41 = be[3],\n          b42 = be[7],\n          b43 = be[11],\n          b44 = be[15];\n      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n      return this;\n    },\n    multiplyToArray: function multiplyToArray(a, b, r) {\n      var te = this.elements;\n      this.multiplyMatrices(a, b);\n      r[0] = te[0];\n      r[1] = te[1];\n      r[2] = te[2];\n      r[3] = te[3];\n      r[4] = te[4];\n      r[5] = te[5];\n      r[6] = te[6];\n      r[7] = te[7];\n      r[8] = te[8];\n      r[9] = te[9];\n      r[10] = te[10];\n      r[11] = te[11];\n      r[12] = te[12];\n      r[13] = te[13];\n      r[14] = te[14];\n      r[15] = te[15];\n      return this;\n    },\n    multiplyScalar: function multiplyScalar(s) {\n      var te = this.elements;\n      te[0] *= s;\n      te[4] *= s;\n      te[8] *= s;\n      te[12] *= s;\n      te[1] *= s;\n      te[5] *= s;\n      te[9] *= s;\n      te[13] *= s;\n      te[2] *= s;\n      te[6] *= s;\n      te[10] *= s;\n      te[14] *= s;\n      te[3] *= s;\n      te[7] *= s;\n      te[11] *= s;\n      te[15] *= s;\n      return this;\n    },\n    applyToVector3Array: function () {\n      var v1;\n      return function applyToVector3Array(array, offset, length) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        if (offset === undefined) offset = 0;\n        if (length === undefined) length = array.length;\n\n        for (var i = 0, j = offset; i < length; i += 3, j += 3) {\n          v1.fromArray(array, j);\n          v1.applyMatrix4(this);\n          v1.toArray(array, j);\n        }\n\n        return array;\n      };\n    }(),\n    applyToBuffer: function () {\n      var v1;\n      return function applyToBuffer(buffer, offset, length) {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        if (offset === undefined) offset = 0;\n        if (length === undefined) length = buffer.length / buffer.itemSize;\n\n        for (var i = 0, j = offset; i < length; i++, j++) {\n          v1.x = buffer.getX(j);\n          v1.y = buffer.getY(j);\n          v1.z = buffer.getZ(j);\n          v1.applyMatrix4(this);\n          buffer.setXYZ(v1.x, v1.y, v1.z);\n        }\n\n        return buffer;\n      };\n    }(),\n    determinant: function determinant() {\n      var te = this.elements;\n      var n11 = te[0],\n          n12 = te[4],\n          n13 = te[8],\n          n14 = te[12];\n      var n21 = te[1],\n          n22 = te[5],\n          n23 = te[9],\n          n24 = te[13];\n      var n31 = te[2],\n          n32 = te[6],\n          n33 = te[10],\n          n34 = te[14];\n      var n41 = te[3],\n          n42 = te[7],\n          n43 = te[11],\n          n44 = te[15]; //TODO: make this more efficient\n      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n      return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);\n    },\n    transpose: function transpose() {\n      var te = this.elements;\n      var tmp;\n      tmp = te[1];\n      te[1] = te[4];\n      te[4] = tmp;\n      tmp = te[2];\n      te[2] = te[8];\n      te[8] = tmp;\n      tmp = te[6];\n      te[6] = te[9];\n      te[9] = tmp;\n      tmp = te[3];\n      te[3] = te[12];\n      te[12] = tmp;\n      tmp = te[7];\n      te[7] = te[13];\n      te[13] = tmp;\n      tmp = te[11];\n      te[11] = te[14];\n      te[14] = tmp;\n      return this;\n    },\n    flattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n      console.warn(\"THREE.Matrix3: .flattenToArrayOffset is deprecated \" + \"- just use .toArray instead.\");\n      return this.toArray(array, offset);\n    },\n    getPosition: function () {\n      var v1;\n      return function getPosition() {\n        if (v1 === undefined) v1 = new THREE.Vector3();\n        console.warn('THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.');\n        return v1.setFromMatrixColumn(this, 3);\n      };\n    }(),\n    setPosition: function setPosition(v) {\n      var te = this.elements;\n      te[12] = v.x;\n      te[13] = v.y;\n      te[14] = v.z;\n      return this;\n    },\n    getInverse: function getInverse(m, throwOnDegenerate) {\n      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n      var te = this.elements,\n          me = m.elements,\n          n11 = me[0],\n          n21 = me[1],\n          n31 = me[2],\n          n41 = me[3],\n          n12 = me[4],\n          n22 = me[5],\n          n32 = me[6],\n          n42 = me[7],\n          n13 = me[8],\n          n23 = me[9],\n          n33 = me[10],\n          n43 = me[11],\n          n14 = me[12],\n          n24 = me[13],\n          n34 = me[14],\n          n44 = me[15],\n          t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n          t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n          t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n          t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n      var det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n      if (det === 0) {\n        var msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n        if (throwOnDegenerate || false) {\n          throw new Error(msg);\n        } else {\n          console.warn(msg);\n        }\n\n        return this.identity();\n      }\n\n      var detInv = 1 / det;\n      te[0] = t11 * detInv;\n      te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n      te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n      te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n      te[4] = t12 * detInv;\n      te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n      te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n      te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n      te[8] = t13 * detInv;\n      te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n      te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n      te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n      te[12] = t14 * detInv;\n      te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n      te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n      te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n      return this;\n    },\n    scale: function scale(v) {\n      var te = this.elements;\n      var x = v.x,\n          y = v.y,\n          z = v.z;\n      te[0] *= x;\n      te[4] *= y;\n      te[8] *= z;\n      te[1] *= x;\n      te[5] *= y;\n      te[9] *= z;\n      te[2] *= x;\n      te[6] *= y;\n      te[10] *= z;\n      te[3] *= x;\n      te[7] *= y;\n      te[11] *= z;\n      return this;\n    },\n    getMaxScaleOnAxis: function getMaxScaleOnAxis() {\n      var te = this.elements;\n      var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n      var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n      var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));\n    },\n    makeTranslation: function makeTranslation(x, y, z) {\n      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);\n      return this;\n    },\n    makeRotationX: function makeRotationX(theta) {\n      var c = Math.cos(theta),\n          s = Math.sin(theta);\n      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);\n      return this;\n    },\n    makeRotationY: function makeRotationY(theta) {\n      var c = Math.cos(theta),\n          s = Math.sin(theta);\n      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);\n      return this;\n    },\n    makeRotationZ: function makeRotationZ(theta) {\n      var c = Math.cos(theta),\n          s = Math.sin(theta);\n      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n      return this;\n    },\n    makeRotationAxis: function makeRotationAxis(axis, angle) {\n      // Based on http://www.gamedev.net/reference/articles/article1199.asp\n      var c = Math.cos(angle);\n      var s = Math.sin(angle);\n      var t = 1 - c;\n      var x = axis.x,\n          y = axis.y,\n          z = axis.z;\n      var tx = t * x,\n          ty = t * y;\n      this.set(tx * x + c, tx * y - s * z, tx * z + s * y, 0, tx * y + s * z, ty * y + c, ty * z - s * x, 0, tx * z - s * y, ty * z + s * x, t * z * z + c, 0, 0, 0, 0, 1);\n      return this;\n    },\n    makeScale: function makeScale(x, y, z) {\n      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);\n      return this;\n    },\n    compose: function compose(position, quaternion, scale) {\n      this.makeRotationFromQuaternion(quaternion);\n      this.scale(scale);\n      this.setPosition(position);\n      return this;\n    },\n    decompose: function () {\n      var vector, matrix;\n      return function decompose(position, quaternion, scale) {\n        if (vector === undefined) {\n          vector = new THREE.Vector3();\n          matrix = new THREE.Matrix4();\n        }\n\n        var te = this.elements;\n        var sx = vector.set(te[0], te[1], te[2]).length();\n        var sy = vector.set(te[4], te[5], te[6]).length();\n        var sz = vector.set(te[8], te[9], te[10]).length(); // if determine is negative, we need to invert one scale\n\n        var det = this.determinant();\n\n        if (det < 0) {\n          sx = -sx;\n        }\n\n        position.x = te[12];\n        position.y = te[13];\n        position.z = te[14]; // scale the rotation part\n\n        matrix.elements.set(this.elements); // at this point matrix is incomplete so we can't use .copy()\n\n        var invSX = 1 / sx;\n        var invSY = 1 / sy;\n        var invSZ = 1 / sz;\n        matrix.elements[0] *= invSX;\n        matrix.elements[1] *= invSX;\n        matrix.elements[2] *= invSX;\n        matrix.elements[4] *= invSY;\n        matrix.elements[5] *= invSY;\n        matrix.elements[6] *= invSY;\n        matrix.elements[8] *= invSZ;\n        matrix.elements[9] *= invSZ;\n        matrix.elements[10] *= invSZ;\n        quaternion.setFromRotationMatrix(matrix);\n        scale.x = sx;\n        scale.y = sy;\n        scale.z = sz;\n        return this;\n      };\n    }(),\n    makeFrustum: function makeFrustum(left, right, bottom, top, near, far) {\n      var te = this.elements;\n      var x = 2 * near / (right - left);\n      var y = 2 * near / (top - bottom);\n      var a = (right + left) / (right - left);\n      var b = (top + bottom) / (top - bottom);\n      var c = -(far + near) / (far - near);\n      var d = -2 * far * near / (far - near);\n      te[0] = x;\n      te[4] = 0;\n      te[8] = a;\n      te[12] = 0;\n      te[1] = 0;\n      te[5] = y;\n      te[9] = b;\n      te[13] = 0;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = c;\n      te[14] = d;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = -1;\n      te[15] = 0;\n      return this;\n    },\n    makePerspective: function makePerspective(fov, aspect, near, far) {\n      var ymax = near * Math.tan(THREE.Math.DEG2RAD * fov * 0.5);\n      var ymin = -ymax;\n      var xmin = ymin * aspect;\n      var xmax = ymax * aspect;\n      return this.makeFrustum(xmin, xmax, ymin, ymax, near, far);\n    },\n    makeOrthographic: function makeOrthographic(left, right, top, bottom, near, far) {\n      var te = this.elements;\n      var w = 1.0 / (right - left);\n      var h = 1.0 / (top - bottom);\n      var p = 1.0 / (far - near);\n      var x = (right + left) * w;\n      var y = (top + bottom) * h;\n      var z = (far + near) * p;\n      te[0] = 2 * w;\n      te[4] = 0;\n      te[8] = 0;\n      te[12] = -x;\n      te[1] = 0;\n      te[5] = 2 * h;\n      te[9] = 0;\n      te[13] = -y;\n      te[2] = 0;\n      te[6] = 0;\n      te[10] = -2 * p;\n      te[14] = -z;\n      te[3] = 0;\n      te[7] = 0;\n      te[11] = 0;\n      te[15] = 1;\n      return this;\n    },\n    equals: function equals(matrix) {\n      var te = this.elements;\n      var me = matrix.elements;\n\n      for (var i = 0; i < 16; i++) {\n        if (te[i] !== me[i]) return false;\n      }\n\n      return true;\n    },\n    fromArray: function fromArray(array) {\n      this.elements.set(array);\n      return this;\n    },\n    toArray: function toArray(array, offset) {\n      if (array === undefined) array = [];\n      if (offset === undefined) offset = 0;\n      var te = this.elements;\n      array[offset] = te[0];\n      array[offset + 1] = te[1];\n      array[offset + 2] = te[2];\n      array[offset + 3] = te[3];\n      array[offset + 4] = te[4];\n      array[offset + 5] = te[5];\n      array[offset + 6] = te[6];\n      array[offset + 7] = te[7];\n      array[offset + 8] = te[8];\n      array[offset + 9] = te[9];\n      array[offset + 10] = te[10];\n      array[offset + 11] = te[11];\n      array[offset + 12] = te[12];\n      array[offset + 13] = te[13];\n      array[offset + 14] = te[14];\n      array[offset + 15] = te[15];\n      return array;\n    }\n  }; // File:src/math/Ray.js\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Ray = function (origin, direction) {\n    this.origin = origin !== undefined ? origin : new THREE.Vector3();\n    this.direction = direction !== undefined ? direction : new THREE.Vector3();\n  };\n\n  THREE.Ray.prototype = {\n    constructor: THREE.Ray,\n    set: function set(origin, direction) {\n      this.origin.copy(origin);\n      this.direction.copy(direction);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(ray) {\n      this.origin.copy(ray.origin);\n      this.direction.copy(ray.direction);\n      return this;\n    },\n    at: function at(t, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.copy(this.direction).multiplyScalar(t).add(this.origin);\n    },\n    lookAt: function lookAt(v) {\n      this.direction.copy(v).sub(this.origin).normalize();\n      return this;\n    },\n    recast: function () {\n      var v1 = new THREE.Vector3();\n      return function recast(t) {\n        this.origin.copy(this.at(t, v1));\n        return this;\n      };\n    }(),\n    closestPointToPoint: function closestPointToPoint(point, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      result.subVectors(point, this.origin);\n      var directionDistance = result.dot(this.direction);\n\n      if (directionDistance < 0) {\n        return result.copy(this.origin);\n      }\n\n      return result.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n    },\n    distanceToPoint: function distanceToPoint(point) {\n      return Math.sqrt(this.distanceSqToPoint(point));\n    },\n    distanceSqToPoint: function () {\n      var v1 = new THREE.Vector3();\n      return function distanceSqToPoint(point) {\n        var directionDistance = v1.subVectors(point, this.origin).dot(this.direction); // point behind the ray\n\n        if (directionDistance < 0) {\n          return this.origin.distanceToSquared(point);\n        }\n\n        v1.copy(this.direction).multiplyScalar(directionDistance).add(this.origin);\n        return v1.distanceToSquared(point);\n      };\n    }(),\n    distanceSqToSegment: function () {\n      var segCenter = new THREE.Vector3();\n      var segDir = new THREE.Vector3();\n      var diff = new THREE.Vector3();\n      return function distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n        // It returns the min distance between the ray and the segment\n        // defined by v0 and v1\n        // It can also set two optional targets :\n        // - The closest point on the ray\n        // - The closest point on the segment\n        segCenter.copy(v0).add(v1).multiplyScalar(0.5);\n        segDir.copy(v1).sub(v0).normalize();\n        diff.copy(this.origin).sub(segCenter);\n        var segExtent = v0.distanceTo(v1) * 0.5;\n        var a01 = -this.direction.dot(segDir);\n        var b0 = diff.dot(this.direction);\n        var b1 = -diff.dot(segDir);\n        var c = diff.lengthSq();\n        var det = Math.abs(1 - a01 * a01);\n        var s0, s1, sqrDist, extDet;\n\n        if (det > 0) {\n          // The ray and segment are not parallel.\n          s0 = a01 * b1 - b0;\n          s1 = a01 * b0 - b1;\n          extDet = segExtent * det;\n\n          if (s0 >= 0) {\n            if (s1 >= -extDet) {\n              if (s1 <= extDet) {\n                // region 0\n                // Minimum at interior points of ray and segment.\n                var invDet = 1 / det;\n                s0 *= invDet;\n                s1 *= invDet;\n                sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c;\n              } else {\n                // region 1\n                s1 = segExtent;\n                s0 = Math.max(0, -(a01 * s1 + b0));\n                sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n              }\n            } else {\n              // region 5\n              s1 = -segExtent;\n              s0 = Math.max(0, -(a01 * s1 + b0));\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          } else {\n            if (s1 <= -extDet) {\n              // region 4\n              s0 = Math.max(0, -(-a01 * segExtent + b0));\n              s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            } else if (s1 <= extDet) {\n              // region 3\n              s0 = 0;\n              s1 = Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = s1 * (s1 + 2 * b1) + c;\n            } else {\n              // region 2\n              s0 = Math.max(0, -(a01 * segExtent + b0));\n              s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);\n              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n            }\n          }\n        } else {\n          // Ray and segment are parallel.\n          s1 = a01 > 0 ? -segExtent : segExtent;\n          s0 = Math.max(0, -(a01 * s1 + b0));\n          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;\n        }\n\n        if (optionalPointOnRay) {\n          optionalPointOnRay.copy(this.direction).multiplyScalar(s0).add(this.origin);\n        }\n\n        if (optionalPointOnSegment) {\n          optionalPointOnSegment.copy(segDir).multiplyScalar(s1).add(segCenter);\n        }\n\n        return sqrDist;\n      };\n    }(),\n    intersectSphere: function () {\n      var v1 = new THREE.Vector3();\n      return function intersectSphere(sphere, optionalTarget) {\n        v1.subVectors(sphere.center, this.origin);\n        var tca = v1.dot(this.direction);\n        var d2 = v1.dot(v1) - tca * tca;\n        var radius2 = sphere.radius * sphere.radius;\n        if (d2 > radius2) return null;\n        var thc = Math.sqrt(radius2 - d2); // t0 = first intersect point - entrance on front of sphere\n\n        var t0 = tca - thc; // t1 = second intersect point - exit point on back of sphere\n\n        var t1 = tca + thc; // test to see if both t0 and t1 are behind the ray - if so, return null\n\n        if (t0 < 0 && t1 < 0) return null; // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n\n        if (t0 < 0) return this.at(t1, optionalTarget); // else t0 is in front of the ray, so return the first collision point scaled by t0\n\n        return this.at(t0, optionalTarget);\n      };\n    }(),\n    intersectsSphere: function intersectsSphere(sphere) {\n      return this.distanceToPoint(sphere.center) <= sphere.radius;\n    },\n    distanceToPlane: function distanceToPlane(plane) {\n      var denominator = plane.normal.dot(this.direction);\n\n      if (denominator === 0) {\n        // line is coplanar, return origin\n        if (plane.distanceToPoint(this.origin) === 0) {\n          return 0;\n        } // Null is preferable to undefined since undefined means.... it is undefined\n\n\n        return null;\n      }\n\n      var t = -(this.origin.dot(plane.normal) + plane.constant) / denominator; // Return if the ray never intersects the plane\n\n      return t >= 0 ? t : null;\n    },\n    intersectPlane: function intersectPlane(plane, optionalTarget) {\n      var t = this.distanceToPlane(plane);\n\n      if (t === null) {\n        return null;\n      }\n\n      return this.at(t, optionalTarget);\n    },\n    intersectsPlane: function intersectsPlane(plane) {\n      // check if the ray lies on the plane first\n      var distToPoint = plane.distanceToPoint(this.origin);\n\n      if (distToPoint === 0) {\n        return true;\n      }\n\n      var denominator = plane.normal.dot(this.direction);\n\n      if (denominator * distToPoint < 0) {\n        return true;\n      } // ray origin is behind the plane (and is pointing behind it)\n\n\n      return false;\n    },\n    intersectBox: function intersectBox(box, optionalTarget) {\n      var tmin, tmax, tymin, tymax, tzmin, tzmax;\n      var invdirx = 1 / this.direction.x,\n          invdiry = 1 / this.direction.y,\n          invdirz = 1 / this.direction.z;\n      var origin = this.origin;\n\n      if (invdirx >= 0) {\n        tmin = (box.min.x - origin.x) * invdirx;\n        tmax = (box.max.x - origin.x) * invdirx;\n      } else {\n        tmin = (box.max.x - origin.x) * invdirx;\n        tmax = (box.min.x - origin.x) * invdirx;\n      }\n\n      if (invdiry >= 0) {\n        tymin = (box.min.y - origin.y) * invdiry;\n        tymax = (box.max.y - origin.y) * invdiry;\n      } else {\n        tymin = (box.max.y - origin.y) * invdiry;\n        tymax = (box.min.y - origin.y) * invdiry;\n      }\n\n      if (tmin > tymax || tymin > tmax) return null; // These lines also handle the case where tmin or tmax is NaN\n      // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n      if (tymin > tmin || tmin !== tmin) tmin = tymin;\n      if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n      if (invdirz >= 0) {\n        tzmin = (box.min.z - origin.z) * invdirz;\n        tzmax = (box.max.z - origin.z) * invdirz;\n      } else {\n        tzmin = (box.max.z - origin.z) * invdirz;\n        tzmax = (box.min.z - origin.z) * invdirz;\n      }\n\n      if (tmin > tzmax || tzmin > tmax) return null;\n      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n      if (tzmax < tmax || tmax !== tmax) tmax = tzmax; //return point closest to the ray (positive side)\n\n      if (tmax < 0) return null;\n      return this.at(tmin >= 0 ? tmin : tmax, optionalTarget);\n    },\n    intersectsBox: function () {\n      var v = new THREE.Vector3();\n      return function intersectsBox(box) {\n        return this.intersectBox(box, v) !== null;\n      };\n    }(),\n    intersectTriangle: function () {\n      // Compute the offset origin, edges, and normal.\n      var diff = new THREE.Vector3();\n      var edge1 = new THREE.Vector3();\n      var edge2 = new THREE.Vector3();\n      var normal = new THREE.Vector3();\n      return function intersectTriangle(a, b, c, backfaceCulling, optionalTarget) {\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n        edge1.subVectors(b, a);\n        edge2.subVectors(c, a);\n        normal.crossVectors(edge1, edge2); // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\n        var DdN = this.direction.dot(normal);\n        var sign;\n\n        if (DdN > 0) {\n          if (backfaceCulling) return null;\n          sign = 1;\n        } else if (DdN < 0) {\n          sign = -1;\n          DdN = -DdN;\n        } else {\n          return null;\n        }\n\n        diff.subVectors(this.origin, a);\n        var DdQxE2 = sign * this.direction.dot(edge2.crossVectors(diff, edge2)); // b1 < 0, no intersection\n\n        if (DdQxE2 < 0) {\n          return null;\n        }\n\n        var DdE1xQ = sign * this.direction.dot(edge1.cross(diff)); // b2 < 0, no intersection\n\n        if (DdE1xQ < 0) {\n          return null;\n        } // b1+b2 > 1, no intersection\n\n\n        if (DdQxE2 + DdE1xQ > DdN) {\n          return null;\n        } // Line intersects triangle, check if ray does.\n\n\n        var QdN = -sign * diff.dot(normal); // t < 0, no intersection\n\n        if (QdN < 0) {\n          return null;\n        } // Ray intersects triangle.\n\n\n        return this.at(QdN / DdN, optionalTarget);\n      };\n    }(),\n    applyMatrix4: function applyMatrix4(matrix4) {\n      this.direction.add(this.origin).applyMatrix4(matrix4);\n      this.origin.applyMatrix4(matrix4);\n      this.direction.sub(this.origin);\n      this.direction.normalize();\n      return this;\n    },\n    equals: function equals(ray) {\n      return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);\n    }\n  }; // File:src/math/Sphere.js\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Sphere = function (center, radius) {\n    this.center = center !== undefined ? center : new THREE.Vector3();\n    this.radius = radius !== undefined ? radius : 0;\n  };\n\n  THREE.Sphere.prototype = {\n    constructor: THREE.Sphere,\n    set: function set(center, radius) {\n      this.center.copy(center);\n      this.radius = radius;\n      return this;\n    },\n    setFromPoints: function () {\n      var box = new THREE.Box3();\n      return function setFromPoints(points, optionalCenter) {\n        var center = this.center;\n\n        if (optionalCenter !== undefined) {\n          center.copy(optionalCenter);\n        } else {\n          box.setFromPoints(points).center(center);\n        }\n\n        var maxRadiusSq = 0;\n\n        for (var i = 0, il = points.length; i < il; i++) {\n          maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i]));\n        }\n\n        this.radius = Math.sqrt(maxRadiusSq);\n        return this;\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(sphere) {\n      this.center.copy(sphere.center);\n      this.radius = sphere.radius;\n      return this;\n    },\n    empty: function empty() {\n      return this.radius <= 0;\n    },\n    containsPoint: function containsPoint(point) {\n      return point.distanceToSquared(this.center) <= this.radius * this.radius;\n    },\n    distanceToPoint: function distanceToPoint(point) {\n      return point.distanceTo(this.center) - this.radius;\n    },\n    intersectsSphere: function intersectsSphere(sphere) {\n      var radiusSum = this.radius + sphere.radius;\n      return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;\n    },\n    intersectsBox: function intersectsBox(box) {\n      return box.intersectsSphere(this);\n    },\n    intersectsPlane: function intersectsPlane(plane) {\n      // We use the following equation to compute the signed distance from\n      // the center of the sphere to the plane.\n      //\n      // distance = q * n - d\n      //\n      // If this distance is greater than the radius of the sphere,\n      // then there is no intersection.\n      return Math.abs(this.center.dot(plane.normal) - plane.constant) <= this.radius;\n    },\n    clampPoint: function clampPoint(point, optionalTarget) {\n      var deltaLengthSq = this.center.distanceToSquared(point);\n      var result = optionalTarget || new THREE.Vector3();\n      result.copy(point);\n\n      if (deltaLengthSq > this.radius * this.radius) {\n        result.sub(this.center).normalize();\n        result.multiplyScalar(this.radius).add(this.center);\n      }\n\n      return result;\n    },\n    getBoundingBox: function getBoundingBox(optionalTarget) {\n      var box = optionalTarget || new THREE.Box3();\n      box.set(this.center, this.center);\n      box.expandByScalar(this.radius);\n      return box;\n    },\n    applyMatrix4: function applyMatrix4(matrix) {\n      this.center.applyMatrix4(matrix);\n      this.radius = this.radius * matrix.getMaxScaleOnAxis();\n      return this;\n    },\n    translate: function translate(offset) {\n      this.center.add(offset);\n      return this;\n    },\n    equals: function equals(sphere) {\n      return sphere.center.equals(this.center) && sphere.radius === this.radius;\n    }\n  }; // File:src/math/Frustum.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Frustum = function (p0, p1, p2, p3, p4, p5) {\n    this.planes = [p0 !== undefined ? p0 : new THREE.Plane(), p1 !== undefined ? p1 : new THREE.Plane(), p2 !== undefined ? p2 : new THREE.Plane(), p3 !== undefined ? p3 : new THREE.Plane(), p4 !== undefined ? p4 : new THREE.Plane(), p5 !== undefined ? p5 : new THREE.Plane()];\n  };\n\n  THREE.Frustum.prototype = {\n    constructor: THREE.Frustum,\n    set: function set(p0, p1, p2, p3, p4, p5) {\n      var planes = this.planes;\n      planes[0].copy(p0);\n      planes[1].copy(p1);\n      planes[2].copy(p2);\n      planes[3].copy(p3);\n      planes[4].copy(p4);\n      planes[5].copy(p5);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(frustum) {\n      var planes = this.planes;\n\n      for (var i = 0; i < 6; i++) {\n        planes[i].copy(frustum.planes[i]);\n      }\n\n      return this;\n    },\n    setFromMatrix: function setFromMatrix(m) {\n      var planes = this.planes;\n      var me = m.elements;\n      var me0 = me[0],\n          me1 = me[1],\n          me2 = me[2],\n          me3 = me[3];\n      var me4 = me[4],\n          me5 = me[5],\n          me6 = me[6],\n          me7 = me[7];\n      var me8 = me[8],\n          me9 = me[9],\n          me10 = me[10],\n          me11 = me[11];\n      var me12 = me[12],\n          me13 = me[13],\n          me14 = me[14],\n          me15 = me[15];\n      planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();\n      planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();\n      planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();\n      planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();\n      planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();\n      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();\n      return this;\n    },\n    intersectsObject: function () {\n      var sphere = new THREE.Sphere();\n      return function intersectsObject(object) {\n        var geometry = object.geometry;\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n        return this.intersectsSphere(sphere);\n      };\n    }(),\n    intersectsSprite: function () {\n      var sphere = new THREE.Sphere();\n      return function intersectsSprite(sprite) {\n        sphere.center.set(0, 0, 0);\n        sphere.radius = 0.7071067811865476;\n        sphere.applyMatrix4(sprite.matrixWorld);\n        return this.intersectsSphere(sphere);\n      };\n    }(),\n    intersectsSphere: function intersectsSphere(sphere) {\n      var planes = this.planes;\n      var center = sphere.center;\n      var negRadius = -sphere.radius;\n\n      for (var i = 0; i < 6; i++) {\n        var distance = planes[i].distanceToPoint(center);\n\n        if (distance < negRadius) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n    intersectsBox: function () {\n      var p1 = new THREE.Vector3(),\n          p2 = new THREE.Vector3();\n      return function intersectsBox(box) {\n        var planes = this.planes;\n\n        for (var i = 0; i < 6; i++) {\n          var plane = planes[i];\n          p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\n          p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n          p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\n          p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n          p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\n          p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n          var d1 = plane.distanceToPoint(p1);\n          var d2 = plane.distanceToPoint(p2); // if both outside plane, no intersection\n\n          if (d1 < 0 && d2 < 0) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }(),\n    containsPoint: function containsPoint(point) {\n      var planes = this.planes;\n\n      for (var i = 0; i < 6; i++) {\n        if (planes[i].distanceToPoint(point) < 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }; // File:src/math/Plane.js\n\n  /**\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Plane = function (normal, constant) {\n    this.normal = normal !== undefined ? normal : new THREE.Vector3(1, 0, 0);\n    this.constant = constant !== undefined ? constant : 0;\n  };\n\n  THREE.Plane.prototype = {\n    constructor: THREE.Plane,\n    set: function set(normal, constant) {\n      this.normal.copy(normal);\n      this.constant = constant;\n      return this;\n    },\n    setComponents: function setComponents(x, y, z, w) {\n      this.normal.set(x, y, z);\n      this.constant = w;\n      return this;\n    },\n    setFromNormalAndCoplanarPoint: function setFromNormalAndCoplanarPoint(normal, point) {\n      this.normal.copy(normal);\n      this.constant = -point.dot(this.normal); // must be this.normal, not normal, as this.normal is normalized\n\n      return this;\n    },\n    setFromCoplanarPoints: function () {\n      var v1 = new THREE.Vector3();\n      var v2 = new THREE.Vector3();\n      return function setFromCoplanarPoints(a, b, c) {\n        var normal = v1.subVectors(c, b).cross(v2.subVectors(a, b)).normalize(); // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n        this.setFromNormalAndCoplanarPoint(normal, a);\n        return this;\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(plane) {\n      this.normal.copy(plane.normal);\n      this.constant = plane.constant;\n      return this;\n    },\n    normalize: function normalize() {\n      // Note: will lead to a divide by zero if the plane is invalid.\n      var inverseNormalLength = 1.0 / this.normal.length();\n      this.normal.multiplyScalar(inverseNormalLength);\n      this.constant *= inverseNormalLength;\n      return this;\n    },\n    negate: function negate() {\n      this.constant *= -1;\n      this.normal.negate();\n      return this;\n    },\n    distanceToPoint: function distanceToPoint(point) {\n      return this.normal.dot(point) + this.constant;\n    },\n    distanceToSphere: function distanceToSphere(sphere) {\n      return this.distanceToPoint(sphere.center) - sphere.radius;\n    },\n    projectPoint: function projectPoint(point, optionalTarget) {\n      return this.orthoPoint(point, optionalTarget).sub(point).negate();\n    },\n    orthoPoint: function orthoPoint(point, optionalTarget) {\n      var perpendicularMagnitude = this.distanceToPoint(point);\n      var result = optionalTarget || new THREE.Vector3();\n      return result.copy(this.normal).multiplyScalar(perpendicularMagnitude);\n    },\n    intersectLine: function () {\n      var v1 = new THREE.Vector3();\n      return function intersectLine(line, optionalTarget) {\n        var result = optionalTarget || new THREE.Vector3();\n        var direction = line.delta(v1);\n        var denominator = this.normal.dot(direction);\n\n        if (denominator === 0) {\n          // line is coplanar, return origin\n          if (this.distanceToPoint(line.start) === 0) {\n            return result.copy(line.start);\n          } // Unsure if this is the correct method to handle this case.\n\n\n          return undefined;\n        }\n\n        var t = -(line.start.dot(this.normal) + this.constant) / denominator;\n\n        if (t < 0 || t > 1) {\n          return undefined;\n        }\n\n        return result.copy(direction).multiplyScalar(t).add(line.start);\n      };\n    }(),\n    intersectsLine: function intersectsLine(line) {\n      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n      var startSign = this.distanceToPoint(line.start);\n      var endSign = this.distanceToPoint(line.end);\n      return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;\n    },\n    intersectsBox: function intersectsBox(box) {\n      return box.intersectsPlane(this);\n    },\n    intersectsSphere: function intersectsSphere(sphere) {\n      return sphere.intersectsPlane(this);\n    },\n    coplanarPoint: function coplanarPoint(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.copy(this.normal).multiplyScalar(-this.constant);\n    },\n    applyMatrix4: function () {\n      var v1 = new THREE.Vector3();\n      var m1 = new THREE.Matrix3();\n      return function applyMatrix4(matrix, optionalNormalMatrix) {\n        var referencePoint = this.coplanarPoint(v1).applyMatrix4(matrix); // transform normal based on theory here:\n        // http://www.songho.ca/opengl/gl_normaltransform.html\n\n        var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix(matrix);\n        var normal = this.normal.applyMatrix3(normalMatrix).normalize(); // recalculate constant (like in setFromNormalAndCoplanarPoint)\n\n        this.constant = -referencePoint.dot(normal);\n        return this;\n      };\n    }(),\n    translate: function translate(offset) {\n      this.constant = this.constant - offset.dot(this.normal);\n      return this;\n    },\n    equals: function equals(plane) {\n      return plane.normal.equals(this.normal) && plane.constant === this.constant;\n    }\n  }; // File:src/math/Spherical.js\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n   *\n   * The poles (phi) are at the positive and negative y axis.\n   * The equator starts at positive z.\n   */\n\n  THREE.Spherical = function (radius, phi, theta) {\n    this.radius = radius !== undefined ? radius : 1.0;\n    this.phi = phi !== undefined ? phi : 0; // up / down towards top and bottom pole\n\n    this.theta = theta !== undefined ? theta : 0; // around the equator of the sphere\n\n    return this;\n  };\n\n  THREE.Spherical.prototype = {\n    constructor: THREE.Spherical,\n    set: function set(radius, phi, theta) {\n      this.radius = radius;\n      this.phi = phi;\n      this.theta = theta;\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(other) {\n      this.radius.copy(other.radius);\n      this.phi.copy(other.phi);\n      this.theta.copy(other.theta);\n      return this;\n    },\n    // restrict phi to be betwee EPS and PI-EPS\n    makeSafe: function makeSafe() {\n      var EPS = 0.000001;\n      this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));\n      return this;\n    },\n    setFromVector3: function setFromVector3(vec3) {\n      this.radius = vec3.length();\n\n      if (this.radius === 0) {\n        this.theta = 0;\n        this.phi = 0;\n      } else {\n        this.theta = Math.atan2(vec3.x, vec3.z); // equator angle around y-up axis\n\n        this.phi = Math.acos(THREE.Math.clamp(vec3.y / this.radius, -1, 1)); // polar angle\n      }\n\n      return this;\n    }\n  }; // File:src/math/Math.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Math = {\n    DEG2RAD: Math.PI / 180,\n    RAD2DEG: 180 / Math.PI,\n    generateUUID: function () {\n      // http://www.broofa.com/Tools/Math.uuid.htm\n      var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n      var uuid = new Array(36);\n      var rnd = 0,\n          r;\n      return function generateUUID() {\n        for (var i = 0; i < 36; i++) {\n          if (i === 8 || i === 13 || i === 18 || i === 23) {\n            uuid[i] = '-';\n          } else if (i === 14) {\n            uuid[i] = '4';\n          } else {\n            if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;\n            r = rnd & 0xf;\n            rnd = rnd >> 4;\n            uuid[i] = chars[i === 19 ? r & 0x3 | 0x8 : r];\n          }\n        }\n\n        return uuid.join('');\n      };\n    }(),\n    clamp: function clamp(value, min, max) {\n      return Math.max(min, Math.min(max, value));\n    },\n    // compute euclidian modulo of m % n\n    // https://en.wikipedia.org/wiki/Modulo_operation\n    euclideanModulo: function euclideanModulo(n, m) {\n      return (n % m + m) % m;\n    },\n    // Linear mapping from range <a1, a2> to range <b1, b2>\n    mapLinear: function mapLinear(x, a1, a2, b1, b2) {\n      return b1 + (x - a1) * (b2 - b1) / (a2 - a1);\n    },\n    // http://en.wikipedia.org/wiki/Smoothstep\n    smoothstep: function smoothstep(x, min, max) {\n      if (x <= min) return 0;\n      if (x >= max) return 1;\n      x = (x - min) / (max - min);\n      return x * x * (3 - 2 * x);\n    },\n    smootherstep: function smootherstep(x, min, max) {\n      if (x <= min) return 0;\n      if (x >= max) return 1;\n      x = (x - min) / (max - min);\n      return x * x * x * (x * (x * 6 - 15) + 10);\n    },\n    random16: function random16() {\n      console.warn('THREE.Math.random16() has been deprecated. Use Math.random() instead.');\n      return Math.random();\n    },\n    // Random integer from <low, high> interval\n    randInt: function randInt(low, high) {\n      return low + Math.floor(Math.random() * (high - low + 1));\n    },\n    // Random float from <low, high> interval\n    randFloat: function randFloat(low, high) {\n      return low + Math.random() * (high - low);\n    },\n    // Random float from <-range/2, range/2> interval\n    randFloatSpread: function randFloatSpread(range) {\n      return range * (0.5 - Math.random());\n    },\n    degToRad: function degToRad(degrees) {\n      return degrees * THREE.Math.DEG2RAD;\n    },\n    radToDeg: function radToDeg(radians) {\n      return radians * THREE.Math.RAD2DEG;\n    },\n    isPowerOfTwo: function isPowerOfTwo(value) {\n      return (value & value - 1) === 0 && value !== 0;\n    },\n    nearestPowerOfTwo: function nearestPowerOfTwo(value) {\n      return Math.pow(2, Math.round(Math.log(value) / Math.LN2));\n    },\n    nextPowerOfTwo: function nextPowerOfTwo(value) {\n      value--;\n      value |= value >> 1;\n      value |= value >> 2;\n      value |= value >> 4;\n      value |= value >> 8;\n      value |= value >> 16;\n      value++;\n      return value;\n    }\n  }; // File:src/math/Spline.js\n\n  /**\n   * Spline from Tween.js, slightly optimized (and trashed)\n   * http://sole.github.com/tween.js/examples/05_spline.html\n   *\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Spline = function (points) {\n    this.points = points;\n    var c = [],\n        v3 = {\n      x: 0,\n      y: 0,\n      z: 0\n    },\n        point,\n        intPoint,\n        weight,\n        w2,\n        w3,\n        pa,\n        pb,\n        pc,\n        pd;\n\n    this.initFromArray = function (a) {\n      this.points = [];\n\n      for (var i = 0; i < a.length; i++) {\n        this.points[i] = {\n          x: a[i][0],\n          y: a[i][1],\n          z: a[i][2]\n        };\n      }\n    };\n\n    this.getPoint = function (k) {\n      point = (this.points.length - 1) * k;\n      intPoint = Math.floor(point);\n      weight = point - intPoint;\n      c[0] = intPoint === 0 ? intPoint : intPoint - 1;\n      c[1] = intPoint;\n      c[2] = intPoint > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\n      c[3] = intPoint > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\n      pa = this.points[c[0]];\n      pb = this.points[c[1]];\n      pc = this.points[c[2]];\n      pd = this.points[c[3]];\n      w2 = weight * weight;\n      w3 = weight * w2;\n      v3.x = interpolate(pa.x, pb.x, pc.x, pd.x, weight, w2, w3);\n      v3.y = interpolate(pa.y, pb.y, pc.y, pd.y, weight, w2, w3);\n      v3.z = interpolate(pa.z, pb.z, pc.z, pd.z, weight, w2, w3);\n      return v3;\n    };\n\n    this.getControlPointsArray = function () {\n      var i,\n          p,\n          l = this.points.length,\n          coords = [];\n\n      for (i = 0; i < l; i++) {\n        p = this.points[i];\n        coords[i] = [p.x, p.y, p.z];\n      }\n\n      return coords;\n    }; // approximate length by summing linear segments\n\n\n    this.getLength = function (nSubDivisions) {\n      var i,\n          index,\n          nSamples,\n          position,\n          point = 0,\n          intPoint = 0,\n          oldIntPoint = 0,\n          oldPosition = new THREE.Vector3(),\n          tmpVec = new THREE.Vector3(),\n          chunkLengths = [],\n          totalLength = 0; // first point has 0 length\n\n      chunkLengths[0] = 0;\n      if (!nSubDivisions) nSubDivisions = 100;\n      nSamples = this.points.length * nSubDivisions;\n      oldPosition.copy(this.points[0]);\n\n      for (i = 1; i < nSamples; i++) {\n        index = i / nSamples;\n        position = this.getPoint(index);\n        tmpVec.copy(position);\n        totalLength += tmpVec.distanceTo(oldPosition);\n        oldPosition.copy(position);\n        point = (this.points.length - 1) * index;\n        intPoint = Math.floor(point);\n\n        if (intPoint !== oldIntPoint) {\n          chunkLengths[intPoint] = totalLength;\n          oldIntPoint = intPoint;\n        }\n      } // last point ends with total length\n\n\n      chunkLengths[chunkLengths.length] = totalLength;\n      return {\n        chunks: chunkLengths,\n        total: totalLength\n      };\n    };\n\n    this.reparametrizeByArcLength = function (samplingCoef) {\n      var i,\n          j,\n          index,\n          indexCurrent,\n          indexNext,\n          realDistance,\n          sampling,\n          position,\n          newpoints = [],\n          tmpVec = new THREE.Vector3(),\n          sl = this.getLength();\n      newpoints.push(tmpVec.copy(this.points[0]).clone());\n\n      for (i = 1; i < this.points.length; i++) {\n        //tmpVec.copy( this.points[ i - 1 ] );\n        //linearDistance = tmpVec.distanceTo( this.points[ i ] );\n        realDistance = sl.chunks[i] - sl.chunks[i - 1];\n        sampling = Math.ceil(samplingCoef * realDistance / sl.total);\n        indexCurrent = (i - 1) / (this.points.length - 1);\n        indexNext = i / (this.points.length - 1);\n\n        for (j = 1; j < sampling - 1; j++) {\n          index = indexCurrent + j * (1 / sampling) * (indexNext - indexCurrent);\n          position = this.getPoint(index);\n          newpoints.push(tmpVec.copy(position).clone());\n        }\n\n        newpoints.push(tmpVec.copy(this.points[i]).clone());\n      }\n\n      this.points = newpoints;\n    }; // Catmull-Rom\n\n\n    function interpolate(p0, p1, p2, p3, t, t2, t3) {\n      var v0 = (p2 - p0) * 0.5,\n          v1 = (p3 - p1) * 0.5;\n      return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\n    }\n  }; // File:src/math/Triangle.js\n\n  /**\n   * @author bhouston / http://clara.io\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.Triangle = function (a, b, c) {\n    this.a = a !== undefined ? a : new THREE.Vector3();\n    this.b = b !== undefined ? b : new THREE.Vector3();\n    this.c = c !== undefined ? c : new THREE.Vector3();\n  };\n\n  THREE.Triangle.normal = function () {\n    var v0 = new THREE.Vector3();\n    return function normal(a, b, c, optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      result.subVectors(c, b);\n      v0.subVectors(a, b);\n      result.cross(v0);\n      var resultLengthSq = result.lengthSq();\n\n      if (resultLengthSq > 0) {\n        return result.multiplyScalar(1 / Math.sqrt(resultLengthSq));\n      }\n\n      return result.set(0, 0, 0);\n    };\n  }(); // static/instance method to calculate barycentric coordinates\n  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\n\n  THREE.Triangle.barycoordFromPoint = function () {\n    var v0 = new THREE.Vector3();\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    return function barycoordFromPoint(point, a, b, c, optionalTarget) {\n      v0.subVectors(c, a);\n      v1.subVectors(b, a);\n      v2.subVectors(point, a);\n      var dot00 = v0.dot(v0);\n      var dot01 = v0.dot(v1);\n      var dot02 = v0.dot(v2);\n      var dot11 = v1.dot(v1);\n      var dot12 = v1.dot(v2);\n      var denom = dot00 * dot11 - dot01 * dot01;\n      var result = optionalTarget || new THREE.Vector3(); // collinear or singular triangle\n\n      if (denom === 0) {\n        // arbitrary location outside of triangle?\n        // not sure if this is the best idea, maybe should be returning undefined\n        return result.set(-2, -1, -1);\n      }\n\n      var invDenom = 1 / denom;\n      var u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n      var v = (dot00 * dot12 - dot01 * dot02) * invDenom; // barycentric coordinates must always sum to 1\n\n      return result.set(1 - u - v, v, u);\n    };\n  }();\n\n  THREE.Triangle.containsPoint = function () {\n    var v1 = new THREE.Vector3();\n    return function containsPoint(point, a, b, c) {\n      var result = THREE.Triangle.barycoordFromPoint(point, a, b, c, v1);\n      return result.x >= 0 && result.y >= 0 && result.x + result.y <= 1;\n    };\n  }();\n\n  THREE.Triangle.prototype = {\n    constructor: THREE.Triangle,\n    set: function set(a, b, c) {\n      this.a.copy(a);\n      this.b.copy(b);\n      this.c.copy(c);\n      return this;\n    },\n    setFromPointsAndIndices: function setFromPointsAndIndices(points, i0, i1, i2) {\n      this.a.copy(points[i0]);\n      this.b.copy(points[i1]);\n      this.c.copy(points[i2]);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(triangle) {\n      this.a.copy(triangle.a);\n      this.b.copy(triangle.b);\n      this.c.copy(triangle.c);\n      return this;\n    },\n    area: function () {\n      var v0 = new THREE.Vector3();\n      var v1 = new THREE.Vector3();\n      return function area() {\n        v0.subVectors(this.c, this.b);\n        v1.subVectors(this.a, this.b);\n        return v0.cross(v1).length() * 0.5;\n      };\n    }(),\n    midpoint: function midpoint(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      return result.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);\n    },\n    normal: function normal(optionalTarget) {\n      return THREE.Triangle.normal(this.a, this.b, this.c, optionalTarget);\n    },\n    plane: function plane(optionalTarget) {\n      var result = optionalTarget || new THREE.Plane();\n      return result.setFromCoplanarPoints(this.a, this.b, this.c);\n    },\n    barycoordFromPoint: function barycoordFromPoint(point, optionalTarget) {\n      return THREE.Triangle.barycoordFromPoint(point, this.a, this.b, this.c, optionalTarget);\n    },\n    containsPoint: function containsPoint(point) {\n      return THREE.Triangle.containsPoint(point, this.a, this.b, this.c);\n    },\n    closestPointToPoint: function () {\n      var plane, edgeList, projectedPoint, closestPoint;\n      return function closestPointToPoint(point, optionalTarget) {\n        if (plane === undefined) {\n          plane = new THREE.Plane();\n          edgeList = [new THREE.Line3(), new THREE.Line3(), new THREE.Line3()];\n          projectedPoint = new THREE.Vector3();\n          closestPoint = new THREE.Vector3();\n        }\n\n        var result = optionalTarget || new THREE.Vector3();\n        var minDistance = Infinity; // project the point onto the plane of the triangle\n\n        plane.setFromCoplanarPoints(this.a, this.b, this.c);\n        plane.projectPoint(point, projectedPoint); // check if the projection lies within the triangle\n\n        if (this.containsPoint(projectedPoint) === true) {\n          // if so, this is the closest point\n          result.copy(projectedPoint);\n        } else {\n          // if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\n          edgeList[0].set(this.a, this.b);\n          edgeList[1].set(this.b, this.c);\n          edgeList[2].set(this.c, this.a);\n\n          for (var i = 0; i < edgeList.length; i++) {\n            edgeList[i].closestPointToPoint(projectedPoint, true, closestPoint);\n            var distance = projectedPoint.distanceToSquared(closestPoint);\n\n            if (distance < minDistance) {\n              minDistance = distance;\n              result.copy(closestPoint);\n            }\n          }\n        }\n\n        return result;\n      };\n    }(),\n    equals: function equals(triangle) {\n      return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);\n    }\n  }; // File:src/math/Interpolant.js\n\n  /**\n   * Abstract base class of interpolants over parametric samples.\n   *\n   * The parameter domain is one dimensional, typically the time or a path\n   * along a curve defined by the data.\n   *\n   * The sample values can have any dimensionality and derived classes may\n   * apply special interpretations to the data.\n   *\n   * This class provides the interval seek in a Template Method, deferring\n   * the actual interpolation to derived classes.\n   *\n   * Time complexity is O(1) for linear access crossing at most two points\n   * and O(log N) for random access, where N is the number of positions.\n   *\n   * References:\n   *\n   * \t\thttp://www.oodesign.com/template-method-pattern.html\n   *\n   * @author tschw\n   */\n\n  THREE.Interpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    this.parameterPositions = parameterPositions;\n    this._cachedIndex = 0;\n    this.resultBuffer = resultBuffer !== undefined ? resultBuffer : new sampleValues.constructor(sampleSize);\n    this.sampleValues = sampleValues;\n    this.valueSize = sampleSize;\n  };\n\n  THREE.Interpolant.prototype = {\n    constructor: THREE.Interpolant,\n    evaluate: function evaluate(t) {\n      var pp = this.parameterPositions,\n          i1 = this._cachedIndex,\n          t1 = pp[i1],\n          t0 = pp[i1 - 1];\n\n      validate_interval: {\n        seek: {\n          var right;\n\n          linear_scan: {\n            //- See http://jsperf.com/comparison-to-undefined/3\n            //- slower code:\n            //-\n            //- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n            forward_scan: if (!(t < t1)) {\n              for (var giveUpAt = i1 + 2;;) {\n                if (t1 === undefined) {\n                  if (t < t0) break forward_scan; // after end\n\n                  i1 = pp.length;\n                  this._cachedIndex = i1;\n                  return this.afterEnd_(i1 - 1, t, t0);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t0 = t1;\n                t1 = pp[++i1];\n\n                if (t < t1) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              } // prepare binary search on the right side of the index\n\n\n              right = pp.length;\n              break linear_scan;\n            } //- slower code:\n            //-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\n\n            if (!(t >= t0)) {\n              // looping?\n              var t1global = pp[1];\n\n              if (t < t1global) {\n                i1 = 2; // + 1, using the scan for the details\n\n                t0 = t1global;\n              } // linear reverse scan\n\n\n              for (var giveUpAt = i1 - 2;;) {\n                if (t0 === undefined) {\n                  // before start\n                  this._cachedIndex = 0;\n                  return this.beforeStart_(0, t, t1);\n                }\n\n                if (i1 === giveUpAt) break; // this loop\n\n                t1 = t0;\n                t0 = pp[--i1 - 1];\n\n                if (t >= t0) {\n                  // we have arrived at the sought interval\n                  break seek;\n                }\n              } // prepare binary search on the left side of the index\n\n\n              right = i1;\n              i1 = 0;\n              break linear_scan;\n            } // the interval is valid\n\n\n            break validate_interval;\n          } // linear scan\n          // binary search\n\n\n          while (i1 < right) {\n            var mid = i1 + right >>> 1;\n\n            if (t < pp[mid]) {\n              right = mid;\n            } else {\n              i1 = mid + 1;\n            }\n          }\n\n          t1 = pp[i1];\n          t0 = pp[i1 - 1]; // check boundary cases, again\n\n          if (t0 === undefined) {\n            this._cachedIndex = 0;\n            return this.beforeStart_(0, t, t1);\n          }\n\n          if (t1 === undefined) {\n            i1 = pp.length;\n            this._cachedIndex = i1;\n            return this.afterEnd_(i1 - 1, t0, t);\n          }\n        } // seek\n\n\n        this._cachedIndex = i1;\n        this.intervalChanged_(i1, t0, t1);\n      } // validate_interval\n\n\n      return this.interpolate_(i1, t0, t, t1);\n    },\n    settings: null,\n    // optional, subclass-specific settings structure\n    // Note: The indirection allows central control of many interpolants.\n    // --- Protected interface\n    DefaultSettings_: {},\n    getSettings_: function getSettings_() {\n      return this.settings || this.DefaultSettings_;\n    },\n    copySampleValue_: function copySampleValue_(index) {\n      // copies a sample value to the result buffer\n      var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset = index * stride;\n\n      for (var i = 0; i !== stride; ++i) {\n        result[i] = values[offset + i];\n      }\n\n      return result;\n    },\n    // Template methods for derived classes:\n    interpolate_: function interpolate_(i1, t0, t, t1) {\n      throw new Error(\"call to abstract method\"); // implementations shall return this.resultBuffer\n    },\n    intervalChanged_: function intervalChanged_(i1, t0, t1) {// empty\n    }\n  };\n  Object.assign(THREE.Interpolant.prototype, {\n    beforeStart_: //( 0, t, t0 ), returns this.resultBuffer\n    THREE.Interpolant.prototype.copySampleValue_,\n    afterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\n    THREE.Interpolant.prototype.copySampleValue_\n  }); // File:src/math/interpolants/CubicInterpolant.js\n\n  /**\n   * Fast and simple cubic spline interpolant.\n   *\n   * It was derived from a Hermitian construction setting the first derivative\n   * at each sample position to the linear slope between neighboring positions\n   * over their parameter interval.\n   *\n   * @author tschw\n   */\n\n  THREE.CubicInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n    this._weightPrev = -0;\n    this._offsetPrev = -0;\n    this._weightNext = -0;\n    this._offsetNext = -0;\n  };\n\n  THREE.CubicInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n    constructor: THREE.CubicInterpolant,\n    DefaultSettings_: {\n      endingStart: THREE.ZeroCurvatureEnding,\n      endingEnd: THREE.ZeroCurvatureEnding\n    },\n    intervalChanged_: function intervalChanged_(i1, t0, t1) {\n      var pp = this.parameterPositions,\n          iPrev = i1 - 2,\n          iNext = i1 + 1,\n          tPrev = pp[iPrev],\n          tNext = pp[iNext];\n\n      if (tPrev === undefined) {\n        switch (this.getSettings_().endingStart) {\n          case THREE.ZeroSlopeEnding:\n            // f'(t0) = 0\n            iPrev = i1;\n            tPrev = 2 * t0 - t1;\n            break;\n\n          case THREE.WrapAroundEnding:\n            // use the other end of the curve\n            iPrev = pp.length - 2;\n            tPrev = t0 + pp[iPrev] - pp[iPrev + 1];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(t0) = 0 a.k.a. Natural Spline\n            iPrev = i1;\n            tPrev = t1;\n        }\n      }\n\n      if (tNext === undefined) {\n        switch (this.getSettings_().endingEnd) {\n          case THREE.ZeroSlopeEnding:\n            // f'(tN) = 0\n            iNext = i1;\n            tNext = 2 * t1 - t0;\n            break;\n\n          case THREE.WrapAroundEnding:\n            // use the other end of the curve\n            iNext = 1;\n            tNext = t1 + pp[1] - pp[0];\n            break;\n\n          default:\n            // ZeroCurvatureEnding\n            // f''(tN) = 0, a.k.a. Natural Spline\n            iNext = i1 - 1;\n            tNext = t0;\n        }\n      }\n\n      var halfDt = (t1 - t0) * 0.5,\n          stride = this.valueSize;\n      this._weightPrev = halfDt / (t0 - tPrev);\n      this._weightNext = halfDt / (tNext - t1);\n      this._offsetPrev = iPrev * stride;\n      this._offsetNext = iNext * stride;\n    },\n    interpolate_: function interpolate_(i1, t0, t, t1) {\n      var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          o1 = i1 * stride,\n          o0 = o1 - stride,\n          oP = this._offsetPrev,\n          oN = this._offsetNext,\n          wP = this._weightPrev,\n          wN = this._weightNext,\n          p = (t - t0) / (t1 - t0),\n          pp = p * p,\n          ppp = pp * p; // evaluate polynomials\n\n      var sP = -wP * ppp + 2 * wP * pp - wP * p;\n      var s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p + 1;\n      var s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p;\n      var sN = wN * ppp - wN * pp; // combine data linearly\n\n      for (var i = 0; i !== stride; ++i) {\n        result[i] = sP * values[oP + i] + s0 * values[o0 + i] + s1 * values[o1 + i] + sN * values[oN + i];\n      }\n\n      return result;\n    }\n  }); // File:src/math/interpolants/DiscreteInterpolant.js\n\n  /**\n   *\n   * Interpolant that evaluates to the sample value at the position preceeding\n   * the parameter.\n   *\n   * @author tschw\n   */\n\n  THREE.DiscreteInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  };\n\n  THREE.DiscreteInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n    constructor: THREE.DiscreteInterpolant,\n    interpolate_: function interpolate_(i1, t0, t, t1) {\n      return this.copySampleValue_(i1 - 1);\n    }\n  }); // File:src/math/interpolants/LinearInterpolant.js\n\n  /**\n   * @author tschw\n   */\n\n  THREE.LinearInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  };\n\n  THREE.LinearInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n    constructor: THREE.LinearInterpolant,\n    interpolate_: function interpolate_(i1, t0, t, t1) {\n      var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset1 = i1 * stride,\n          offset0 = offset1 - stride,\n          weight1 = (t - t0) / (t1 - t0),\n          weight0 = 1 - weight1;\n\n      for (var i = 0; i !== stride; ++i) {\n        result[i] = values[offset0 + i] * weight0 + values[offset1 + i] * weight1;\n      }\n\n      return result;\n    }\n  }); // File:src/math/interpolants/QuaternionLinearInterpolant.js\n\n  /**\n   * Spherical linear unit quaternion interpolant.\n   *\n   * @author tschw\n   */\n\n  THREE.QuaternionLinearInterpolant = function (parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  };\n\n  THREE.QuaternionLinearInterpolant.prototype = Object.assign(Object.create(THREE.Interpolant.prototype), {\n    constructor: THREE.QuaternionLinearInterpolant,\n    interpolate_: function interpolate_(i1, t0, t, t1) {\n      var result = this.resultBuffer,\n          values = this.sampleValues,\n          stride = this.valueSize,\n          offset = i1 * stride,\n          alpha = (t - t0) / (t1 - t0);\n\n      for (var end = offset + stride; offset !== end; offset += 4) {\n        THREE.Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);\n      }\n\n      return result;\n    }\n  }); // File:src/core/Clock.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Clock = function (autoStart) {\n    this.autoStart = autoStart !== undefined ? autoStart : true;\n    this.startTime = 0;\n    this.oldTime = 0;\n    this.elapsedTime = 0;\n    this.running = false;\n  };\n\n  THREE.Clock.prototype = {\n    constructor: THREE.Clock,\n    start: function start() {\n      this.startTime = (performance || Date).now();\n      this.oldTime = this.startTime;\n      this.running = true;\n    },\n    stop: function stop() {\n      this.getElapsedTime();\n      this.running = false;\n    },\n    getElapsedTime: function getElapsedTime() {\n      this.getDelta();\n      return this.elapsedTime;\n    },\n    getDelta: function getDelta() {\n      var diff = 0;\n\n      if (this.autoStart && !this.running) {\n        this.start();\n      }\n\n      if (this.running) {\n        var newTime = (performance || Date).now();\n        diff = (newTime - this.oldTime) / 1000;\n        this.oldTime = newTime;\n        this.elapsedTime += diff;\n      }\n\n      return diff;\n    }\n  }; // File:src/core/EventDispatcher.js\n\n  /**\n   * https://github.com/mrdoob/eventdispatcher.js/\n   */\n\n  THREE.EventDispatcher = function () {};\n\n  Object.assign(THREE.EventDispatcher.prototype, {\n    addEventListener: function addEventListener(type, listener) {\n      if (this._listeners === undefined) this._listeners = {};\n      var listeners = this._listeners;\n\n      if (listeners[type] === undefined) {\n        listeners[type] = [];\n      }\n\n      if (listeners[type].indexOf(listener) === -1) {\n        listeners[type].push(listener);\n      }\n    },\n    hasEventListener: function hasEventListener(type, listener) {\n      if (this._listeners === undefined) return false;\n      var listeners = this._listeners;\n\n      if (listeners[type] !== undefined && listeners[type].indexOf(listener) !== -1) {\n        return true;\n      }\n\n      return false;\n    },\n    removeEventListener: function removeEventListener(type, listener) {\n      if (this._listeners === undefined) return;\n      var listeners = this._listeners;\n      var listenerArray = listeners[type];\n\n      if (listenerArray !== undefined) {\n        var index = listenerArray.indexOf(listener);\n\n        if (index !== -1) {\n          listenerArray.splice(index, 1);\n        }\n      }\n    },\n    dispatchEvent: function dispatchEvent(event) {\n      if (this._listeners === undefined) return;\n      var listeners = this._listeners;\n      var listenerArray = listeners[event.type];\n\n      if (listenerArray !== undefined) {\n        event.target = this;\n        var array = [],\n            i = 0;\n        var length = listenerArray.length;\n\n        for (i = 0; i < length; i++) {\n          array[i] = listenerArray[i];\n        }\n\n        for (i = 0; i < length; i++) {\n          array[i].call(this, event);\n        }\n      }\n    }\n  }); // File:src/core/Layers.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Layers = function () {\n    this.mask = 1;\n  };\n\n  THREE.Layers.prototype = {\n    constructor: THREE.Layers,\n    set: function set(channel) {\n      this.mask = 1 << channel;\n    },\n    enable: function enable(channel) {\n      this.mask |= 1 << channel;\n    },\n    toggle: function toggle(channel) {\n      this.mask ^= 1 << channel;\n    },\n    disable: function disable(channel) {\n      this.mask &= ~(1 << channel);\n    },\n    test: function test(layers) {\n      return (this.mask & layers.mask) !== 0;\n    }\n  }; // File:src/core/Raycaster.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author bhouston / http://clara.io/\n   * @author stephomi / http://stephaneginier.com/\n   */\n\n  (function (THREE) {\n    THREE.Raycaster = function (origin, direction, near, far) {\n      this.ray = new THREE.Ray(origin, direction); // direction is assumed to be normalized (for accurate distance calculations)\n\n      this.near = near || 0;\n      this.far = far || Infinity;\n      this.params = {\n        Mesh: {},\n        Line: {},\n        LOD: {},\n        Points: {\n          threshold: 1\n        },\n        Sprite: {}\n      };\n      Object.defineProperties(this.params, {\n        PointCloud: {\n          get: function get() {\n            console.warn('THREE.Raycaster: params.PointCloud has been renamed to params.Points.');\n            return this.Points;\n          }\n        }\n      });\n    };\n\n    function ascSort(a, b) {\n      return a.distance - b.distance;\n    }\n\n    function _intersectObject(object, raycaster, intersects, recursive) {\n      if (object.visible === false) return;\n      object.raycast(raycaster, intersects);\n\n      if (recursive === true) {\n        var children = object.children;\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          _intersectObject(children[i], raycaster, intersects, true);\n        }\n      }\n    } //\n\n\n    THREE.Raycaster.prototype = {\n      constructor: THREE.Raycaster,\n      linePrecision: 1,\n      set: function set(origin, direction) {\n        // direction is assumed to be normalized (for accurate distance calculations)\n        this.ray.set(origin, direction);\n      },\n      setFromCamera: function setFromCamera(coords, camera) {\n        if (camera instanceof THREE.PerspectiveCamera) {\n          this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n          this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera).sub(this.ray.origin).normalize();\n        } else if (camera instanceof THREE.OrthographicCamera) {\n          this.ray.origin.set(coords.x, coords.y, (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera); // set origin in plane of camera\n\n          this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n        } else {\n          console.error('THREE.Raycaster: Unsupported camera type.');\n        }\n      },\n      intersectObject: function intersectObject(object, recursive) {\n        var intersects = [];\n\n        _intersectObject(object, this, intersects, recursive);\n\n        intersects.sort(ascSort);\n        return intersects;\n      },\n      intersectObjects: function intersectObjects(objects, recursive) {\n        var intersects = [];\n\n        if (Array.isArray(objects) === false) {\n          console.warn('THREE.Raycaster.intersectObjects: objects is not an Array.');\n          return intersects;\n        }\n\n        for (var i = 0, l = objects.length; i < l; i++) {\n          _intersectObject(objects[i], this, intersects, recursive);\n        }\n\n        intersects.sort(ascSort);\n        return intersects;\n      }\n    };\n  })(THREE); // File:src/core/Object3D.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author elephantatwork / www.elephantatwork.ch\n   */\n\n\n  THREE.Object3D = function () {\n    Object.defineProperty(this, 'id', {\n      value: THREE.Object3DIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.type = 'Object3D';\n    this.parent = null;\n    this.children = [];\n    this.up = THREE.Object3D.DefaultUp.clone();\n    var position = new THREE.Vector3();\n    var rotation = new THREE.Euler();\n    var quaternion = new THREE.Quaternion();\n    var scale = new THREE.Vector3(1, 1, 1);\n\n    function onRotationChange() {\n      quaternion.setFromEuler(rotation, false);\n    }\n\n    function onQuaternionChange() {\n      rotation.setFromQuaternion(quaternion, undefined, false);\n    }\n\n    rotation.onChange(onRotationChange);\n    quaternion.onChange(onQuaternionChange);\n    Object.defineProperties(this, {\n      position: {\n        enumerable: true,\n        value: position\n      },\n      rotation: {\n        enumerable: true,\n        value: rotation\n      },\n      quaternion: {\n        enumerable: true,\n        value: quaternion\n      },\n      scale: {\n        enumerable: true,\n        value: scale\n      },\n      modelViewMatrix: {\n        value: new THREE.Matrix4()\n      },\n      normalMatrix: {\n        value: new THREE.Matrix3()\n      }\n    });\n    this.matrix = new THREE.Matrix4();\n    this.matrixWorld = new THREE.Matrix4();\n    this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\n    this.matrixWorldNeedsUpdate = false;\n    this.layers = new THREE.Layers();\n    this.visible = true;\n    this.castShadow = false;\n    this.receiveShadow = false;\n    this.frustumCulled = true;\n    this.renderOrder = 0;\n    this.userData = {};\n  };\n\n  THREE.Object3D.DefaultUp = new THREE.Vector3(0, 1, 0);\n  THREE.Object3D.DefaultMatrixAutoUpdate = true;\n  Object.assign(THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\n    applyMatrix: function applyMatrix(matrix) {\n      this.matrix.multiplyMatrices(matrix, this.matrix);\n      this.matrix.decompose(this.position, this.quaternion, this.scale);\n    },\n    setRotationFromAxisAngle: function setRotationFromAxisAngle(axis, angle) {\n      // assumes axis is normalized\n      this.quaternion.setFromAxisAngle(axis, angle);\n    },\n    setRotationFromEuler: function setRotationFromEuler(euler) {\n      this.quaternion.setFromEuler(euler, true);\n    },\n    setRotationFromMatrix: function setRotationFromMatrix(m) {\n      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n      this.quaternion.setFromRotationMatrix(m);\n    },\n    setRotationFromQuaternion: function setRotationFromQuaternion(q) {\n      // assumes q is normalized\n      this.quaternion.copy(q);\n    },\n    rotateOnAxis: function () {\n      // rotate object on axis in object space\n      // axis is assumed to be normalized\n      var q1 = new THREE.Quaternion();\n      return function rotateOnAxis(axis, angle) {\n        q1.setFromAxisAngle(axis, angle);\n        this.quaternion.multiply(q1);\n        return this;\n      };\n    }(),\n    rotateX: function () {\n      var v1 = new THREE.Vector3(1, 0, 0);\n      return function rotateX(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    }(),\n    rotateY: function () {\n      var v1 = new THREE.Vector3(0, 1, 0);\n      return function rotateY(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    }(),\n    rotateZ: function () {\n      var v1 = new THREE.Vector3(0, 0, 1);\n      return function rotateZ(angle) {\n        return this.rotateOnAxis(v1, angle);\n      };\n    }(),\n    translateOnAxis: function () {\n      // translate object by distance along axis in object space\n      // axis is assumed to be normalized\n      var v1 = new THREE.Vector3();\n      return function translateOnAxis(axis, distance) {\n        v1.copy(axis).applyQuaternion(this.quaternion);\n        this.position.add(v1.multiplyScalar(distance));\n        return this;\n      };\n    }(),\n    translateX: function () {\n      var v1 = new THREE.Vector3(1, 0, 0);\n      return function translateX(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    }(),\n    translateY: function () {\n      var v1 = new THREE.Vector3(0, 1, 0);\n      return function translateY(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    }(),\n    translateZ: function () {\n      var v1 = new THREE.Vector3(0, 0, 1);\n      return function translateZ(distance) {\n        return this.translateOnAxis(v1, distance);\n      };\n    }(),\n    localToWorld: function localToWorld(vector) {\n      return vector.applyMatrix4(this.matrixWorld);\n    },\n    worldToLocal: function () {\n      var m1 = new THREE.Matrix4();\n      return function worldToLocal(vector) {\n        return vector.applyMatrix4(m1.getInverse(this.matrixWorld));\n      };\n    }(),\n    lookAt: function () {\n      // This routine does not support objects with rotated and/or translated parent(s)\n      var m1 = new THREE.Matrix4();\n      return function lookAt(vector) {\n        m1.lookAt(vector, this.position, this.up);\n        this.quaternion.setFromRotationMatrix(m1);\n      };\n    }(),\n    add: function add(object) {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.add(arguments[i]);\n        }\n\n        return this;\n      }\n\n      if (object === this) {\n        console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\", object);\n        return this;\n      }\n\n      if (object instanceof THREE.Object3D) {\n        if (object.parent !== null) {\n          object.parent.remove(object);\n        }\n\n        object.parent = this;\n        object.dispatchEvent({\n          type: 'added'\n        });\n        this.children.push(object);\n      } else {\n        console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object);\n      }\n\n      return this;\n    },\n    remove: function remove(object) {\n      if (arguments.length > 1) {\n        for (var i = 0; i < arguments.length; i++) {\n          this.remove(arguments[i]);\n        }\n      }\n\n      var index = this.children.indexOf(object);\n\n      if (index !== -1) {\n        object.parent = null;\n        object.dispatchEvent({\n          type: 'removed'\n        });\n        this.children.splice(index, 1);\n      }\n    },\n    getObjectById: function getObjectById(id) {\n      return this.getObjectByProperty('id', id);\n    },\n    getObjectByName: function getObjectByName(name) {\n      return this.getObjectByProperty('name', name);\n    },\n    getObjectByProperty: function getObjectByProperty(name, value) {\n      if (this[name] === value) return this;\n\n      for (var i = 0, l = this.children.length; i < l; i++) {\n        var child = this.children[i];\n        var object = child.getObjectByProperty(name, value);\n\n        if (object !== undefined) {\n          return object;\n        }\n      }\n\n      return undefined;\n    },\n    getWorldPosition: function getWorldPosition(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      this.updateMatrixWorld(true);\n      return result.setFromMatrixPosition(this.matrixWorld);\n    },\n    getWorldQuaternion: function () {\n      var position = new THREE.Vector3();\n      var scale = new THREE.Vector3();\n      return function getWorldQuaternion(optionalTarget) {\n        var result = optionalTarget || new THREE.Quaternion();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, result, scale);\n        return result;\n      };\n    }(),\n    getWorldRotation: function () {\n      var quaternion = new THREE.Quaternion();\n      return function getWorldRotation(optionalTarget) {\n        var result = optionalTarget || new THREE.Euler();\n        this.getWorldQuaternion(quaternion);\n        return result.setFromQuaternion(quaternion, this.rotation.order, false);\n      };\n    }(),\n    getWorldScale: function () {\n      var position = new THREE.Vector3();\n      var quaternion = new THREE.Quaternion();\n      return function getWorldScale(optionalTarget) {\n        var result = optionalTarget || new THREE.Vector3();\n        this.updateMatrixWorld(true);\n        this.matrixWorld.decompose(position, quaternion, result);\n        return result;\n      };\n    }(),\n    getWorldDirection: function () {\n      var quaternion = new THREE.Quaternion();\n      return function getWorldDirection(optionalTarget) {\n        var result = optionalTarget || new THREE.Vector3();\n        this.getWorldQuaternion(quaternion);\n        return result.set(0, 0, 1).applyQuaternion(quaternion);\n      };\n    }(),\n    raycast: function raycast() {},\n    traverse: function traverse(callback) {\n      callback(this);\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].traverse(callback);\n      }\n    },\n    traverseVisible: function traverseVisible(callback) {\n      if (this.visible === false) return;\n      callback(this);\n      var children = this.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].traverseVisible(callback);\n      }\n    },\n    traverseAncestors: function traverseAncestors(callback) {\n      var parent = this.parent;\n\n      if (parent !== null) {\n        callback(parent);\n        parent.traverseAncestors(callback);\n      }\n    },\n    updateMatrix: function updateMatrix() {\n      this.matrix.compose(this.position, this.quaternion, this.scale);\n      this.matrixWorldNeedsUpdate = true;\n    },\n    updateMatrixWorld: function updateMatrixWorld(force) {\n      if (this.matrixAutoUpdate === true) this.updateMatrix();\n\n      if (this.matrixWorldNeedsUpdate === true || force === true) {\n        if (this.parent === null) {\n          this.matrixWorld.copy(this.matrix);\n        } else {\n          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);\n        }\n\n        this.matrixWorldNeedsUpdate = false;\n        force = true;\n      } // update children\n\n\n      for (var i = 0, l = this.children.length; i < l; i++) {\n        this.children[i].updateMatrixWorld(force);\n      }\n    },\n    toJSON: function toJSON(meta) {\n      // meta is '' when called from JSON.stringify\n      var isRootObject = meta === undefined || meta === '';\n      var output = {}; // meta is a hash used to collect geometries, materials.\n      // not providing it implies that this is the root object\n      // being serialized.\n\n      if (isRootObject) {\n        // initialize meta obj\n        meta = {\n          geometries: {},\n          materials: {},\n          textures: {},\n          images: {}\n        };\n        output.metadata = {\n          version: 4.4,\n          type: 'Object',\n          generator: 'Object3D.toJSON'\n        };\n      } // standard Object3D serialization\n\n\n      var object = {};\n      object.uuid = this.uuid;\n      object.type = this.type;\n      if (this.name !== '') object.name = this.name;\n      if (JSON.stringify(this.userData) !== '{}') object.userData = this.userData;\n      if (this.castShadow === true) object.castShadow = true;\n      if (this.receiveShadow === true) object.receiveShadow = true;\n      if (this.visible === false) object.visible = false;\n      object.matrix = this.matrix.toArray(); //\n\n      if (this.geometry !== undefined) {\n        if (meta.geometries[this.geometry.uuid] === undefined) {\n          meta.geometries[this.geometry.uuid] = this.geometry.toJSON(meta);\n        }\n\n        object.geometry = this.geometry.uuid;\n      }\n\n      if (this.material !== undefined) {\n        if (meta.materials[this.material.uuid] === undefined) {\n          meta.materials[this.material.uuid] = this.material.toJSON(meta);\n        }\n\n        object.material = this.material.uuid;\n      } //\n\n\n      if (this.children.length > 0) {\n        object.children = [];\n\n        for (var i = 0; i < this.children.length; i++) {\n          object.children.push(this.children[i].toJSON(meta).object);\n        }\n      }\n\n      if (isRootObject) {\n        var geometries = extractFromCache(meta.geometries);\n        var materials = extractFromCache(meta.materials);\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        if (geometries.length > 0) output.geometries = geometries;\n        if (materials.length > 0) output.materials = materials;\n        if (textures.length > 0) output.textures = textures;\n        if (images.length > 0) output.images = images;\n      }\n\n      output.object = object;\n      return output; // extract data from the cache hash\n      // remove metadata on each item\n      // and return as array\n\n      function extractFromCache(cache) {\n        var values = [];\n\n        for (var key in cache) {\n          var data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n\n        return values;\n      }\n    },\n    clone: function clone(recursive) {\n      return new this.constructor().copy(this, recursive);\n    },\n    copy: function copy(source, recursive) {\n      if (recursive === undefined) recursive = true;\n      this.name = source.name;\n      this.up.copy(source.up);\n      this.position.copy(source.position);\n      this.quaternion.copy(source.quaternion);\n      this.scale.copy(source.scale);\n      this.matrix.copy(source.matrix);\n      this.matrixWorld.copy(source.matrixWorld);\n      this.matrixAutoUpdate = source.matrixAutoUpdate;\n      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n      this.visible = source.visible;\n      this.castShadow = source.castShadow;\n      this.receiveShadow = source.receiveShadow;\n      this.frustumCulled = source.frustumCulled;\n      this.renderOrder = source.renderOrder;\n      this.userData = JSON.parse(JSON.stringify(source.userData));\n\n      if (recursive === true) {\n        for (var i = 0; i < source.children.length; i++) {\n          var child = source.children[i];\n          this.add(child.clone());\n        }\n      }\n\n      return this;\n    }\n  });\n  THREE.Object3DIdCount = 0; // File:src/core/Face3.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Face3 = function (a, b, c, normal, color, materialIndex) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\n    this.vertexNormals = Array.isArray(normal) ? normal : [];\n    this.color = color instanceof THREE.Color ? color : new THREE.Color();\n    this.vertexColors = Array.isArray(color) ? color : [];\n    this.materialIndex = materialIndex !== undefined ? materialIndex : 0;\n  };\n\n  THREE.Face3.prototype = {\n    constructor: THREE.Face3,\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(source) {\n      this.a = source.a;\n      this.b = source.b;\n      this.c = source.c;\n      this.normal.copy(source.normal);\n      this.color.copy(source.color);\n      this.materialIndex = source.materialIndex;\n\n      for (var i = 0, il = source.vertexNormals.length; i < il; i++) {\n        this.vertexNormals[i] = source.vertexNormals[i].clone();\n      }\n\n      for (var i = 0, il = source.vertexColors.length; i < il; i++) {\n        this.vertexColors[i] = source.vertexColors[i].clone();\n      }\n\n      return this;\n    }\n  }; // File:src/core/BufferAttribute.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.BufferAttribute = function (array, itemSize, normalized) {\n    this.uuid = THREE.Math.generateUUID();\n    this.array = array;\n    this.itemSize = itemSize;\n    this.dynamic = false;\n    this.updateRange = {\n      offset: 0,\n      count: -1\n    };\n    this.version = 0;\n    this.normalized = normalized === true;\n  };\n\n  THREE.BufferAttribute.prototype = {\n    constructor: THREE.BufferAttribute,\n\n    get count() {\n      return this.array.length / this.itemSize;\n    },\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    },\n\n    setDynamic: function setDynamic(value) {\n      this.dynamic = value;\n      return this;\n    },\n    copy: function copy(source) {\n      this.array = new source.array.constructor(source.array);\n      this.itemSize = source.itemSize;\n      this.dynamic = source.dynamic;\n      return this;\n    },\n    copyAt: function copyAt(index1, attribute, index2) {\n      index1 *= this.itemSize;\n      index2 *= attribute.itemSize;\n\n      for (var i = 0, l = this.itemSize; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    },\n    copyArray: function copyArray(array) {\n      this.array.set(array);\n      return this;\n    },\n    copyColorsArray: function copyColorsArray(colors) {\n      var array = this.array,\n          offset = 0;\n\n      for (var i = 0, l = colors.length; i < l; i++) {\n        var color = colors[i];\n\n        if (color === undefined) {\n          console.warn('THREE.BufferAttribute.copyColorsArray(): color is undefined', i);\n          color = new THREE.Color();\n        }\n\n        array[offset++] = color.r;\n        array[offset++] = color.g;\n        array[offset++] = color.b;\n      }\n\n      return this;\n    },\n    copyIndicesArray: function copyIndicesArray(indices) {\n      var array = this.array,\n          offset = 0;\n\n      for (var i = 0, l = indices.length; i < l; i++) {\n        var index = indices[i];\n        array[offset++] = index.a;\n        array[offset++] = index.b;\n        array[offset++] = index.c;\n      }\n\n      return this;\n    },\n    copyVector2sArray: function copyVector2sArray(vectors) {\n      var array = this.array,\n          offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i);\n          vector = new THREE.Vector2();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n      }\n\n      return this;\n    },\n    copyVector3sArray: function copyVector3sArray(vectors) {\n      var array = this.array,\n          offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i);\n          vector = new THREE.Vector3();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n      }\n\n      return this;\n    },\n    copyVector4sArray: function copyVector4sArray(vectors) {\n      var array = this.array,\n          offset = 0;\n\n      for (var i = 0, l = vectors.length; i < l; i++) {\n        var vector = vectors[i];\n\n        if (vector === undefined) {\n          console.warn('THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i);\n          vector = new THREE.Vector4();\n        }\n\n        array[offset++] = vector.x;\n        array[offset++] = vector.y;\n        array[offset++] = vector.z;\n        array[offset++] = vector.w;\n      }\n\n      return this;\n    },\n    set: function set(value, offset) {\n      if (offset === undefined) offset = 0;\n      this.array.set(value, offset);\n      return this;\n    },\n    getX: function getX(index) {\n      return this.array[index * this.itemSize];\n    },\n    setX: function setX(index, x) {\n      this.array[index * this.itemSize] = x;\n      return this;\n    },\n    getY: function getY(index) {\n      return this.array[index * this.itemSize + 1];\n    },\n    setY: function setY(index, y) {\n      this.array[index * this.itemSize + 1] = y;\n      return this;\n    },\n    getZ: function getZ(index) {\n      return this.array[index * this.itemSize + 2];\n    },\n    setZ: function setZ(index, z) {\n      this.array[index * this.itemSize + 2] = z;\n      return this;\n    },\n    getW: function getW(index) {\n      return this.array[index * this.itemSize + 3];\n    },\n    setW: function setW(index, w) {\n      this.array[index * this.itemSize + 3] = w;\n      return this;\n    },\n    setXY: function setXY(index, x, y) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      return this;\n    },\n    setXYZ: function setXYZ(index, x, y, z) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n      return this;\n    },\n    setXYZW: function setXYZW(index, x, y, z, w) {\n      index *= this.itemSize;\n      this.array[index + 0] = x;\n      this.array[index + 1] = y;\n      this.array[index + 2] = z;\n      this.array[index + 3] = w;\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }; //\n\n  THREE.Int8Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Int8Array(array), itemSize);\n  };\n\n  THREE.Uint8Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Uint8Array(array), itemSize);\n  };\n\n  THREE.Uint8ClampedAttribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Uint8ClampedArray(array), itemSize);\n  };\n\n  THREE.Int16Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Int16Array(array), itemSize);\n  };\n\n  THREE.Uint16Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Uint16Array(array), itemSize);\n  };\n\n  THREE.Int32Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Int32Array(array), itemSize);\n  };\n\n  THREE.Uint32Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Uint32Array(array), itemSize);\n  };\n\n  THREE.Float32Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Float32Array(array), itemSize);\n  };\n\n  THREE.Float64Attribute = function (array, itemSize) {\n    return new THREE.BufferAttribute(new Float64Array(array), itemSize);\n  }; // Deprecated\n\n\n  THREE.DynamicBufferAttribute = function (array, itemSize) {\n    console.warn('THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.');\n    return new THREE.BufferAttribute(array, itemSize).setDynamic(true);\n  }; // File:src/core/InstancedBufferAttribute.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n\n  THREE.InstancedBufferAttribute = function (array, itemSize, meshPerAttribute) {\n    THREE.BufferAttribute.call(this, array, itemSize);\n    this.meshPerAttribute = meshPerAttribute || 1;\n  };\n\n  THREE.InstancedBufferAttribute.prototype = Object.create(THREE.BufferAttribute.prototype);\n  THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\n\n  THREE.InstancedBufferAttribute.prototype.copy = function (source) {\n    THREE.BufferAttribute.prototype.copy.call(this, source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }; // File:src/core/InterleavedBuffer.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n\n  THREE.InterleavedBuffer = function (array, stride) {\n    this.uuid = THREE.Math.generateUUID();\n    this.array = array;\n    this.stride = stride;\n    this.dynamic = false;\n    this.updateRange = {\n      offset: 0,\n      count: -1\n    };\n    this.version = 0;\n  };\n\n  THREE.InterleavedBuffer.prototype = {\n    constructor: THREE.InterleavedBuffer,\n\n    get length() {\n      return this.array.length;\n    },\n\n    get count() {\n      return this.array.length / this.stride;\n    },\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    },\n\n    setDynamic: function setDynamic(value) {\n      this.dynamic = value;\n      return this;\n    },\n    copy: function copy(source) {\n      this.array = new source.array.constructor(source.array);\n      this.stride = source.stride;\n      this.dynamic = source.dynamic;\n      return this;\n    },\n    copyAt: function copyAt(index1, attribute, index2) {\n      index1 *= this.stride;\n      index2 *= attribute.stride;\n\n      for (var i = 0, l = this.stride; i < l; i++) {\n        this.array[index1 + i] = attribute.array[index2 + i];\n      }\n\n      return this;\n    },\n    set: function set(value, offset) {\n      if (offset === undefined) offset = 0;\n      this.array.set(value, offset);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }; // File:src/core/InstancedInterleavedBuffer.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  THREE.InstancedInterleavedBuffer = function (array, stride, meshPerAttribute) {\n    THREE.InterleavedBuffer.call(this, array, stride);\n    this.meshPerAttribute = meshPerAttribute || 1;\n  };\n\n  THREE.InstancedInterleavedBuffer.prototype = Object.create(THREE.InterleavedBuffer.prototype);\n  THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\n\n  THREE.InstancedInterleavedBuffer.prototype.copy = function (source) {\n    THREE.InterleavedBuffer.prototype.copy.call(this, source);\n    this.meshPerAttribute = source.meshPerAttribute;\n    return this;\n  }; // File:src/core/InterleavedBufferAttribute.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n\n  THREE.InterleavedBufferAttribute = function (interleavedBuffer, itemSize, offset, normalized) {\n    this.uuid = THREE.Math.generateUUID();\n    this.data = interleavedBuffer;\n    this.itemSize = itemSize;\n    this.offset = offset;\n    this.normalized = normalized === true;\n  };\n\n  THREE.InterleavedBufferAttribute.prototype = {\n    constructor: THREE.InterleavedBufferAttribute,\n\n    get length() {\n      console.warn('THREE.BufferAttribute: .length has been deprecated. Please use .count.');\n      return this.array.length;\n    },\n\n    get count() {\n      return this.data.count;\n    },\n\n    get array() {\n      return this.data.array;\n    },\n\n    setX: function setX(index, x) {\n      this.data.array[index * this.data.stride + this.offset] = x;\n      return this;\n    },\n    setY: function setY(index, y) {\n      this.data.array[index * this.data.stride + this.offset + 1] = y;\n      return this;\n    },\n    setZ: function setZ(index, z) {\n      this.data.array[index * this.data.stride + this.offset + 2] = z;\n      return this;\n    },\n    setW: function setW(index, w) {\n      this.data.array[index * this.data.stride + this.offset + 3] = w;\n      return this;\n    },\n    getX: function getX(index) {\n      return this.data.array[index * this.data.stride + this.offset];\n    },\n    getY: function getY(index) {\n      return this.data.array[index * this.data.stride + this.offset + 1];\n    },\n    getZ: function getZ(index) {\n      return this.data.array[index * this.data.stride + this.offset + 2];\n    },\n    getW: function getW(index) {\n      return this.data.array[index * this.data.stride + this.offset + 3];\n    },\n    setXY: function setXY(index, x, y) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      return this;\n    },\n    setXYZ: function setXYZ(index, x, y, z) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n      return this;\n    },\n    setXYZW: function setXYZW(index, x, y, z, w) {\n      index = index * this.data.stride + this.offset;\n      this.data.array[index + 0] = x;\n      this.data.array[index + 1] = y;\n      this.data.array[index + 2] = z;\n      this.data.array[index + 3] = w;\n      return this;\n    }\n  }; // File:src/core/Geometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author kile / http://kile.stravaganza.org/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author bhouston / http://clara.io\n   */\n\n  THREE.Geometry = function () {\n    Object.defineProperty(this, 'id', {\n      value: THREE.GeometryIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.type = 'Geometry';\n    this.vertices = [];\n    this.colors = [];\n    this.faces = [];\n    this.faceVertexUvs = [[]];\n    this.morphTargets = [];\n    this.morphNormals = [];\n    this.skinWeights = [];\n    this.skinIndices = [];\n    this.lineDistances = [];\n    this.boundingBox = null;\n    this.boundingSphere = null; // update flags\n\n    this.elementsNeedUpdate = false;\n    this.verticesNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.lineDistancesNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  };\n\n  Object.assign(THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\n    applyMatrix: function applyMatrix(matrix) {\n      var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n\n      for (var i = 0, il = this.vertices.length; i < il; i++) {\n        var vertex = this.vertices[i];\n        vertex.applyMatrix4(matrix);\n      }\n\n      for (var i = 0, il = this.faces.length; i < il; i++) {\n        var face = this.faces[i];\n        face.normal.applyMatrix3(normalMatrix).normalize();\n\n        for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n          face.vertexNormals[j].applyMatrix3(normalMatrix).normalize();\n        }\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      this.verticesNeedUpdate = true;\n      this.normalsNeedUpdate = true;\n      return this;\n    },\n    rotateX: function () {\n      // rotate geometry around world x-axis\n      var m1;\n      return function rotateX(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationX(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    rotateY: function () {\n      // rotate geometry around world y-axis\n      var m1;\n      return function rotateY(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationY(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    rotateZ: function () {\n      // rotate geometry around world z-axis\n      var m1;\n      return function rotateZ(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationZ(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    translate: function () {\n      // translate geometry\n      var m1;\n      return function translate(x, y, z) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeTranslation(x, y, z);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    scale: function () {\n      // scale geometry\n      var m1;\n      return function scale(x, y, z) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeScale(x, y, z);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    lookAt: function () {\n      var obj;\n      return function lookAt(vector) {\n        if (obj === undefined) obj = new THREE.Object3D();\n        obj.lookAt(vector);\n        obj.updateMatrix();\n        this.applyMatrix(obj.matrix);\n      };\n    }(),\n    fromBufferGeometry: function fromBufferGeometry(geometry) {\n      var scope = this;\n      var indices = geometry.index !== null ? geometry.index.array : undefined;\n      var attributes = geometry.attributes;\n      var positions = attributes.position.array;\n      var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\n      var colors = attributes.color !== undefined ? attributes.color.array : undefined;\n      var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\n      var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\n      if (uvs2 !== undefined) this.faceVertexUvs[1] = [];\n      var tempNormals = [];\n      var tempUVs = [];\n      var tempUVs2 = [];\n\n      for (var i = 0, j = 0; i < positions.length; i += 3, j += 2) {\n        scope.vertices.push(new THREE.Vector3(positions[i], positions[i + 1], positions[i + 2]));\n\n        if (normals !== undefined) {\n          tempNormals.push(new THREE.Vector3(normals[i], normals[i + 1], normals[i + 2]));\n        }\n\n        if (colors !== undefined) {\n          scope.colors.push(new THREE.Color(colors[i], colors[i + 1], colors[i + 2]));\n        }\n\n        if (uvs !== undefined) {\n          tempUVs.push(new THREE.Vector2(uvs[j], uvs[j + 1]));\n        }\n\n        if (uvs2 !== undefined) {\n          tempUVs2.push(new THREE.Vector2(uvs2[j], uvs2[j + 1]));\n        }\n      }\n\n      function addFace(a, b, c, materialIndex) {\n        var vertexNormals = normals !== undefined ? [tempNormals[a].clone(), tempNormals[b].clone(), tempNormals[c].clone()] : [];\n        var vertexColors = colors !== undefined ? [scope.colors[a].clone(), scope.colors[b].clone(), scope.colors[c].clone()] : [];\n        var face = new THREE.Face3(a, b, c, vertexNormals, vertexColors, materialIndex);\n        scope.faces.push(face);\n\n        if (uvs !== undefined) {\n          scope.faceVertexUvs[0].push([tempUVs[a].clone(), tempUVs[b].clone(), tempUVs[c].clone()]);\n        }\n\n        if (uvs2 !== undefined) {\n          scope.faceVertexUvs[1].push([tempUVs2[a].clone(), tempUVs2[b].clone(), tempUVs2[c].clone()]);\n        }\n      }\n\n      if (indices !== undefined) {\n        var groups = geometry.groups;\n\n        if (groups.length > 0) {\n          for (var i = 0; i < groups.length; i++) {\n            var group = groups[i];\n            var start = group.start;\n            var count = group.count;\n\n            for (var j = start, jl = start + count; j < jl; j += 3) {\n              addFace(indices[j], indices[j + 1], indices[j + 2], group.materialIndex);\n            }\n          }\n        } else {\n          for (var i = 0; i < indices.length; i += 3) {\n            addFace(indices[i], indices[i + 1], indices[i + 2]);\n          }\n        }\n      } else {\n        for (var i = 0; i < positions.length / 3; i += 3) {\n          addFace(i, i + 1, i + 2);\n        }\n      }\n\n      this.computeFaceNormals();\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      return this;\n    },\n    center: function center() {\n      this.computeBoundingBox();\n      var offset = this.boundingBox.center().negate();\n      this.translate(offset.x, offset.y, offset.z);\n      return offset;\n    },\n    normalize: function normalize() {\n      this.computeBoundingSphere();\n      var center = this.boundingSphere.center;\n      var radius = this.boundingSphere.radius;\n      var s = radius === 0 ? 1 : 1.0 / radius;\n      var matrix = new THREE.Matrix4();\n      matrix.set(s, 0, 0, -s * center.x, 0, s, 0, -s * center.y, 0, 0, s, -s * center.z, 0, 0, 0, 1);\n      this.applyMatrix(matrix);\n      return this;\n    },\n    computeFaceNormals: function computeFaceNormals() {\n      var cb = new THREE.Vector3(),\n          ab = new THREE.Vector3();\n\n      for (var f = 0, fl = this.faces.length; f < fl; f++) {\n        var face = this.faces[f];\n        var vA = this.vertices[face.a];\n        var vB = this.vertices[face.b];\n        var vC = this.vertices[face.c];\n        cb.subVectors(vC, vB);\n        ab.subVectors(vA, vB);\n        cb.cross(ab);\n        cb.normalize();\n        face.normal.copy(cb);\n      }\n    },\n    computeVertexNormals: function computeVertexNormals(areaWeighted) {\n      if (areaWeighted === undefined) areaWeighted = true;\n      var v, vl, f, fl, face, vertices;\n      vertices = new Array(this.vertices.length);\n\n      for (v = 0, vl = this.vertices.length; v < vl; v++) {\n        vertices[v] = new THREE.Vector3();\n      }\n\n      if (areaWeighted) {\n        // vertex normals weighted by triangle areas\n        // http://www.iquilezles.org/www/articles/normals/normals.htm\n        var vA, vB, vC;\n        var cb = new THREE.Vector3(),\n            ab = new THREE.Vector3();\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n          vA = this.vertices[face.a];\n          vB = this.vertices[face.b];\n          vC = this.vertices[face.c];\n          cb.subVectors(vC, vB);\n          ab.subVectors(vA, vB);\n          cb.cross(ab);\n          vertices[face.a].add(cb);\n          vertices[face.b].add(cb);\n          vertices[face.c].add(cb);\n        }\n      } else {\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n          vertices[face.a].add(face.normal);\n          vertices[face.b].add(face.normal);\n          vertices[face.c].add(face.normal);\n        }\n      }\n\n      for (v = 0, vl = this.vertices.length; v < vl; v++) {\n        vertices[v].normalize();\n      }\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          vertexNormals[0].copy(vertices[face.a]);\n          vertexNormals[1].copy(vertices[face.b]);\n          vertexNormals[2].copy(vertices[face.c]);\n        } else {\n          vertexNormals[0] = vertices[face.a].clone();\n          vertexNormals[1] = vertices[face.b].clone();\n          vertexNormals[2] = vertices[face.c].clone();\n        }\n      }\n\n      if (this.faces.length > 0) {\n        this.normalsNeedUpdate = true;\n      }\n    },\n    computeMorphNormals: function computeMorphNormals() {\n      var i, il, f, fl, face; // save original normals\n      // - create temp variables on first access\n      //   otherwise just copy (for faster repeated calls)\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n\n        if (!face.__originalFaceNormal) {\n          face.__originalFaceNormal = face.normal.clone();\n        } else {\n          face.__originalFaceNormal.copy(face.normal);\n        }\n\n        if (!face.__originalVertexNormals) face.__originalVertexNormals = [];\n\n        for (i = 0, il = face.vertexNormals.length; i < il; i++) {\n          if (!face.__originalVertexNormals[i]) {\n            face.__originalVertexNormals[i] = face.vertexNormals[i].clone();\n          } else {\n            face.__originalVertexNormals[i].copy(face.vertexNormals[i]);\n          }\n        }\n      } // use temp geometry to compute face and vertex normals for each morph\n\n\n      var tmpGeo = new THREE.Geometry();\n      tmpGeo.faces = this.faces;\n\n      for (i = 0, il = this.morphTargets.length; i < il; i++) {\n        // create on first access\n        if (!this.morphNormals[i]) {\n          this.morphNormals[i] = {};\n          this.morphNormals[i].faceNormals = [];\n          this.morphNormals[i].vertexNormals = [];\n          var dstNormalsFace = this.morphNormals[i].faceNormals;\n          var dstNormalsVertex = this.morphNormals[i].vertexNormals;\n          var faceNormal, vertexNormals;\n\n          for (f = 0, fl = this.faces.length; f < fl; f++) {\n            faceNormal = new THREE.Vector3();\n            vertexNormals = {\n              a: new THREE.Vector3(),\n              b: new THREE.Vector3(),\n              c: new THREE.Vector3()\n            };\n            dstNormalsFace.push(faceNormal);\n            dstNormalsVertex.push(vertexNormals);\n          }\n        }\n\n        var morphNormals = this.morphNormals[i]; // set vertices to morph target\n\n        tmpGeo.vertices = this.morphTargets[i].vertices; // compute morph normals\n\n        tmpGeo.computeFaceNormals();\n        tmpGeo.computeVertexNormals(); // store morph normals\n\n        var faceNormal, vertexNormals;\n\n        for (f = 0, fl = this.faces.length; f < fl; f++) {\n          face = this.faces[f];\n          faceNormal = morphNormals.faceNormals[f];\n          vertexNormals = morphNormals.vertexNormals[f];\n          faceNormal.copy(face.normal);\n          vertexNormals.a.copy(face.vertexNormals[0]);\n          vertexNormals.b.copy(face.vertexNormals[1]);\n          vertexNormals.c.copy(face.vertexNormals[2]);\n        }\n      } // restore original normals\n\n\n      for (f = 0, fl = this.faces.length; f < fl; f++) {\n        face = this.faces[f];\n        face.normal = face.__originalFaceNormal;\n        face.vertexNormals = face.__originalVertexNormals;\n      }\n    },\n    computeTangents: function computeTangents() {\n      console.warn('THREE.Geometry: .computeTangents() has been removed.');\n    },\n    computeLineDistances: function computeLineDistances() {\n      var d = 0;\n      var vertices = this.vertices;\n\n      for (var i = 0, il = vertices.length; i < il; i++) {\n        if (i > 0) {\n          d += vertices[i].distanceTo(vertices[i - 1]);\n        }\n\n        this.lineDistances[i] = d;\n      }\n    },\n    computeBoundingBox: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new THREE.Box3();\n      }\n\n      this.boundingBox.setFromPoints(this.vertices);\n    },\n    computeBoundingSphere: function computeBoundingSphere() {\n      if (this.boundingSphere === null) {\n        this.boundingSphere = new THREE.Sphere();\n      }\n\n      this.boundingSphere.setFromPoints(this.vertices);\n    },\n    merge: function merge(geometry, matrix, materialIndexOffset) {\n      if (geometry instanceof THREE.Geometry === false) {\n        console.error('THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry);\n        return;\n      }\n\n      var normalMatrix,\n          vertexOffset = this.vertices.length,\n          vertices1 = this.vertices,\n          vertices2 = geometry.vertices,\n          faces1 = this.faces,\n          faces2 = geometry.faces,\n          uvs1 = this.faceVertexUvs[0],\n          uvs2 = geometry.faceVertexUvs[0];\n      if (materialIndexOffset === undefined) materialIndexOffset = 0;\n\n      if (matrix !== undefined) {\n        normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n      } // vertices\n\n\n      for (var i = 0, il = vertices2.length; i < il; i++) {\n        var vertex = vertices2[i];\n        var vertexCopy = vertex.clone();\n        if (matrix !== undefined) vertexCopy.applyMatrix4(matrix);\n        vertices1.push(vertexCopy);\n      } // faces\n\n\n      for (i = 0, il = faces2.length; i < il; i++) {\n        var face = faces2[i],\n            faceCopy,\n            normal,\n            color,\n            faceVertexNormals = face.vertexNormals,\n            faceVertexColors = face.vertexColors;\n        faceCopy = new THREE.Face3(face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset);\n        faceCopy.normal.copy(face.normal);\n\n        if (normalMatrix !== undefined) {\n          faceCopy.normal.applyMatrix3(normalMatrix).normalize();\n        }\n\n        for (var j = 0, jl = faceVertexNormals.length; j < jl; j++) {\n          normal = faceVertexNormals[j].clone();\n\n          if (normalMatrix !== undefined) {\n            normal.applyMatrix3(normalMatrix).normalize();\n          }\n\n          faceCopy.vertexNormals.push(normal);\n        }\n\n        faceCopy.color.copy(face.color);\n\n        for (var j = 0, jl = faceVertexColors.length; j < jl; j++) {\n          color = faceVertexColors[j];\n          faceCopy.vertexColors.push(color.clone());\n        }\n\n        faceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n        faces1.push(faceCopy);\n      } // uvs\n\n\n      for (i = 0, il = uvs2.length; i < il; i++) {\n        var uv = uvs2[i],\n            uvCopy = [];\n\n        if (uv === undefined) {\n          continue;\n        }\n\n        for (var j = 0, jl = uv.length; j < jl; j++) {\n          uvCopy.push(uv[j].clone());\n        }\n\n        uvs1.push(uvCopy);\n      }\n    },\n    mergeMesh: function mergeMesh(mesh) {\n      if (mesh instanceof THREE.Mesh === false) {\n        console.error('THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh);\n        return;\n      }\n\n      mesh.matrixAutoUpdate && mesh.updateMatrix();\n      this.merge(mesh.geometry, mesh.matrix);\n    },\n\n    /*\n     * Checks for duplicate vertices with hashmap.\n     * Duplicated vertices are removed\n     * and faces' vertices are updated.\n     */\n    mergeVertices: function mergeVertices() {\n      var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\n      var unique = [],\n          changes = [];\n      var v, key;\n      var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n\n      var precision = Math.pow(10, precisionPoints);\n      var i, il, face;\n      var indices, j, jl;\n\n      for (i = 0, il = this.vertices.length; i < il; i++) {\n        v = this.vertices[i];\n        key = Math.round(v.x * precision) + '_' + Math.round(v.y * precision) + '_' + Math.round(v.z * precision);\n\n        if (verticesMap[key] === undefined) {\n          verticesMap[key] = i;\n          unique.push(this.vertices[i]);\n          changes[i] = unique.length - 1;\n        } else {\n          //console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n          changes[i] = changes[verticesMap[key]];\n        }\n      } // if faces are completely degenerate after merging vertices, we\n      // have to remove them from the geometry.\n\n\n      var faceIndicesToRemove = [];\n\n      for (i = 0, il = this.faces.length; i < il; i++) {\n        face = this.faces[i];\n        face.a = changes[face.a];\n        face.b = changes[face.b];\n        face.c = changes[face.c];\n        indices = [face.a, face.b, face.c];\n        var dupIndex = -1; // if any duplicate vertices are found in a Face3\n        // we have to remove the face as nothing can be saved\n\n        for (var n = 0; n < 3; n++) {\n          if (indices[n] === indices[(n + 1) % 3]) {\n            dupIndex = n;\n            faceIndicesToRemove.push(i);\n            break;\n          }\n        }\n      }\n\n      for (i = faceIndicesToRemove.length - 1; i >= 0; i--) {\n        var idx = faceIndicesToRemove[i];\n        this.faces.splice(idx, 1);\n\n        for (j = 0, jl = this.faceVertexUvs.length; j < jl; j++) {\n          this.faceVertexUvs[j].splice(idx, 1);\n        }\n      } // Use unique set of vertices\n\n\n      var diff = this.vertices.length - unique.length;\n      this.vertices = unique;\n      return diff;\n    },\n    sortFacesByMaterialIndex: function sortFacesByMaterialIndex() {\n      var faces = this.faces;\n      var length = faces.length; // tag faces\n\n      for (var i = 0; i < length; i++) {\n        faces[i]._id = i;\n      } // sort faces\n\n\n      function materialIndexSort(a, b) {\n        return a.materialIndex - b.materialIndex;\n      }\n\n      faces.sort(materialIndexSort); // sort uvs\n\n      var uvs1 = this.faceVertexUvs[0];\n      var uvs2 = this.faceVertexUvs[1];\n      var newUvs1, newUvs2;\n      if (uvs1 && uvs1.length === length) newUvs1 = [];\n      if (uvs2 && uvs2.length === length) newUvs2 = [];\n\n      for (var i = 0; i < length; i++) {\n        var id = faces[i]._id;\n        if (newUvs1) newUvs1.push(uvs1[id]);\n        if (newUvs2) newUvs2.push(uvs2[id]);\n      }\n\n      if (newUvs1) this.faceVertexUvs[0] = newUvs1;\n      if (newUvs2) this.faceVertexUvs[1] = newUvs2;\n    },\n    toJSON: function toJSON() {\n      var data = {\n        metadata: {\n          version: 4.4,\n          type: 'Geometry',\n          generator: 'Geometry.toJSON'\n        }\n      }; // standard Geometry serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n\n      if (this.parameters !== undefined) {\n        var parameters = this.parameters;\n\n        for (var key in parameters) {\n          if (parameters[key] !== undefined) data[key] = parameters[key];\n        }\n\n        return data;\n      }\n\n      var vertices = [];\n\n      for (var i = 0; i < this.vertices.length; i++) {\n        var vertex = this.vertices[i];\n        vertices.push(vertex.x, vertex.y, vertex.z);\n      }\n\n      var faces = [];\n      var normals = [];\n      var normalsHash = {};\n      var colors = [];\n      var colorsHash = {};\n      var uvs = [];\n      var uvsHash = {};\n\n      for (var i = 0; i < this.faces.length; i++) {\n        var face = this.faces[i];\n        var hasMaterial = true;\n        var hasFaceUv = false; // deprecated\n\n        var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n        var hasFaceNormal = face.normal.length() > 0;\n        var hasFaceVertexNormal = face.vertexNormals.length > 0;\n        var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n        var hasFaceVertexColor = face.vertexColors.length > 0;\n        var faceType = 0;\n        faceType = setBit(faceType, 0, 0); // isQuad\n\n        faceType = setBit(faceType, 1, hasMaterial);\n        faceType = setBit(faceType, 2, hasFaceUv);\n        faceType = setBit(faceType, 3, hasFaceVertexUv);\n        faceType = setBit(faceType, 4, hasFaceNormal);\n        faceType = setBit(faceType, 5, hasFaceVertexNormal);\n        faceType = setBit(faceType, 6, hasFaceColor);\n        faceType = setBit(faceType, 7, hasFaceVertexColor);\n        faces.push(faceType);\n        faces.push(face.a, face.b, face.c);\n        faces.push(face.materialIndex);\n\n        if (hasFaceVertexUv) {\n          var faceVertexUvs = this.faceVertexUvs[0][i];\n          faces.push(getUvIndex(faceVertexUvs[0]), getUvIndex(faceVertexUvs[1]), getUvIndex(faceVertexUvs[2]));\n        }\n\n        if (hasFaceNormal) {\n          faces.push(getNormalIndex(face.normal));\n        }\n\n        if (hasFaceVertexNormal) {\n          var vertexNormals = face.vertexNormals;\n          faces.push(getNormalIndex(vertexNormals[0]), getNormalIndex(vertexNormals[1]), getNormalIndex(vertexNormals[2]));\n        }\n\n        if (hasFaceColor) {\n          faces.push(getColorIndex(face.color));\n        }\n\n        if (hasFaceVertexColor) {\n          var vertexColors = face.vertexColors;\n          faces.push(getColorIndex(vertexColors[0]), getColorIndex(vertexColors[1]), getColorIndex(vertexColors[2]));\n        }\n      }\n\n      function setBit(value, position, enabled) {\n        return enabled ? value | 1 << position : value & ~(1 << position);\n      }\n\n      function getNormalIndex(normal) {\n        var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n        if (normalsHash[hash] !== undefined) {\n          return normalsHash[hash];\n        }\n\n        normalsHash[hash] = normals.length / 3;\n        normals.push(normal.x, normal.y, normal.z);\n        return normalsHash[hash];\n      }\n\n      function getColorIndex(color) {\n        var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n        if (colorsHash[hash] !== undefined) {\n          return colorsHash[hash];\n        }\n\n        colorsHash[hash] = colors.length;\n        colors.push(color.getHex());\n        return colorsHash[hash];\n      }\n\n      function getUvIndex(uv) {\n        var hash = uv.x.toString() + uv.y.toString();\n\n        if (uvsHash[hash] !== undefined) {\n          return uvsHash[hash];\n        }\n\n        uvsHash[hash] = uvs.length / 2;\n        uvs.push(uv.x, uv.y);\n        return uvsHash[hash];\n      }\n\n      data.data = {};\n      data.data.vertices = vertices;\n      data.data.normals = normals;\n      if (colors.length > 0) data.data.colors = colors;\n      if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n\n      data.data.faces = faces;\n      return data;\n    },\n    clone: function clone() {\n      /*\n      // Handle primitives\n      \tvar parameters = this.parameters;\n      \tif ( parameters !== undefined ) {\n      \t\tvar values = [];\n      \t\tfor ( var key in parameters ) {\n      \t\t\tvalues.push( parameters[ key ] );\n      \t\t}\n      \t\tvar geometry = Object.create( this.constructor.prototype );\n      \tthis.constructor.apply( geometry, values );\n      \treturn geometry;\n      \t}\n      \treturn new this.constructor().copy( this );\n      */\n      return new THREE.Geometry().copy(this);\n    },\n    copy: function copy(source) {\n      this.vertices = [];\n      this.faces = [];\n      this.faceVertexUvs = [[]];\n      var vertices = source.vertices;\n\n      for (var i = 0, il = vertices.length; i < il; i++) {\n        this.vertices.push(vertices[i].clone());\n      }\n\n      var faces = source.faces;\n\n      for (var i = 0, il = faces.length; i < il; i++) {\n        this.faces.push(faces[i].clone());\n      }\n\n      for (var i = 0, il = source.faceVertexUvs.length; i < il; i++) {\n        var faceVertexUvs = source.faceVertexUvs[i];\n\n        if (this.faceVertexUvs[i] === undefined) {\n          this.faceVertexUvs[i] = [];\n        }\n\n        for (var j = 0, jl = faceVertexUvs.length; j < jl; j++) {\n          var uvs = faceVertexUvs[j],\n              uvsCopy = [];\n\n          for (var k = 0, kl = uvs.length; k < kl; k++) {\n            var uv = uvs[k];\n            uvsCopy.push(uv.clone());\n          }\n\n          this.faceVertexUvs[i].push(uvsCopy);\n        }\n      }\n\n      return this;\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  });\n  THREE.GeometryIdCount = 0; // File:src/core/DirectGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.DirectGeometry = function () {\n    Object.defineProperty(this, 'id', {\n      value: THREE.GeometryIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.type = 'DirectGeometry';\n    this.indices = [];\n    this.vertices = [];\n    this.normals = [];\n    this.colors = [];\n    this.uvs = [];\n    this.uvs2 = [];\n    this.groups = [];\n    this.morphTargets = {};\n    this.skinWeights = [];\n    this.skinIndices = []; // this.lineDistances = [];\n\n    this.boundingBox = null;\n    this.boundingSphere = null; // update flags\n\n    this.verticesNeedUpdate = false;\n    this.normalsNeedUpdate = false;\n    this.colorsNeedUpdate = false;\n    this.uvsNeedUpdate = false;\n    this.groupsNeedUpdate = false;\n  };\n\n  Object.assign(THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\n    computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\n    computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\n    computeFaceNormals: function computeFaceNormals() {\n      console.warn('THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.');\n    },\n    computeVertexNormals: function computeVertexNormals() {\n      console.warn('THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.');\n    },\n    computeGroups: function computeGroups(geometry) {\n      var group;\n      var groups = [];\n      var materialIndex;\n      var faces = geometry.faces;\n\n      for (var i = 0; i < faces.length; i++) {\n        var face = faces[i]; // materials\n\n        if (face.materialIndex !== materialIndex) {\n          materialIndex = face.materialIndex;\n\n          if (group !== undefined) {\n            group.count = i * 3 - group.start;\n            groups.push(group);\n          }\n\n          group = {\n            start: i * 3,\n            materialIndex: materialIndex\n          };\n        }\n      }\n\n      if (group !== undefined) {\n        group.count = i * 3 - group.start;\n        groups.push(group);\n      }\n\n      this.groups = groups;\n    },\n    fromGeometry: function fromGeometry(geometry) {\n      var faces = geometry.faces;\n      var vertices = geometry.vertices;\n      var faceVertexUvs = geometry.faceVertexUvs;\n      var hasFaceVertexUv = faceVertexUvs[0] && faceVertexUvs[0].length > 0;\n      var hasFaceVertexUv2 = faceVertexUvs[1] && faceVertexUvs[1].length > 0; // morphs\n\n      var morphTargets = geometry.morphTargets;\n      var morphTargetsLength = morphTargets.length;\n      var morphTargetsPosition;\n\n      if (morphTargetsLength > 0) {\n        morphTargetsPosition = [];\n\n        for (var i = 0; i < morphTargetsLength; i++) {\n          morphTargetsPosition[i] = [];\n        }\n\n        this.morphTargets.position = morphTargetsPosition;\n      }\n\n      var morphNormals = geometry.morphNormals;\n      var morphNormalsLength = morphNormals.length;\n      var morphTargetsNormal;\n\n      if (morphNormalsLength > 0) {\n        morphTargetsNormal = [];\n\n        for (var i = 0; i < morphNormalsLength; i++) {\n          morphTargetsNormal[i] = [];\n        }\n\n        this.morphTargets.normal = morphTargetsNormal;\n      } // skins\n\n\n      var skinIndices = geometry.skinIndices;\n      var skinWeights = geometry.skinWeights;\n      var hasSkinIndices = skinIndices.length === vertices.length;\n      var hasSkinWeights = skinWeights.length === vertices.length; //\n\n      for (var i = 0; i < faces.length; i++) {\n        var face = faces[i];\n        this.vertices.push(vertices[face.a], vertices[face.b], vertices[face.c]);\n        var vertexNormals = face.vertexNormals;\n\n        if (vertexNormals.length === 3) {\n          this.normals.push(vertexNormals[0], vertexNormals[1], vertexNormals[2]);\n        } else {\n          var normal = face.normal;\n          this.normals.push(normal, normal, normal);\n        }\n\n        var vertexColors = face.vertexColors;\n\n        if (vertexColors.length === 3) {\n          this.colors.push(vertexColors[0], vertexColors[1], vertexColors[2]);\n        } else {\n          var color = face.color;\n          this.colors.push(color, color, color);\n        }\n\n        if (hasFaceVertexUv === true) {\n          var vertexUvs = faceVertexUvs[0][i];\n\n          if (vertexUvs !== undefined) {\n            this.uvs.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n          } else {\n            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i);\n            this.uvs.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2());\n          }\n        }\n\n        if (hasFaceVertexUv2 === true) {\n          var vertexUvs = faceVertexUvs[1][i];\n\n          if (vertexUvs !== undefined) {\n            this.uvs2.push(vertexUvs[0], vertexUvs[1], vertexUvs[2]);\n          } else {\n            console.warn('THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i);\n            this.uvs2.push(new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2());\n          }\n        } // morphs\n\n\n        for (var j = 0; j < morphTargetsLength; j++) {\n          var morphTarget = morphTargets[j].vertices;\n          morphTargetsPosition[j].push(morphTarget[face.a], morphTarget[face.b], morphTarget[face.c]);\n        }\n\n        for (var j = 0; j < morphNormalsLength; j++) {\n          var morphNormal = morphNormals[j].vertexNormals[i];\n          morphTargetsNormal[j].push(morphNormal.a, morphNormal.b, morphNormal.c);\n        } // skins\n\n\n        if (hasSkinIndices) {\n          this.skinIndices.push(skinIndices[face.a], skinIndices[face.b], skinIndices[face.c]);\n        }\n\n        if (hasSkinWeights) {\n          this.skinWeights.push(skinWeights[face.a], skinWeights[face.b], skinWeights[face.c]);\n        }\n      }\n\n      this.computeGroups(geometry);\n      this.verticesNeedUpdate = geometry.verticesNeedUpdate;\n      this.normalsNeedUpdate = geometry.normalsNeedUpdate;\n      this.colorsNeedUpdate = geometry.colorsNeedUpdate;\n      this.uvsNeedUpdate = geometry.uvsNeedUpdate;\n      this.groupsNeedUpdate = geometry.groupsNeedUpdate;\n      return this;\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  }); // File:src/core/BufferGeometry.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.BufferGeometry = function () {\n    Object.defineProperty(this, 'id', {\n      value: THREE.GeometryIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.type = 'BufferGeometry';\n    this.index = null;\n    this.attributes = {};\n    this.morphAttributes = {};\n    this.groups = [];\n    this.boundingBox = null;\n    this.boundingSphere = null;\n    this.drawRange = {\n      start: 0,\n      count: Infinity\n    };\n  };\n\n  Object.assign(THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\n    getIndex: function getIndex() {\n      return this.index;\n    },\n    setIndex: function setIndex(index) {\n      this.index = index;\n    },\n    addAttribute: function addAttribute(name, attribute) {\n      if (attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false) {\n        console.warn('THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).');\n        this.addAttribute(name, new THREE.BufferAttribute(arguments[1], arguments[2]));\n        return;\n      }\n\n      if (name === 'index') {\n        console.warn('THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.');\n        this.setIndex(attribute);\n        return;\n      }\n\n      this.attributes[name] = attribute;\n      return this;\n    },\n    getAttribute: function getAttribute(name) {\n      return this.attributes[name];\n    },\n    removeAttribute: function removeAttribute(name) {\n      delete this.attributes[name];\n      return this;\n    },\n    addGroup: function addGroup(start, count, materialIndex) {\n      this.groups.push({\n        start: start,\n        count: count,\n        materialIndex: materialIndex !== undefined ? materialIndex : 0\n      });\n    },\n    clearGroups: function clearGroups() {\n      this.groups = [];\n    },\n    setDrawRange: function setDrawRange(start, count) {\n      this.drawRange.start = start;\n      this.drawRange.count = count;\n    },\n    applyMatrix: function applyMatrix(matrix) {\n      var position = this.attributes.position;\n\n      if (position !== undefined) {\n        matrix.applyToVector3Array(position.array);\n        position.needsUpdate = true;\n      }\n\n      var normal = this.attributes.normal;\n\n      if (normal !== undefined) {\n        var normalMatrix = new THREE.Matrix3().getNormalMatrix(matrix);\n        normalMatrix.applyToVector3Array(normal.array);\n        normal.needsUpdate = true;\n      }\n\n      if (this.boundingBox !== null) {\n        this.computeBoundingBox();\n      }\n\n      if (this.boundingSphere !== null) {\n        this.computeBoundingSphere();\n      }\n\n      return this;\n    },\n    rotateX: function () {\n      // rotate geometry around world x-axis\n      var m1;\n      return function rotateX(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationX(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    rotateY: function () {\n      // rotate geometry around world y-axis\n      var m1;\n      return function rotateY(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationY(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    rotateZ: function () {\n      // rotate geometry around world z-axis\n      var m1;\n      return function rotateZ(angle) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeRotationZ(angle);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    translate: function () {\n      // translate geometry\n      var m1;\n      return function translate(x, y, z) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeTranslation(x, y, z);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    scale: function () {\n      // scale geometry\n      var m1;\n      return function scale(x, y, z) {\n        if (m1 === undefined) m1 = new THREE.Matrix4();\n        m1.makeScale(x, y, z);\n        this.applyMatrix(m1);\n        return this;\n      };\n    }(),\n    lookAt: function () {\n      var obj;\n      return function lookAt(vector) {\n        if (obj === undefined) obj = new THREE.Object3D();\n        obj.lookAt(vector);\n        obj.updateMatrix();\n        this.applyMatrix(obj.matrix);\n      };\n    }(),\n    center: function center() {\n      this.computeBoundingBox();\n      var offset = this.boundingBox.center().negate();\n      this.translate(offset.x, offset.y, offset.z);\n      return offset;\n    },\n    setFromObject: function setFromObject(object) {\n      // console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\n      var geometry = object.geometry;\n\n      if (object instanceof THREE.Points || object instanceof THREE.Line) {\n        var positions = new THREE.Float32Attribute(geometry.vertices.length * 3, 3);\n        var colors = new THREE.Float32Attribute(geometry.colors.length * 3, 3);\n        this.addAttribute('position', positions.copyVector3sArray(geometry.vertices));\n        this.addAttribute('color', colors.copyColorsArray(geometry.colors));\n\n        if (geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length) {\n          var lineDistances = new THREE.Float32Attribute(geometry.lineDistances.length, 1);\n          this.addAttribute('lineDistance', lineDistances.copyArray(geometry.lineDistances));\n        }\n\n        if (geometry.boundingSphere !== null) {\n          this.boundingSphere = geometry.boundingSphere.clone();\n        }\n\n        if (geometry.boundingBox !== null) {\n          this.boundingBox = geometry.boundingBox.clone();\n        }\n      } else if (object instanceof THREE.Mesh) {\n        if (geometry instanceof THREE.Geometry) {\n          this.fromGeometry(geometry);\n        }\n      }\n\n      return this;\n    },\n    updateFromObject: function updateFromObject(object) {\n      var geometry = object.geometry;\n\n      if (object instanceof THREE.Mesh) {\n        var direct = geometry.__directGeometry;\n\n        if (direct === undefined || geometry.elementsNeedUpdate === true) {\n          return this.fromGeometry(geometry);\n        }\n\n        direct.verticesNeedUpdate = geometry.verticesNeedUpdate || geometry.elementsNeedUpdate;\n        direct.normalsNeedUpdate = geometry.normalsNeedUpdate || geometry.elementsNeedUpdate;\n        direct.colorsNeedUpdate = geometry.colorsNeedUpdate || geometry.elementsNeedUpdate;\n        direct.uvsNeedUpdate = geometry.uvsNeedUpdate || geometry.elementsNeedUpdate;\n        direct.groupsNeedUpdate = geometry.groupsNeedUpdate || geometry.elementsNeedUpdate;\n        geometry.elementsNeedUpdate = false;\n        geometry.verticesNeedUpdate = false;\n        geometry.normalsNeedUpdate = false;\n        geometry.colorsNeedUpdate = false;\n        geometry.uvsNeedUpdate = false;\n        geometry.groupsNeedUpdate = false;\n        geometry = direct;\n      }\n\n      var attribute;\n\n      if (geometry.verticesNeedUpdate === true) {\n        attribute = this.attributes.position;\n\n        if (attribute !== undefined) {\n          attribute.copyVector3sArray(geometry.vertices);\n          attribute.needsUpdate = true;\n        }\n\n        geometry.verticesNeedUpdate = false;\n      }\n\n      if (geometry.normalsNeedUpdate === true) {\n        attribute = this.attributes.normal;\n\n        if (attribute !== undefined) {\n          attribute.copyVector3sArray(geometry.normals);\n          attribute.needsUpdate = true;\n        }\n\n        geometry.normalsNeedUpdate = false;\n      }\n\n      if (geometry.colorsNeedUpdate === true) {\n        attribute = this.attributes.color;\n\n        if (attribute !== undefined) {\n          attribute.copyColorsArray(geometry.colors);\n          attribute.needsUpdate = true;\n        }\n\n        geometry.colorsNeedUpdate = false;\n      }\n\n      if (geometry.uvsNeedUpdate) {\n        attribute = this.attributes.uv;\n\n        if (attribute !== undefined) {\n          attribute.copyVector2sArray(geometry.uvs);\n          attribute.needsUpdate = true;\n        }\n\n        geometry.uvsNeedUpdate = false;\n      }\n\n      if (geometry.lineDistancesNeedUpdate) {\n        attribute = this.attributes.lineDistance;\n\n        if (attribute !== undefined) {\n          attribute.copyArray(geometry.lineDistances);\n          attribute.needsUpdate = true;\n        }\n\n        geometry.lineDistancesNeedUpdate = false;\n      }\n\n      if (geometry.groupsNeedUpdate) {\n        geometry.computeGroups(object.geometry);\n        this.groups = geometry.groups;\n        geometry.groupsNeedUpdate = false;\n      }\n\n      return this;\n    },\n    fromGeometry: function fromGeometry(geometry) {\n      geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry(geometry);\n      return this.fromDirectGeometry(geometry.__directGeometry);\n    },\n    fromDirectGeometry: function fromDirectGeometry(geometry) {\n      var positions = new Float32Array(geometry.vertices.length * 3);\n      this.addAttribute('position', new THREE.BufferAttribute(positions, 3).copyVector3sArray(geometry.vertices));\n\n      if (geometry.normals.length > 0) {\n        var normals = new Float32Array(geometry.normals.length * 3);\n        this.addAttribute('normal', new THREE.BufferAttribute(normals, 3).copyVector3sArray(geometry.normals));\n      }\n\n      if (geometry.colors.length > 0) {\n        var colors = new Float32Array(geometry.colors.length * 3);\n        this.addAttribute('color', new THREE.BufferAttribute(colors, 3).copyColorsArray(geometry.colors));\n      }\n\n      if (geometry.uvs.length > 0) {\n        var uvs = new Float32Array(geometry.uvs.length * 2);\n        this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2).copyVector2sArray(geometry.uvs));\n      }\n\n      if (geometry.uvs2.length > 0) {\n        var uvs2 = new Float32Array(geometry.uvs2.length * 2);\n        this.addAttribute('uv2', new THREE.BufferAttribute(uvs2, 2).copyVector2sArray(geometry.uvs2));\n      }\n\n      if (geometry.indices.length > 0) {\n        var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\n        var indices = new TypeArray(geometry.indices.length * 3);\n        this.setIndex(new THREE.BufferAttribute(indices, 1).copyIndicesArray(geometry.indices));\n      } // groups\n\n\n      this.groups = geometry.groups; // morphs\n\n      for (var name in geometry.morphTargets) {\n        var array = [];\n        var morphTargets = geometry.morphTargets[name];\n\n        for (var i = 0, l = morphTargets.length; i < l; i++) {\n          var morphTarget = morphTargets[i];\n          var attribute = new THREE.Float32Attribute(morphTarget.length * 3, 3);\n          array.push(attribute.copyVector3sArray(morphTarget));\n        }\n\n        this.morphAttributes[name] = array;\n      } // skinning\n\n\n      if (geometry.skinIndices.length > 0) {\n        var skinIndices = new THREE.Float32Attribute(geometry.skinIndices.length * 4, 4);\n        this.addAttribute('skinIndex', skinIndices.copyVector4sArray(geometry.skinIndices));\n      }\n\n      if (geometry.skinWeights.length > 0) {\n        var skinWeights = new THREE.Float32Attribute(geometry.skinWeights.length * 4, 4);\n        this.addAttribute('skinWeight', skinWeights.copyVector4sArray(geometry.skinWeights));\n      } //\n\n\n      if (geometry.boundingSphere !== null) {\n        this.boundingSphere = geometry.boundingSphere.clone();\n      }\n\n      if (geometry.boundingBox !== null) {\n        this.boundingBox = geometry.boundingBox.clone();\n      }\n\n      return this;\n    },\n    computeBoundingBox: function computeBoundingBox() {\n      if (this.boundingBox === null) {\n        this.boundingBox = new THREE.Box3();\n      }\n\n      var positions = this.attributes.position.array;\n\n      if (positions !== undefined) {\n        this.boundingBox.setFromArray(positions);\n      } else {\n        this.boundingBox.makeEmpty();\n      }\n\n      if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {\n        console.error('THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this);\n      }\n    },\n    computeBoundingSphere: function () {\n      var box = new THREE.Box3();\n      var vector = new THREE.Vector3();\n      return function computeBoundingSphere() {\n        if (this.boundingSphere === null) {\n          this.boundingSphere = new THREE.Sphere();\n        }\n\n        var positions = this.attributes.position;\n\n        if (positions) {\n          var array = positions.array;\n          var center = this.boundingSphere.center;\n          box.setFromArray(array);\n          box.center(center); // hoping to find a boundingSphere with a radius smaller than the\n          // boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n          var maxRadiusSq = 0;\n\n          for (var i = 0, il = array.length; i < il; i += 3) {\n            vector.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(vector));\n          }\n\n          this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n\n          if (isNaN(this.boundingSphere.radius)) {\n            console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this);\n          }\n        }\n      };\n    }(),\n    computeFaceNormals: function computeFaceNormals() {// backwards compatibility\n    },\n    computeVertexNormals: function computeVertexNormals() {\n      var index = this.index;\n      var attributes = this.attributes;\n      var groups = this.groups;\n\n      if (attributes.position) {\n        var positions = attributes.position.array;\n\n        if (attributes.normal === undefined) {\n          this.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(positions.length), 3));\n        } else {\n          // reset existing normals to zero\n          var array = attributes.normal.array;\n\n          for (var i = 0, il = array.length; i < il; i++) {\n            array[i] = 0;\n          }\n        }\n\n        var normals = attributes.normal.array;\n        var vA,\n            vB,\n            vC,\n            pA = new THREE.Vector3(),\n            pB = new THREE.Vector3(),\n            pC = new THREE.Vector3(),\n            cb = new THREE.Vector3(),\n            ab = new THREE.Vector3(); // indexed elements\n\n        if (index) {\n          var indices = index.array;\n\n          if (groups.length === 0) {\n            this.addGroup(0, indices.length);\n          }\n\n          for (var j = 0, jl = groups.length; j < jl; ++j) {\n            var group = groups[j];\n            var start = group.start;\n            var count = group.count;\n\n            for (var i = start, il = start + count; i < il; i += 3) {\n              vA = indices[i + 0] * 3;\n              vB = indices[i + 1] * 3;\n              vC = indices[i + 2] * 3;\n              pA.fromArray(positions, vA);\n              pB.fromArray(positions, vB);\n              pC.fromArray(positions, vC);\n              cb.subVectors(pC, pB);\n              ab.subVectors(pA, pB);\n              cb.cross(ab);\n              normals[vA] += cb.x;\n              normals[vA + 1] += cb.y;\n              normals[vA + 2] += cb.z;\n              normals[vB] += cb.x;\n              normals[vB + 1] += cb.y;\n              normals[vB + 2] += cb.z;\n              normals[vC] += cb.x;\n              normals[vC + 1] += cb.y;\n              normals[vC + 2] += cb.z;\n            }\n          }\n        } else {\n          // non-indexed elements (unconnected triangle soup)\n          for (var i = 0, il = positions.length; i < il; i += 9) {\n            pA.fromArray(positions, i);\n            pB.fromArray(positions, i + 3);\n            pC.fromArray(positions, i + 6);\n            cb.subVectors(pC, pB);\n            ab.subVectors(pA, pB);\n            cb.cross(ab);\n            normals[i] = cb.x;\n            normals[i + 1] = cb.y;\n            normals[i + 2] = cb.z;\n            normals[i + 3] = cb.x;\n            normals[i + 4] = cb.y;\n            normals[i + 5] = cb.z;\n            normals[i + 6] = cb.x;\n            normals[i + 7] = cb.y;\n            normals[i + 8] = cb.z;\n          }\n        }\n\n        this.normalizeNormals();\n        attributes.normal.needsUpdate = true;\n      }\n    },\n    merge: function merge(geometry, offset) {\n      if (geometry instanceof THREE.BufferGeometry === false) {\n        console.error('THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry);\n        return;\n      }\n\n      if (offset === undefined) offset = 0;\n      var attributes = this.attributes;\n\n      for (var key in attributes) {\n        if (geometry.attributes[key] === undefined) continue;\n        var attribute1 = attributes[key];\n        var attributeArray1 = attribute1.array;\n        var attribute2 = geometry.attributes[key];\n        var attributeArray2 = attribute2.array;\n        var attributeSize = attribute2.itemSize;\n\n        for (var i = 0, j = attributeSize * offset; i < attributeArray2.length; i++, j++) {\n          attributeArray1[j] = attributeArray2[i];\n        }\n      }\n\n      return this;\n    },\n    normalizeNormals: function normalizeNormals() {\n      var normals = this.attributes.normal.array;\n      var x, y, z, n;\n\n      for (var i = 0, il = normals.length; i < il; i += 3) {\n        x = normals[i];\n        y = normals[i + 1];\n        z = normals[i + 2];\n        n = 1.0 / Math.sqrt(x * x + y * y + z * z);\n        normals[i] *= n;\n        normals[i + 1] *= n;\n        normals[i + 2] *= n;\n      }\n    },\n    toNonIndexed: function toNonIndexed() {\n      if (this.index === null) {\n        console.warn('THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.');\n        return this;\n      }\n\n      var geometry2 = new THREE.BufferGeometry();\n      var indices = this.index.array;\n      var attributes = this.attributes;\n\n      for (var name in attributes) {\n        var attribute = attributes[name];\n        var array = attribute.array;\n        var itemSize = attribute.itemSize;\n        var array2 = new array.constructor(indices.length * itemSize);\n        var index = 0,\n            index2 = 0;\n\n        for (var i = 0, l = indices.length; i < l; i++) {\n          index = indices[i] * itemSize;\n\n          for (var j = 0; j < itemSize; j++) {\n            array2[index2++] = array[index++];\n          }\n        }\n\n        geometry2.addAttribute(name, new THREE.BufferAttribute(array2, itemSize));\n      }\n\n      return geometry2;\n    },\n    toJSON: function toJSON() {\n      var data = {\n        metadata: {\n          version: 4.4,\n          type: 'BufferGeometry',\n          generator: 'BufferGeometry.toJSON'\n        }\n      }; // standard BufferGeometry serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n\n      if (this.parameters !== undefined) {\n        var parameters = this.parameters;\n\n        for (var key in parameters) {\n          if (parameters[key] !== undefined) data[key] = parameters[key];\n        }\n\n        return data;\n      }\n\n      data.data = {\n        attributes: {}\n      };\n      var index = this.index;\n\n      if (index !== null) {\n        var array = Array.prototype.slice.call(index.array);\n        data.data.index = {\n          type: index.array.constructor.name,\n          array: array\n        };\n      }\n\n      var attributes = this.attributes;\n\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        var array = Array.prototype.slice.call(attribute.array);\n        data.data.attributes[key] = {\n          itemSize: attribute.itemSize,\n          type: attribute.array.constructor.name,\n          array: array,\n          normalized: attribute.normalized\n        };\n      }\n\n      var groups = this.groups;\n\n      if (groups.length > 0) {\n        data.data.groups = JSON.parse(JSON.stringify(groups));\n      }\n\n      var boundingSphere = this.boundingSphere;\n\n      if (boundingSphere !== null) {\n        data.data.boundingSphere = {\n          center: boundingSphere.center.toArray(),\n          radius: boundingSphere.radius\n        };\n      }\n\n      return data;\n    },\n    clone: function clone() {\n      /*\n      // Handle primitives\n      \tvar parameters = this.parameters;\n      \tif ( parameters !== undefined ) {\n      \t\tvar values = [];\n      \t\tfor ( var key in parameters ) {\n      \t\t\tvalues.push( parameters[ key ] );\n      \t\t}\n      \t\tvar geometry = Object.create( this.constructor.prototype );\n      \tthis.constructor.apply( geometry, values );\n      \treturn geometry;\n      \t}\n      \treturn new this.constructor().copy( this );\n      */\n      return new THREE.BufferGeometry().copy(this);\n    },\n    copy: function copy(source) {\n      var index = source.index;\n\n      if (index !== null) {\n        this.setIndex(index.clone());\n      }\n\n      var attributes = source.attributes;\n\n      for (var name in attributes) {\n        var attribute = attributes[name];\n        this.addAttribute(name, attribute.clone());\n      }\n\n      var groups = source.groups;\n\n      for (var i = 0, l = groups.length; i < l; i++) {\n        var group = groups[i];\n        this.addGroup(group.start, group.count, group.materialIndex);\n      }\n\n      return this;\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  });\n  THREE.BufferGeometry.MaxIndex = 65535; // File:src/core/InstancedBufferGeometry.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  THREE.InstancedBufferGeometry = function () {\n    THREE.BufferGeometry.call(this);\n    this.type = 'InstancedBufferGeometry';\n    this.maxInstancedCount = undefined;\n  };\n\n  THREE.InstancedBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\n\n  THREE.InstancedBufferGeometry.prototype.addGroup = function (start, count, instances) {\n    this.groups.push({\n      start: start,\n      count: count,\n      instances: instances\n    });\n  };\n\n  THREE.InstancedBufferGeometry.prototype.copy = function (source) {\n    var index = source.index;\n\n    if (index !== null) {\n      this.setIndex(index.clone());\n    }\n\n    var attributes = source.attributes;\n\n    for (var name in attributes) {\n      var attribute = attributes[name];\n      this.addAttribute(name, attribute.clone());\n    }\n\n    var groups = source.groups;\n\n    for (var i = 0, l = groups.length; i < l; i++) {\n      var group = groups[i];\n      this.addGroup(group.start, group.count, group.instances);\n    }\n\n    return this;\n  }; // File:src/core/Uniform.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.Uniform = function (value) {\n    if (typeof value === 'string') {\n      console.warn('THREE.Uniform: Type parameter is no longer needed.');\n      value = arguments[1];\n    }\n\n    this.value = value;\n    this.dynamic = false;\n  };\n\n  THREE.Uniform.prototype = {\n    constructor: THREE.Uniform,\n    onUpdate: function onUpdate(callback) {\n      this.dynamic = true;\n      this.onUpdateCallback = callback;\n      return this;\n    }\n  }; // File:src/animation/AnimationAction.js\n\n  /**\n   *\n   * Action provided by AnimationMixer for scheduling clip playback on specific\n   * objects.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   *\n   */\n\n  THREE.AnimationAction = function () {\n    throw new Error(\"THREE.AnimationAction: \" + \"Use mixer.clipAction for construction.\");\n  };\n\n  THREE.AnimationAction._new = function AnimationAction(mixer, clip, localRoot) {\n    this._mixer = mixer;\n    this._clip = clip;\n    this._localRoot = localRoot || null;\n    var tracks = clip.tracks,\n        nTracks = tracks.length,\n        interpolants = new Array(nTracks);\n    var interpolantSettings = {\n      endingStart: THREE.ZeroCurvatureEnding,\n      endingEnd: THREE.ZeroCurvatureEnding\n    };\n\n    for (var i = 0; i !== nTracks; ++i) {\n      var interpolant = tracks[i].createInterpolant(null);\n      interpolants[i] = interpolant;\n      interpolant.settings = interpolantSettings;\n    }\n\n    this._interpolantSettings = interpolantSettings;\n    this._interpolants = interpolants; // bound by the mixer\n    // inside: PropertyMixer (managed by the mixer)\n\n    this._propertyBindings = new Array(nTracks);\n    this._cacheIndex = null; // for the memory manager\n\n    this._byClipCacheIndex = null; // for the memory manager\n\n    this._timeScaleInterpolant = null;\n    this._weightInterpolant = null;\n    this.loop = THREE.LoopRepeat;\n    this._loopCount = -1; // global mixer time when the action is to be started\n    // it's set back to 'null' upon start of the action\n\n    this._startTime = null; // scaled local time of the action\n    // gets clamped or wrapped to 0..clip.duration according to loop\n\n    this.time = 0;\n    this.timeScale = 1;\n    this._effectiveTimeScale = 1;\n    this.weight = 1;\n    this._effectiveWeight = 1;\n    this.repetitions = Infinity; // no. of repetitions when looping\n\n    this.paused = false; // false -> zero effective time scale\n\n    this.enabled = true; // true -> zero effective weight\n\n    this.clampWhenFinished = false; // keep feeding the last frame?\n\n    this.zeroSlopeAtStart = true; // for smooth interpolation w/o separate\n\n    this.zeroSlopeAtEnd = true; // clips for start, loop and end\n  };\n\n  THREE.AnimationAction._new.prototype = {\n    constructor: THREE.AnimationAction._new,\n    // State & Scheduling\n    play: function play() {\n      this._mixer._activateAction(this);\n\n      return this;\n    },\n    stop: function stop() {\n      this._mixer._deactivateAction(this);\n\n      return this.reset();\n    },\n    reset: function reset() {\n      this.paused = false;\n      this.enabled = true;\n      this.time = 0; // restart clip\n\n      this._loopCount = -1; // forget previous loops\n\n      this._startTime = null; // forget scheduling\n\n      return this.stopFading().stopWarping();\n    },\n    isRunning: function isRunning() {\n      var start = this._startTime;\n      return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);\n    },\n    // return true when play has been called\n    isScheduled: function isScheduled() {\n      return this._mixer._isActiveAction(this);\n    },\n    startAt: function startAt(time) {\n      this._startTime = time;\n      return this;\n    },\n    setLoop: function setLoop(mode, repetitions) {\n      this.loop = mode;\n      this.repetitions = repetitions;\n      return this;\n    },\n    // Weight\n    // set the weight stopping any scheduled fading\n    // although .enabled = false yields an effective weight of zero, this\n    // method does *not* change .enabled, because it would be confusing\n    setEffectiveWeight: function setEffectiveWeight(weight) {\n      this.weight = weight; // note: same logic as when updated at runtime\n\n      this._effectiveWeight = this.enabled ? weight : 0;\n      return this.stopFading();\n    },\n    // return the weight considering fading and .enabled\n    getEffectiveWeight: function getEffectiveWeight() {\n      return this._effectiveWeight;\n    },\n    fadeIn: function fadeIn(duration) {\n      return this._scheduleFading(duration, 0, 1);\n    },\n    fadeOut: function fadeOut(duration) {\n      return this._scheduleFading(duration, 1, 0);\n    },\n    crossFadeFrom: function crossFadeFrom(fadeOutAction, duration, warp) {\n      var mixer = this._mixer;\n      fadeOutAction.fadeOut(duration);\n      this.fadeIn(duration);\n\n      if (warp) {\n        var fadeInDuration = this._clip.duration,\n            fadeOutDuration = fadeOutAction._clip.duration,\n            startEndRatio = fadeOutDuration / fadeInDuration,\n            endStartRatio = fadeInDuration / fadeOutDuration;\n        fadeOutAction.warp(1.0, startEndRatio, duration);\n        this.warp(endStartRatio, 1.0, duration);\n      }\n\n      return this;\n    },\n    crossFadeTo: function crossFadeTo(fadeInAction, duration, warp) {\n      return fadeInAction.crossFadeFrom(this, duration, warp);\n    },\n    stopFading: function stopFading() {\n      var weightInterpolant = this._weightInterpolant;\n\n      if (weightInterpolant !== null) {\n        this._weightInterpolant = null;\n\n        this._mixer._takeBackControlInterpolant(weightInterpolant);\n      }\n\n      return this;\n    },\n    // Time Scale Control\n    // set the weight stopping any scheduled warping\n    // although .paused = true yields an effective time scale of zero, this\n    // method does *not* change .paused, because it would be confusing\n    setEffectiveTimeScale: function setEffectiveTimeScale(timeScale) {\n      this.timeScale = timeScale;\n      this._effectiveTimeScale = this.paused ? 0 : timeScale;\n      return this.stopWarping();\n    },\n    // return the time scale considering warping and .paused\n    getEffectiveTimeScale: function getEffectiveTimeScale() {\n      return this._effectiveTimeScale;\n    },\n    setDuration: function setDuration(duration) {\n      this.timeScale = this._clip.duration / duration;\n      return this.stopWarping();\n    },\n    syncWith: function syncWith(action) {\n      this.time = action.time;\n      this.timeScale = action.timeScale;\n      return this.stopWarping();\n    },\n    halt: function halt(duration) {\n      return this.warp(this._effectiveTimeScale, 0, duration);\n    },\n    warp: function warp(startTimeScale, endTimeScale, duration) {\n      var mixer = this._mixer,\n          now = mixer.time,\n          interpolant = this._timeScaleInterpolant,\n          timeScale = this.timeScale;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant(), this._timeScaleInterpolant = interpolant;\n      }\n\n      var times = interpolant.parameterPositions,\n          values = interpolant.sampleValues;\n      times[0] = now;\n      times[1] = now + duration;\n      values[0] = startTimeScale / timeScale;\n      values[1] = endTimeScale / timeScale;\n      return this;\n    },\n    stopWarping: function stopWarping() {\n      var timeScaleInterpolant = this._timeScaleInterpolant;\n\n      if (timeScaleInterpolant !== null) {\n        this._timeScaleInterpolant = null;\n\n        this._mixer._takeBackControlInterpolant(timeScaleInterpolant);\n      }\n\n      return this;\n    },\n    // Object Accessors\n    getMixer: function getMixer() {\n      return this._mixer;\n    },\n    getClip: function getClip() {\n      return this._clip;\n    },\n    getRoot: function getRoot() {\n      return this._localRoot || this._mixer._root;\n    },\n    // Interna\n    _update: function _update(time, deltaTime, timeDirection, accuIndex) {\n      // called by the mixer\n      var startTime = this._startTime;\n\n      if (startTime !== null) {\n        // check for scheduled start of action\n        var timeRunning = (time - startTime) * timeDirection;\n\n        if (timeRunning < 0 || timeDirection === 0) {\n          return; // yet to come / don't decide when delta = 0\n        } // start\n\n\n        this._startTime = null; // unschedule\n\n        deltaTime = timeDirection * timeRunning;\n      } // apply time scale and advance time\n\n\n      deltaTime *= this._updateTimeScale(time);\n\n      var clipTime = this._updateTime(deltaTime); // note: _updateTime may disable the action resulting in\n      // an effective weight of 0\n\n\n      var weight = this._updateWeight(time);\n\n      if (weight > 0) {\n        var interpolants = this._interpolants;\n        var propertyMixers = this._propertyBindings;\n\n        for (var j = 0, m = interpolants.length; j !== m; ++j) {\n          interpolants[j].evaluate(clipTime);\n          propertyMixers[j].accumulate(accuIndex, weight);\n        }\n      }\n    },\n    _updateWeight: function _updateWeight(time) {\n      var weight = 0;\n\n      if (this.enabled) {\n        weight = this.weight;\n        var interpolant = this._weightInterpolant;\n\n        if (interpolant !== null) {\n          var interpolantValue = interpolant.evaluate(time)[0];\n          weight *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopFading();\n\n            if (interpolantValue === 0) {\n              // faded out, disable\n              this.enabled = false;\n            }\n          }\n        }\n      }\n\n      this._effectiveWeight = weight;\n      return weight;\n    },\n    _updateTimeScale: function _updateTimeScale(time) {\n      var timeScale = 0;\n\n      if (!this.paused) {\n        timeScale = this.timeScale;\n        var interpolant = this._timeScaleInterpolant;\n\n        if (interpolant !== null) {\n          var interpolantValue = interpolant.evaluate(time)[0];\n          timeScale *= interpolantValue;\n\n          if (time > interpolant.parameterPositions[1]) {\n            this.stopWarping();\n\n            if (timeScale === 0) {\n              // motion has halted, pause\n              this.paused = true;\n            } else {\n              // warp done - apply final time scale\n              this.timeScale = timeScale;\n            }\n          }\n        }\n      }\n\n      this._effectiveTimeScale = timeScale;\n      return timeScale;\n    },\n    _updateTime: function _updateTime(deltaTime) {\n      var time = this.time + deltaTime;\n      if (deltaTime === 0) return time;\n      var duration = this._clip.duration,\n          loop = this.loop,\n          loopCount = this._loopCount;\n\n      if (loop === THREE.LoopOnce) {\n        if (loopCount === -1) {\n          // just started\n          this.loopCount = 0;\n\n          this._setEndings(true, true, false);\n        }\n\n        handle_stop: {\n          if (time >= duration) {\n            time = duration;\n          } else if (time < 0) {\n            time = 0;\n          } else break handle_stop;\n\n          if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n\n          this._mixer.dispatchEvent({\n            type: 'finished',\n            action: this,\n            direction: deltaTime < 0 ? -1 : 1\n          });\n        }\n      } else {\n        // repetitive Repeat or PingPong\n        var pingPong = loop === THREE.LoopPingPong;\n\n        if (loopCount === -1) {\n          // just started\n          if (deltaTime >= 0) {\n            loopCount = 0;\n\n            this._setEndings(true, this.repetitions === 0, pingPong);\n          } else {\n            // when looping in reverse direction, the initial\n            // transition through zero counts as a repetition,\n            // so leave loopCount at -1\n            this._setEndings(this.repetitions === 0, true, pingPong);\n          }\n        }\n\n        if (time >= duration || time < 0) {\n          // wrap around\n          var loopDelta = Math.floor(time / duration); // signed\n\n          time -= duration * loopDelta;\n          loopCount += Math.abs(loopDelta);\n          var pending = this.repetitions - loopCount;\n\n          if (pending < 0) {\n            // have to stop (switch state, clamp time, fire event)\n            if (this.clampWhenFinished) this.paused = true;else this.enabled = false;\n            time = deltaTime > 0 ? duration : 0;\n\n            this._mixer.dispatchEvent({\n              type: 'finished',\n              action: this,\n              direction: deltaTime > 0 ? 1 : -1\n            });\n          } else {\n            // keep running\n            if (pending === 0) {\n              // entering the last round\n              var atStart = deltaTime < 0;\n\n              this._setEndings(atStart, !atStart, pingPong);\n            } else {\n              this._setEndings(false, false, pingPong);\n            }\n\n            this._loopCount = loopCount;\n\n            this._mixer.dispatchEvent({\n              type: 'loop',\n              action: this,\n              loopDelta: loopDelta\n            });\n          }\n        }\n\n        if (pingPong && (loopCount & 1) === 1) {\n          // invert time for the \"pong round\"\n          this.time = time;\n          return duration - time;\n        }\n      }\n\n      this.time = time;\n      return time;\n    },\n    _setEndings: function _setEndings(atStart, atEnd, pingPong) {\n      var settings = this._interpolantSettings;\n\n      if (pingPong) {\n        settings.endingStart = THREE.ZeroSlopeEnding;\n        settings.endingEnd = THREE.ZeroSlopeEnding;\n      } else {\n        // assuming for LoopOnce atStart == atEnd == true\n        if (atStart) {\n          settings.endingStart = this.zeroSlopeAtStart ? THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n        } else {\n          settings.endingStart = THREE.WrapAroundEnding;\n        }\n\n        if (atEnd) {\n          settings.endingEnd = this.zeroSlopeAtEnd ? THREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\n        } else {\n          settings.endingEnd = THREE.WrapAroundEnding;\n        }\n      }\n    },\n    _scheduleFading: function _scheduleFading(duration, weightNow, weightThen) {\n      var mixer = this._mixer,\n          now = mixer.time,\n          interpolant = this._weightInterpolant;\n\n      if (interpolant === null) {\n        interpolant = mixer._lendControlInterpolant(), this._weightInterpolant = interpolant;\n      }\n\n      var times = interpolant.parameterPositions,\n          values = interpolant.sampleValues;\n      times[0] = now;\n      values[0] = weightNow;\n      times[1] = now + duration;\n      values[1] = weightThen;\n      return this;\n    }\n  }; // File:src/animation/AnimationClip.js\n\n  /**\n   *\n   * Reusable set of Tracks that represent an animation.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   */\n\n  THREE.AnimationClip = function (name, duration, tracks) {\n    this.name = name;\n    this.tracks = tracks;\n    this.duration = duration !== undefined ? duration : -1;\n    this.uuid = THREE.Math.generateUUID(); // this means it should figure out its duration by scanning the tracks\n\n    if (this.duration < 0) {\n      this.resetDuration();\n    } // maybe only do these on demand, as doing them here could potentially slow down loading\n    // but leaving these here during development as this ensures a lot of testing of these functions\n\n\n    this.trim();\n    this.optimize();\n  };\n\n  THREE.AnimationClip.prototype = {\n    constructor: THREE.AnimationClip,\n    resetDuration: function resetDuration() {\n      var tracks = this.tracks,\n          duration = 0;\n\n      for (var i = 0, n = tracks.length; i !== n; ++i) {\n        var track = this.tracks[i];\n        duration = Math.max(duration, track.times[track.times.length - 1]);\n      }\n\n      this.duration = duration;\n    },\n    trim: function trim() {\n      for (var i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].trim(0, this.duration);\n      }\n\n      return this;\n    },\n    optimize: function optimize() {\n      for (var i = 0; i < this.tracks.length; i++) {\n        this.tracks[i].optimize();\n      }\n\n      return this;\n    }\n  }; // Static methods:\n\n  Object.assign(THREE.AnimationClip, {\n    parse: function parse(json) {\n      var tracks = [],\n          jsonTracks = json.tracks,\n          frameTime = 1.0 / (json.fps || 1.0);\n\n      for (var i = 0, n = jsonTracks.length; i !== n; ++i) {\n        tracks.push(THREE.KeyframeTrack.parse(jsonTracks[i]).scale(frameTime));\n      }\n\n      return new THREE.AnimationClip(json.name, json.duration, tracks);\n    },\n    toJSON: function toJSON(clip) {\n      var tracks = [],\n          clipTracks = clip.tracks;\n      var json = {\n        'name': clip.name,\n        'duration': clip.duration,\n        'tracks': tracks\n      };\n\n      for (var i = 0, n = clipTracks.length; i !== n; ++i) {\n        tracks.push(THREE.KeyframeTrack.toJSON(clipTracks[i]));\n      }\n\n      return json;\n    },\n    CreateFromMorphTargetSequence: function CreateFromMorphTargetSequence(name, morphTargetSequence, fps, noLoop) {\n      var numMorphTargets = morphTargetSequence.length;\n      var tracks = [];\n\n      for (var i = 0; i < numMorphTargets; i++) {\n        var times = [];\n        var values = [];\n        times.push((i + numMorphTargets - 1) % numMorphTargets, i, (i + 1) % numMorphTargets);\n        values.push(0, 1, 0);\n        var order = THREE.AnimationUtils.getKeyframeOrder(times);\n        times = THREE.AnimationUtils.sortedArray(times, 1, order);\n        values = THREE.AnimationUtils.sortedArray(values, 1, order); // if there is a key at the first frame, duplicate it as the\n        // last frame as well for perfect loop.\n\n        if (!noLoop && times[0] === 0) {\n          times.push(numMorphTargets);\n          values.push(values[0]);\n        }\n\n        tracks.push(new THREE.NumberKeyframeTrack('.morphTargetInfluences[' + morphTargetSequence[i].name + ']', times, values).scale(1.0 / fps));\n      }\n\n      return new THREE.AnimationClip(name, -1, tracks);\n    },\n    findByName: function findByName(objectOrClipArray, name) {\n      var clipArray = objectOrClipArray;\n\n      if (!Array.isArray(objectOrClipArray)) {\n        var o = objectOrClipArray;\n        clipArray = o.geometry && o.geometry.animations || o.animations;\n      }\n\n      for (var i = 0; i < clipArray.length; i++) {\n        if (clipArray[i].name === name) {\n          return clipArray[i];\n        }\n      }\n\n      return null;\n    },\n    CreateClipsFromMorphTargetSequences: function CreateClipsFromMorphTargetSequences(morphTargets, fps, noLoop) {\n      var animationToMorphTargets = {}; // tested with https://regex101.com/ on trick sequences\n      // such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\n      var pattern = /^([\\w-]*?)([\\d]+)$/; // sort morph target names into animation groups based\n      // patterns like Walk_001, Walk_002, Run_001, Run_002\n\n      for (var i = 0, il = morphTargets.length; i < il; i++) {\n        var morphTarget = morphTargets[i];\n        var parts = morphTarget.name.match(pattern);\n\n        if (parts && parts.length > 1) {\n          var name = parts[1];\n          var animationMorphTargets = animationToMorphTargets[name];\n\n          if (!animationMorphTargets) {\n            animationToMorphTargets[name] = animationMorphTargets = [];\n          }\n\n          animationMorphTargets.push(morphTarget);\n        }\n      }\n\n      var clips = [];\n\n      for (var name in animationToMorphTargets) {\n        clips.push(THREE.AnimationClip.CreateFromMorphTargetSequence(name, animationToMorphTargets[name], fps, noLoop));\n      }\n\n      return clips;\n    },\n    // parse the animation.hierarchy format\n    parseAnimation: function parseAnimation(animation, bones, nodeName) {\n      if (!animation) {\n        console.error(\"  no animation in JSONLoader data\");\n        return null;\n      }\n\n      var addNonemptyTrack = function addNonemptyTrack(trackType, trackName, animationKeys, propertyName, destTracks) {\n        // only return track if there are actually keys.\n        if (animationKeys.length !== 0) {\n          var times = [];\n          var values = [];\n          THREE.AnimationUtils.flattenJSON(animationKeys, times, values, propertyName); // empty keys are filtered out, so check again\n\n          if (times.length !== 0) {\n            destTracks.push(new trackType(trackName, times, values));\n          }\n        }\n      };\n\n      var tracks = [];\n      var clipName = animation.name || 'default'; // automatic length determination in AnimationClip.\n\n      var duration = animation.length || -1;\n      var fps = animation.fps || 30;\n      var hierarchyTracks = animation.hierarchy || [];\n\n      for (var h = 0; h < hierarchyTracks.length; h++) {\n        var animationKeys = hierarchyTracks[h].keys; // skip empty tracks\n\n        if (!animationKeys || animationKeys.length === 0) continue; // process morph targets in a way exactly compatible\n        // with AnimationHandler.init( animation )\n\n        if (animationKeys[0].morphTargets) {\n          // figure out all morph targets used in this track\n          var morphTargetNames = {};\n\n          for (var k = 0; k < animationKeys.length; k++) {\n            if (animationKeys[k].morphTargets) {\n              for (var m = 0; m < animationKeys[k].morphTargets.length; m++) {\n                morphTargetNames[animationKeys[k].morphTargets[m]] = -1;\n              }\n            }\n          } // create a track for each morph target with all zero\n          // morphTargetInfluences except for the keys in which\n          // the morphTarget is named.\n\n\n          for (var morphTargetName in morphTargetNames) {\n            var times = [];\n            var values = [];\n\n            for (var m = 0; m !== animationKeys[k].morphTargets.length; ++m) {\n              var animationKey = animationKeys[k];\n              times.push(animationKey.time);\n              values.push(animationKey.morphTarget === morphTargetName ? 1 : 0);\n            }\n\n            tracks.push(new THREE.NumberKeyframeTrack('.morphTargetInfluence[' + morphTargetName + ']', times, values));\n          }\n\n          duration = morphTargetNames.length * (fps || 1.0);\n        } else {\n          // ...assume skeletal animation\n          var boneName = '.bones[' + bones[h].name + ']';\n          addNonemptyTrack(THREE.VectorKeyframeTrack, boneName + '.position', animationKeys, 'pos', tracks);\n          addNonemptyTrack(THREE.QuaternionKeyframeTrack, boneName + '.quaternion', animationKeys, 'rot', tracks);\n          addNonemptyTrack(THREE.VectorKeyframeTrack, boneName + '.scale', animationKeys, 'scl', tracks);\n        }\n      }\n\n      if (tracks.length === 0) {\n        return null;\n      }\n\n      var clip = new THREE.AnimationClip(clipName, duration, tracks);\n      return clip;\n    }\n  }); // File:src/animation/AnimationMixer.js\n\n  /**\n   *\n   * Player for AnimationClips.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.AnimationMixer = function (root) {\n    this._root = root;\n\n    this._initMemoryManager();\n\n    this._accuIndex = 0;\n    this.time = 0;\n    this.timeScale = 1.0;\n  };\n\n  Object.assign(THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\n    // return an action for a clip optionally using a custom root target\n    // object (this method allocates a lot of dynamic memory in case a\n    // previously unknown clip/root combination is specified)\n    clipAction: function clipAction(clip, optionalRoot) {\n      var root = optionalRoot || this._root,\n          rootUuid = root.uuid,\n          clipObject = typeof clip === 'string' ? THREE.AnimationClip.findByName(root, clip) : clip,\n          clipUuid = clipObject !== null ? clipObject.uuid : clip,\n          actionsForClip = this._actionsByClip[clipUuid],\n          prototypeAction = null;\n\n      if (actionsForClip !== undefined) {\n        var existingAction = actionsForClip.actionByRoot[rootUuid];\n\n        if (existingAction !== undefined) {\n          return existingAction;\n        } // we know the clip, so we don't have to parse all\n        // the bindings again but can just copy\n\n\n        prototypeAction = actionsForClip.knownActions[0]; // also, take the clip from the prototype action\n\n        if (clipObject === null) clipObject = prototypeAction._clip;\n      } // clip must be known when specified via string\n\n\n      if (clipObject === null) return null; // allocate all resources required to run it\n\n      var newAction = new THREE.AnimationMixer._Action(this, clipObject, optionalRoot);\n\n      this._bindAction(newAction, prototypeAction); // and make the action known to the memory manager\n\n\n      this._addInactiveAction(newAction, clipUuid, rootUuid);\n\n      return newAction;\n    },\n    // get an existing action\n    existingAction: function existingAction(clip, optionalRoot) {\n      var root = optionalRoot || this._root,\n          rootUuid = root.uuid,\n          clipObject = typeof clip === 'string' ? THREE.AnimationClip.findByName(root, clip) : clip,\n          clipUuid = clipObject ? clipObject.uuid : clip,\n          actionsForClip = this._actionsByClip[clipUuid];\n\n      if (actionsForClip !== undefined) {\n        return actionsForClip.actionByRoot[rootUuid] || null;\n      }\n\n      return null;\n    },\n    // deactivates all previously scheduled actions\n    stopAllAction: function stopAllAction() {\n      var actions = this._actions,\n          nActions = this._nActiveActions,\n          bindings = this._bindings,\n          nBindings = this._nActiveBindings;\n      this._nActiveActions = 0;\n      this._nActiveBindings = 0;\n\n      for (var i = 0; i !== nActions; ++i) {\n        actions[i].reset();\n      }\n\n      for (var i = 0; i !== nBindings; ++i) {\n        bindings[i].useCount = 0;\n      }\n\n      return this;\n    },\n    // advance the time and update apply the animation\n    update: function update(deltaTime) {\n      deltaTime *= this.timeScale;\n      var actions = this._actions,\n          nActions = this._nActiveActions,\n          time = this.time += deltaTime,\n          timeDirection = Math.sign(deltaTime),\n          accuIndex = this._accuIndex ^= 1; // run active actions\n\n      for (var i = 0; i !== nActions; ++i) {\n        var action = actions[i];\n\n        if (action.enabled) {\n          action._update(time, deltaTime, timeDirection, accuIndex);\n        }\n      } // update scene graph\n\n\n      var bindings = this._bindings,\n          nBindings = this._nActiveBindings;\n\n      for (var i = 0; i !== nBindings; ++i) {\n        bindings[i].apply(accuIndex);\n      }\n\n      return this;\n    },\n    // return this mixer's root target object\n    getRoot: function getRoot() {\n      return this._root;\n    },\n    // free all resources specific to a particular clip\n    uncacheClip: function uncacheClip(clip) {\n      var actions = this._actions,\n          clipUuid = clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid];\n\n      if (actionsForClip !== undefined) {\n        // note: just calling _removeInactiveAction would mess up the\n        // iteration state and also require updating the state we can\n        // just throw away\n        var actionsToRemove = actionsForClip.knownActions;\n\n        for (var i = 0, n = actionsToRemove.length; i !== n; ++i) {\n          var action = actionsToRemove[i];\n\n          this._deactivateAction(action);\n\n          var cacheIndex = action._cacheIndex,\n              lastInactiveAction = actions[actions.length - 1];\n          action._cacheIndex = null;\n          action._byClipCacheIndex = null;\n          lastInactiveAction._cacheIndex = cacheIndex;\n          actions[cacheIndex] = lastInactiveAction;\n          actions.pop();\n\n          this._removeInactiveBindingsForAction(action);\n        }\n\n        delete actionsByClip[clipUuid];\n      }\n    },\n    // free all resources specific to a particular root target object\n    uncacheRoot: function uncacheRoot(root) {\n      var rootUuid = root.uuid,\n          actionsByClip = this._actionsByClip;\n\n      for (var clipUuid in actionsByClip) {\n        var actionByRoot = actionsByClip[clipUuid].actionByRoot,\n            action = actionByRoot[rootUuid];\n\n        if (action !== undefined) {\n          this._deactivateAction(action);\n\n          this._removeInactiveAction(action);\n        }\n      }\n\n      var bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid];\n\n      if (bindingByName !== undefined) {\n        for (var trackName in bindingByName) {\n          var binding = bindingByName[trackName];\n          binding.restoreOriginalState();\n\n          this._removeInactiveBinding(binding);\n        }\n      }\n    },\n    // remove a targeted clip from the cache\n    uncacheAction: function uncacheAction(clip, optionalRoot) {\n      var action = this.existingAction(clip, optionalRoot);\n\n      if (action !== null) {\n        this._deactivateAction(action);\n\n        this._removeInactiveAction(action);\n      }\n    }\n  });\n  THREE.AnimationMixer._Action = THREE.AnimationAction._new; // Implementation details:\n\n  Object.assign(THREE.AnimationMixer.prototype, {\n    _bindAction: function _bindAction(action, prototypeAction) {\n      var root = action._localRoot || this._root,\n          tracks = action._clip.tracks,\n          nTracks = tracks.length,\n          bindings = action._propertyBindings,\n          interpolants = action._interpolants,\n          rootUuid = root.uuid,\n          bindingsByRoot = this._bindingsByRootAndName,\n          bindingsByName = bindingsByRoot[rootUuid];\n\n      if (bindingsByName === undefined) {\n        bindingsByName = {};\n        bindingsByRoot[rootUuid] = bindingsByName;\n      }\n\n      for (var i = 0; i !== nTracks; ++i) {\n        var track = tracks[i],\n            trackName = track.name,\n            binding = bindingsByName[trackName];\n\n        if (binding !== undefined) {\n          bindings[i] = binding;\n        } else {\n          binding = bindings[i];\n\n          if (binding !== undefined) {\n            // existing binding, make sure the cache knows\n            if (binding._cacheIndex === null) {\n              ++binding.referenceCount;\n\n              this._addInactiveBinding(binding, rootUuid, trackName);\n            }\n\n            continue;\n          }\n\n          var path = prototypeAction && prototypeAction._propertyBindings[i].binding.parsedPath;\n          binding = new THREE.PropertyMixer(THREE.PropertyBinding.create(root, trackName, path), track.ValueTypeName, track.getValueSize());\n          ++binding.referenceCount;\n\n          this._addInactiveBinding(binding, rootUuid, trackName);\n\n          bindings[i] = binding;\n        }\n\n        interpolants[i].resultBuffer = binding.buffer;\n      }\n    },\n    _activateAction: function _activateAction(action) {\n      if (!this._isActiveAction(action)) {\n        if (action._cacheIndex === null) {\n          // this action has been forgotten by the cache, but the user\n          // appears to be still using it -> rebind\n          var rootUuid = (action._localRoot || this._root).uuid,\n              clipUuid = action._clip.uuid,\n              actionsForClip = this._actionsByClip[clipUuid];\n\n          this._bindAction(action, actionsForClip && actionsForClip.knownActions[0]);\n\n          this._addInactiveAction(action, clipUuid, rootUuid);\n        }\n\n        var bindings = action._propertyBindings; // increment reference counts / sort out state\n\n        for (var i = 0, n = bindings.length; i !== n; ++i) {\n          var binding = bindings[i];\n\n          if (binding.useCount++ === 0) {\n            this._lendBinding(binding);\n\n            binding.saveOriginalState();\n          }\n        }\n\n        this._lendAction(action);\n      }\n    },\n    _deactivateAction: function _deactivateAction(action) {\n      if (this._isActiveAction(action)) {\n        var bindings = action._propertyBindings; // decrement reference counts / sort out state\n\n        for (var i = 0, n = bindings.length; i !== n; ++i) {\n          var binding = bindings[i];\n\n          if (--binding.useCount === 0) {\n            binding.restoreOriginalState();\n\n            this._takeBackBinding(binding);\n          }\n        }\n\n        this._takeBackAction(action);\n      }\n    },\n    // Memory manager\n    _initMemoryManager: function _initMemoryManager() {\n      this._actions = []; // 'nActiveActions' followed by inactive ones\n\n      this._nActiveActions = 0;\n      this._actionsByClip = {}; // inside:\n      // {\n      // \t\tknownActions: Array< _Action >\t- used as prototypes\n      // \t\tactionByRoot: _Action\t\t\t- lookup\n      // }\n\n      this._bindings = []; // 'nActiveBindings' followed by inactive ones\n\n      this._nActiveBindings = 0;\n      this._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n      this._controlInterpolants = []; // same game as above\n\n      this._nActiveControlInterpolants = 0;\n      var scope = this;\n      this.stats = {\n        actions: {\n          get total() {\n            return scope._actions.length;\n          },\n\n          get inUse() {\n            return scope._nActiveActions;\n          }\n\n        },\n        bindings: {\n          get total() {\n            return scope._bindings.length;\n          },\n\n          get inUse() {\n            return scope._nActiveBindings;\n          }\n\n        },\n        controlInterpolants: {\n          get total() {\n            return scope._controlInterpolants.length;\n          },\n\n          get inUse() {\n            return scope._nActiveControlInterpolants;\n          }\n\n        }\n      };\n    },\n    // Memory management for _Action objects\n    _isActiveAction: function _isActiveAction(action) {\n      var index = action._cacheIndex;\n      return index !== null && index < this._nActiveActions;\n    },\n    _addInactiveAction: function _addInactiveAction(action, clipUuid, rootUuid) {\n      var actions = this._actions,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid];\n\n      if (actionsForClip === undefined) {\n        actionsForClip = {\n          knownActions: [action],\n          actionByRoot: {}\n        };\n        action._byClipCacheIndex = 0;\n        actionsByClip[clipUuid] = actionsForClip;\n      } else {\n        var knownActions = actionsForClip.knownActions;\n        action._byClipCacheIndex = knownActions.length;\n        knownActions.push(action);\n      }\n\n      action._cacheIndex = actions.length;\n      actions.push(action);\n      actionsForClip.actionByRoot[rootUuid] = action;\n    },\n    _removeInactiveAction: function _removeInactiveAction(action) {\n      var actions = this._actions,\n          lastInactiveAction = actions[actions.length - 1],\n          cacheIndex = action._cacheIndex;\n      lastInactiveAction._cacheIndex = cacheIndex;\n      actions[cacheIndex] = lastInactiveAction;\n      actions.pop();\n      action._cacheIndex = null;\n      var clipUuid = action._clip.uuid,\n          actionsByClip = this._actionsByClip,\n          actionsForClip = actionsByClip[clipUuid],\n          knownActionsForClip = actionsForClip.knownActions,\n          lastKnownAction = knownActionsForClip[knownActionsForClip.length - 1],\n          byClipCacheIndex = action._byClipCacheIndex;\n      lastKnownAction._byClipCacheIndex = byClipCacheIndex;\n      knownActionsForClip[byClipCacheIndex] = lastKnownAction;\n      knownActionsForClip.pop();\n      action._byClipCacheIndex = null;\n      var actionByRoot = actionsForClip.actionByRoot,\n          rootUuid = (actions._localRoot || this._root).uuid;\n      delete actionByRoot[rootUuid];\n\n      if (knownActionsForClip.length === 0) {\n        delete actionsByClip[clipUuid];\n      }\n\n      this._removeInactiveBindingsForAction(action);\n    },\n    _removeInactiveBindingsForAction: function _removeInactiveBindingsForAction(action) {\n      var bindings = action._propertyBindings;\n\n      for (var i = 0, n = bindings.length; i !== n; ++i) {\n        var binding = bindings[i];\n\n        if (--binding.referenceCount === 0) {\n          this._removeInactiveBinding(binding);\n        }\n      }\n    },\n    _lendAction: function _lendAction(action) {\n      // [ active actions |  inactive actions  ]\n      // [  active actions >| inactive actions ]\n      //                 s        a\n      //                  <-swap->\n      //                 a        s\n      var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          lastActiveIndex = this._nActiveActions++,\n          firstInactiveAction = actions[lastActiveIndex];\n      action._cacheIndex = lastActiveIndex;\n      actions[lastActiveIndex] = action;\n      firstInactiveAction._cacheIndex = prevIndex;\n      actions[prevIndex] = firstInactiveAction;\n    },\n    _takeBackAction: function _takeBackAction(action) {\n      // [  active actions  | inactive actions ]\n      // [ active actions |< inactive actions  ]\n      //        a        s\n      //         <-swap->\n      //        s        a\n      var actions = this._actions,\n          prevIndex = action._cacheIndex,\n          firstInactiveIndex = --this._nActiveActions,\n          lastActiveAction = actions[firstInactiveIndex];\n      action._cacheIndex = firstInactiveIndex;\n      actions[firstInactiveIndex] = action;\n      lastActiveAction._cacheIndex = prevIndex;\n      actions[prevIndex] = lastActiveAction;\n    },\n    // Memory management for PropertyMixer objects\n    _addInactiveBinding: function _addInactiveBinding(binding, rootUuid, trackName) {\n      var bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid],\n          bindings = this._bindings;\n\n      if (bindingByName === undefined) {\n        bindingByName = {};\n        bindingsByRoot[rootUuid] = bindingByName;\n      }\n\n      bindingByName[trackName] = binding;\n      binding._cacheIndex = bindings.length;\n      bindings.push(binding);\n    },\n    _removeInactiveBinding: function _removeInactiveBinding(binding) {\n      var bindings = this._bindings,\n          propBinding = binding.binding,\n          rootUuid = propBinding.rootNode.uuid,\n          trackName = propBinding.path,\n          bindingsByRoot = this._bindingsByRootAndName,\n          bindingByName = bindingsByRoot[rootUuid],\n          lastInactiveBinding = bindings[bindings.length - 1],\n          cacheIndex = binding._cacheIndex;\n      lastInactiveBinding._cacheIndex = cacheIndex;\n      bindings[cacheIndex] = lastInactiveBinding;\n      bindings.pop();\n      delete bindingByName[trackName];\n\n      remove_empty_map: {\n        for (var _ in bindingByName) {\n          break remove_empty_map;\n        }\n\n        delete bindingsByRoot[rootUuid];\n      }\n    },\n    _lendBinding: function _lendBinding(binding) {\n      var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          lastActiveIndex = this._nActiveBindings++,\n          firstInactiveBinding = bindings[lastActiveIndex];\n      binding._cacheIndex = lastActiveIndex;\n      bindings[lastActiveIndex] = binding;\n      firstInactiveBinding._cacheIndex = prevIndex;\n      bindings[prevIndex] = firstInactiveBinding;\n    },\n    _takeBackBinding: function _takeBackBinding(binding) {\n      var bindings = this._bindings,\n          prevIndex = binding._cacheIndex,\n          firstInactiveIndex = --this._nActiveBindings,\n          lastActiveBinding = bindings[firstInactiveIndex];\n      binding._cacheIndex = firstInactiveIndex;\n      bindings[firstInactiveIndex] = binding;\n      lastActiveBinding._cacheIndex = prevIndex;\n      bindings[prevIndex] = lastActiveBinding;\n    },\n    // Memory management of Interpolants for weight and time scale\n    _lendControlInterpolant: function _lendControlInterpolant() {\n      var interpolants = this._controlInterpolants,\n          lastActiveIndex = this._nActiveControlInterpolants++,\n          interpolant = interpolants[lastActiveIndex];\n\n      if (interpolant === undefined) {\n        interpolant = new THREE.LinearInterpolant(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer);\n        interpolant.__cacheIndex = lastActiveIndex;\n        interpolants[lastActiveIndex] = interpolant;\n      }\n\n      return interpolant;\n    },\n    _takeBackControlInterpolant: function _takeBackControlInterpolant(interpolant) {\n      var interpolants = this._controlInterpolants,\n          prevIndex = interpolant.__cacheIndex,\n          firstInactiveIndex = --this._nActiveControlInterpolants,\n          lastActiveInterpolant = interpolants[firstInactiveIndex];\n      interpolant.__cacheIndex = firstInactiveIndex;\n      interpolants[firstInactiveIndex] = interpolant;\n      lastActiveInterpolant.__cacheIndex = prevIndex;\n      interpolants[prevIndex] = lastActiveInterpolant;\n    },\n    _controlInterpolantsResultBuffer: new Float32Array(1)\n  }); // File:src/animation/AnimationObjectGroup.js\n\n  /**\n   *\n   * A group of objects that receives a shared animation state.\n   *\n   * Usage:\n   *\n   * \t-\tAdd objects you would otherwise pass as 'root' to the\n   * \t\tconstructor or the .clipAction method of AnimationMixer.\n   *\n   * \t-\tInstead pass this object as 'root'.\n   *\n   * \t-\tYou can also add and remove objects later when the mixer\n   * \t\tis running.\n   *\n   * Note:\n   *\n   *  \tObjects of this class appear as one object to the mixer,\n   *  \tso cache control of the individual objects must be done\n   *  \ton the group.\n   *\n   * Limitation:\n   *\n   * \t- \tThe animated properties must be compatible among the\n   * \t\tall objects in the group.\n   *\n   *  -\tA single property can either be controlled through a\n   *  \ttarget group or directly, but not both.\n   *\n   * @author tschw\n   */\n\n  THREE.AnimationObjectGroup = function (var_args) {\n    this.uuid = THREE.Math.generateUUID(); // cached objects followed by the active ones\n\n    this._objects = Array.prototype.slice.call(arguments);\n    this.nCachedObjects_ = 0; // threshold\n    // note: read by PropertyBinding.Composite\n\n    var indices = {};\n    this._indicesByUUID = indices; // for bookkeeping\n\n    for (var i = 0, n = arguments.length; i !== n; ++i) {\n      indices[arguments[i].uuid] = i;\n    }\n\n    this._paths = []; // inside: string\n\n    this._parsedPaths = []; // inside: { we don't care, here }\n\n    this._bindings = []; // inside: Array< PropertyBinding >\n\n    this._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n    var scope = this;\n    this.stats = {\n      objects: {\n        get total() {\n          return scope._objects.length;\n        },\n\n        get inUse() {\n          return this.total - scope.nCachedObjects_;\n        }\n\n      },\n\n      get bindingsPerObject() {\n        return scope._bindings.length;\n      }\n\n    };\n  };\n\n  THREE.AnimationObjectGroup.prototype = {\n    constructor: THREE.AnimationObjectGroup,\n    add: function add(var_args) {\n      var objects = this._objects,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_,\n          indicesByUUID = this._indicesByUUID,\n          paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n            uuid = object.uuid,\n            index = indicesByUUID[uuid];\n\n        if (index === undefined) {\n          // unknown object -> add it to the ACTIVE region\n          index = nObjects++;\n          indicesByUUID[uuid] = index;\n          objects.push(object); // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            bindings[j].push(new THREE.PropertyBinding(object, paths[j], parsedPaths[j]));\n          }\n        } else if (index < nCachedObjects) {\n          var knownObject = objects[index]; // move existing object to the ACTIVE region\n\n          var firstActiveIndex = --nCachedObjects,\n              lastCachedObject = objects[firstActiveIndex];\n          indicesByUUID[lastCachedObject.uuid] = index;\n          objects[index] = lastCachedObject;\n          indicesByUUID[uuid] = firstActiveIndex;\n          objects[firstActiveIndex] = object; // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j],\n                lastCached = bindingsForPath[firstActiveIndex],\n                binding = bindingsForPath[index];\n            bindingsForPath[index] = lastCached;\n\n            if (binding === undefined) {\n              // since we do not bother to create new bindings\n              // for objects that are cached, the binding may\n              // or may not exist\n              binding = new THREE.PropertyBinding(object, paths[j], parsedPaths[j]);\n            }\n\n            bindingsForPath[firstActiveIndex] = binding;\n          }\n        } else if (objects[index] !== knownObject) {\n          console.error(\"Different objects with the same UUID \" + \"detected. Clean the caches or recreate your \" + \"infrastructure when reloading scenes...\");\n        } // else the object is already where we want it to be\n\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n    remove: function remove(var_args) {\n      var objects = this._objects,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_,\n          indicesByUUID = this._indicesByUUID,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n            uuid = object.uuid,\n            index = indicesByUUID[uuid];\n\n        if (index !== undefined && index >= nCachedObjects) {\n          // move existing object into the CACHED region\n          var lastCachedIndex = nCachedObjects++,\n              firstActiveObject = objects[lastCachedIndex];\n          indicesByUUID[firstActiveObject.uuid] = index;\n          objects[index] = firstActiveObject;\n          indicesByUUID[uuid] = lastCachedIndex;\n          objects[lastCachedIndex] = object; // accounting is done, now do the same for all bindings\n\n          for (var j = 0, m = nBindings; j !== m; ++j) {\n            var bindingsForPath = bindings[j],\n                firstActive = bindingsForPath[lastCachedIndex],\n                binding = bindingsForPath[index];\n            bindingsForPath[index] = firstActive;\n            bindingsForPath[lastCachedIndex] = binding;\n          }\n        }\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n    // remove & forget\n    uncache: function uncache(var_args) {\n      var objects = this._objects,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_,\n          indicesByUUID = this._indicesByUUID,\n          bindings = this._bindings,\n          nBindings = bindings.length;\n\n      for (var i = 0, n = arguments.length; i !== n; ++i) {\n        var object = arguments[i],\n            uuid = object.uuid,\n            index = indicesByUUID[uuid];\n\n        if (index !== undefined) {\n          delete indicesByUUID[uuid];\n\n          if (index < nCachedObjects) {\n            // object is cached, shrink the CACHED region\n            var firstActiveIndex = --nCachedObjects,\n                lastCachedObject = objects[firstActiveIndex],\n                lastIndex = --nObjects,\n                lastObject = objects[lastIndex]; // last cached object takes this object's place\n\n            indicesByUUID[lastCachedObject.uuid] = index;\n            objects[index] = lastCachedObject; // last object goes to the activated slot and pop\n\n            indicesByUUID[lastObject.uuid] = firstActiveIndex;\n            objects[firstActiveIndex] = lastObject;\n            objects.pop(); // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              var bindingsForPath = bindings[j],\n                  lastCached = bindingsForPath[firstActiveIndex],\n                  last = bindingsForPath[lastIndex];\n              bindingsForPath[index] = lastCached;\n              bindingsForPath[firstActiveIndex] = last;\n              bindingsForPath.pop();\n            }\n          } else {\n            // object is active, just swap with the last and pop\n            var lastIndex = --nObjects,\n                lastObject = objects[lastIndex];\n            indicesByUUID[lastObject.uuid] = index;\n            objects[index] = lastObject;\n            objects.pop(); // accounting is done, now do the same for all bindings\n\n            for (var j = 0, m = nBindings; j !== m; ++j) {\n              var bindingsForPath = bindings[j];\n              bindingsForPath[index] = bindingsForPath[lastIndex];\n              bindingsForPath.pop();\n            }\n          } // cached or active\n\n        } // if object is known\n\n      } // for arguments\n\n\n      this.nCachedObjects_ = nCachedObjects;\n    },\n    // Internal interface used by befriended PropertyBinding.Composite:\n    subscribe_: function subscribe_(path, parsedPath) {\n      // returns an array of bindings for the given path that is changed\n      // according to the contained objects in the group\n      var indicesByPath = this._bindingsIndicesByPath,\n          index = indicesByPath[path],\n          bindings = this._bindings;\n      if (index !== undefined) return bindings[index];\n      var paths = this._paths,\n          parsedPaths = this._parsedPaths,\n          objects = this._objects,\n          nObjects = objects.length,\n          nCachedObjects = this.nCachedObjects_,\n          bindingsForPath = new Array(nObjects);\n      index = bindings.length;\n      indicesByPath[path] = index;\n      paths.push(path);\n      parsedPaths.push(parsedPath);\n      bindings.push(bindingsForPath);\n\n      for (var i = nCachedObjects, n = objects.length; i !== n; ++i) {\n        var object = objects[i];\n        bindingsForPath[i] = new THREE.PropertyBinding(object, path, parsedPath);\n      }\n\n      return bindingsForPath;\n    },\n    unsubscribe_: function unsubscribe_(path) {\n      // tells the group to forget about a property path and no longer\n      // update the array previously obtained with 'subscribe_'\n      var indicesByPath = this._bindingsIndicesByPath,\n          index = indicesByPath[path];\n\n      if (index !== undefined) {\n        var paths = this._paths,\n            parsedPaths = this._parsedPaths,\n            bindings = this._bindings,\n            lastBindingsIndex = bindings.length - 1,\n            lastBindings = bindings[lastBindingsIndex],\n            lastBindingsPath = path[lastBindingsIndex];\n        indicesByPath[lastBindingsPath] = index;\n        bindings[index] = lastBindings;\n        bindings.pop();\n        parsedPaths[index] = parsedPaths[lastBindingsIndex];\n        parsedPaths.pop();\n        paths[index] = paths[lastBindingsIndex];\n        paths.pop();\n      }\n    }\n  }; // File:src/animation/AnimationUtils.js\n\n  /**\n   * @author tschw\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   */\n\n  THREE.AnimationUtils = {\n    // same as Array.prototype.slice, but also works on typed arrays\n    arraySlice: function arraySlice(array, from, to) {\n      if (THREE.AnimationUtils.isTypedArray(array)) {\n        return new array.constructor(array.subarray(from, to));\n      }\n\n      return array.slice(from, to);\n    },\n    // converts an array to a specific type\n    convertArray: function convertArray(array, type, forceClone) {\n      if (!array || // let 'undefined' and 'null' pass\n      !forceClone && array.constructor === type) return array;\n\n      if (typeof type.BYTES_PER_ELEMENT === 'number') {\n        return new type(array); // create typed array\n      }\n\n      return Array.prototype.slice.call(array); // create Array\n    },\n    isTypedArray: function isTypedArray(object) {\n      return ArrayBuffer.isView(object) && !(object instanceof DataView);\n    },\n    // returns an array by which times and values can be sorted\n    getKeyframeOrder: function getKeyframeOrder(times) {\n      function compareTime(i, j) {\n        return times[i] - times[j];\n      }\n\n      var n = times.length;\n      var result = new Array(n);\n\n      for (var i = 0; i !== n; ++i) {\n        result[i] = i;\n      }\n\n      result.sort(compareTime);\n      return result;\n    },\n    // uses the array previously returned by 'getKeyframeOrder' to sort data\n    sortedArray: function sortedArray(values, stride, order) {\n      var nValues = values.length;\n      var result = new values.constructor(nValues);\n\n      for (var i = 0, dstOffset = 0; dstOffset !== nValues; ++i) {\n        var srcOffset = order[i] * stride;\n\n        for (var j = 0; j !== stride; ++j) {\n          result[dstOffset++] = values[srcOffset + j];\n        }\n      }\n\n      return result;\n    },\n    // function for parsing AOS keyframe formats\n    flattenJSON: function flattenJSON(jsonKeys, times, values, valuePropertyName) {\n      var i = 1,\n          key = jsonKeys[0];\n\n      while (key !== undefined && key[valuePropertyName] === undefined) {\n        key = jsonKeys[i++];\n      }\n\n      if (key === undefined) return; // no data\n\n      var value = key[valuePropertyName];\n      if (value === undefined) return; // no data\n\n      if (Array.isArray(value)) {\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push.apply(values, value); // push all elements\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else if (value.toArray !== undefined) {\n        // ...assume THREE.Math-ish\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            value.toArray(values, values.length);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      } else {\n        // otherwise push as-is\n        do {\n          value = key[valuePropertyName];\n\n          if (value !== undefined) {\n            times.push(key.time);\n            values.push(value);\n          }\n\n          key = jsonKeys[i++];\n        } while (key !== undefined);\n      }\n    }\n  }; // File:src/animation/KeyframeTrack.js\n\n  /**\n   *\n   * A timed sequence of keyframes for a specific property.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.KeyframeTrack = function (name, times, values, interpolation) {\n    if (name === undefined) throw new Error(\"track name is undefined\");\n\n    if (times === undefined || times.length === 0) {\n      throw new Error(\"no keyframes in track named \" + name);\n    }\n\n    this.name = name;\n    this.times = THREE.AnimationUtils.convertArray(times, this.TimeBufferType);\n    this.values = THREE.AnimationUtils.convertArray(values, this.ValueBufferType);\n    this.setInterpolation(interpolation || this.DefaultInterpolation);\n    this.validate();\n    this.optimize();\n  };\n\n  THREE.KeyframeTrack.prototype = {\n    constructor: THREE.KeyframeTrack,\n    TimeBufferType: Float32Array,\n    ValueBufferType: Float32Array,\n    DefaultInterpolation: THREE.InterpolateLinear,\n    InterpolantFactoryMethodDiscrete: function InterpolantFactoryMethodDiscrete(result) {\n      return new THREE.DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n      return new THREE.LinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodSmooth: function InterpolantFactoryMethodSmooth(result) {\n      return new THREE.CubicInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    setInterpolation: function setInterpolation(interpolation) {\n      var factoryMethod;\n\n      switch (interpolation) {\n        case THREE.InterpolateDiscrete:\n          factoryMethod = this.InterpolantFactoryMethodDiscrete;\n          break;\n\n        case THREE.InterpolateLinear:\n          factoryMethod = this.InterpolantFactoryMethodLinear;\n          break;\n\n        case THREE.InterpolateSmooth:\n          factoryMethod = this.InterpolantFactoryMethodSmooth;\n          break;\n      }\n\n      if (factoryMethod === undefined) {\n        var message = \"unsupported interpolation for \" + this.ValueTypeName + \" keyframe track named \" + this.name;\n\n        if (this.createInterpolant === undefined) {\n          // fall back to default, unless the default itself is messed up\n          if (interpolation !== this.DefaultInterpolation) {\n            this.setInterpolation(this.DefaultInterpolation);\n          } else {\n            throw new Error(message); // fatal, in this case\n          }\n        }\n\n        console.warn(message);\n        return;\n      }\n\n      this.createInterpolant = factoryMethod;\n    },\n    getInterpolation: function getInterpolation() {\n      switch (this.createInterpolant) {\n        case this.InterpolantFactoryMethodDiscrete:\n          return THREE.InterpolateDiscrete;\n\n        case this.InterpolantFactoryMethodLinear:\n          return THREE.InterpolateLinear;\n\n        case this.InterpolantFactoryMethodSmooth:\n          return THREE.InterpolateSmooth;\n      }\n    },\n    getValueSize: function getValueSize() {\n      return this.values.length / this.times.length;\n    },\n    // move all keyframes either forwards or backwards in time\n    shift: function shift(timeOffset) {\n      if (timeOffset !== 0.0) {\n        var times = this.times;\n\n        for (var i = 0, n = times.length; i !== n; ++i) {\n          times[i] += timeOffset;\n        }\n      }\n\n      return this;\n    },\n    // scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n    scale: function scale(timeScale) {\n      if (timeScale !== 1.0) {\n        var times = this.times;\n\n        for (var i = 0, n = times.length; i !== n; ++i) {\n          times[i] *= timeScale;\n        }\n      }\n\n      return this;\n    },\n    // removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n    // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n    trim: function trim(startTime, endTime) {\n      var times = this.times,\n          nKeys = times.length,\n          from = 0,\n          to = nKeys - 1;\n\n      while (from !== nKeys && times[from] < startTime) {\n        ++from;\n      }\n\n      while (to !== -1 && times[to] > endTime) {\n        --to;\n      }\n\n      ++to; // inclusive -> exclusive bound\n\n      if (from !== 0 || to !== nKeys) {\n        // empty tracks are forbidden, so keep at least one keyframe\n        if (from >= to) to = Math.max(to, 1), from = to - 1;\n        var stride = this.getValueSize();\n        this.times = THREE.AnimationUtils.arraySlice(times, from, to);\n        this.values = THREE.AnimationUtils.arraySlice(this.values, from * stride, to * stride);\n      }\n\n      return this;\n    },\n    // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n    validate: function validate() {\n      var valid = true;\n      var valueSize = this.getValueSize();\n\n      if (valueSize - Math.floor(valueSize) !== 0) {\n        console.error(\"invalid value size in track\", this);\n        valid = false;\n      }\n\n      var times = this.times,\n          values = this.values,\n          nKeys = times.length;\n\n      if (nKeys === 0) {\n        console.error(\"track is empty\", this);\n        valid = false;\n      }\n\n      var prevTime = null;\n\n      for (var i = 0; i !== nKeys; i++) {\n        var currTime = times[i];\n\n        if (typeof currTime === 'number' && isNaN(currTime)) {\n          console.error(\"time is not a valid number\", this, i, currTime);\n          valid = false;\n          break;\n        }\n\n        if (prevTime !== null && prevTime > currTime) {\n          console.error(\"out of order keys\", this, i, currTime, prevTime);\n          valid = false;\n          break;\n        }\n\n        prevTime = currTime;\n      }\n\n      if (values !== undefined) {\n        if (THREE.AnimationUtils.isTypedArray(values)) {\n          for (var i = 0, n = values.length; i !== n; ++i) {\n            var value = values[i];\n\n            if (isNaN(value)) {\n              console.error(\"value is not a valid number\", this, i, value);\n              valid = false;\n              break;\n            }\n          }\n        }\n      }\n\n      return valid;\n    },\n    // removes equivalent sequential keys as common in morph target sequences\n    // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n    optimize: function optimize() {\n      var times = this.times,\n          values = this.values,\n          stride = this.getValueSize(),\n          writeIndex = 1;\n\n      for (var i = 1, n = times.length - 1; i <= n; ++i) {\n        var keep = false;\n        var time = times[i];\n        var timeNext = times[i + 1]; // remove adjacent keyframes scheduled at the same time\n\n        if (time !== timeNext && (i !== 1 || time !== time[0])) {\n          // remove unnecessary keyframes same as their neighbors\n          var offset = i * stride,\n              offsetP = offset - stride,\n              offsetN = offset + stride;\n\n          for (var j = 0; j !== stride; ++j) {\n            var value = values[offset + j];\n\n            if (value !== values[offsetP + j] || value !== values[offsetN + j]) {\n              keep = true;\n              break;\n            }\n          }\n        } // in-place compaction\n\n\n        if (keep) {\n          if (i !== writeIndex) {\n            times[writeIndex] = times[i];\n            var readOffset = i * stride,\n                writeOffset = writeIndex * stride;\n\n            for (var j = 0; j !== stride; ++j) {\n              values[writeOffset + j] = values[readOffset + j];\n            }\n          }\n\n          ++writeIndex;\n        }\n      }\n\n      if (writeIndex !== times.length) {\n        this.times = THREE.AnimationUtils.arraySlice(times, 0, writeIndex);\n        this.values = THREE.AnimationUtils.arraySlice(values, 0, writeIndex * stride);\n      }\n\n      return this;\n    }\n  }; // Static methods:\n\n  Object.assign(THREE.KeyframeTrack, {\n    // Serialization (in static context, because of constructor invocation\n    // and automatic invocation of .toJSON):\n    parse: function parse(json) {\n      if (json.type === undefined) {\n        throw new Error(\"track type undefined, can not parse\");\n      }\n\n      var trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName(json.type);\n\n      if (json.times === undefined) {\n        var times = [],\n            values = [];\n        THREE.AnimationUtils.flattenJSON(json.keys, times, values, 'value');\n        json.times = times;\n        json.values = values;\n      } // derived classes can define a static parse method\n\n\n      if (trackType.parse !== undefined) {\n        return trackType.parse(json);\n      } else {\n        // by default, we asssume a constructor compatible with the base\n        return new trackType(json.name, json.times, json.values, json.interpolation);\n      }\n    },\n    toJSON: function toJSON(track) {\n      var trackType = track.constructor;\n      var json; // derived classes can define a static toJSON method\n\n      if (trackType.toJSON !== undefined) {\n        json = trackType.toJSON(track);\n      } else {\n        // by default, we assume the data can be serialized as-is\n        json = {\n          'name': track.name,\n          'times': THREE.AnimationUtils.convertArray(track.times, Array),\n          'values': THREE.AnimationUtils.convertArray(track.values, Array)\n        };\n        var interpolation = track.getInterpolation();\n\n        if (interpolation !== track.DefaultInterpolation) {\n          json.interpolation = interpolation;\n        }\n      }\n\n      json.type = track.ValueTypeName; // mandatory\n\n      return json;\n    },\n    _getTrackTypeForValueTypeName: function _getTrackTypeForValueTypeName(typeName) {\n      switch (typeName.toLowerCase()) {\n        case \"scalar\":\n        case \"double\":\n        case \"float\":\n        case \"number\":\n        case \"integer\":\n          return THREE.NumberKeyframeTrack;\n\n        case \"vector\":\n        case \"vector2\":\n        case \"vector3\":\n        case \"vector4\":\n          return THREE.VectorKeyframeTrack;\n\n        case \"color\":\n          return THREE.ColorKeyframeTrack;\n\n        case \"quaternion\":\n          return THREE.QuaternionKeyframeTrack;\n\n        case \"bool\":\n        case \"boolean\":\n          return THREE.BooleanKeyframeTrack;\n\n        case \"string\":\n          return THREE.StringKeyframeTrack;\n      }\n\n      throw new Error(\"Unsupported typeName: \" + typeName);\n    }\n  }); // File:src/animation/PropertyBinding.js\n\n  /**\n   *\n   * A reference to a real property in the scene graph.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.PropertyBinding = function (rootNode, path, parsedPath) {\n    this.path = path;\n    this.parsedPath = parsedPath || THREE.PropertyBinding.parseTrackName(path);\n    this.node = THREE.PropertyBinding.findNode(rootNode, this.parsedPath.nodeName) || rootNode;\n    this.rootNode = rootNode;\n  };\n\n  THREE.PropertyBinding.prototype = {\n    constructor: THREE.PropertyBinding,\n    getValue: function getValue_unbound(targetArray, offset) {\n      this.bind();\n      this.getValue(targetArray, offset); // Note: This class uses a State pattern on a per-method basis:\n      // 'bind' sets 'this.getValue' / 'setValue' and shadows the\n      // prototype version of these methods with one that represents\n      // the bound state. When the property is not found, the methods\n      // become no-ops.\n    },\n    setValue: function getValue_unbound(sourceArray, offset) {\n      this.bind();\n      this.setValue(sourceArray, offset);\n    },\n    // create getter / setter pair for a property in the scene graph\n    bind: function bind() {\n      var targetObject = this.node,\n          parsedPath = this.parsedPath,\n          objectName = parsedPath.objectName,\n          propertyName = parsedPath.propertyName,\n          propertyIndex = parsedPath.propertyIndex;\n\n      if (!targetObject) {\n        targetObject = THREE.PropertyBinding.findNode(this.rootNode, parsedPath.nodeName) || this.rootNode;\n        this.node = targetObject;\n      } // set fail state so we can just 'return' on error\n\n\n      this.getValue = this._getValue_unavailable;\n      this.setValue = this._setValue_unavailable; // ensure there is a value node\n\n      if (!targetObject) {\n        console.error(\"  trying to update node for track: \" + this.path + \" but it wasn't found.\");\n        return;\n      }\n\n      if (objectName) {\n        var objectIndex = parsedPath.objectIndex; // special cases were we need to reach deeper into the hierarchy to get the face materials....\n\n        switch (objectName) {\n          case 'materials':\n            if (!targetObject.material) {\n              console.error('  can not bind to material as node does not have a material', this);\n              return;\n            }\n\n            if (!targetObject.material.materials) {\n              console.error('  can not bind to material.materials as node.material does not have a materials array', this);\n              return;\n            }\n\n            targetObject = targetObject.material.materials;\n            break;\n\n          case 'bones':\n            if (!targetObject.skeleton) {\n              console.error('  can not bind to bones as node does not have a skeleton', this);\n              return;\n            } // potential future optimization: skip this if propertyIndex is already an integer\n            // and convert the integer string to a true integer.\n\n\n            targetObject = targetObject.skeleton.bones; // support resolving morphTarget names into indices.\n\n            for (var i = 0; i < targetObject.length; i++) {\n              if (targetObject[i].name === objectIndex) {\n                objectIndex = i;\n                break;\n              }\n            }\n\n            break;\n\n          default:\n            if (targetObject[objectName] === undefined) {\n              console.error('  can not bind to objectName of node, undefined', this);\n              return;\n            }\n\n            targetObject = targetObject[objectName];\n        }\n\n        if (objectIndex !== undefined) {\n          if (targetObject[objectIndex] === undefined) {\n            console.error(\"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject);\n            return;\n          }\n\n          targetObject = targetObject[objectIndex];\n        }\n      } // resolve property\n\n\n      var nodeProperty = targetObject[propertyName];\n\n      if (nodeProperty === undefined) {\n        var nodeName = parsedPath.nodeName;\n        console.error(\"  trying to update property for track: \" + nodeName + '.' + propertyName + \" but it wasn't found.\", targetObject);\n        return;\n      } // determine versioning scheme\n\n\n      var versioning = this.Versioning.None;\n\n      if (targetObject.needsUpdate !== undefined) {\n        // material\n        versioning = this.Versioning.NeedsUpdate;\n        this.targetObject = targetObject;\n      } else if (targetObject.matrixWorldNeedsUpdate !== undefined) {\n        // node transform\n        versioning = this.Versioning.MatrixWorldNeedsUpdate;\n        this.targetObject = targetObject;\n      } // determine how the property gets bound\n\n\n      var bindingType = this.BindingType.Direct;\n\n      if (propertyIndex !== undefined) {\n        // access a sub element of the property array (only primitives are supported right now)\n        if (propertyName === \"morphTargetInfluences\") {\n          // potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n          // support resolving morphTarget names into indices.\n          if (!targetObject.geometry) {\n            console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry', this);\n            return;\n          }\n\n          if (!targetObject.geometry.morphTargets) {\n            console.error('  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this);\n            return;\n          }\n\n          for (var i = 0; i < this.node.geometry.morphTargets.length; i++) {\n            if (targetObject.geometry.morphTargets[i].name === propertyIndex) {\n              propertyIndex = i;\n              break;\n            }\n          }\n        }\n\n        bindingType = this.BindingType.ArrayElement;\n        this.resolvedProperty = nodeProperty;\n        this.propertyIndex = propertyIndex;\n      } else if (nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined) {\n        // must use copy for Object3D.Euler/Quaternion\n        bindingType = this.BindingType.HasFromToArray;\n        this.resolvedProperty = nodeProperty;\n      } else if (nodeProperty.length !== undefined) {\n        bindingType = this.BindingType.EntireArray;\n        this.resolvedProperty = nodeProperty;\n      } else {\n        this.propertyName = propertyName;\n      } // select getter / setter\n\n\n      this.getValue = this.GetterByBindingType[bindingType];\n      this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];\n    },\n    unbind: function unbind() {\n      this.node = null; // back to the prototype version of getValue / setValue\n      // note: avoiding to mutate the shape of 'this' via 'delete'\n\n      this.getValue = this._getValue_unbound;\n      this.setValue = this._setValue_unbound;\n    }\n  };\n  Object.assign(THREE.PropertyBinding.prototype, {\n    // prototype, continued\n    // these are used to \"bind\" a nonexistent property\n    _getValue_unavailable: function _getValue_unavailable() {},\n    _setValue_unavailable: function _setValue_unavailable() {},\n    // initial state of these methods that calls 'bind'\n    _getValue_unbound: THREE.PropertyBinding.prototype.getValue,\n    _setValue_unbound: THREE.PropertyBinding.prototype.setValue,\n    BindingType: {\n      Direct: 0,\n      EntireArray: 1,\n      ArrayElement: 2,\n      HasFromToArray: 3\n    },\n    Versioning: {\n      None: 0,\n      NeedsUpdate: 1,\n      MatrixWorldNeedsUpdate: 2\n    },\n    GetterByBindingType: [function getValue_direct(buffer, offset) {\n      buffer[offset] = this.node[this.propertyName];\n    }, function getValue_array(buffer, offset) {\n      var source = this.resolvedProperty;\n\n      for (var i = 0, n = source.length; i !== n; ++i) {\n        buffer[offset++] = source[i];\n      }\n    }, function getValue_arrayElement(buffer, offset) {\n      buffer[offset] = this.resolvedProperty[this.propertyIndex];\n    }, function getValue_toArray(buffer, offset) {\n      this.resolvedProperty.toArray(buffer, offset);\n    }],\n    SetterByBindingTypeAndVersioning: [[// Direct\n    function setValue_direct(buffer, offset) {\n      this.node[this.propertyName] = buffer[offset];\n    }, function setValue_direct_setNeedsUpdate(buffer, offset) {\n      this.node[this.propertyName] = buffer[offset];\n      this.targetObject.needsUpdate = true;\n    }, function setValue_direct_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.node[this.propertyName] = buffer[offset];\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    }], [// EntireArray\n    function setValue_array(buffer, offset) {\n      var dest = this.resolvedProperty;\n\n      for (var i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n    }, function setValue_array_setNeedsUpdate(buffer, offset) {\n      var dest = this.resolvedProperty;\n\n      for (var i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n\n      this.targetObject.needsUpdate = true;\n    }, function setValue_array_setMatrixWorldNeedsUpdate(buffer, offset) {\n      var dest = this.resolvedProperty;\n\n      for (var i = 0, n = dest.length; i !== n; ++i) {\n        dest[i] = buffer[offset++];\n      }\n\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    }], [// ArrayElement\n    function setValue_arrayElement(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n    }, function setValue_arrayElement_setNeedsUpdate(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n      this.targetObject.needsUpdate = true;\n    }, function setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.resolvedProperty[this.propertyIndex] = buffer[offset];\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    }], [// HasToFromArray\n    function setValue_fromArray(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n    }, function setValue_fromArray_setNeedsUpdate(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n      this.targetObject.needsUpdate = true;\n    }, function setValue_fromArray_setMatrixWorldNeedsUpdate(buffer, offset) {\n      this.resolvedProperty.fromArray(buffer, offset);\n      this.targetObject.matrixWorldNeedsUpdate = true;\n    }]]\n  });\n\n  THREE.PropertyBinding.Composite = function (targetGroup, path, optionalParsedPath) {\n    var parsedPath = optionalParsedPath || THREE.PropertyBinding.parseTrackName(path);\n    this._targetGroup = targetGroup;\n    this._bindings = targetGroup.subscribe_(path, parsedPath);\n  };\n\n  THREE.PropertyBinding.Composite.prototype = {\n    constructor: THREE.PropertyBinding.Composite,\n    getValue: function getValue(array, offset) {\n      this.bind(); // bind all binding\n\n      var firstValidIndex = this._targetGroup.nCachedObjects_,\n          binding = this._bindings[firstValidIndex]; // and only call .getValue on the first\n\n      if (binding !== undefined) binding.getValue(array, offset);\n    },\n    setValue: function setValue(array, offset) {\n      var bindings = this._bindings;\n\n      for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].setValue(array, offset);\n      }\n    },\n    bind: function bind() {\n      var bindings = this._bindings;\n\n      for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].bind();\n      }\n    },\n    unbind: function unbind() {\n      var bindings = this._bindings;\n\n      for (var i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++i) {\n        bindings[i].unbind();\n      }\n    }\n  };\n\n  THREE.PropertyBinding.create = function (root, path, parsedPath) {\n    if (!(root instanceof THREE.AnimationObjectGroup)) {\n      return new THREE.PropertyBinding(root, path, parsedPath);\n    } else {\n      return new THREE.PropertyBinding.Composite(root, path, parsedPath);\n    }\n  };\n\n  THREE.PropertyBinding.parseTrackName = function (trackName) {\n    // matches strings in the form of:\n    //    nodeName.property\n    //    nodeName.property[accessor]\n    //    nodeName.material.property[accessor]\n    //    uuid.property[accessor]\n    //    uuid.objectName[objectIndex].propertyName[propertyIndex]\n    //    parentName/nodeName.property\n    //    parentName/parentName/nodeName.property[index]\n    //\t  .bone[Armature.DEF_cog].position\n    // created and tested via https://regex101.com/#javascript\n    var re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\n    var matches = re.exec(trackName);\n\n    if (!matches) {\n      throw new Error(\"cannot parse trackName at all: \" + trackName);\n    }\n\n    if (matches.index === re.lastIndex) {\n      re.lastIndex++;\n    }\n\n    var results = {\n      // directoryName: matches[ 1 ], // (tschw) currently unused\n      nodeName: matches[3],\n      // allowed to be null, specified root node.\n      objectName: matches[5],\n      objectIndex: matches[7],\n      propertyName: matches[9],\n      propertyIndex: matches[11] // allowed to be null, specifies that the whole property is set.\n\n    };\n\n    if (results.propertyName === null || results.propertyName.length === 0) {\n      throw new Error(\"can not parse propertyName from trackName: \" + trackName);\n    }\n\n    return results;\n  };\n\n  THREE.PropertyBinding.findNode = function (root, nodeName) {\n    if (!nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid) {\n      return root;\n    } // search into skeleton bones.\n\n\n    if (root.skeleton) {\n      var searchSkeleton = function searchSkeleton(skeleton) {\n        for (var i = 0; i < skeleton.bones.length; i++) {\n          var bone = skeleton.bones[i];\n\n          if (bone.name === nodeName) {\n            return bone;\n          }\n        }\n\n        return null;\n      };\n\n      var bone = searchSkeleton(root.skeleton);\n\n      if (bone) {\n        return bone;\n      }\n    } // search into node subtree.\n\n\n    if (root.children) {\n      var searchNodeSubtree = function searchNodeSubtree(children) {\n        for (var i = 0; i < children.length; i++) {\n          var childNode = children[i];\n\n          if (childNode.name === nodeName || childNode.uuid === nodeName) {\n            return childNode;\n          }\n\n          var result = searchNodeSubtree(childNode.children);\n          if (result) return result;\n        }\n\n        return null;\n      };\n\n      var subTreeNode = searchNodeSubtree(root.children);\n\n      if (subTreeNode) {\n        return subTreeNode;\n      }\n    }\n\n    return null;\n  }; // File:src/animation/PropertyMixer.js\n\n  /**\n   *\n   * Buffered scene graph property that allows weighted accumulation.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n\n  THREE.PropertyMixer = function (binding, typeName, valueSize) {\n    this.binding = binding;\n    this.valueSize = valueSize;\n    var bufferType = Float64Array,\n        mixFunction;\n\n    switch (typeName) {\n      case 'quaternion':\n        mixFunction = this._slerp;\n        break;\n\n      case 'string':\n      case 'bool':\n        bufferType = Array, mixFunction = this._select;\n        break;\n\n      default:\n        mixFunction = this._lerp;\n    }\n\n    this.buffer = new bufferType(valueSize * 4); // layout: [ incoming | accu0 | accu1 | orig ]\n    //\n    // interpolators can use .buffer as their .result\n    // the data then goes to 'incoming'\n    //\n    // 'accu0' and 'accu1' are used frame-interleaved for\n    // the cumulative result and are compared to detect\n    // changes\n    //\n    // 'orig' stores the original state of the property\n\n    this._mixBufferRegion = mixFunction;\n    this.cumulativeWeight = 0;\n    this.useCount = 0;\n    this.referenceCount = 0;\n  };\n\n  THREE.PropertyMixer.prototype = {\n    constructor: THREE.PropertyMixer,\n    // accumulate data in the 'incoming' region into 'accu<i>'\n    accumulate: function accumulate(accuIndex, weight) {\n      // note: happily accumulating nothing when weight = 0, the caller knows\n      // the weight and shouldn't have made the call in the first place\n      var buffer = this.buffer,\n          stride = this.valueSize,\n          offset = accuIndex * stride + stride,\n          currentWeight = this.cumulativeWeight;\n\n      if (currentWeight === 0) {\n        // accuN := incoming * weight\n        for (var i = 0; i !== stride; ++i) {\n          buffer[offset + i] = buffer[i];\n        }\n\n        currentWeight = weight;\n      } else {\n        // accuN := accuN + incoming * weight\n        currentWeight += weight;\n        var mix = weight / currentWeight;\n\n        this._mixBufferRegion(buffer, offset, 0, mix, stride);\n      }\n\n      this.cumulativeWeight = currentWeight;\n    },\n    // apply the state of 'accu<i>' to the binding when accus differ\n    apply: function apply(accuIndex) {\n      var stride = this.valueSize,\n          buffer = this.buffer,\n          offset = accuIndex * stride + stride,\n          weight = this.cumulativeWeight,\n          binding = this.binding;\n      this.cumulativeWeight = 0;\n\n      if (weight < 1) {\n        // accuN := accuN + original * ( 1 - cumulativeWeight )\n        var originalValueOffset = stride * 3;\n\n        this._mixBufferRegion(buffer, offset, originalValueOffset, 1 - weight, stride);\n      }\n\n      for (var i = stride, e = stride + stride; i !== e; ++i) {\n        if (buffer[i] !== buffer[i + stride]) {\n          // value has changed -> update scene graph\n          binding.setValue(buffer, offset);\n          break;\n        }\n      }\n    },\n    // remember the state of the bound property and copy it to both accus\n    saveOriginalState: function saveOriginalState() {\n      var binding = this.binding;\n      var buffer = this.buffer,\n          stride = this.valueSize,\n          originalValueOffset = stride * 3;\n      binding.getValue(buffer, originalValueOffset); // accu[0..1] := orig -- initially detect changes against the original\n\n      for (var i = stride, e = originalValueOffset; i !== e; ++i) {\n        buffer[i] = buffer[originalValueOffset + i % stride];\n      }\n\n      this.cumulativeWeight = 0;\n    },\n    // apply the state previously taken via 'saveOriginalState' to the binding\n    restoreOriginalState: function restoreOriginalState() {\n      var originalValueOffset = this.valueSize * 3;\n      this.binding.setValue(this.buffer, originalValueOffset);\n    },\n    // mix functions\n    _select: function _select(buffer, dstOffset, srcOffset, t, stride) {\n      if (t >= 0.5) {\n        for (var i = 0; i !== stride; ++i) {\n          buffer[dstOffset + i] = buffer[srcOffset + i];\n        }\n      }\n    },\n    _slerp: function _slerp(buffer, dstOffset, srcOffset, t, stride) {\n      THREE.Quaternion.slerpFlat(buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t);\n    },\n    _lerp: function _lerp(buffer, dstOffset, srcOffset, t, stride) {\n      var s = 1 - t;\n\n      for (var i = 0; i !== stride; ++i) {\n        var j = dstOffset + i;\n        buffer[j] = buffer[j] * s + buffer[srcOffset + i] * t;\n      }\n    }\n  }; // File:src/animation/tracks/BooleanKeyframeTrack.js\n\n  /**\n   *\n   * A Track of Boolean keyframe values.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.BooleanKeyframeTrack = function (name, times, values) {\n    THREE.KeyframeTrack.call(this, name, times, values);\n  };\n\n  THREE.BooleanKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.BooleanKeyframeTrack,\n    ValueTypeName: 'bool',\n    ValueBufferType: Array,\n    DefaultInterpolation: THREE.InterpolateDiscrete,\n    InterpolantFactoryMethodLinear: undefined,\n    InterpolantFactoryMethodSmooth: undefined // Note: Actually this track could have a optimized / compressed\n    // representation of a single value and a custom interpolant that\n    // computes \"firstValue ^ isOdd( index )\".\n\n  }); // File:src/animation/tracks/ColorKeyframeTrack.js\n\n  /**\n   *\n   * A Track of keyframe values that represent color.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.ColorKeyframeTrack = function (name, times, values, interpolation) {\n    THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n  };\n\n  THREE.ColorKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.ColorKeyframeTrack,\n    ValueTypeName: 'color' // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n    // Note: Very basic implementation and nothing special yet.\n    // However, this is the place for color space parameterization.\n\n  }); // File:src/animation/tracks/NumberKeyframeTrack.js\n\n  /**\n   *\n   * A Track of numeric keyframe values.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.NumberKeyframeTrack = function (name, times, values, interpolation) {\n    THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n  };\n\n  THREE.NumberKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.NumberKeyframeTrack,\n    ValueTypeName: 'number' // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n\n  }); // File:src/animation/tracks/QuaternionKeyframeTrack.js\n\n  /**\n   *\n   * A Track of quaternion keyframe values.\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.QuaternionKeyframeTrack = function (name, times, values, interpolation) {\n    THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n  };\n\n  THREE.QuaternionKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.QuaternionKeyframeTrack,\n    ValueTypeName: 'quaternion',\n    // ValueBufferType is inherited\n    DefaultInterpolation: THREE.InterpolateLinear,\n    InterpolantFactoryMethodLinear: function InterpolantFactoryMethodLinear(result) {\n      return new THREE.QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);\n    },\n    InterpolantFactoryMethodSmooth: undefined // not yet implemented\n\n  }); // File:src/animation/tracks/StringKeyframeTrack.js\n\n  /**\n   *\n   * A Track that interpolates Strings\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.StringKeyframeTrack = function (name, times, values, interpolation) {\n    THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n  };\n\n  THREE.StringKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.StringKeyframeTrack,\n    ValueTypeName: 'string',\n    ValueBufferType: Array,\n    DefaultInterpolation: THREE.InterpolateDiscrete,\n    InterpolantFactoryMethodLinear: undefined,\n    InterpolantFactoryMethodSmooth: undefined\n  }); // File:src/animation/tracks/VectorKeyframeTrack.js\n\n  /**\n   *\n   * A Track of vectored keyframe values.\n   *\n   *\n   * @author Ben Houston / http://clara.io/\n   * @author David Sarno / http://lighthaus.us/\n   * @author tschw\n   */\n\n  THREE.VectorKeyframeTrack = function (name, times, values, interpolation) {\n    THREE.KeyframeTrack.call(this, name, times, values, interpolation);\n  };\n\n  THREE.VectorKeyframeTrack.prototype = Object.assign(Object.create(THREE.KeyframeTrack.prototype), {\n    constructor: THREE.VectorKeyframeTrack,\n    ValueTypeName: 'vector' // ValueBufferType is inherited\n    // DefaultInterpolation is inherited\n\n  }); // File:src/audio/Audio.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author Reece Aaron Lecrivain / http://reecenotes.com/\n   */\n\n  THREE.Audio = function (listener) {\n    THREE.Object3D.call(this);\n    this.type = 'Audio';\n    this.context = listener.context;\n    this.source = this.context.createBufferSource();\n    this.source.onended = this.onEnded.bind(this);\n    this.gain = this.context.createGain();\n    this.gain.connect(listener.getInput());\n    this.autoplay = false;\n    this.startTime = 0;\n    this.playbackRate = 1;\n    this.isPlaying = false;\n    this.hasPlaybackControl = true;\n    this.sourceType = 'empty';\n    this.filters = [];\n  };\n\n  THREE.Audio.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Audio,\n    getOutput: function getOutput() {\n      return this.gain;\n    },\n    setNodeSource: function setNodeSource(audioNode) {\n      this.hasPlaybackControl = false;\n      this.sourceType = 'audioNode';\n      this.source = audioNode;\n      this.connect();\n      return this;\n    },\n    setBuffer: function setBuffer(audioBuffer) {\n      this.source.buffer = audioBuffer;\n      this.sourceType = 'buffer';\n      if (this.autoplay) this.play();\n      return this;\n    },\n    play: function play() {\n      if (this.isPlaying === true) {\n        console.warn('THREE.Audio: Audio is already playing.');\n        return;\n      }\n\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      var source = this.context.createBufferSource();\n      source.buffer = this.source.buffer;\n      source.loop = this.source.loop;\n      source.onended = this.source.onended;\n      source.start(0, this.startTime);\n      source.playbackRate.value = this.playbackRate;\n      this.isPlaying = true;\n      this.source = source;\n      return this.connect();\n    },\n    pause: function pause() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.source.stop();\n      this.startTime = this.context.currentTime;\n      this.isPlaying = false;\n      return this;\n    },\n    stop: function stop() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.source.stop();\n      this.startTime = 0;\n      this.isPlaying = false;\n      return this;\n    },\n    connect: function connect() {\n      if (this.filters.length > 0) {\n        this.source.connect(this.filters[0]);\n\n        for (var i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].connect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].connect(this.getOutput());\n      } else {\n        this.source.connect(this.getOutput());\n      }\n\n      return this;\n    },\n    disconnect: function disconnect() {\n      if (this.filters.length > 0) {\n        this.source.disconnect(this.filters[0]);\n\n        for (var i = 1, l = this.filters.length; i < l; i++) {\n          this.filters[i - 1].disconnect(this.filters[i]);\n        }\n\n        this.filters[this.filters.length - 1].disconnect(this.getOutput());\n      } else {\n        this.source.disconnect(this.getOutput());\n      }\n\n      return this;\n    },\n    getFilters: function getFilters() {\n      return this.filters;\n    },\n    setFilters: function setFilters(value) {\n      if (!value) value = [];\n\n      if (this.isPlaying === true) {\n        this.disconnect();\n        this.filters = value;\n        this.connect();\n      } else {\n        this.filters = value;\n      }\n\n      return this;\n    },\n    getFilter: function getFilter() {\n      return this.getFilters()[0];\n    },\n    setFilter: function setFilter(filter) {\n      return this.setFilters(filter ? [filter] : []);\n    },\n    setPlaybackRate: function setPlaybackRate(value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.playbackRate = value;\n\n      if (this.isPlaying === true) {\n        this.source.playbackRate.value = this.playbackRate;\n      }\n\n      return this;\n    },\n    getPlaybackRate: function getPlaybackRate() {\n      return this.playbackRate;\n    },\n    onEnded: function onEnded() {\n      this.isPlaying = false;\n    },\n    getLoop: function getLoop() {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return false;\n      }\n\n      return this.source.loop;\n    },\n    setLoop: function setLoop(value) {\n      if (this.hasPlaybackControl === false) {\n        console.warn('THREE.Audio: this Audio has no playback control.');\n        return;\n      }\n\n      this.source.loop = value;\n    },\n    getVolume: function getVolume() {\n      return this.gain.gain.value;\n    },\n    setVolume: function setVolume(value) {\n      this.gain.gain.value = value;\n      return this;\n    }\n  }); // File:src/audio/AudioAnalyser.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.AudioAnalyser = function (audio, fftSize) {\n    this.analyser = audio.context.createAnalyser();\n    this.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\n    this.data = new Uint8Array(this.analyser.frequencyBinCount);\n    audio.getOutput().connect(this.analyser);\n  };\n\n  Object.assign(THREE.AudioAnalyser.prototype, {\n    getFrequencyData: function getFrequencyData() {\n      this.analyser.getByteFrequencyData(this.data);\n      return this.data;\n    },\n    getAverageFrequency: function getAverageFrequency() {\n      var value = 0,\n          data = this.getFrequencyData();\n\n      for (var i = 0; i < data.length; i++) {\n        value += data[i];\n      }\n\n      return value / data.length;\n    }\n  }); // File:src/audio/AudioContext.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  Object.defineProperty(THREE, 'AudioContext', {\n    get: function () {\n      var context;\n      return function get() {\n        if (context === undefined) {\n          context = new (window.AudioContext || window.webkitAudioContext)();\n        }\n\n        return context;\n      };\n    }()\n  }); // File:src/audio/PositionalAudio.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.PositionalAudio = function (listener) {\n    THREE.Audio.call(this, listener);\n    this.panner = this.context.createPanner();\n    this.panner.connect(this.gain);\n  };\n\n  THREE.PositionalAudio.prototype = Object.assign(Object.create(THREE.Audio.prototype), {\n    constructor: THREE.PositionalAudio,\n    getOutput: function getOutput() {\n      return this.panner;\n    },\n    getRefDistance: function getRefDistance() {\n      return this.panner.refDistance;\n    },\n    setRefDistance: function setRefDistance(value) {\n      this.panner.refDistance = value;\n    },\n    getRolloffFactor: function getRolloffFactor() {\n      return this.panner.rolloffFactor;\n    },\n    setRolloffFactor: function setRolloffFactor(value) {\n      this.panner.rolloffFactor = value;\n    },\n    getDistanceModel: function getDistanceModel() {\n      return this.panner.distanceModel;\n    },\n    setDistanceModel: function setDistanceModel(value) {\n      this.panner.distanceModel = value;\n    },\n    getMaxDistance: function getMaxDistance() {\n      return this.panner.maxDistance;\n    },\n    setMaxDistance: function setMaxDistance(value) {\n      this.panner.maxDistance = value;\n    },\n    updateMatrixWorld: function () {\n      var position = new THREE.Vector3();\n      return function updateMatrixWorld(force) {\n        THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n        position.setFromMatrixPosition(this.matrixWorld);\n        this.panner.setPosition(position.x, position.y, position.z);\n      };\n    }()\n  }); // File:src/audio/AudioListener.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.AudioListener = function () {\n    THREE.Object3D.call(this);\n    this.type = 'AudioListener';\n    this.context = THREE.AudioContext;\n    this.gain = this.context.createGain();\n    this.gain.connect(this.context.destination);\n    this.filter = null;\n  };\n\n  THREE.AudioListener.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.AudioListener,\n    getInput: function getInput() {\n      return this.gain;\n    },\n    removeFilter: function removeFilter() {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n        this.gain.connect(this.context.destination);\n        this.filter = null;\n      }\n    },\n    getFilter: function getFilter() {\n      return this.filter;\n    },\n    setFilter: function setFilter(value) {\n      if (this.filter !== null) {\n        this.gain.disconnect(this.filter);\n        this.filter.disconnect(this.context.destination);\n      } else {\n        this.gain.disconnect(this.context.destination);\n      }\n\n      this.filter = value;\n      this.gain.connect(this.filter);\n      this.filter.connect(this.context.destination);\n    },\n    getMasterVolume: function getMasterVolume() {\n      return this.gain.gain.value;\n    },\n    setMasterVolume: function setMasterVolume(value) {\n      this.gain.gain.value = value;\n    },\n    updateMatrixWorld: function () {\n      var position = new THREE.Vector3();\n      var quaternion = new THREE.Quaternion();\n      var scale = new THREE.Vector3();\n      var orientation = new THREE.Vector3();\n      return function updateMatrixWorld(force) {\n        THREE.Object3D.prototype.updateMatrixWorld.call(this, force);\n        var listener = this.context.listener;\n        var up = this.up;\n        this.matrixWorld.decompose(position, quaternion, scale);\n        orientation.set(0, 0, -1).applyQuaternion(quaternion);\n        listener.setPosition(position.x, position.y, position.z);\n        listener.setOrientation(orientation.x, orientation.y, orientation.z, up.x, up.y, up.z);\n      };\n    }()\n  }); // File:src/cameras/Camera.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author WestLangley / http://github.com/WestLangley\n  */\n\n  THREE.Camera = function () {\n    THREE.Object3D.call(this);\n    this.type = 'Camera';\n    this.matrixWorldInverse = new THREE.Matrix4();\n    this.projectionMatrix = new THREE.Matrix4();\n  };\n\n  THREE.Camera.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.Camera.prototype.constructor = THREE.Camera;\n\n  THREE.Camera.prototype.getWorldDirection = function () {\n    var quaternion = new THREE.Quaternion();\n    return function getWorldDirection(optionalTarget) {\n      var result = optionalTarget || new THREE.Vector3();\n      this.getWorldQuaternion(quaternion);\n      return result.set(0, 0, -1).applyQuaternion(quaternion);\n    };\n  }();\n\n  THREE.Camera.prototype.lookAt = function () {\n    // This routine does not support cameras with rotated and/or translated parent(s)\n    var m1 = new THREE.Matrix4();\n    return function lookAt(vector) {\n      m1.lookAt(this.position, vector, this.up);\n      this.quaternion.setFromRotationMatrix(m1);\n    };\n  }();\n\n  THREE.Camera.prototype.clone = function () {\n    return new this.constructor().copy(this);\n  };\n\n  THREE.Camera.prototype.copy = function (source) {\n    THREE.Object3D.prototype.copy.call(this, source);\n    this.matrixWorldInverse.copy(source.matrixWorldInverse);\n    this.projectionMatrix.copy(source.projectionMatrix);\n    return this;\n  }; // File:src/cameras/CubeCamera.js\n\n  /**\n   * Camera for rendering cube maps\n   *\t- renders scene into axis-aligned cube\n   *\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n\n  THREE.CubeCamera = function (near, far, cubeResolution) {\n    THREE.Object3D.call(this);\n    this.type = 'CubeCamera';\n    var fov = 90,\n        aspect = 1;\n    var cameraPX = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraPX.up.set(0, -1, 0);\n    cameraPX.lookAt(new THREE.Vector3(1, 0, 0));\n    this.add(cameraPX);\n    var cameraNX = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraNX.up.set(0, -1, 0);\n    cameraNX.lookAt(new THREE.Vector3(-1, 0, 0));\n    this.add(cameraNX);\n    var cameraPY = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraPY.up.set(0, 0, 1);\n    cameraPY.lookAt(new THREE.Vector3(0, 1, 0));\n    this.add(cameraPY);\n    var cameraNY = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraNY.up.set(0, 0, -1);\n    cameraNY.lookAt(new THREE.Vector3(0, -1, 0));\n    this.add(cameraNY);\n    var cameraPZ = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraPZ.up.set(0, -1, 0);\n    cameraPZ.lookAt(new THREE.Vector3(0, 0, 1));\n    this.add(cameraPZ);\n    var cameraNZ = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    cameraNZ.up.set(0, -1, 0);\n    cameraNZ.lookAt(new THREE.Vector3(0, 0, -1));\n    this.add(cameraNZ);\n    var options = {\n      format: THREE.RGBFormat,\n      magFilter: THREE.LinearFilter,\n      minFilter: THREE.LinearFilter\n    };\n    this.renderTarget = new THREE.WebGLRenderTargetCube(cubeResolution, cubeResolution, options);\n\n    this.updateCubeMap = function (renderer, scene) {\n      if (this.parent === null) this.updateMatrixWorld();\n      var renderTarget = this.renderTarget;\n      var generateMipmaps = renderTarget.texture.generateMipmaps;\n      renderTarget.texture.generateMipmaps = false;\n      renderTarget.activeCubeFace = 0;\n      renderer.render(scene, cameraPX, renderTarget);\n      renderTarget.activeCubeFace = 1;\n      renderer.render(scene, cameraNX, renderTarget);\n      renderTarget.activeCubeFace = 2;\n      renderer.render(scene, cameraPY, renderTarget);\n      renderTarget.activeCubeFace = 3;\n      renderer.render(scene, cameraNY, renderTarget);\n      renderTarget.activeCubeFace = 4;\n      renderer.render(scene, cameraPZ, renderTarget);\n      renderTarget.texture.generateMipmaps = generateMipmaps;\n      renderTarget.activeCubeFace = 5;\n      renderer.render(scene, cameraNZ, renderTarget);\n      renderer.setRenderTarget(null);\n    };\n  };\n\n  THREE.CubeCamera.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.CubeCamera.prototype.constructor = THREE.CubeCamera; // File:src/cameras/OrthographicCamera.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author arose / http://github.com/arose\n   */\n\n  THREE.OrthographicCamera = function (left, right, top, bottom, near, far) {\n    THREE.Camera.call(this);\n    this.type = 'OrthographicCamera';\n    this.zoom = 1;\n    this.view = null;\n    this.left = left;\n    this.right = right;\n    this.top = top;\n    this.bottom = bottom;\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n    this.updateProjectionMatrix();\n  };\n\n  THREE.OrthographicCamera.prototype = Object.assign(Object.create(THREE.Camera.prototype), {\n    constructor: THREE.OrthographicCamera,\n    copy: function copy(source) {\n      THREE.Camera.prototype.copy.call(this, source);\n      this.left = source.left;\n      this.right = source.right;\n      this.top = source.top;\n      this.bottom = source.bottom;\n      this.near = source.near;\n      this.far = source.far;\n      this.zoom = source.zoom;\n      this.view = source.view === null ? null : Object.assign({}, source.view);\n      return this;\n    },\n    setViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n      this.view = {\n        fullWidth: fullWidth,\n        fullHeight: fullHeight,\n        offsetX: x,\n        offsetY: y,\n        width: width,\n        height: height\n      };\n      this.updateProjectionMatrix();\n    },\n    clearViewOffset: function clearViewOffset() {\n      this.view = null;\n      this.updateProjectionMatrix();\n    },\n    updateProjectionMatrix: function updateProjectionMatrix() {\n      var dx = (this.right - this.left) / (2 * this.zoom);\n      var dy = (this.top - this.bottom) / (2 * this.zoom);\n      var cx = (this.right + this.left) / 2;\n      var cy = (this.top + this.bottom) / 2;\n      var left = cx - dx;\n      var right = cx + dx;\n      var top = cy + dy;\n      var bottom = cy - dy;\n\n      if (this.view !== null) {\n        var zoomW = this.zoom / (this.view.width / this.view.fullWidth);\n        var zoomH = this.zoom / (this.view.height / this.view.fullHeight);\n        var scaleW = (this.right - this.left) / this.view.width;\n        var scaleH = (this.top - this.bottom) / this.view.height;\n        left += scaleW * (this.view.offsetX / zoomW);\n        right = left + scaleW * (this.view.width / zoomW);\n        top -= scaleH * (this.view.offsetY / zoomH);\n        bottom = top - scaleH * (this.view.height / zoomH);\n      }\n\n      this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far);\n    },\n    toJSON: function toJSON(meta) {\n      var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n      data.object.zoom = this.zoom;\n      data.object.left = this.left;\n      data.object.right = this.right;\n      data.object.top = this.top;\n      data.object.bottom = this.bottom;\n      data.object.near = this.near;\n      data.object.far = this.far;\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\n      return data;\n    }\n  }); // File:src/cameras/PerspectiveCamera.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author greggman / http://games.greggman.com/\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author tschw\n   */\n\n  THREE.PerspectiveCamera = function (fov, aspect, near, far) {\n    THREE.Camera.call(this);\n    this.type = 'PerspectiveCamera';\n    this.fov = fov !== undefined ? fov : 50;\n    this.zoom = 1;\n    this.near = near !== undefined ? near : 0.1;\n    this.far = far !== undefined ? far : 2000;\n    this.focus = 10;\n    this.aspect = aspect !== undefined ? aspect : 1;\n    this.view = null;\n    this.filmGauge = 35; // width of the film (default in millimeters)\n\n    this.filmOffset = 0; // horizontal film offset (same unit as gauge)\n\n    this.updateProjectionMatrix();\n  };\n\n  THREE.PerspectiveCamera.prototype = Object.assign(Object.create(THREE.Camera.prototype), {\n    constructor: THREE.PerspectiveCamera,\n    copy: function copy(source) {\n      THREE.Camera.prototype.copy.call(this, source);\n      this.fov = source.fov;\n      this.zoom = source.zoom;\n      this.near = source.near;\n      this.far = source.far;\n      this.focus = source.focus;\n      this.aspect = source.aspect;\n      this.view = source.view === null ? null : Object.assign({}, source.view);\n      this.filmGauge = source.filmGauge;\n      this.filmOffset = source.filmOffset;\n      return this;\n    },\n\n    /**\n     * Sets the FOV by focal length in respect to the current .filmGauge.\n     *\n     * The default film gauge is 35, so that the focal length can be specified for\n     * a 35mm (full frame) camera.\n     *\n     * Values for focal length and film gauge must have the same unit.\n     */\n    setFocalLength: function setFocalLength(focalLength) {\n      // see http://www.bobatkins.com/photography/technical/field_of_view.html\n      var vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n      this.fov = THREE.Math.RAD2DEG * 2 * Math.atan(vExtentSlope);\n      this.updateProjectionMatrix();\n    },\n\n    /**\n     * Calculates the focal length from the current .fov and .filmGauge.\n     */\n    getFocalLength: function getFocalLength() {\n      var vExtentSlope = Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov);\n      return 0.5 * this.getFilmHeight() / vExtentSlope;\n    },\n    getEffectiveFOV: function getEffectiveFOV() {\n      return THREE.Math.RAD2DEG * 2 * Math.atan(Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / this.zoom);\n    },\n    getFilmWidth: function getFilmWidth() {\n      // film not completely covered in portrait format (aspect < 1)\n      return this.filmGauge * Math.min(this.aspect, 1);\n    },\n    getFilmHeight: function getFilmHeight() {\n      // film not completely covered in landscape format (aspect > 1)\n      return this.filmGauge / Math.max(this.aspect, 1);\n    },\n\n    /**\n     * Sets an offset in a larger frustum. This is useful for multi-window or\n     * multi-monitor/multi-machine setups.\n     *\n     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n     * the monitors are in grid like this\n     *\n     *   +---+---+---+\n     *   | A | B | C |\n     *   +---+---+---+\n     *   | D | E | F |\n     *   +---+---+---+\n     *\n     * then for each monitor you would call it like this\n     *\n     *   var w = 1920;\n     *   var h = 1080;\n     *   var fullWidth = w * 3;\n     *   var fullHeight = h * 2;\n     *\n     *   --A--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n     *   --B--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n     *   --C--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n     *   --D--\n     *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n     *   --E--\n     *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n     *   --F--\n     *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n     *\n     *   Note there is no reason monitors have to be the same size or in a grid.\n     */\n    setViewOffset: function setViewOffset(fullWidth, fullHeight, x, y, width, height) {\n      this.aspect = fullWidth / fullHeight;\n      this.view = {\n        fullWidth: fullWidth,\n        fullHeight: fullHeight,\n        offsetX: x,\n        offsetY: y,\n        width: width,\n        height: height\n      };\n      this.updateProjectionMatrix();\n    },\n    clearViewOffset: function clearViewOffset() {\n      this.view = null;\n      this.updateProjectionMatrix();\n    },\n    updateProjectionMatrix: function updateProjectionMatrix() {\n      var near = this.near,\n          top = near * Math.tan(THREE.Math.DEG2RAD * 0.5 * this.fov) / this.zoom,\n          height = 2 * top,\n          width = this.aspect * height,\n          left = -0.5 * width,\n          view = this.view;\n\n      if (view !== null) {\n        var fullWidth = view.fullWidth,\n            fullHeight = view.fullHeight;\n        left += view.offsetX * width / fullWidth;\n        top -= view.offsetY * height / fullHeight;\n        width *= view.width / fullWidth;\n        height *= view.height / fullHeight;\n      }\n\n      var skew = this.filmOffset;\n      if (skew !== 0) left += near * skew / this.getFilmWidth();\n      this.projectionMatrix.makeFrustum(left, left + width, top - height, top, near, this.far);\n    },\n    toJSON: function toJSON(meta) {\n      var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n      data.object.fov = this.fov;\n      data.object.zoom = this.zoom;\n      data.object.near = this.near;\n      data.object.far = this.far;\n      data.object.focus = this.focus;\n      data.object.aspect = this.aspect;\n      if (this.view !== null) data.object.view = Object.assign({}, this.view);\n      data.object.filmGauge = this.filmGauge;\n      data.object.filmOffset = this.filmOffset;\n      return data;\n    }\n  }); // File:src/cameras/StereoCamera.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.StereoCamera = function () {\n    this.type = 'StereoCamera';\n    this.aspect = 1;\n    this.cameraL = new THREE.PerspectiveCamera();\n    this.cameraL.layers.enable(1);\n    this.cameraL.matrixAutoUpdate = false;\n    this.cameraR = new THREE.PerspectiveCamera();\n    this.cameraR.layers.enable(2);\n    this.cameraR.matrixAutoUpdate = false;\n  };\n\n  Object.assign(THREE.StereoCamera.prototype, {\n    update: function () {\n      var focus, fov, aspect, near, far;\n      var eyeRight = new THREE.Matrix4();\n      var eyeLeft = new THREE.Matrix4();\n      return function update(camera) {\n        var needsUpdate = focus !== camera.focus || fov !== camera.fov || aspect !== camera.aspect * this.aspect || near !== camera.near || far !== camera.far;\n\n        if (needsUpdate) {\n          focus = camera.focus;\n          fov = camera.fov;\n          aspect = camera.aspect * this.aspect;\n          near = camera.near;\n          far = camera.far; // Off-axis stereoscopic effect based on\n          // http://paulbourke.net/stereographics/stereorender/\n\n          var projectionMatrix = camera.projectionMatrix.clone();\n          var eyeSep = 0.064 / 2;\n          var eyeSepOnProjection = eyeSep * near / focus;\n          var ymax = near * Math.tan(THREE.Math.DEG2RAD * fov * 0.5);\n          var xmin, xmax; // translate xOffset\n\n          eyeLeft.elements[12] = -eyeSep;\n          eyeRight.elements[12] = eyeSep; // for left eye\n\n          xmin = -ymax * aspect + eyeSepOnProjection;\n          xmax = ymax * aspect + eyeSepOnProjection;\n          projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n          projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n          this.cameraL.projectionMatrix.copy(projectionMatrix); // for right eye\n\n          xmin = -ymax * aspect - eyeSepOnProjection;\n          xmax = ymax * aspect - eyeSepOnProjection;\n          projectionMatrix.elements[0] = 2 * near / (xmax - xmin);\n          projectionMatrix.elements[8] = (xmax + xmin) / (xmax - xmin);\n          this.cameraR.projectionMatrix.copy(projectionMatrix);\n        }\n\n        this.cameraL.matrixWorld.copy(camera.matrixWorld).multiply(eyeLeft);\n        this.cameraR.matrixWorld.copy(camera.matrixWorld).multiply(eyeRight);\n      };\n    }()\n  }); // File:src/lights/Light.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Light = function (color, intensity) {\n    THREE.Object3D.call(this);\n    this.type = 'Light';\n    this.color = new THREE.Color(color);\n    this.intensity = intensity !== undefined ? intensity : 1;\n    this.receiveShadow = undefined;\n  };\n\n  THREE.Light.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Light,\n    copy: function copy(source) {\n      THREE.Object3D.prototype.copy.call(this, source);\n      this.color.copy(source.color);\n      this.intensity = source.intensity;\n      return this;\n    },\n    toJSON: function toJSON(meta) {\n      var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n      data.object.color = this.color.getHex();\n      data.object.intensity = this.intensity;\n      if (this.groundColor !== undefined) data.object.groundColor = this.groundColor.getHex();\n      if (this.distance !== undefined) data.object.distance = this.distance;\n      if (this.angle !== undefined) data.object.angle = this.angle;\n      if (this.decay !== undefined) data.object.decay = this.decay;\n      if (this.penumbra !== undefined) data.object.penumbra = this.penumbra;\n      return data;\n    }\n  }); // File:src/lights/LightShadow.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.LightShadow = function (camera) {\n    this.camera = camera;\n    this.bias = 0;\n    this.radius = 1;\n    this.mapSize = new THREE.Vector2(512, 512);\n    this.map = null;\n    this.matrix = new THREE.Matrix4();\n  };\n\n  Object.assign(THREE.LightShadow.prototype, {\n    copy: function copy(source) {\n      this.camera = source.camera.clone();\n      this.bias = source.bias;\n      this.radius = source.radius;\n      this.mapSize.copy(source.mapSize);\n      return this;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    }\n  }); // File:src/lights/AmbientLight.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.AmbientLight = function (color, intensity) {\n    THREE.Light.call(this, color, intensity);\n    this.type = 'AmbientLight';\n    this.castShadow = undefined;\n  };\n\n  THREE.AmbientLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n    constructor: THREE.AmbientLight\n  }); // File:src/lights/DirectionalLight.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.DirectionalLight = function (color, intensity) {\n    THREE.Light.call(this, color, intensity);\n    this.type = 'DirectionalLight';\n    this.position.copy(THREE.Object3D.DefaultUp);\n    this.updateMatrix();\n    this.target = new THREE.Object3D();\n    this.shadow = new THREE.DirectionalLightShadow();\n  };\n\n  THREE.DirectionalLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n    constructor: THREE.DirectionalLight,\n    copy: function copy(source) {\n      THREE.Light.prototype.copy.call(this, source);\n      this.target = source.target.clone();\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n  }); // File:src/lights/DirectionalLightShadow.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.DirectionalLightShadow = function (light) {\n    THREE.LightShadow.call(this, new THREE.OrthographicCamera(-5, 5, 5, -5, 0.5, 500));\n  };\n\n  THREE.DirectionalLightShadow.prototype = Object.assign(Object.create(THREE.LightShadow.prototype), {\n    constructor: THREE.DirectionalLightShadow\n  }); // File:src/lights/HemisphereLight.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.HemisphereLight = function (skyColor, groundColor, intensity) {\n    THREE.Light.call(this, skyColor, intensity);\n    this.type = 'HemisphereLight';\n    this.castShadow = undefined;\n    this.position.copy(THREE.Object3D.DefaultUp);\n    this.updateMatrix();\n    this.groundColor = new THREE.Color(groundColor);\n  };\n\n  THREE.HemisphereLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n    constructor: THREE.HemisphereLight,\n    copy: function copy(source) {\n      THREE.Light.prototype.copy.call(this, source);\n      this.groundColor.copy(source.groundColor);\n      return this;\n    }\n  }); // File:src/lights/PointLight.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.PointLight = function (color, intensity, distance, decay) {\n    THREE.Light.call(this, color, intensity);\n    this.type = 'PointLight';\n    Object.defineProperty(this, 'power', {\n      get: function get() {\n        // intensity = power per solid angle.\n        // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n        return this.intensity * 4 * Math.PI;\n      },\n      set: function set(power) {\n        // intensity = power per solid angle.\n        // ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n        this.intensity = power / (4 * Math.PI);\n      }\n    });\n    this.distance = distance !== undefined ? distance : 0;\n    this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n    this.shadow = new THREE.LightShadow(new THREE.PerspectiveCamera(90, 1, 0.5, 500));\n  };\n\n  THREE.PointLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n    constructor: THREE.PointLight,\n    copy: function copy(source) {\n      THREE.Light.prototype.copy.call(this, source);\n      this.distance = source.distance;\n      this.decay = source.decay;\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n  }); // File:src/lights/SpotLight.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.SpotLight = function (color, intensity, distance, angle, penumbra, decay) {\n    THREE.Light.call(this, color, intensity);\n    this.type = 'SpotLight';\n    this.position.copy(THREE.Object3D.DefaultUp);\n    this.updateMatrix();\n    this.target = new THREE.Object3D();\n    Object.defineProperty(this, 'power', {\n      get: function get() {\n        // intensity = power per solid angle.\n        // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n        return this.intensity * Math.PI;\n      },\n      set: function set(power) {\n        // intensity = power per solid angle.\n        // ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\n        this.intensity = power / Math.PI;\n      }\n    });\n    this.distance = distance !== undefined ? distance : 0;\n    this.angle = angle !== undefined ? angle : Math.PI / 3;\n    this.penumbra = penumbra !== undefined ? penumbra : 0;\n    this.decay = decay !== undefined ? decay : 1; // for physically correct lights, should be 2.\n\n    this.shadow = new THREE.SpotLightShadow();\n  };\n\n  THREE.SpotLight.prototype = Object.assign(Object.create(THREE.Light.prototype), {\n    constructor: THREE.SpotLight,\n    copy: function copy(source) {\n      THREE.Light.prototype.copy.call(this, source);\n      this.distance = source.distance;\n      this.angle = source.angle;\n      this.penumbra = source.penumbra;\n      this.decay = source.decay;\n      this.target = source.target.clone();\n      this.shadow = source.shadow.clone();\n      return this;\n    }\n  }); // File:src/lights/SpotLightShadow.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.SpotLightShadow = function () {\n    THREE.LightShadow.call(this, new THREE.PerspectiveCamera(50, 1, 0.5, 500));\n  };\n\n  THREE.SpotLightShadow.prototype = Object.assign(Object.create(THREE.LightShadow.prototype), {\n    constructor: THREE.SpotLightShadow,\n    update: function update(light) {\n      var fov = THREE.Math.RAD2DEG * 2 * light.angle;\n      var aspect = this.mapSize.width / this.mapSize.height;\n      var far = light.distance || 500;\n      var camera = this.camera;\n\n      if (fov !== camera.fov || aspect !== camera.aspect || far !== camera.far) {\n        camera.fov = fov;\n        camera.aspect = aspect;\n        camera.far = far;\n        camera.updateProjectionMatrix();\n      }\n    }\n  }); // File:src/loaders/AudioLoader.js\n\n  /**\n   * @author Reece Aaron Lecrivain / http://reecenotes.com/\n   */\n\n  THREE.AudioLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.AudioLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        var context = THREE.AudioContext;\n        context.decodeAudioData(buffer, function (audioBuffer) {\n          onLoad(audioBuffer);\n        });\n      }, onProgress, onError);\n    }\n  }); // File:src/loaders/Cache.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Cache = {\n    enabled: false,\n    files: {},\n    add: function add(key, file) {\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Adding key:', key );\n\n      this.files[key] = file;\n    },\n    get: function get(key) {\n      if (this.enabled === false) return; // console.log( 'THREE.Cache', 'Checking key:', key );\n\n      return this.files[key];\n    },\n    remove: function remove(key) {\n      delete this.files[key];\n    },\n    clear: function clear() {\n      this.files = {};\n    }\n  }; // File:src/loaders/Loader.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Loader = function () {\n    this.onLoadStart = function () {};\n\n    this.onLoadProgress = function () {};\n\n    this.onLoadComplete = function () {};\n  };\n\n  THREE.Loader.prototype = {\n    constructor: THREE.Loader,\n    crossOrigin: undefined,\n    extractUrlBase: function extractUrlBase(url) {\n      var parts = url.split('/');\n      if (parts.length === 1) return './';\n      parts.pop();\n      return parts.join('/') + '/';\n    },\n    initMaterials: function initMaterials(materials, texturePath, crossOrigin) {\n      var array = [];\n\n      for (var i = 0; i < materials.length; ++i) {\n        array[i] = this.createMaterial(materials[i], texturePath, crossOrigin);\n      }\n\n      return array;\n    },\n    createMaterial: function () {\n      var color, textureLoader, materialLoader;\n      return function createMaterial(m, texturePath, crossOrigin) {\n        if (color === undefined) color = new THREE.Color();\n        if (textureLoader === undefined) textureLoader = new THREE.TextureLoader();\n        if (materialLoader === undefined) materialLoader = new THREE.MaterialLoader(); // convert from old material format\n\n        var textures = {};\n\n        function loadTexture(path, repeat, offset, wrap, anisotropy) {\n          var fullPath = texturePath + path;\n          var loader = THREE.Loader.Handlers.get(fullPath);\n          var texture;\n\n          if (loader !== null) {\n            texture = loader.load(fullPath);\n          } else {\n            textureLoader.setCrossOrigin(crossOrigin);\n            texture = textureLoader.load(fullPath);\n          }\n\n          if (repeat !== undefined) {\n            texture.repeat.fromArray(repeat);\n            if (repeat[0] !== 1) texture.wrapS = THREE.RepeatWrapping;\n            if (repeat[1] !== 1) texture.wrapT = THREE.RepeatWrapping;\n          }\n\n          if (offset !== undefined) {\n            texture.offset.fromArray(offset);\n          }\n\n          if (wrap !== undefined) {\n            if (wrap[0] === 'repeat') texture.wrapS = THREE.RepeatWrapping;\n            if (wrap[0] === 'mirror') texture.wrapS = THREE.MirroredRepeatWrapping;\n            if (wrap[1] === 'repeat') texture.wrapT = THREE.RepeatWrapping;\n            if (wrap[1] === 'mirror') texture.wrapT = THREE.MirroredRepeatWrapping;\n          }\n\n          if (anisotropy !== undefined) {\n            texture.anisotropy = anisotropy;\n          }\n\n          var uuid = THREE.Math.generateUUID();\n          textures[uuid] = texture;\n          return uuid;\n        } //\n\n\n        var json = {\n          uuid: THREE.Math.generateUUID(),\n          type: 'MeshLambertMaterial'\n        };\n\n        for (var name in m) {\n          var value = m[name];\n\n          switch (name) {\n            case 'DbgColor':\n            case 'DbgIndex':\n            case 'opticalDensity':\n            case 'illumination':\n              break;\n\n            case 'DbgName':\n              json.name = value;\n              break;\n\n            case 'blending':\n              json.blending = THREE[value];\n              break;\n\n            case 'colorAmbient':\n            case 'mapAmbient':\n              console.warn('THREE.Loader.createMaterial:', name, 'is no longer supported.');\n              break;\n\n            case 'colorDiffuse':\n              json.color = color.fromArray(value).getHex();\n              break;\n\n            case 'colorSpecular':\n              json.specular = color.fromArray(value).getHex();\n              break;\n\n            case 'colorEmissive':\n              json.emissive = color.fromArray(value).getHex();\n              break;\n\n            case 'specularCoef':\n              json.shininess = value;\n              break;\n\n            case 'shading':\n              if (value.toLowerCase() === 'basic') json.type = 'MeshBasicMaterial';\n              if (value.toLowerCase() === 'phong') json.type = 'MeshPhongMaterial';\n              if (value.toLowerCase() === 'standard') json.type = 'MeshStandardMaterial';\n              break;\n\n            case 'mapDiffuse':\n              json.map = loadTexture(value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy);\n              break;\n\n            case 'mapDiffuseRepeat':\n            case 'mapDiffuseOffset':\n            case 'mapDiffuseWrap':\n            case 'mapDiffuseAnisotropy':\n              break;\n\n            case 'mapEmissive':\n              json.emissiveMap = loadTexture(value, m.mapEmissiveRepeat, m.mapEmissiveOffset, m.mapEmissiveWrap, m.mapEmissiveAnisotropy);\n              break;\n\n            case 'mapEmissiveRepeat':\n            case 'mapEmissiveOffset':\n            case 'mapEmissiveWrap':\n            case 'mapEmissiveAnisotropy':\n              break;\n\n            case 'mapLight':\n              json.lightMap = loadTexture(value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy);\n              break;\n\n            case 'mapLightRepeat':\n            case 'mapLightOffset':\n            case 'mapLightWrap':\n            case 'mapLightAnisotropy':\n              break;\n\n            case 'mapAO':\n              json.aoMap = loadTexture(value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy);\n              break;\n\n            case 'mapAORepeat':\n            case 'mapAOOffset':\n            case 'mapAOWrap':\n            case 'mapAOAnisotropy':\n              break;\n\n            case 'mapBump':\n              json.bumpMap = loadTexture(value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy);\n              break;\n\n            case 'mapBumpScale':\n              json.bumpScale = value;\n              break;\n\n            case 'mapBumpRepeat':\n            case 'mapBumpOffset':\n            case 'mapBumpWrap':\n            case 'mapBumpAnisotropy':\n              break;\n\n            case 'mapNormal':\n              json.normalMap = loadTexture(value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy);\n              break;\n\n            case 'mapNormalFactor':\n              json.normalScale = [value, value];\n              break;\n\n            case 'mapNormalRepeat':\n            case 'mapNormalOffset':\n            case 'mapNormalWrap':\n            case 'mapNormalAnisotropy':\n              break;\n\n            case 'mapSpecular':\n              json.specularMap = loadTexture(value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy);\n              break;\n\n            case 'mapSpecularRepeat':\n            case 'mapSpecularOffset':\n            case 'mapSpecularWrap':\n            case 'mapSpecularAnisotropy':\n              break;\n\n            case 'mapMetalness':\n              json.metalnessMap = loadTexture(value, m.mapMetalnessRepeat, m.mapMetalnessOffset, m.mapMetalnessWrap, m.mapMetalnessAnisotropy);\n              break;\n\n            case 'mapMetalnessRepeat':\n            case 'mapMetalnessOffset':\n            case 'mapMetalnessWrap':\n            case 'mapMetalnessAnisotropy':\n              break;\n\n            case 'mapRoughness':\n              json.roughnessMap = loadTexture(value, m.mapRoughnessRepeat, m.mapRoughnessOffset, m.mapRoughnessWrap, m.mapRoughnessAnisotropy);\n              break;\n\n            case 'mapRoughnessRepeat':\n            case 'mapRoughnessOffset':\n            case 'mapRoughnessWrap':\n            case 'mapRoughnessAnisotropy':\n              break;\n\n            case 'mapAlpha':\n              json.alphaMap = loadTexture(value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy);\n              break;\n\n            case 'mapAlphaRepeat':\n            case 'mapAlphaOffset':\n            case 'mapAlphaWrap':\n            case 'mapAlphaAnisotropy':\n              break;\n\n            case 'flipSided':\n              json.side = THREE.BackSide;\n              break;\n\n            case 'doubleSided':\n              json.side = THREE.DoubleSide;\n              break;\n\n            case 'transparency':\n              console.warn('THREE.Loader.createMaterial: transparency has been renamed to opacity');\n              json.opacity = value;\n              break;\n\n            case 'depthTest':\n            case 'depthWrite':\n            case 'colorWrite':\n            case 'opacity':\n            case 'reflectivity':\n            case 'transparent':\n            case 'visible':\n            case 'wireframe':\n              json[name] = value;\n              break;\n\n            case 'vertexColors':\n              if (value === true) json.vertexColors = THREE.VertexColors;\n              if (value === 'face') json.vertexColors = THREE.FaceColors;\n              break;\n\n            default:\n              console.error('THREE.Loader.createMaterial: Unsupported', name, value);\n              break;\n          }\n        }\n\n        if (json.type === 'MeshBasicMaterial') delete json.emissive;\n        if (json.type !== 'MeshPhongMaterial') delete json.specular;\n        if (json.opacity < 1) json.transparent = true;\n        materialLoader.setTextures(textures);\n        return materialLoader.parse(json);\n      };\n    }()\n  };\n  THREE.Loader.Handlers = {\n    handlers: [],\n    add: function add(regex, loader) {\n      this.handlers.push(regex, loader);\n    },\n    get: function get(file) {\n      var handlers = this.handlers;\n\n      for (var i = 0, l = handlers.length; i < l; i += 2) {\n        var regex = handlers[i];\n        var loader = handlers[i + 1];\n\n        if (regex.test(file)) {\n          return loader;\n        }\n      }\n\n      return null;\n    }\n  }; // File:src/loaders/XHRLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.XHRLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.XHRLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      if (this.path !== undefined) url = this.path + url;\n      var scope = this;\n      var cached = THREE.Cache.get(url);\n\n      if (cached !== undefined) {\n        scope.manager.itemStart(url);\n        setTimeout(function () {\n          if (onLoad) onLoad(cached);\n          scope.manager.itemEnd(url);\n        }, 0);\n        return cached;\n      }\n\n      var request = new XMLHttpRequest();\n      request.overrideMimeType('text/plain');\n      request.open('GET', url, true);\n      request.addEventListener('load', function (event) {\n        var response = event.target.response;\n        THREE.Cache.add(url, response);\n\n        if (this.status === 200) {\n          if (onLoad) onLoad(response);\n          scope.manager.itemEnd(url);\n        } else if (this.status === 0) {\n          // Some browsers return HTTP Status 0 when using non-http protocol\n          // e.g. 'file://' or 'data://'. Handle as success.\n          console.warn('THREE.XHRLoader: HTTP Status 0 received.');\n          if (onLoad) onLoad(response);\n          scope.manager.itemEnd(url);\n        } else {\n          if (onError) onError(event);\n          scope.manager.itemError(url);\n        }\n      }, false);\n\n      if (onProgress !== undefined) {\n        request.addEventListener('progress', function (event) {\n          onProgress(event);\n        }, false);\n      }\n\n      request.addEventListener('error', function (event) {\n        if (onError) onError(event);\n        scope.manager.itemError(url);\n      }, false);\n      if (this.responseType !== undefined) request.responseType = this.responseType;\n      if (this.withCredentials !== undefined) request.withCredentials = this.withCredentials;\n      request.send(null);\n      scope.manager.itemStart(url);\n      return request;\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    },\n    setResponseType: function setResponseType(value) {\n      this.responseType = value;\n      return this;\n    },\n    setWithCredentials: function setWithCredentials(value) {\n      this.withCredentials = value;\n      return this;\n    }\n  }); // File:src/loaders/FontLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.FontLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.FontLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.load(url, function (text) {\n        var json;\n\n        try {\n          json = JSON.parse(text);\n        } catch (e) {\n          console.warn('THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.');\n          json = JSON.parse(text.substring(65, text.length - 2));\n        }\n\n        var font = scope.parse(json);\n        if (onLoad) onLoad(font);\n      }, onProgress, onError);\n    },\n    parse: function parse(json) {\n      return new THREE.Font(json);\n    }\n  }); // File:src/loaders/ImageLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.ImageLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.ImageLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var image = document.createElementNS('http://www.w3.org/1999/xhtml', 'img');\n\n      image.onload = function () {\n        URL.revokeObjectURL(image.src);\n        if (onLoad) onLoad(image);\n        scope.manager.itemEnd(url);\n      };\n\n      if (url.indexOf('data:') === 0) {\n        image.src = url;\n      } else {\n        var loader = new THREE.XHRLoader();\n        loader.setPath(this.path);\n        loader.setResponseType('blob');\n        loader.load(url, function (blob) {\n          image.src = URL.createObjectURL(blob);\n        }, onProgress, onError);\n      }\n\n      scope.manager.itemStart(url);\n      return image;\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    }\n  }); // File:src/loaders/JSONLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.JSONLoader = function (manager) {\n    if (typeof manager === 'boolean') {\n      console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');\n      manager = undefined;\n    }\n\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.withCredentials = false;\n  };\n\n  Object.assign(THREE.JSONLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texturePath = this.texturePath && typeof this.texturePath === \"string\" ? this.texturePath : THREE.Loader.prototype.extractUrlBase(url);\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        var json = JSON.parse(text);\n        var metadata = json.metadata;\n\n        if (metadata !== undefined) {\n          var type = metadata.type;\n\n          if (type !== undefined) {\n            if (type.toLowerCase() === 'object') {\n              console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.');\n              return;\n            }\n\n            if (type.toLowerCase() === 'scene') {\n              console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.');\n              return;\n            }\n          }\n        }\n\n        var object = scope.parse(json, texturePath);\n        onLoad(object.geometry, object.materials);\n      }, onProgress, onError);\n    },\n    setTexturePath: function setTexturePath(value) {\n      this.texturePath = value;\n    },\n    parse: function parse(json, texturePath) {\n      var geometry = new THREE.Geometry(),\n          scale = json.scale !== undefined ? 1.0 / json.scale : 1.0;\n      parseModel(scale);\n      parseSkin();\n      parseMorphing(scale);\n      parseAnimations();\n      geometry.computeFaceNormals();\n      geometry.computeBoundingSphere();\n\n      function parseModel(scale) {\n        function isBitSet(value, position) {\n          return value & 1 << position;\n        }\n\n        var i,\n            j,\n            fi,\n            offset,\n            zLength,\n            colorIndex,\n            normalIndex,\n            uvIndex,\n            materialIndex,\n            type,\n            isQuad,\n            hasMaterial,\n            hasFaceVertexUv,\n            hasFaceNormal,\n            hasFaceVertexNormal,\n            hasFaceColor,\n            hasFaceVertexColor,\n            vertex,\n            face,\n            faceA,\n            faceB,\n            hex,\n            normal,\n            uvLayer,\n            uv,\n            u,\n            v,\n            faces = json.faces,\n            vertices = json.vertices,\n            normals = json.normals,\n            colors = json.colors,\n            nUvLayers = 0;\n\n        if (json.uvs !== undefined) {\n          // disregard empty arrays\n          for (i = 0; i < json.uvs.length; i++) {\n            if (json.uvs[i].length) nUvLayers++;\n          }\n\n          for (i = 0; i < nUvLayers; i++) {\n            geometry.faceVertexUvs[i] = [];\n          }\n        }\n\n        offset = 0;\n        zLength = vertices.length;\n\n        while (offset < zLength) {\n          vertex = new THREE.Vector3();\n          vertex.x = vertices[offset++] * scale;\n          vertex.y = vertices[offset++] * scale;\n          vertex.z = vertices[offset++] * scale;\n          geometry.vertices.push(vertex);\n        }\n\n        offset = 0;\n        zLength = faces.length;\n\n        while (offset < zLength) {\n          type = faces[offset++];\n          isQuad = isBitSet(type, 0);\n          hasMaterial = isBitSet(type, 1);\n          hasFaceVertexUv = isBitSet(type, 3);\n          hasFaceNormal = isBitSet(type, 4);\n          hasFaceVertexNormal = isBitSet(type, 5);\n          hasFaceColor = isBitSet(type, 6);\n          hasFaceVertexColor = isBitSet(type, 7); // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n          if (isQuad) {\n            faceA = new THREE.Face3();\n            faceA.a = faces[offset];\n            faceA.b = faces[offset + 1];\n            faceA.c = faces[offset + 3];\n            faceB = new THREE.Face3();\n            faceB.a = faces[offset + 1];\n            faceB.b = faces[offset + 2];\n            faceB.c = faces[offset + 3];\n            offset += 4;\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              faceA.materialIndex = materialIndex;\n              faceB.materialIndex = materialIndex;\n            } // to get face <=> uv index correspondence\n\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n                geometry.faceVertexUvs[i][fi] = [];\n                geometry.faceVertexUvs[i][fi + 1] = [];\n\n                for (j = 0; j < 4; j++) {\n                  uvIndex = faces[offset++];\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n                  uv = new THREE.Vector2(u, v);\n                  if (j !== 2) geometry.faceVertexUvs[i][fi].push(uv);\n                  if (j !== 0) geometry.faceVertexUvs[i][fi + 1].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n              faceA.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n              faceB.normal.copy(faceA.normal);\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 4; i++) {\n                normalIndex = faces[offset++] * 3;\n                normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                if (i !== 2) faceA.vertexNormals.push(normal);\n                if (i !== 0) faceB.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              hex = colors[colorIndex];\n              faceA.color.setHex(hex);\n              faceB.color.setHex(hex);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 4; i++) {\n                colorIndex = faces[offset++];\n                hex = colors[colorIndex];\n                if (i !== 2) faceA.vertexColors.push(new THREE.Color(hex));\n                if (i !== 0) faceB.vertexColors.push(new THREE.Color(hex));\n              }\n            }\n\n            geometry.faces.push(faceA);\n            geometry.faces.push(faceB);\n          } else {\n            face = new THREE.Face3();\n            face.a = faces[offset++];\n            face.b = faces[offset++];\n            face.c = faces[offset++];\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              face.materialIndex = materialIndex;\n            } // to get face <=> uv index correspondence\n\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n                geometry.faceVertexUvs[i][fi] = [];\n\n                for (j = 0; j < 3; j++) {\n                  uvIndex = faces[offset++];\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n                  uv = new THREE.Vector2(u, v);\n                  geometry.faceVertexUvs[i][fi].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n              face.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 3; i++) {\n                normalIndex = faces[offset++] * 3;\n                normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                face.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              face.color.setHex(colors[colorIndex]);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 3; i++) {\n                colorIndex = faces[offset++];\n                face.vertexColors.push(new THREE.Color(colors[colorIndex]));\n              }\n            }\n\n            geometry.faces.push(face);\n          }\n        }\n      }\n\n      function parseSkin() {\n        var influencesPerVertex = json.influencesPerVertex !== undefined ? json.influencesPerVertex : 2;\n\n        if (json.skinWeights) {\n          for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {\n            var x = json.skinWeights[i];\n            var y = influencesPerVertex > 1 ? json.skinWeights[i + 1] : 0;\n            var z = influencesPerVertex > 2 ? json.skinWeights[i + 2] : 0;\n            var w = influencesPerVertex > 3 ? json.skinWeights[i + 3] : 0;\n            geometry.skinWeights.push(new THREE.Vector4(x, y, z, w));\n          }\n        }\n\n        if (json.skinIndices) {\n          for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {\n            var a = json.skinIndices[i];\n            var b = influencesPerVertex > 1 ? json.skinIndices[i + 1] : 0;\n            var c = influencesPerVertex > 2 ? json.skinIndices[i + 2] : 0;\n            var d = influencesPerVertex > 3 ? json.skinIndices[i + 3] : 0;\n            geometry.skinIndices.push(new THREE.Vector4(a, b, c, d));\n          }\n        }\n\n        geometry.bones = json.bones;\n\n        if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {\n          console.warn('When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' + geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.');\n        }\n      }\n\n      function parseMorphing(scale) {\n        if (json.morphTargets !== undefined) {\n          for (var i = 0, l = json.morphTargets.length; i < l; i++) {\n            geometry.morphTargets[i] = {};\n            geometry.morphTargets[i].name = json.morphTargets[i].name;\n            geometry.morphTargets[i].vertices = [];\n            var dstVertices = geometry.morphTargets[i].vertices;\n            var srcVertices = json.morphTargets[i].vertices;\n\n            for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {\n              var vertex = new THREE.Vector3();\n              vertex.x = srcVertices[v] * scale;\n              vertex.y = srcVertices[v + 1] * scale;\n              vertex.z = srcVertices[v + 2] * scale;\n              dstVertices.push(vertex);\n            }\n          }\n        }\n\n        if (json.morphColors !== undefined && json.morphColors.length > 0) {\n          console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');\n          var faces = geometry.faces;\n          var morphColors = json.morphColors[0].colors;\n\n          for (var i = 0, l = faces.length; i < l; i++) {\n            faces[i].color.fromArray(morphColors, i * 3);\n          }\n        }\n      }\n\n      function parseAnimations() {\n        var outputAnimations = []; // parse old style Bone/Hierarchy animations\n\n        var animations = [];\n\n        if (json.animation !== undefined) {\n          animations.push(json.animation);\n        }\n\n        if (json.animations !== undefined) {\n          if (json.animations.length) {\n            animations = animations.concat(json.animations);\n          } else {\n            animations.push(json.animations);\n          }\n        }\n\n        for (var i = 0; i < animations.length; i++) {\n          var clip = THREE.AnimationClip.parseAnimation(animations[i], geometry.bones);\n          if (clip) outputAnimations.push(clip);\n        } // parse implicit morph animations\n\n\n        if (geometry.morphTargets) {\n          // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n          var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);\n          outputAnimations = outputAnimations.concat(morphAnimationClips);\n        }\n\n        if (outputAnimations.length > 0) geometry.animations = outputAnimations;\n      }\n\n      if (json.materials === undefined || json.materials.length === 0) {\n        return {\n          geometry: geometry\n        };\n      } else {\n        var materials = THREE.Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);\n        return {\n          geometry: geometry,\n          materials: materials\n        };\n      }\n    }\n  }); // File:src/loaders/LoadingManager.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.LoadingManager = function (onLoad, onProgress, onError) {\n    var scope = this;\n    var isLoading = false,\n        itemsLoaded = 0,\n        itemsTotal = 0;\n    this.onStart = undefined;\n    this.onLoad = onLoad;\n    this.onProgress = onProgress;\n    this.onError = onError;\n\n    this.itemStart = function (url) {\n      itemsTotal++;\n\n      if (isLoading === false) {\n        if (scope.onStart !== undefined) {\n          scope.onStart(url, itemsLoaded, itemsTotal);\n        }\n      }\n\n      isLoading = true;\n    };\n\n    this.itemEnd = function (url) {\n      itemsLoaded++;\n\n      if (scope.onProgress !== undefined) {\n        scope.onProgress(url, itemsLoaded, itemsTotal);\n      }\n\n      if (itemsLoaded === itemsTotal) {\n        isLoading = false;\n\n        if (scope.onLoad !== undefined) {\n          scope.onLoad();\n        }\n      }\n    };\n\n    this.itemError = function (url) {\n      if (scope.onError !== undefined) {\n        scope.onError(url);\n      }\n    };\n  };\n\n  THREE.DefaultLoadingManager = new THREE.LoadingManager(); // File:src/loaders/BufferGeometryLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.BufferGeometryLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.BufferGeometryLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.XHRLoader(scope.manager);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(JSON.parse(text)));\n      }, onProgress, onError);\n    },\n    parse: function parse(json) {\n      var geometry = new THREE.BufferGeometry();\n      var index = json.data.index;\n      var TYPED_ARRAYS = {\n        'Int8Array': Int8Array,\n        'Uint8Array': Uint8Array,\n        'Uint8ClampedArray': Uint8ClampedArray,\n        'Int16Array': Int16Array,\n        'Uint16Array': Uint16Array,\n        'Int32Array': Int32Array,\n        'Uint32Array': Uint32Array,\n        'Float32Array': Float32Array,\n        'Float64Array': Float64Array\n      };\n\n      if (index !== undefined) {\n        var typedArray = new TYPED_ARRAYS[index.type](index.array);\n        geometry.setIndex(new THREE.BufferAttribute(typedArray, 1));\n      }\n\n      var attributes = json.data.attributes;\n\n      for (var key in attributes) {\n        var attribute = attributes[key];\n        var typedArray = new TYPED_ARRAYS[attribute.type](attribute.array);\n        geometry.addAttribute(key, new THREE.BufferAttribute(typedArray, attribute.itemSize, attribute.normalized));\n      }\n\n      var groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n      if (groups !== undefined) {\n        for (var i = 0, n = groups.length; i !== n; ++i) {\n          var group = groups[i];\n          geometry.addGroup(group.start, group.count, group.materialIndex);\n        }\n      }\n\n      var boundingSphere = json.data.boundingSphere;\n\n      if (boundingSphere !== undefined) {\n        var center = new THREE.Vector3();\n\n        if (boundingSphere.center !== undefined) {\n          center.fromArray(boundingSphere.center);\n        }\n\n        geometry.boundingSphere = new THREE.Sphere(center, boundingSphere.radius);\n      }\n\n      return geometry;\n    }\n  }); // File:src/loaders/MaterialLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.MaterialLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.textures = {};\n  };\n\n  Object.assign(THREE.MaterialLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.XHRLoader(scope.manager);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(JSON.parse(text)));\n      }, onProgress, onError);\n    },\n    setTextures: function setTextures(value) {\n      this.textures = value;\n    },\n    getTexture: function getTexture(name) {\n      var textures = this.textures;\n\n      if (textures[name] === undefined) {\n        console.warn('THREE.MaterialLoader: Undefined texture', name);\n      }\n\n      return textures[name];\n    },\n    parse: function parse(json) {\n      var material = new THREE[json.type]();\n      if (json.uuid !== undefined) material.uuid = json.uuid;\n      if (json.name !== undefined) material.name = json.name;\n      if (json.color !== undefined) material.color.setHex(json.color);\n      if (json.roughness !== undefined) material.roughness = json.roughness;\n      if (json.metalness !== undefined) material.metalness = json.metalness;\n      if (json.emissive !== undefined) material.emissive.setHex(json.emissive);\n      if (json.specular !== undefined) material.specular.setHex(json.specular);\n      if (json.shininess !== undefined) material.shininess = json.shininess;\n      if (json.uniforms !== undefined) material.uniforms = json.uniforms;\n      if (json.vertexShader !== undefined) material.vertexShader = json.vertexShader;\n      if (json.fragmentShader !== undefined) material.fragmentShader = json.fragmentShader;\n      if (json.vertexColors !== undefined) material.vertexColors = json.vertexColors;\n      if (json.shading !== undefined) material.shading = json.shading;\n      if (json.blending !== undefined) material.blending = json.blending;\n      if (json.side !== undefined) material.side = json.side;\n      if (json.opacity !== undefined) material.opacity = json.opacity;\n      if (json.transparent !== undefined) material.transparent = json.transparent;\n      if (json.alphaTest !== undefined) material.alphaTest = json.alphaTest;\n      if (json.depthTest !== undefined) material.depthTest = json.depthTest;\n      if (json.depthWrite !== undefined) material.depthWrite = json.depthWrite;\n      if (json.colorWrite !== undefined) material.colorWrite = json.colorWrite;\n      if (json.wireframe !== undefined) material.wireframe = json.wireframe;\n      if (json.wireframeLinewidth !== undefined) material.wireframeLinewidth = json.wireframeLinewidth; // for PointsMaterial\n\n      if (json.size !== undefined) material.size = json.size;\n      if (json.sizeAttenuation !== undefined) material.sizeAttenuation = json.sizeAttenuation; // maps\n\n      if (json.map !== undefined) material.map = this.getTexture(json.map);\n\n      if (json.alphaMap !== undefined) {\n        material.alphaMap = this.getTexture(json.alphaMap);\n        material.transparent = true;\n      }\n\n      if (json.bumpMap !== undefined) material.bumpMap = this.getTexture(json.bumpMap);\n      if (json.bumpScale !== undefined) material.bumpScale = json.bumpScale;\n      if (json.normalMap !== undefined) material.normalMap = this.getTexture(json.normalMap);\n\n      if (json.normalScale !== undefined) {\n        var normalScale = json.normalScale;\n\n        if (Array.isArray(normalScale) === false) {\n          // Blender exporter used to export a scalar. See #7459\n          normalScale = [normalScale, normalScale];\n        }\n\n        material.normalScale = new THREE.Vector2().fromArray(normalScale);\n      }\n\n      if (json.displacementMap !== undefined) material.displacementMap = this.getTexture(json.displacementMap);\n      if (json.displacementScale !== undefined) material.displacementScale = json.displacementScale;\n      if (json.displacementBias !== undefined) material.displacementBias = json.displacementBias;\n      if (json.roughnessMap !== undefined) material.roughnessMap = this.getTexture(json.roughnessMap);\n      if (json.metalnessMap !== undefined) material.metalnessMap = this.getTexture(json.metalnessMap);\n      if (json.emissiveMap !== undefined) material.emissiveMap = this.getTexture(json.emissiveMap);\n      if (json.emissiveIntensity !== undefined) material.emissiveIntensity = json.emissiveIntensity;\n      if (json.specularMap !== undefined) material.specularMap = this.getTexture(json.specularMap);\n\n      if (json.envMap !== undefined) {\n        material.envMap = this.getTexture(json.envMap);\n        material.combine = THREE.MultiplyOperation;\n      }\n\n      if (json.reflectivity !== undefined) material.reflectivity = json.reflectivity;\n      if (json.lightMap !== undefined) material.lightMap = this.getTexture(json.lightMap);\n      if (json.lightMapIntensity !== undefined) material.lightMapIntensity = json.lightMapIntensity;\n      if (json.aoMap !== undefined) material.aoMap = this.getTexture(json.aoMap);\n      if (json.aoMapIntensity !== undefined) material.aoMapIntensity = json.aoMapIntensity; // MultiMaterial\n\n      if (json.materials !== undefined) {\n        for (var i = 0, l = json.materials.length; i < l; i++) {\n          material.materials.push(this.parse(json.materials[i]));\n        }\n      }\n\n      return material;\n    }\n  }); // File:src/loaders/ObjectLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.ObjectLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.texturePath = '';\n  };\n\n  Object.assign(THREE.ObjectLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      if (this.texturePath === '') {\n        this.texturePath = url.substring(0, url.lastIndexOf('/') + 1);\n      }\n\n      var scope = this;\n      var loader = new THREE.XHRLoader(scope.manager);\n      loader.load(url, function (text) {\n        scope.parse(JSON.parse(text), onLoad);\n      }, onProgress, onError);\n    },\n    setTexturePath: function setTexturePath(value) {\n      this.texturePath = value;\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n    },\n    parse: function parse(json, onLoad) {\n      var geometries = this.parseGeometries(json.geometries);\n      var images = this.parseImages(json.images, function () {\n        if (onLoad !== undefined) onLoad(object);\n      });\n      var textures = this.parseTextures(json.textures, images);\n      var materials = this.parseMaterials(json.materials, textures);\n      var object = this.parseObject(json.object, geometries, materials);\n\n      if (json.animations) {\n        object.animations = this.parseAnimations(json.animations);\n      }\n\n      if (json.images === undefined || json.images.length === 0) {\n        if (onLoad !== undefined) onLoad(object);\n      }\n\n      return object;\n    },\n    parseGeometries: function parseGeometries(json) {\n      var geometries = {};\n\n      if (json !== undefined) {\n        var geometryLoader = new THREE.JSONLoader();\n        var bufferGeometryLoader = new THREE.BufferGeometryLoader();\n\n        for (var i = 0, l = json.length; i < l; i++) {\n          var geometry;\n          var data = json[i];\n\n          switch (data.type) {\n            case 'PlaneGeometry':\n            case 'PlaneBufferGeometry':\n              geometry = new THREE[data.type](data.width, data.height, data.widthSegments, data.heightSegments);\n              break;\n\n            case 'BoxGeometry':\n            case 'BoxBufferGeometry':\n            case 'CubeGeometry':\n              // backwards compatible\n              geometry = new THREE[data.type](data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);\n              break;\n\n            case 'CircleGeometry':\n            case 'CircleBufferGeometry':\n              geometry = new THREE[data.type](data.radius, data.segments, data.thetaStart, data.thetaLength);\n              break;\n\n            case 'CylinderGeometry':\n            case 'CylinderBufferGeometry':\n              geometry = new THREE[data.type](data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n              break;\n\n            case 'ConeGeometry':\n            case 'ConeBufferGeometry':\n              geometry = new THREE[data.type](data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);\n              break;\n\n            case 'SphereGeometry':\n            case 'SphereBufferGeometry':\n              geometry = new THREE[data.type](data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);\n              break;\n\n            case 'DodecahedronGeometry':\n            case 'IcosahedronGeometry':\n            case 'OctahedronGeometry':\n            case 'TetrahedronGeometry':\n              geometry = new THREE[data.type](data.radius, data.detail);\n              break;\n\n            case 'RingGeometry':\n            case 'RingBufferGeometry':\n              geometry = new THREE[data.type](data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);\n              break;\n\n            case 'TorusGeometry':\n            case 'TorusBufferGeometry':\n              geometry = new THREE[data.type](data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);\n              break;\n\n            case 'TorusKnotGeometry':\n            case 'TorusKnotBufferGeometry':\n              geometry = new THREE[data.type](data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);\n              break;\n\n            case 'LatheGeometry':\n            case 'LatheBufferGeometry':\n              geometry = new THREE[data.type](data.points, data.segments, data.phiStart, data.phiLength);\n              break;\n\n            case 'BufferGeometry':\n              geometry = bufferGeometryLoader.parse(data);\n              break;\n\n            case 'Geometry':\n              geometry = geometryLoader.parse(data.data, this.texturePath).geometry;\n              break;\n\n            default:\n              console.warn('THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"');\n              continue;\n          }\n\n          geometry.uuid = data.uuid;\n          if (data.name !== undefined) geometry.name = data.name;\n          geometries[data.uuid] = geometry;\n        }\n      }\n\n      return geometries;\n    },\n    parseMaterials: function parseMaterials(json, textures) {\n      var materials = {};\n\n      if (json !== undefined) {\n        var loader = new THREE.MaterialLoader();\n        loader.setTextures(textures);\n\n        for (var i = 0, l = json.length; i < l; i++) {\n          var material = loader.parse(json[i]);\n          materials[material.uuid] = material;\n        }\n      }\n\n      return materials;\n    },\n    parseAnimations: function parseAnimations(json) {\n      var animations = [];\n\n      for (var i = 0; i < json.length; i++) {\n        var clip = THREE.AnimationClip.parse(json[i]);\n        animations.push(clip);\n      }\n\n      return animations;\n    },\n    parseImages: function parseImages(json, onLoad) {\n      var scope = this;\n      var images = {};\n\n      function loadImage(url) {\n        scope.manager.itemStart(url);\n        return loader.load(url, function () {\n          scope.manager.itemEnd(url);\n        });\n      }\n\n      if (json !== undefined && json.length > 0) {\n        var manager = new THREE.LoadingManager(onLoad);\n        var loader = new THREE.ImageLoader(manager);\n        loader.setCrossOrigin(this.crossOrigin);\n\n        for (var i = 0, l = json.length; i < l; i++) {\n          var image = json[i];\n          var path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(image.url) ? image.url : scope.texturePath + image.url;\n          images[image.uuid] = loadImage(path);\n        }\n      }\n\n      return images;\n    },\n    parseTextures: function parseTextures(json, images) {\n      function parseConstant(value) {\n        if (typeof value === 'number') return value;\n        console.warn('THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value);\n        return THREE[value];\n      }\n\n      var textures = {};\n\n      if (json !== undefined) {\n        for (var i = 0, l = json.length; i < l; i++) {\n          var data = json[i];\n\n          if (data.image === undefined) {\n            console.warn('THREE.ObjectLoader: No \"image\" specified for', data.uuid);\n          }\n\n          if (images[data.image] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined image', data.image);\n          }\n\n          var texture = new THREE.Texture(images[data.image]);\n          texture.needsUpdate = true;\n          texture.uuid = data.uuid;\n          if (data.name !== undefined) texture.name = data.name;\n          if (data.mapping !== undefined) texture.mapping = parseConstant(data.mapping);\n          if (data.offset !== undefined) texture.offset.fromArray(data.offset);\n          if (data.repeat !== undefined) texture.repeat.fromArray(data.repeat);\n\n          if (data.wrap !== undefined) {\n            texture.wrapS = parseConstant(data.wrap[0]);\n            texture.wrapT = parseConstant(data.wrap[1]);\n          }\n\n          if (data.minFilter !== undefined) texture.minFilter = parseConstant(data.minFilter);\n          if (data.magFilter !== undefined) texture.magFilter = parseConstant(data.magFilter);\n          if (data.anisotropy !== undefined) texture.anisotropy = data.anisotropy;\n          if (data.flipY !== undefined) texture.flipY = data.flipY;\n          textures[data.uuid] = texture;\n        }\n      }\n\n      return textures;\n    },\n    parseObject: function () {\n      var matrix = new THREE.Matrix4();\n      return function parseObject(data, geometries, materials) {\n        var object;\n\n        function getGeometry(name) {\n          if (geometries[name] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined geometry', name);\n          }\n\n          return geometries[name];\n        }\n\n        function getMaterial(name) {\n          if (name === undefined) return undefined;\n\n          if (materials[name] === undefined) {\n            console.warn('THREE.ObjectLoader: Undefined material', name);\n          }\n\n          return materials[name];\n        }\n\n        switch (data.type) {\n          case 'Scene':\n            object = new THREE.Scene();\n            break;\n\n          case 'PerspectiveCamera':\n            object = new THREE.PerspectiveCamera(data.fov, data.aspect, data.near, data.far);\n            if (data.focus !== undefined) object.focus = data.focus;\n            if (data.zoom !== undefined) object.zoom = data.zoom;\n            if (data.filmGauge !== undefined) object.filmGauge = data.filmGauge;\n            if (data.filmOffset !== undefined) object.filmOffset = data.filmOffset;\n            if (data.view !== undefined) object.view = Object.assign({}, data.view);\n            break;\n\n          case 'OrthographicCamera':\n            object = new THREE.OrthographicCamera(data.left, data.right, data.top, data.bottom, data.near, data.far);\n            break;\n\n          case 'AmbientLight':\n            object = new THREE.AmbientLight(data.color, data.intensity);\n            break;\n\n          case 'DirectionalLight':\n            object = new THREE.DirectionalLight(data.color, data.intensity);\n            break;\n\n          case 'PointLight':\n            object = new THREE.PointLight(data.color, data.intensity, data.distance, data.decay);\n            break;\n\n          case 'SpotLight':\n            object = new THREE.SpotLight(data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay);\n            break;\n\n          case 'HemisphereLight':\n            object = new THREE.HemisphereLight(data.color, data.groundColor, data.intensity);\n            break;\n\n          case 'Mesh':\n            var geometry = getGeometry(data.geometry);\n            var material = getMaterial(data.material);\n\n            if (geometry.bones && geometry.bones.length > 0) {\n              object = new THREE.SkinnedMesh(geometry, material);\n            } else {\n              object = new THREE.Mesh(geometry, material);\n            }\n\n            break;\n\n          case 'LOD':\n            object = new THREE.LOD();\n            break;\n\n          case 'Line':\n            object = new THREE.Line(getGeometry(data.geometry), getMaterial(data.material), data.mode);\n            break;\n\n          case 'PointCloud':\n          case 'Points':\n            object = new THREE.Points(getGeometry(data.geometry), getMaterial(data.material));\n            break;\n\n          case 'Sprite':\n            object = new THREE.Sprite(getMaterial(data.material));\n            break;\n\n          case 'Group':\n            object = new THREE.Group();\n            break;\n\n          default:\n            object = new THREE.Object3D();\n        }\n\n        object.uuid = data.uuid;\n        if (data.name !== undefined) object.name = data.name;\n\n        if (data.matrix !== undefined) {\n          matrix.fromArray(data.matrix);\n          matrix.decompose(object.position, object.quaternion, object.scale);\n        } else {\n          if (data.position !== undefined) object.position.fromArray(data.position);\n          if (data.rotation !== undefined) object.rotation.fromArray(data.rotation);\n          if (data.scale !== undefined) object.scale.fromArray(data.scale);\n        }\n\n        if (data.castShadow !== undefined) object.castShadow = data.castShadow;\n        if (data.receiveShadow !== undefined) object.receiveShadow = data.receiveShadow;\n        if (data.visible !== undefined) object.visible = data.visible;\n        if (data.userData !== undefined) object.userData = data.userData;\n\n        if (data.children !== undefined) {\n          for (var child in data.children) {\n            object.add(this.parseObject(data.children[child], geometries, materials));\n          }\n        }\n\n        if (data.type === 'LOD') {\n          var levels = data.levels;\n\n          for (var l = 0; l < levels.length; l++) {\n            var level = levels[l];\n            var child = object.getObjectByProperty('uuid', level.object);\n\n            if (child !== undefined) {\n              object.addLevel(child, level.distance);\n            }\n          }\n        }\n\n        return object;\n      };\n    }()\n  }); // File:src/loaders/TextureLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.TextureLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.TextureLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var texture = new THREE.Texture();\n      var loader = new THREE.ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n      loader.load(url, function (image) {\n        // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.\n        var isJPEG = url.search(/\\.(jpg|jpeg)$/) > 0 || url.search(/^data\\:image\\/jpeg/) === 0;\n        texture.format = isJPEG ? THREE.RGBFormat : THREE.RGBAFormat;\n        texture.image = image;\n        texture.needsUpdate = true;\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }, onProgress, onError);\n      return texture;\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    }\n  }); // File:src/loaders/CubeTextureLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.CubeTextureLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  Object.assign(THREE.CubeTextureLoader.prototype, {\n    load: function load(urls, onLoad, onProgress, onError) {\n      var texture = new THREE.CubeTexture();\n      var loader = new THREE.ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n      var loaded = 0;\n\n      function loadTexture(i) {\n        loader.load(urls[i], function (image) {\n          texture.images[i] = image;\n          loaded++;\n\n          if (loaded === 6) {\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, undefined, onError);\n      }\n\n      for (var i = 0; i < urls.length; ++i) {\n        loadTexture(i);\n      }\n\n      return texture;\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n      return this;\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    }\n  }); // File:src/loaders/BinaryTextureLoader.js\n\n  /**\n   * @author Nikos M. / https://github.com/foo123/\n   *\n   * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n   */\n\n  THREE.DataTextureLoader = THREE.BinaryTextureLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager; // override in sub classes\n\n    this._parser = null;\n  };\n\n  Object.assign(THREE.BinaryTextureLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texture = new THREE.DataTexture();\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (buffer) {\n        var texData = scope._parser(buffer);\n\n        if (!texData) return;\n\n        if (undefined !== texData.image) {\n          texture.image = texData.image;\n        } else if (undefined !== texData.data) {\n          texture.image.width = texData.width;\n          texture.image.height = texData.height;\n          texture.image.data = texData.data;\n        }\n\n        texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\n        texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\n        texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\n        texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\n        texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\n\n        if (undefined !== texData.format) {\n          texture.format = texData.format;\n        }\n\n        if (undefined !== texData.type) {\n          texture.type = texData.type;\n        }\n\n        if (undefined !== texData.mipmaps) {\n          texture.mipmaps = texData.mipmaps;\n        }\n\n        if (1 === texData.mipmapCount) {\n          texture.minFilter = THREE.LinearFilter;\n        }\n\n        texture.needsUpdate = true;\n        if (onLoad) onLoad(texture, texData);\n      }, onProgress, onError);\n      return texture;\n    }\n  }); // File:src/loaders/CompressedTextureLoader.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   *\n   * Abstract Base class to block based textures loader (dds, pvr, ...)\n   */\n\n  THREE.CompressedTextureLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager; // override in sub classes\n\n    this._parser = null;\n  };\n\n  Object.assign(THREE.CompressedTextureLoader.prototype, {\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var images = [];\n      var texture = new THREE.CompressedTexture();\n      texture.image = images;\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n\n      function loadTexture(i) {\n        loader.load(url[i], function (buffer) {\n          var texDatas = scope._parser(buffer, true);\n\n          images[i] = {\n            width: texDatas.width,\n            height: texDatas.height,\n            format: texDatas.format,\n            mipmaps: texDatas.mipmaps\n          };\n          loaded += 1;\n\n          if (loaded === 6) {\n            if (texDatas.mipmapCount === 1) texture.minFilter = THREE.LinearFilter;\n            texture.format = texDatas.format;\n            texture.needsUpdate = true;\n            if (onLoad) onLoad(texture);\n          }\n        }, onProgress, onError);\n      }\n\n      if (Array.isArray(url)) {\n        var loaded = 0;\n\n        for (var i = 0, il = url.length; i < il; ++i) {\n          loadTexture(i);\n        }\n      } else {\n        // compressed cubemap texture stored in a single DDS file\n        loader.load(url, function (buffer) {\n          var texDatas = scope._parser(buffer, true);\n\n          if (texDatas.isCubemap) {\n            var faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n            for (var f = 0; f < faces; f++) {\n              images[f] = {\n                mipmaps: []\n              };\n\n              for (var i = 0; i < texDatas.mipmapCount; i++) {\n                images[f].mipmaps.push(texDatas.mipmaps[f * texDatas.mipmapCount + i]);\n                images[f].format = texDatas.format;\n                images[f].width = texDatas.width;\n                images[f].height = texDatas.height;\n              }\n            }\n          } else {\n            texture.image.width = texDatas.width;\n            texture.image.height = texDatas.height;\n            texture.mipmaps = texDatas.mipmaps;\n          }\n\n          if (texDatas.mipmapCount === 1) {\n            texture.minFilter = THREE.LinearFilter;\n          }\n\n          texture.format = texDatas.format;\n          texture.needsUpdate = true;\n          if (onLoad) onLoad(texture);\n        }, onProgress, onError);\n      }\n\n      return texture;\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n      return this;\n    }\n  }); // File:src/materials/Material.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Material = function () {\n    Object.defineProperty(this, 'id', {\n      value: THREE.MaterialIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.type = 'Material';\n    this.fog = true;\n    this.lights = true;\n    this.blending = THREE.NormalBlending;\n    this.side = THREE.FrontSide;\n    this.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\n\n    this.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\n\n    this.opacity = 1;\n    this.transparent = false;\n    this.blendSrc = THREE.SrcAlphaFactor;\n    this.blendDst = THREE.OneMinusSrcAlphaFactor;\n    this.blendEquation = THREE.AddEquation;\n    this.blendSrcAlpha = null;\n    this.blendDstAlpha = null;\n    this.blendEquationAlpha = null;\n    this.depthFunc = THREE.LessEqualDepth;\n    this.depthTest = true;\n    this.depthWrite = true;\n    this.clippingPlanes = null;\n    this.clipShadows = false;\n    this.colorWrite = true;\n    this.precision = null; // override the renderer's default precision for this material\n\n    this.polygonOffset = false;\n    this.polygonOffsetFactor = 0;\n    this.polygonOffsetUnits = 0;\n    this.alphaTest = 0;\n    this.premultipliedAlpha = false;\n    this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\n\n    this.visible = true;\n    this._needsUpdate = true;\n  };\n\n  THREE.Material.prototype = {\n    constructor: THREE.Material,\n\n    get needsUpdate() {\n      return this._needsUpdate;\n    },\n\n    set needsUpdate(value) {\n      if (value === true) this.update();\n      this._needsUpdate = value;\n    },\n\n    setValues: function setValues(values) {\n      if (values === undefined) return;\n\n      for (var key in values) {\n        var newValue = values[key];\n\n        if (newValue === undefined) {\n          console.warn(\"THREE.Material: '\" + key + \"' parameter is undefined.\");\n          continue;\n        }\n\n        var currentValue = this[key];\n\n        if (currentValue === undefined) {\n          console.warn(\"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\");\n          continue;\n        }\n\n        if (currentValue instanceof THREE.Color) {\n          currentValue.set(newValue);\n        } else if (currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3) {\n          currentValue.copy(newValue);\n        } else if (key === 'overdraw') {\n          // ensure overdraw is backwards-compatible with legacy boolean type\n          this[key] = Number(newValue);\n        } else {\n          this[key] = newValue;\n        }\n      }\n    },\n    toJSON: function toJSON(meta) {\n      var isRoot = meta === undefined;\n\n      if (isRoot) {\n        meta = {\n          textures: {},\n          images: {}\n        };\n      }\n\n      var data = {\n        metadata: {\n          version: 4.4,\n          type: 'Material',\n          generator: 'Material.toJSON'\n        }\n      }; // standard Material serialization\n\n      data.uuid = this.uuid;\n      data.type = this.type;\n      if (this.name !== '') data.name = this.name;\n      if (this.color instanceof THREE.Color) data.color = this.color.getHex();\n      if (this.roughness !== undefined) data.roughness = this.roughness;\n      if (this.metalness !== undefined) data.metalness = this.metalness;\n      if (this.emissive instanceof THREE.Color) data.emissive = this.emissive.getHex();\n      if (this.specular instanceof THREE.Color) data.specular = this.specular.getHex();\n      if (this.shininess !== undefined) data.shininess = this.shininess;\n      if (this.map instanceof THREE.Texture) data.map = this.map.toJSON(meta).uuid;\n      if (this.alphaMap instanceof THREE.Texture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;\n      if (this.lightMap instanceof THREE.Texture) data.lightMap = this.lightMap.toJSON(meta).uuid;\n\n      if (this.bumpMap instanceof THREE.Texture) {\n        data.bumpMap = this.bumpMap.toJSON(meta).uuid;\n        data.bumpScale = this.bumpScale;\n      }\n\n      if (this.normalMap instanceof THREE.Texture) {\n        data.normalMap = this.normalMap.toJSON(meta).uuid;\n        data.normalScale = this.normalScale.toArray();\n      }\n\n      if (this.displacementMap instanceof THREE.Texture) {\n        data.displacementMap = this.displacementMap.toJSON(meta).uuid;\n        data.displacementScale = this.displacementScale;\n        data.displacementBias = this.displacementBias;\n      }\n\n      if (this.roughnessMap instanceof THREE.Texture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;\n      if (this.metalnessMap instanceof THREE.Texture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;\n      if (this.emissiveMap instanceof THREE.Texture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;\n      if (this.specularMap instanceof THREE.Texture) data.specularMap = this.specularMap.toJSON(meta).uuid;\n\n      if (this.envMap instanceof THREE.Texture) {\n        data.envMap = this.envMap.toJSON(meta).uuid;\n        data.reflectivity = this.reflectivity; // Scale behind envMap\n      }\n\n      if (this.size !== undefined) data.size = this.size;\n      if (this.sizeAttenuation !== undefined) data.sizeAttenuation = this.sizeAttenuation;\n      if (this.blending !== THREE.NormalBlending) data.blending = this.blending;\n      if (this.shading !== THREE.SmoothShading) data.shading = this.shading;\n      if (this.side !== THREE.FrontSide) data.side = this.side;\n      if (this.vertexColors !== THREE.NoColors) data.vertexColors = this.vertexColors;\n      if (this.opacity < 1) data.opacity = this.opacity;\n      if (this.transparent === true) data.transparent = this.transparent;\n      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;\n      if (this.premultipliedAlpha === true) data.premultipliedAlpha = this.premultipliedAlpha;\n      if (this.wireframe === true) data.wireframe = this.wireframe;\n      if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth; // TODO: Copied from Object3D.toJSON\n\n      function extractFromCache(cache) {\n        var values = [];\n\n        for (var key in cache) {\n          var data = cache[key];\n          delete data.metadata;\n          values.push(data);\n        }\n\n        return values;\n      }\n\n      if (isRoot) {\n        var textures = extractFromCache(meta.textures);\n        var images = extractFromCache(meta.images);\n        if (textures.length > 0) data.textures = textures;\n        if (images.length > 0) data.images = images;\n      }\n\n      return data;\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(source) {\n      this.name = source.name;\n      this.fog = source.fog;\n      this.lights = source.lights;\n      this.blending = source.blending;\n      this.side = source.side;\n      this.shading = source.shading;\n      this.vertexColors = source.vertexColors;\n      this.opacity = source.opacity;\n      this.transparent = source.transparent;\n      this.blendSrc = source.blendSrc;\n      this.blendDst = source.blendDst;\n      this.blendEquation = source.blendEquation;\n      this.blendSrcAlpha = source.blendSrcAlpha;\n      this.blendDstAlpha = source.blendDstAlpha;\n      this.blendEquationAlpha = source.blendEquationAlpha;\n      this.depthFunc = source.depthFunc;\n      this.depthTest = source.depthTest;\n      this.depthWrite = source.depthWrite;\n      this.colorWrite = source.colorWrite;\n      this.precision = source.precision;\n      this.polygonOffset = source.polygonOffset;\n      this.polygonOffsetFactor = source.polygonOffsetFactor;\n      this.polygonOffsetUnits = source.polygonOffsetUnits;\n      this.alphaTest = source.alphaTest;\n      this.premultipliedAlpha = source.premultipliedAlpha;\n      this.overdraw = source.overdraw;\n      this.visible = source.visible;\n      this.clipShadows = source.clipShadows;\n      var srcPlanes = source.clippingPlanes,\n          dstPlanes = null;\n\n      if (srcPlanes !== null) {\n        var n = srcPlanes.length;\n        dstPlanes = new Array(n);\n\n        for (var i = 0; i !== n; ++i) {\n          dstPlanes[i] = srcPlanes[i].clone();\n        }\n      }\n\n      this.clippingPlanes = dstPlanes;\n      return this;\n    },\n    update: function update() {\n      this.dispatchEvent({\n        type: 'update'\n      });\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  };\n  Object.assign(THREE.Material.prototype, THREE.EventDispatcher.prototype);\n  THREE.MaterialIdCount = 0; // File:src/materials/LineBasicMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  linewidth: <float>,\n   *  linecap: \"round\",\n   *  linejoin: \"round\"\n   * }\n   */\n\n  THREE.LineBasicMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'LineBasicMaterial';\n    this.color = new THREE.Color(0xffffff);\n    this.linewidth = 1;\n    this.linecap = 'round';\n    this.linejoin = 'round';\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.LineBasicMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\n\n  THREE.LineBasicMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.linewidth = source.linewidth;\n    this.linecap = source.linecap;\n    this.linejoin = source.linejoin;\n    return this;\n  }; // File:src/materials/LineDashedMaterial.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  linewidth: <float>,\n   *\n   *  scale: <float>,\n   *  dashSize: <float>,\n   *  gapSize: <float>\n   * }\n   */\n\n\n  THREE.LineDashedMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'LineDashedMaterial';\n    this.color = new THREE.Color(0xffffff);\n    this.linewidth = 1;\n    this.scale = 1;\n    this.dashSize = 3;\n    this.gapSize = 1;\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.LineDashedMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\n\n  THREE.LineDashedMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.linewidth = source.linewidth;\n    this.scale = source.scale;\n    this.dashSize = source.dashSize;\n    this.gapSize = source.gapSize;\n    return this;\n  }; // File:src/materials/MeshBasicMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  shading: THREE.SmoothShading,\n   *  depthTest: <bool>,\n   *  depthWrite: <bool>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>\n   * }\n   */\n\n\n  THREE.MeshBasicMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'MeshBasicMaterial';\n    this.color = new THREE.Color(0xffffff); // emissive\n\n    this.map = null;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshBasicMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\n\n  THREE.MeshBasicMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    return this;\n  }; // File:src/materials/MeshDepthMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author bhouston / https://clara.io\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>\n   * }\n   */\n\n\n  THREE.MeshDepthMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'MeshDepthMaterial';\n    this.depthPacking = THREE.BasicDepthPacking;\n    this.skinning = false;\n    this.morphTargets = false;\n    this.map = null;\n    this.alphaMap = null;\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false;\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshDepthMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\n\n  THREE.MeshDepthMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.depthPacking = source.depthPacking;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.map = source.map;\n    this.alphaMap = source.alphaMap;\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    return this;\n  }; // File:src/materials/MeshLambertMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n\n  THREE.MeshLambertMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'MeshLambertMaterial';\n    this.color = new THREE.Color(0xffffff); // diffuse\n\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new THREE.Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshLambertMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\n\n  THREE.MeshLambertMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n  }; // File:src/materials/MeshNormalMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   *\n   * parameters = {\n   *  opacity: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>\n   * }\n   */\n\n\n  THREE.MeshNormalMaterial = function (parameters) {\n    THREE.Material.call(this, parameters);\n    this.type = 'MeshNormalMaterial';\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false;\n    this.lights = false;\n    this.morphTargets = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshNormalMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\n\n  THREE.MeshNormalMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    return this;\n  }; // File:src/materials/MeshPhongMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  specular: <hex>,\n   *  shininess: <float>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  bumpMap: new THREE.Texture( <Image> ),\n   *  bumpScale: <float>,\n   *\n   *  normalMap: new THREE.Texture( <Image> ),\n   *  normalScale: <Vector2>,\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  specularMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\n   *  combine: THREE.Multiply,\n   *  reflectivity: <float>,\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n\n  THREE.MeshPhongMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'MeshPhongMaterial';\n    this.color = new THREE.Color(0xffffff); // diffuse\n\n    this.specular = new THREE.Color(0x111111);\n    this.shininess = 30;\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new THREE.Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalScale = new THREE.Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.specularMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.combine = THREE.MultiplyOperation;\n    this.reflectivity = 1;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshPhongMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\n\n  THREE.MeshPhongMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.specular.copy(source.specular);\n    this.shininess = source.shininess;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.specularMap = source.specularMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.combine = source.combine;\n    this.reflectivity = source.reflectivity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n  }; // File:src/materials/MeshStandardMaterial.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  roughness: <float>,\n   *  metalness: <float>,\n   *  opacity: <float>,\n   *\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  lightMap: new THREE.Texture( <Image> ),\n   *  lightMapIntensity: <float>\n   *\n   *  aoMap: new THREE.Texture( <Image> ),\n   *  aoMapIntensity: <float>\n   *\n   *  emissive: <hex>,\n   *  emissiveIntensity: <float>\n   *  emissiveMap: new THREE.Texture( <Image> ),\n   *\n   *  bumpMap: new THREE.Texture( <Image> ),\n   *  bumpScale: <float>,\n   *\n   *  normalMap: new THREE.Texture( <Image> ),\n   *  normalScale: <Vector2>,\n   *\n   *  displacementMap: new THREE.Texture( <Image> ),\n   *  displacementScale: <float>,\n   *  displacementBias: <float>,\n   *\n   *  roughnessMap: new THREE.Texture( <Image> ),\n   *\n   *  metalnessMap: new THREE.Texture( <Image> ),\n   *\n   *  alphaMap: new THREE.Texture( <Image> ),\n   *\n   *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n   *  envMapIntensity: <float>\n   *\n   *  refractionRatio: <float>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n\n  THREE.MeshStandardMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.defines = {\n      'STANDARD': ''\n    };\n    this.type = 'MeshStandardMaterial';\n    this.color = new THREE.Color(0xffffff); // diffuse\n\n    this.roughness = 0.5;\n    this.metalness = 0.5;\n    this.map = null;\n    this.lightMap = null;\n    this.lightMapIntensity = 1.0;\n    this.aoMap = null;\n    this.aoMapIntensity = 1.0;\n    this.emissive = new THREE.Color(0x000000);\n    this.emissiveIntensity = 1.0;\n    this.emissiveMap = null;\n    this.bumpMap = null;\n    this.bumpScale = 1;\n    this.normalMap = null;\n    this.normalScale = new THREE.Vector2(1, 1);\n    this.displacementMap = null;\n    this.displacementScale = 1;\n    this.displacementBias = 0;\n    this.roughnessMap = null;\n    this.metalnessMap = null;\n    this.alphaMap = null;\n    this.envMap = null;\n    this.envMapIntensity = 1.0;\n    this.refractionRatio = 0.98;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.wireframeLinecap = 'round';\n    this.wireframeLinejoin = 'round';\n    this.skinning = false;\n    this.morphTargets = false;\n    this.morphNormals = false;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshStandardMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\n\n  THREE.MeshStandardMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.defines = {\n      'STANDARD': ''\n    };\n    this.color.copy(source.color);\n    this.roughness = source.roughness;\n    this.metalness = source.metalness;\n    this.map = source.map;\n    this.lightMap = source.lightMap;\n    this.lightMapIntensity = source.lightMapIntensity;\n    this.aoMap = source.aoMap;\n    this.aoMapIntensity = source.aoMapIntensity;\n    this.emissive.copy(source.emissive);\n    this.emissiveMap = source.emissiveMap;\n    this.emissiveIntensity = source.emissiveIntensity;\n    this.bumpMap = source.bumpMap;\n    this.bumpScale = source.bumpScale;\n    this.normalMap = source.normalMap;\n    this.normalScale.copy(source.normalScale);\n    this.displacementMap = source.displacementMap;\n    this.displacementScale = source.displacementScale;\n    this.displacementBias = source.displacementBias;\n    this.roughnessMap = source.roughnessMap;\n    this.metalnessMap = source.metalnessMap;\n    this.alphaMap = source.alphaMap;\n    this.envMap = source.envMap;\n    this.envMapIntensity = source.envMapIntensity;\n    this.refractionRatio = source.refractionRatio;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.wireframeLinecap = source.wireframeLinecap;\n    this.wireframeLinejoin = source.wireframeLinejoin;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    return this;\n  }; // File:src/materials/MeshPhysicalMaterial.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * parameters = {\n   *  reflectivity: <float>\n   * }\n   */\n\n\n  THREE.MeshPhysicalMaterial = function (parameters) {\n    THREE.MeshStandardMaterial.call(this);\n    this.defines = {\n      'PHYSICAL': ''\n    };\n    this.type = 'MeshPhysicalMaterial';\n    this.reflectivity = 0.5; // maps to F0 = 0.04\n\n    this.clearCoat = 0.0;\n    this.clearCoatRoughness = 0.0;\n    this.setValues(parameters);\n  };\n\n  THREE.MeshPhysicalMaterial.prototype = Object.create(THREE.MeshStandardMaterial.prototype);\n  THREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\n\n  THREE.MeshPhysicalMaterial.prototype.copy = function (source) {\n    THREE.MeshStandardMaterial.prototype.copy.call(this, source);\n    this.defines = {\n      'PHYSICAL': ''\n    };\n    this.reflectivity = source.reflectivity;\n    this.clearCoat = source.clearCoat;\n    this.clearCoatRoughness = source.clearCoatRoughness;\n    return this;\n  }; // File:src/materials/MultiMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.MultiMaterial = function (materials) {\n    this.uuid = THREE.Math.generateUUID();\n    this.type = 'MultiMaterial';\n    this.materials = materials instanceof Array ? materials : [];\n    this.visible = true;\n  };\n\n  THREE.MultiMaterial.prototype = {\n    constructor: THREE.MultiMaterial,\n    toJSON: function toJSON(meta) {\n      var output = {\n        metadata: {\n          version: 4.2,\n          type: 'material',\n          generator: 'MaterialExporter'\n        },\n        uuid: this.uuid,\n        type: this.type,\n        materials: []\n      };\n      var materials = this.materials;\n\n      for (var i = 0, l = materials.length; i < l; i++) {\n        var material = materials[i].toJSON(meta);\n        delete material.metadata;\n        output.materials.push(material);\n      }\n\n      output.visible = this.visible;\n      return output;\n    },\n    clone: function clone() {\n      var material = new this.constructor();\n\n      for (var i = 0; i < this.materials.length; i++) {\n        material.materials.push(this.materials[i].clone());\n      }\n\n      material.visible = this.visible;\n      return material;\n    }\n  }; // File:src/materials/PointsMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *  size: <float>,\n   *  sizeAttenuation: <bool>\n   * }\n   */\n\n  THREE.PointsMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'PointsMaterial';\n    this.color = new THREE.Color(0xffffff);\n    this.map = null;\n    this.size = 1;\n    this.sizeAttenuation = true;\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.PointsMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\n\n  THREE.PointsMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.size = source.size;\n    this.sizeAttenuation = source.sizeAttenuation;\n    return this;\n  }; // File:src/materials/ShaderMaterial.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  defines: { \"label\" : \"value\" },\n   *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n   *\n   *  fragmentShader: <string>,\n   *  vertexShader: <string>,\n   *\n   *  wireframe: <boolean>,\n   *  wireframeLinewidth: <float>,\n   *\n   *  lights: <bool>,\n   *\n   *  skinning: <bool>,\n   *  morphTargets: <bool>,\n   *  morphNormals: <bool>\n   * }\n   */\n\n\n  THREE.ShaderMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'ShaderMaterial';\n    this.defines = {};\n    this.uniforms = {};\n    this.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\n    this.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\n    this.linewidth = 1;\n    this.wireframe = false;\n    this.wireframeLinewidth = 1;\n    this.fog = false; // set to use scene fog\n\n    this.lights = false; // set to use scene lights\n\n    this.clipping = false; // set to use user-defined clipping planes\n\n    this.skinning = false; // set to use skinning attribute streams\n\n    this.morphTargets = false; // set to use morph targets\n\n    this.morphNormals = false; // set to use morph normals\n\n    this.extensions = {\n      derivatives: false,\n      // set to use derivatives\n      fragDepth: false,\n      // set to use fragment depth values\n      drawBuffers: false,\n      // set to use draw buffers\n      shaderTextureLOD: false // set to use shader texture LOD\n\n    }; // When rendered geometry doesn't include these attributes but the material does,\n    // use these default values in WebGL. This avoids errors when buffer data is missing.\n\n    this.defaultAttributeValues = {\n      'color': [1, 1, 1],\n      'uv': [0, 0],\n      'uv2': [0, 0]\n    };\n    this.index0AttributeName = undefined;\n\n    if (parameters !== undefined) {\n      if (parameters.attributes !== undefined) {\n        console.error('THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.');\n      }\n\n      this.setValues(parameters);\n    }\n  };\n\n  THREE.ShaderMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\n\n  THREE.ShaderMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.fragmentShader = source.fragmentShader;\n    this.vertexShader = source.vertexShader;\n    this.uniforms = THREE.UniformsUtils.clone(source.uniforms);\n    this.defines = source.defines;\n    this.wireframe = source.wireframe;\n    this.wireframeLinewidth = source.wireframeLinewidth;\n    this.lights = source.lights;\n    this.clipping = source.clipping;\n    this.skinning = source.skinning;\n    this.morphTargets = source.morphTargets;\n    this.morphNormals = source.morphNormals;\n    this.extensions = source.extensions;\n    return this;\n  };\n\n  THREE.ShaderMaterial.prototype.toJSON = function (meta) {\n    var data = THREE.Material.prototype.toJSON.call(this, meta);\n    data.uniforms = this.uniforms;\n    data.vertexShader = this.vertexShader;\n    data.fragmentShader = this.fragmentShader;\n    return data;\n  }; // File:src/materials/RawShaderMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.RawShaderMaterial = function (parameters) {\n    THREE.ShaderMaterial.call(this, parameters);\n    this.type = 'RawShaderMaterial';\n  };\n\n  THREE.RawShaderMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n  THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial; // File:src/materials/SpriteMaterial.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * parameters = {\n   *  color: <hex>,\n   *  opacity: <float>,\n   *  map: new THREE.Texture( <Image> ),\n   *\n   *\tuvOffset: new THREE.Vector2(),\n   *\tuvScale: new THREE.Vector2()\n   * }\n   */\n\n  THREE.SpriteMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'SpriteMaterial';\n    this.color = new THREE.Color(0xffffff);\n    this.map = null;\n    this.rotation = 0;\n    this.fog = false;\n    this.lights = false;\n    this.setValues(parameters);\n  };\n\n  THREE.SpriteMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\n\n  THREE.SpriteMaterial.prototype.copy = function (source) {\n    THREE.Material.prototype.copy.call(this, source);\n    this.color.copy(source.color);\n    this.map = source.map;\n    this.rotation = source.rotation;\n    return this;\n  }; // File:src/materials/ShadowMaterial.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.ShadowMaterial = function () {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib[\"lights\"], {\n        opacity: {\n          value: 1.0\n        }\n      }]),\n      vertexShader: THREE.ShaderChunk['shadow_vert'],\n      fragmentShader: THREE.ShaderChunk['shadow_frag']\n    });\n    this.lights = true;\n    this.transparent = true;\n    Object.defineProperties(this, {\n      opacity: {\n        enumerable: true,\n        get: function get() {\n          return this.uniforms.opacity.value;\n        },\n        set: function set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      }\n    });\n  };\n\n  THREE.ShadowMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype);\n  THREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial; // File:src/textures/Texture.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author szimek / https://github.com/szimek/\n   */\n\n  THREE.Texture = function (image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n    Object.defineProperty(this, 'id', {\n      value: THREE.TextureIdCount++\n    });\n    this.uuid = THREE.Math.generateUUID();\n    this.name = '';\n    this.sourceFile = '';\n    this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\n    this.mipmaps = [];\n    this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\n    this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\n    this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\n    this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\n    this.anisotropy = anisotropy !== undefined ? anisotropy : 1;\n    this.format = format !== undefined ? format : THREE.RGBAFormat;\n    this.type = type !== undefined ? type : THREE.UnsignedByteType;\n    this.offset = new THREE.Vector2(0, 0);\n    this.repeat = new THREE.Vector2(1, 1);\n    this.generateMipmaps = true;\n    this.premultiplyAlpha = false;\n    this.flipY = true;\n    this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n    // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n    //\n    // Also changing the encoding after already used by a Material will not automatically make the Material\n    // update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\n    this.encoding = encoding !== undefined ? encoding : THREE.LinearEncoding;\n    this.version = 0;\n    this.onUpdate = null;\n  };\n\n  THREE.Texture.DEFAULT_IMAGE = undefined;\n  THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\n  THREE.Texture.prototype = {\n    constructor: THREE.Texture,\n\n    set needsUpdate(value) {\n      if (value === true) this.version++;\n    },\n\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(source) {\n      this.image = source.image;\n      this.mipmaps = source.mipmaps.slice(0);\n      this.mapping = source.mapping;\n      this.wrapS = source.wrapS;\n      this.wrapT = source.wrapT;\n      this.magFilter = source.magFilter;\n      this.minFilter = source.minFilter;\n      this.anisotropy = source.anisotropy;\n      this.format = source.format;\n      this.type = source.type;\n      this.offset.copy(source.offset);\n      this.repeat.copy(source.repeat);\n      this.generateMipmaps = source.generateMipmaps;\n      this.premultiplyAlpha = source.premultiplyAlpha;\n      this.flipY = source.flipY;\n      this.unpackAlignment = source.unpackAlignment;\n      this.encoding = source.encoding;\n      return this;\n    },\n    toJSON: function toJSON(meta) {\n      if (meta.textures[this.uuid] !== undefined) {\n        return meta.textures[this.uuid];\n      }\n\n      function getDataURL(image) {\n        var canvas;\n\n        if (image.toDataURL !== undefined) {\n          canvas = image;\n        } else {\n          canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n          canvas.width = image.width;\n          canvas.height = image.height;\n          canvas.getContext('2d').drawImage(image, 0, 0, image.width, image.height);\n        }\n\n        if (canvas.width > 2048 || canvas.height > 2048) {\n          return canvas.toDataURL('image/jpeg', 0.6);\n        } else {\n          return canvas.toDataURL('image/png');\n        }\n      }\n\n      var output = {\n        metadata: {\n          version: 4.4,\n          type: 'Texture',\n          generator: 'Texture.toJSON'\n        },\n        uuid: this.uuid,\n        name: this.name,\n        mapping: this.mapping,\n        repeat: [this.repeat.x, this.repeat.y],\n        offset: [this.offset.x, this.offset.y],\n        wrap: [this.wrapS, this.wrapT],\n        minFilter: this.minFilter,\n        magFilter: this.magFilter,\n        anisotropy: this.anisotropy,\n        flipY: this.flipY\n      };\n\n      if (this.image !== undefined) {\n        // TODO: Move to THREE.Image\n        var image = this.image;\n\n        if (image.uuid === undefined) {\n          image.uuid = THREE.Math.generateUUID(); // UGH\n        }\n\n        if (meta.images[image.uuid] === undefined) {\n          meta.images[image.uuid] = {\n            uuid: image.uuid,\n            url: getDataURL(image)\n          };\n        }\n\n        output.image = image.uuid;\n      }\n\n      meta.textures[this.uuid] = output;\n      return output;\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    },\n    transformUv: function transformUv(uv) {\n      if (this.mapping !== THREE.UVMapping) return;\n      uv.multiply(this.repeat);\n      uv.add(this.offset);\n\n      if (uv.x < 0 || uv.x > 1) {\n        switch (this.wrapS) {\n          case THREE.RepeatWrapping:\n            uv.x = uv.x - Math.floor(uv.x);\n            break;\n\n          case THREE.ClampToEdgeWrapping:\n            uv.x = uv.x < 0 ? 0 : 1;\n            break;\n\n          case THREE.MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.x) % 2) === 1) {\n              uv.x = Math.ceil(uv.x) - uv.x;\n            } else {\n              uv.x = uv.x - Math.floor(uv.x);\n            }\n\n            break;\n        }\n      }\n\n      if (uv.y < 0 || uv.y > 1) {\n        switch (this.wrapT) {\n          case THREE.RepeatWrapping:\n            uv.y = uv.y - Math.floor(uv.y);\n            break;\n\n          case THREE.ClampToEdgeWrapping:\n            uv.y = uv.y < 0 ? 0 : 1;\n            break;\n\n          case THREE.MirroredRepeatWrapping:\n            if (Math.abs(Math.floor(uv.y) % 2) === 1) {\n              uv.y = Math.ceil(uv.y) - uv.y;\n            } else {\n              uv.y = uv.y - Math.floor(uv.y);\n            }\n\n            break;\n        }\n      }\n\n      if (this.flipY) {\n        uv.y = 1 - uv.y;\n      }\n    }\n  };\n  Object.assign(THREE.Texture.prototype, THREE.EventDispatcher.prototype);\n  THREE.TextureIdCount = 0; // File:src/textures/DepthTexture.js\n\n  /**\n   * @author Matt DesLauriers / @mattdesl\n   */\n\n  THREE.DepthTexture = function (width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy) {\n    THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy);\n    this.image = {\n      width: width,\n      height: height\n    };\n    this.type = type !== undefined ? type : THREE.UnsignedShortType;\n    this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n    this.flipY = false;\n    this.generateMipmaps = false;\n  };\n\n  THREE.DepthTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.DepthTexture.prototype.constructor = THREE.DepthTexture; // File:src/textures/CanvasTexture.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.CanvasTexture = function (canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    THREE.Texture.call(this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n    this.needsUpdate = true;\n  };\n\n  THREE.CanvasTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture; // File:src/textures/CubeTexture.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.CubeTexture = function (images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding) {\n    images = images !== undefined ? images : [];\n    mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\n    THREE.Texture.call(this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.flipY = false;\n  };\n\n  THREE.CubeTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\n  Object.defineProperty(THREE.CubeTexture.prototype, 'images', {\n    get: function get() {\n      return this.image;\n    },\n    set: function set(value) {\n      this.image = value;\n    }\n  }); // File:src/textures/CompressedTexture.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.CompressedTexture = function (mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n    THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.image = {\n      width: width,\n      height: height\n    };\n    this.mipmaps = mipmaps; // no flipping for cube textures\n    // (also flipping doesn't work for compressed textures )\n\n    this.flipY = false; // can't generate mipmaps for compressed textures\n    // mips must be embedded in DDS files\n\n    this.generateMipmaps = false;\n  };\n\n  THREE.CompressedTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture; // File:src/textures/DataTexture.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.DataTexture = function (data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding) {\n    THREE.Texture.call(this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding);\n    this.image = {\n      data: data,\n      width: width,\n      height: height\n    };\n    this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\n    this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\n    this.flipY = false;\n    this.generateMipmaps = false;\n  };\n\n  THREE.DataTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.DataTexture.prototype.constructor = THREE.DataTexture; // File:src/textures/VideoTexture.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.VideoTexture = function (video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy) {\n    THREE.Texture.call(this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy);\n    this.generateMipmaps = false;\n    var scope = this;\n\n    function update() {\n      requestAnimationFrame(update);\n\n      if (video.readyState >= video.HAVE_CURRENT_DATA) {\n        scope.needsUpdate = true;\n      }\n    }\n\n    update();\n  };\n\n  THREE.VideoTexture.prototype = Object.create(THREE.Texture.prototype);\n  THREE.VideoTexture.prototype.constructor = THREE.VideoTexture; // File:src/objects/Group.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Group = function () {\n    THREE.Object3D.call(this);\n    this.type = 'Group';\n  };\n\n  THREE.Group.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Group\n  }); // File:src/objects/Points.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Points = function (geometry, material) {\n    THREE.Object3D.call(this);\n    this.type = 'Points';\n    this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n    this.material = material !== undefined ? material : new THREE.PointsMaterial({\n      color: Math.random() * 0xffffff\n    });\n  };\n\n  THREE.Points.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Points,\n    raycast: function () {\n      var inverseMatrix = new THREE.Matrix4();\n      var ray = new THREE.Ray();\n      var sphere = new THREE.Sphere();\n      return function raycast(raycaster, intersects) {\n        var object = this;\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld;\n        var threshold = raycaster.params.Points.threshold; // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        var localThreshold = threshold / ((this.scale.x + this.scale.y + this.scale.z) / 3);\n        var localThresholdSq = localThreshold * localThreshold;\n        var position = new THREE.Vector3();\n\n        function testPoint(point, index) {\n          var rayPointDistanceSq = ray.distanceSqToPoint(point);\n\n          if (rayPointDistanceSq < localThresholdSq) {\n            var intersectPoint = ray.closestPointToPoint(point);\n            intersectPoint.applyMatrix4(matrixWorld);\n            var distance = raycaster.ray.origin.distanceTo(intersectPoint);\n            if (distance < raycaster.near || distance > raycaster.far) return;\n            intersects.push({\n              distance: distance,\n              distanceToRay: Math.sqrt(rayPointDistanceSq),\n              point: intersectPoint.clone(),\n              index: index,\n              face: null,\n              object: object\n            });\n          }\n        }\n\n        if (geometry instanceof THREE.BufferGeometry) {\n          var index = geometry.index;\n          var attributes = geometry.attributes;\n          var positions = attributes.position.array;\n\n          if (index !== null) {\n            var indices = index.array;\n\n            for (var i = 0, il = indices.length; i < il; i++) {\n              var a = indices[i];\n              position.fromArray(positions, a * 3);\n              testPoint(position, a);\n            }\n          } else {\n            for (var i = 0, l = positions.length / 3; i < l; i++) {\n              position.fromArray(positions, i * 3);\n              testPoint(position, i);\n            }\n          }\n        } else {\n          var vertices = geometry.vertices;\n\n          for (var i = 0, l = vertices.length; i < l; i++) {\n            testPoint(vertices[i], i);\n          }\n        }\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    }\n  }); // File:src/objects/Line.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Line = function (geometry, material, mode) {\n    if (mode === 1) {\n      console.warn('THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.');\n      return new THREE.LineSegments(geometry, material);\n    }\n\n    THREE.Object3D.call(this);\n    this.type = 'Line';\n    this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n    this.material = material !== undefined ? material : new THREE.LineBasicMaterial({\n      color: Math.random() * 0xffffff\n    });\n  };\n\n  THREE.Line.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Line,\n    raycast: function () {\n      var inverseMatrix = new THREE.Matrix4();\n      var ray = new THREE.Ray();\n      var sphere = new THREE.Sphere();\n      return function raycast(raycaster, intersects) {\n        var precision = raycaster.linePrecision;\n        var precisionSq = precision * precision;\n        var geometry = this.geometry;\n        var matrixWorld = this.matrixWorld; // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n        var vStart = new THREE.Vector3();\n        var vEnd = new THREE.Vector3();\n        var interSegment = new THREE.Vector3();\n        var interRay = new THREE.Vector3();\n        var step = this instanceof THREE.LineSegments ? 2 : 1;\n\n        if (geometry instanceof THREE.BufferGeometry) {\n          var index = geometry.index;\n          var attributes = geometry.attributes;\n          var positions = attributes.position.array;\n\n          if (index !== null) {\n            var indices = index.array;\n\n            for (var i = 0, l = indices.length - 1; i < l; i += step) {\n              var a = indices[i];\n              var b = indices[i + 1];\n              vStart.fromArray(positions, a * 3);\n              vEnd.fromArray(positions, b * 3);\n              var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n              if (distSq > precisionSq) continue;\n              interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n              var distance = raycaster.ray.origin.distanceTo(interRay);\n              if (distance < raycaster.near || distance > raycaster.far) continue;\n              intersects.push({\n                distance: distance,\n                // What do we want? intersection point on the ray or on the segment??\n                // point: raycaster.ray.at( distance ),\n                point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                index: i,\n                face: null,\n                faceIndex: null,\n                object: this\n              });\n            }\n          } else {\n            for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n              vStart.fromArray(positions, 3 * i);\n              vEnd.fromArray(positions, 3 * i + 3);\n              var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n              if (distSq > precisionSq) continue;\n              interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n              var distance = raycaster.ray.origin.distanceTo(interRay);\n              if (distance < raycaster.near || distance > raycaster.far) continue;\n              intersects.push({\n                distance: distance,\n                // What do we want? intersection point on the ray or on the segment??\n                // point: raycaster.ray.at( distance ),\n                point: interSegment.clone().applyMatrix4(this.matrixWorld),\n                index: i,\n                face: null,\n                faceIndex: null,\n                object: this\n              });\n            }\n          }\n        } else if (geometry instanceof THREE.Geometry) {\n          var vertices = geometry.vertices;\n          var nbVertices = vertices.length;\n\n          for (var i = 0; i < nbVertices - 1; i += step) {\n            var distSq = ray.distanceSqToSegment(vertices[i], vertices[i + 1], interRay, interSegment);\n            if (distSq > precisionSq) continue;\n            interRay.applyMatrix4(this.matrixWorld); //Move back to world space for distance calculation\n\n            var distance = raycaster.ray.origin.distanceTo(interRay);\n            if (distance < raycaster.near || distance > raycaster.far) continue;\n            intersects.push({\n              distance: distance,\n              // What do we want? intersection point on the ray or on the segment??\n              // point: raycaster.ray.at( distance ),\n              point: interSegment.clone().applyMatrix4(this.matrixWorld),\n              index: i,\n              face: null,\n              faceIndex: null,\n              object: this\n            });\n          }\n        }\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    }\n  }); // File:src/objects/LineSegments.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.LineSegments = function (geometry, material) {\n    THREE.Line.call(this, geometry, material);\n    this.type = 'LineSegments';\n  };\n\n  THREE.LineSegments.prototype = Object.assign(Object.create(THREE.Line.prototype), {\n    constructor: THREE.LineSegments\n  }); // File:src/objects/Mesh.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mikael emtinger / http://gomo.se/\n   * @author jonobr1 / http://jonobr1.com/\n   */\n\n  THREE.Mesh = function (geometry, material) {\n    THREE.Object3D.call(this);\n    this.type = 'Mesh';\n    this.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\n    this.material = material !== undefined ? material : new THREE.MeshBasicMaterial({\n      color: Math.random() * 0xffffff\n    });\n    this.drawMode = THREE.TrianglesDrawMode;\n    this.updateMorphTargets();\n  };\n\n  THREE.Mesh.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Mesh,\n    setDrawMode: function setDrawMode(value) {\n      this.drawMode = value;\n    },\n    copy: function copy(source) {\n      THREE.Object3D.prototype.copy.call(this, source);\n      this.drawMode = source.drawMode;\n      return this;\n    },\n    updateMorphTargets: function updateMorphTargets() {\n      if (this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0) {\n        this.morphTargetBase = -1;\n        this.morphTargetInfluences = [];\n        this.morphTargetDictionary = {};\n\n        for (var m = 0, ml = this.geometry.morphTargets.length; m < ml; m++) {\n          this.morphTargetInfluences.push(0);\n          this.morphTargetDictionary[this.geometry.morphTargets[m].name] = m;\n        }\n      }\n    },\n    getMorphTargetIndexByName: function getMorphTargetIndexByName(name) {\n      if (this.morphTargetDictionary[name] !== undefined) {\n        return this.morphTargetDictionary[name];\n      }\n\n      console.warn('THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.');\n      return 0;\n    },\n    raycast: function () {\n      var inverseMatrix = new THREE.Matrix4();\n      var ray = new THREE.Ray();\n      var sphere = new THREE.Sphere();\n      var vA = new THREE.Vector3();\n      var vB = new THREE.Vector3();\n      var vC = new THREE.Vector3();\n      var tempA = new THREE.Vector3();\n      var tempB = new THREE.Vector3();\n      var tempC = new THREE.Vector3();\n      var uvA = new THREE.Vector2();\n      var uvB = new THREE.Vector2();\n      var uvC = new THREE.Vector2();\n      var barycoord = new THREE.Vector3();\n      var intersectionPoint = new THREE.Vector3();\n      var intersectionPointWorld = new THREE.Vector3();\n\n      function uvIntersection(point, p1, p2, p3, uv1, uv2, uv3) {\n        THREE.Triangle.barycoordFromPoint(point, p1, p2, p3, barycoord);\n        uv1.multiplyScalar(barycoord.x);\n        uv2.multiplyScalar(barycoord.y);\n        uv3.multiplyScalar(barycoord.z);\n        uv1.add(uv2).add(uv3);\n        return uv1.clone();\n      }\n\n      function checkIntersection(object, raycaster, ray, pA, pB, pC, point) {\n        var intersect;\n        var material = object.material;\n\n        if (material.side === THREE.BackSide) {\n          intersect = ray.intersectTriangle(pC, pB, pA, true, point);\n        } else {\n          intersect = ray.intersectTriangle(pA, pB, pC, material.side !== THREE.DoubleSide, point);\n        }\n\n        if (intersect === null) return null;\n        intersectionPointWorld.copy(point);\n        intersectionPointWorld.applyMatrix4(object.matrixWorld);\n        var distance = raycaster.ray.origin.distanceTo(intersectionPointWorld);\n        if (distance < raycaster.near || distance > raycaster.far) return null;\n        return {\n          distance: distance,\n          point: intersectionPointWorld.clone(),\n          object: object\n        };\n      }\n\n      function checkBufferGeometryIntersection(object, raycaster, ray, positions, uvs, a, b, c) {\n        vA.fromArray(positions, a * 3);\n        vB.fromArray(positions, b * 3);\n        vC.fromArray(positions, c * 3);\n        var intersection = checkIntersection(object, raycaster, ray, vA, vB, vC, intersectionPoint);\n\n        if (intersection) {\n          if (uvs) {\n            uvA.fromArray(uvs, a * 2);\n            uvB.fromArray(uvs, b * 2);\n            uvC.fromArray(uvs, c * 2);\n            intersection.uv = uvIntersection(intersectionPoint, vA, vB, vC, uvA, uvB, uvC);\n          }\n\n          intersection.face = new THREE.Face3(a, b, c, THREE.Triangle.normal(vA, vB, vC));\n          intersection.faceIndex = a;\n        }\n\n        return intersection;\n      }\n\n      return function raycast(raycaster, intersects) {\n        var geometry = this.geometry;\n        var material = this.material;\n        var matrixWorld = this.matrixWorld;\n        if (material === undefined) return; // Checking boundingSphere distance to ray\n\n        if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n        sphere.copy(geometry.boundingSphere);\n        sphere.applyMatrix4(matrixWorld);\n        if (raycaster.ray.intersectsSphere(sphere) === false) return; //\n\n        inverseMatrix.getInverse(matrixWorld);\n        ray.copy(raycaster.ray).applyMatrix4(inverseMatrix); // Check boundingBox before continuing\n\n        if (geometry.boundingBox !== null) {\n          if (ray.intersectsBox(geometry.boundingBox) === false) return;\n        }\n\n        var uvs, intersection;\n\n        if (geometry instanceof THREE.BufferGeometry) {\n          var a, b, c;\n          var index = geometry.index;\n          var attributes = geometry.attributes;\n          var positions = attributes.position.array;\n\n          if (attributes.uv !== undefined) {\n            uvs = attributes.uv.array;\n          }\n\n          if (index !== null) {\n            var indices = index.array;\n\n            for (var i = 0, l = indices.length; i < l; i += 3) {\n              a = indices[i];\n              b = indices[i + 1];\n              c = indices[i + 2];\n              intersection = checkBufferGeometryIntersection(this, raycaster, ray, positions, uvs, a, b, c);\n\n              if (intersection) {\n                intersection.faceIndex = Math.floor(i / 3); // triangle number in indices buffer semantics\n\n                intersects.push(intersection);\n              }\n            }\n          } else {\n            for (var i = 0, l = positions.length; i < l; i += 9) {\n              a = i / 3;\n              b = a + 1;\n              c = a + 2;\n              intersection = checkBufferGeometryIntersection(this, raycaster, ray, positions, uvs, a, b, c);\n\n              if (intersection) {\n                intersection.index = a; // triangle number in positions buffer semantics\n\n                intersects.push(intersection);\n              }\n            }\n          }\n        } else if (geometry instanceof THREE.Geometry) {\n          var fvA, fvB, fvC;\n          var isFaceMaterial = material instanceof THREE.MultiMaterial;\n          var materials = isFaceMaterial === true ? material.materials : null;\n          var vertices = geometry.vertices;\n          var faces = geometry.faces;\n          var faceVertexUvs = geometry.faceVertexUvs[0];\n          if (faceVertexUvs.length > 0) uvs = faceVertexUvs;\n\n          for (var f = 0, fl = faces.length; f < fl; f++) {\n            var face = faces[f];\n            var faceMaterial = isFaceMaterial === true ? materials[face.materialIndex] : material;\n            if (faceMaterial === undefined) continue;\n            fvA = vertices[face.a];\n            fvB = vertices[face.b];\n            fvC = vertices[face.c];\n\n            if (faceMaterial.morphTargets === true) {\n              var morphTargets = geometry.morphTargets;\n              var morphInfluences = this.morphTargetInfluences;\n              vA.set(0, 0, 0);\n              vB.set(0, 0, 0);\n              vC.set(0, 0, 0);\n\n              for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                var influence = morphInfluences[t];\n                if (influence === 0) continue;\n                var targets = morphTargets[t].vertices;\n                vA.addScaledVector(tempA.subVectors(targets[face.a], fvA), influence);\n                vB.addScaledVector(tempB.subVectors(targets[face.b], fvB), influence);\n                vC.addScaledVector(tempC.subVectors(targets[face.c], fvC), influence);\n              }\n\n              vA.add(fvA);\n              vB.add(fvB);\n              vC.add(fvC);\n              fvA = vA;\n              fvB = vB;\n              fvC = vC;\n            }\n\n            intersection = checkIntersection(this, raycaster, ray, fvA, fvB, fvC, intersectionPoint);\n\n            if (intersection) {\n              if (uvs) {\n                var uvs_f = uvs[f];\n                uvA.copy(uvs_f[0]);\n                uvB.copy(uvs_f[1]);\n                uvC.copy(uvs_f[2]);\n                intersection.uv = uvIntersection(intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC);\n              }\n\n              intersection.face = face;\n              intersection.faceIndex = f;\n              intersects.push(intersection);\n            }\n          }\n        }\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor(this.geometry, this.material).copy(this);\n    }\n  }); // File:src/objects/Bone.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author ikerr / http://verold.com\n   */\n\n  THREE.Bone = function (skin) {\n    THREE.Object3D.call(this);\n    this.type = 'Bone';\n    this.skin = skin;\n  };\n\n  THREE.Bone.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Bone,\n    copy: function copy(source) {\n      THREE.Object3D.prototype.copy.call(this, source);\n      this.skin = source.skin;\n      return this;\n    }\n  }); // File:src/objects/Skeleton.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author michael guerrero / http://realitymeltdown.com\n   * @author ikerr / http://verold.com\n   */\n\n  THREE.Skeleton = function (bones, boneInverses, useVertexTexture) {\n    this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\n    this.identityMatrix = new THREE.Matrix4(); // copy the bone array\n\n    bones = bones || [];\n    this.bones = bones.slice(0); // create a bone texture or an array of floats\n\n    if (this.useVertexTexture) {\n      // layout (1 matrix = 4 pixels)\n      //      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n      //  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n      //       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n      //       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n      //       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n      var size = Math.sqrt(this.bones.length * 4); // 4 pixels needed for 1 matrix\n\n      size = THREE.Math.nextPowerOfTwo(Math.ceil(size));\n      size = Math.max(size, 4);\n      this.boneTextureWidth = size;\n      this.boneTextureHeight = size;\n      this.boneMatrices = new Float32Array(this.boneTextureWidth * this.boneTextureHeight * 4); // 4 floats per RGBA pixel\n\n      this.boneTexture = new THREE.DataTexture(this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType);\n    } else {\n      this.boneMatrices = new Float32Array(16 * this.bones.length);\n    } // use the supplied bone inverses or calculate the inverses\n\n\n    if (boneInverses === undefined) {\n      this.calculateInverses();\n    } else {\n      if (this.bones.length === boneInverses.length) {\n        this.boneInverses = boneInverses.slice(0);\n      } else {\n        console.warn('THREE.Skeleton bonInverses is the wrong length.');\n        this.boneInverses = [];\n\n        for (var b = 0, bl = this.bones.length; b < bl; b++) {\n          this.boneInverses.push(new THREE.Matrix4());\n        }\n      }\n    }\n  };\n\n  Object.assign(THREE.Skeleton.prototype, {\n    calculateInverses: function calculateInverses() {\n      this.boneInverses = [];\n\n      for (var b = 0, bl = this.bones.length; b < bl; b++) {\n        var inverse = new THREE.Matrix4();\n\n        if (this.bones[b]) {\n          inverse.getInverse(this.bones[b].matrixWorld);\n        }\n\n        this.boneInverses.push(inverse);\n      }\n    },\n    pose: function pose() {\n      var bone; // recover the bind-time world matrices\n\n      for (var b = 0, bl = this.bones.length; b < bl; b++) {\n        bone = this.bones[b];\n\n        if (bone) {\n          bone.matrixWorld.getInverse(this.boneInverses[b]);\n        }\n      } // compute the local matrices, positions, rotations and scales\n\n\n      for (var b = 0, bl = this.bones.length; b < bl; b++) {\n        bone = this.bones[b];\n\n        if (bone) {\n          if (bone.parent instanceof THREE.Bone) {\n            bone.matrix.getInverse(bone.parent.matrixWorld);\n            bone.matrix.multiply(bone.matrixWorld);\n          } else {\n            bone.matrix.copy(bone.matrixWorld);\n          }\n\n          bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n        }\n      }\n    },\n    update: function () {\n      var offsetMatrix = new THREE.Matrix4();\n      return function update() {\n        // flatten bone matrices to array\n        for (var b = 0, bl = this.bones.length; b < bl; b++) {\n          // compute the offset between the current and the original transform\n          var matrix = this.bones[b] ? this.bones[b].matrixWorld : this.identityMatrix;\n          offsetMatrix.multiplyMatrices(matrix, this.boneInverses[b]);\n          offsetMatrix.toArray(this.boneMatrices, b * 16);\n        }\n\n        if (this.useVertexTexture) {\n          this.boneTexture.needsUpdate = true;\n        }\n      };\n    }(),\n    clone: function clone() {\n      return new THREE.Skeleton(this.bones, this.boneInverses, this.useVertexTexture);\n    }\n  }); // File:src/objects/SkinnedMesh.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author ikerr / http://verold.com\n   */\n\n  THREE.SkinnedMesh = function (geometry, material, useVertexTexture) {\n    THREE.Mesh.call(this, geometry, material);\n    this.type = 'SkinnedMesh';\n    this.bindMode = \"attached\";\n    this.bindMatrix = new THREE.Matrix4();\n    this.bindMatrixInverse = new THREE.Matrix4(); // init bones\n    // TODO: remove bone creation as there is no reason (other than\n    // convenience) for THREE.SkinnedMesh to do this.\n\n    var bones = [];\n\n    if (this.geometry && this.geometry.bones !== undefined) {\n      var bone, gbone;\n\n      for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {\n        gbone = this.geometry.bones[b];\n        bone = new THREE.Bone(this);\n        bones.push(bone);\n        bone.name = gbone.name;\n        bone.position.fromArray(gbone.pos);\n        bone.quaternion.fromArray(gbone.rotq);\n        if (gbone.scl !== undefined) bone.scale.fromArray(gbone.scl);\n      }\n\n      for (var b = 0, bl = this.geometry.bones.length; b < bl; ++b) {\n        gbone = this.geometry.bones[b];\n\n        if (gbone.parent !== -1 && gbone.parent !== null && bones[gbone.parent] !== undefined) {\n          bones[gbone.parent].add(bones[b]);\n        } else {\n          this.add(bones[b]);\n        }\n      }\n    }\n\n    this.normalizeSkinWeights();\n    this.updateMatrixWorld(true);\n    this.bind(new THREE.Skeleton(bones, undefined, useVertexTexture), this.matrixWorld);\n  };\n\n  THREE.SkinnedMesh.prototype = Object.assign(Object.create(THREE.Mesh.prototype), {\n    constructor: THREE.SkinnedMesh,\n    bind: function bind(skeleton, bindMatrix) {\n      this.skeleton = skeleton;\n\n      if (bindMatrix === undefined) {\n        this.updateMatrixWorld(true);\n        this.skeleton.calculateInverses();\n        bindMatrix = this.matrixWorld;\n      }\n\n      this.bindMatrix.copy(bindMatrix);\n      this.bindMatrixInverse.getInverse(bindMatrix);\n    },\n    pose: function pose() {\n      this.skeleton.pose();\n    },\n    normalizeSkinWeights: function normalizeSkinWeights() {\n      if (this.geometry instanceof THREE.Geometry) {\n        for (var i = 0; i < this.geometry.skinWeights.length; i++) {\n          var sw = this.geometry.skinWeights[i];\n          var scale = 1.0 / sw.lengthManhattan();\n\n          if (scale !== Infinity) {\n            sw.multiplyScalar(scale);\n          } else {\n            sw.set(1, 0, 0, 0); // do something reasonable\n          }\n        }\n      } else if (this.geometry instanceof THREE.BufferGeometry) {\n        var vec = new THREE.Vector4();\n        var skinWeight = this.geometry.attributes.skinWeight;\n\n        for (var i = 0; i < skinWeight.count; i++) {\n          vec.x = skinWeight.getX(i);\n          vec.y = skinWeight.getY(i);\n          vec.z = skinWeight.getZ(i);\n          vec.w = skinWeight.getW(i);\n          var scale = 1.0 / vec.lengthManhattan();\n\n          if (scale !== Infinity) {\n            vec.multiplyScalar(scale);\n          } else {\n            vec.set(1, 0, 0, 0); // do something reasonable\n          }\n\n          skinWeight.setXYZW(i, vec.x, vec.y, vec.z, vec.w);\n        }\n      }\n    },\n    updateMatrixWorld: function updateMatrixWorld(force) {\n      THREE.Mesh.prototype.updateMatrixWorld.call(this, true);\n\n      if (this.bindMode === \"attached\") {\n        this.bindMatrixInverse.getInverse(this.matrixWorld);\n      } else if (this.bindMode === \"detached\") {\n        this.bindMatrixInverse.getInverse(this.bindMatrix);\n      } else {\n        console.warn('THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode);\n      }\n    },\n    clone: function clone() {\n      return new this.constructor(this.geometry, this.material, this.skeleton.useVertexTexture).copy(this);\n    }\n  }); // File:src/objects/LOD.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.LOD = function () {\n    THREE.Object3D.call(this);\n    this.type = 'LOD';\n    Object.defineProperties(this, {\n      levels: {\n        enumerable: true,\n        value: []\n      }\n    });\n  };\n\n  THREE.LOD.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.LOD,\n    copy: function copy(source) {\n      THREE.Object3D.prototype.copy.call(this, source, false);\n      var levels = source.levels;\n\n      for (var i = 0, l = levels.length; i < l; i++) {\n        var level = levels[i];\n        this.addLevel(level.object.clone(), level.distance);\n      }\n\n      return this;\n    },\n    addLevel: function addLevel(object, distance) {\n      if (distance === undefined) distance = 0;\n      distance = Math.abs(distance);\n      var levels = this.levels;\n\n      for (var l = 0; l < levels.length; l++) {\n        if (distance < levels[l].distance) {\n          break;\n        }\n      }\n\n      levels.splice(l, 0, {\n        distance: distance,\n        object: object\n      });\n      this.add(object);\n    },\n    getObjectForDistance: function getObjectForDistance(distance) {\n      var levels = this.levels;\n\n      for (var i = 1, l = levels.length; i < l; i++) {\n        if (distance < levels[i].distance) {\n          break;\n        }\n      }\n\n      return levels[i - 1].object;\n    },\n    raycast: function () {\n      var matrixPosition = new THREE.Vector3();\n      return function raycast(raycaster, intersects) {\n        matrixPosition.setFromMatrixPosition(this.matrixWorld);\n        var distance = raycaster.ray.origin.distanceTo(matrixPosition);\n        this.getObjectForDistance(distance).raycast(raycaster, intersects);\n      };\n    }(),\n    update: function () {\n      var v1 = new THREE.Vector3();\n      var v2 = new THREE.Vector3();\n      return function update(camera) {\n        var levels = this.levels;\n\n        if (levels.length > 1) {\n          v1.setFromMatrixPosition(camera.matrixWorld);\n          v2.setFromMatrixPosition(this.matrixWorld);\n          var distance = v1.distanceTo(v2);\n          levels[0].object.visible = true;\n\n          for (var i = 1, l = levels.length; i < l; i++) {\n            if (distance >= levels[i].distance) {\n              levels[i - 1].object.visible = false;\n              levels[i].object.visible = true;\n            } else {\n              break;\n            }\n          }\n\n          for (; i < l; i++) {\n            levels[i].object.visible = false;\n          }\n        }\n      };\n    }(),\n    toJSON: function toJSON(meta) {\n      var data = THREE.Object3D.prototype.toJSON.call(this, meta);\n      data.object.levels = [];\n      var levels = this.levels;\n\n      for (var i = 0, l = levels.length; i < l; i++) {\n        var level = levels[i];\n        data.object.levels.push({\n          object: level.object.uuid,\n          distance: level.distance\n        });\n      }\n\n      return data;\n    }\n  }); // File:src/objects/Sprite.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.Sprite = function (material) {\n    THREE.Object3D.call(this);\n    this.type = 'Sprite';\n    this.material = material !== undefined ? material : new THREE.SpriteMaterial();\n  };\n\n  THREE.Sprite.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.Sprite,\n    raycast: function () {\n      var matrixPosition = new THREE.Vector3();\n      return function raycast(raycaster, intersects) {\n        matrixPosition.setFromMatrixPosition(this.matrixWorld);\n        var distanceSq = raycaster.ray.distanceSqToPoint(matrixPosition);\n        var guessSizeSq = this.scale.x * this.scale.y / 4;\n\n        if (distanceSq > guessSizeSq) {\n          return;\n        }\n\n        intersects.push({\n          distance: Math.sqrt(distanceSq),\n          point: this.position,\n          face: null,\n          object: this\n        });\n      };\n    }(),\n    clone: function clone() {\n      return new this.constructor(this.material).copy(this);\n    }\n  }); // File:src/objects/LensFlare.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.LensFlare = function (texture, size, distance, blending, color) {\n    THREE.Object3D.call(this);\n    this.lensFlares = [];\n    this.positionScreen = new THREE.Vector3();\n    this.customUpdateCallback = undefined;\n\n    if (texture !== undefined) {\n      this.add(texture, size, distance, blending, color);\n    }\n  };\n\n  THREE.LensFlare.prototype = Object.assign(Object.create(THREE.Object3D.prototype), {\n    constructor: THREE.LensFlare,\n    copy: function copy(source) {\n      THREE.Object3D.prototype.copy.call(this, source);\n      this.positionScreen.copy(source.positionScreen);\n      this.customUpdateCallback = source.customUpdateCallback;\n\n      for (var i = 0, l = source.lensFlares.length; i < l; i++) {\n        this.lensFlares.push(source.lensFlares[i]);\n      }\n\n      return this;\n    },\n    add: function add(texture, size, distance, blending, color, opacity) {\n      if (size === undefined) size = -1;\n      if (distance === undefined) distance = 0;\n      if (opacity === undefined) opacity = 1;\n      if (color === undefined) color = new THREE.Color(0xffffff);\n      if (blending === undefined) blending = THREE.NormalBlending;\n      distance = Math.min(distance, Math.max(0, distance));\n      this.lensFlares.push({\n        texture: texture,\n        // THREE.Texture\n        size: size,\n        // size in pixels (-1 = use texture.width)\n        distance: distance,\n        // distance (0-1) from light source (0=at light source)\n        x: 0,\n        y: 0,\n        z: 0,\n        // screen position (-1 => 1) z = 0 is in front z = 1 is back\n        scale: 1,\n        // scale\n        rotation: 0,\n        // rotation\n        opacity: opacity,\n        // opacity\n        color: color,\n        // color\n        blending: blending // blending\n\n      });\n    },\n\n    /*\n     * Update lens flares update positions on all flares based on the screen position\n     * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\n     */\n    updateLensFlares: function updateLensFlares() {\n      var f,\n          fl = this.lensFlares.length;\n      var flare;\n      var vecX = -this.positionScreen.x * 2;\n      var vecY = -this.positionScreen.y * 2;\n\n      for (f = 0; f < fl; f++) {\n        flare = this.lensFlares[f];\n        flare.x = this.positionScreen.x + vecX * flare.distance;\n        flare.y = this.positionScreen.y + vecY * flare.distance;\n        flare.wantedRotation = flare.x * Math.PI * 0.25;\n        flare.rotation += (flare.wantedRotation - flare.rotation) * 0.25;\n      }\n    }\n  }); // File:src/scenes/Scene.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Scene = function () {\n    THREE.Object3D.call(this);\n    this.type = 'Scene';\n    this.background = null;\n    this.fog = null;\n    this.overrideMaterial = null;\n    this.autoUpdate = true; // checked by the renderer\n  };\n\n  THREE.Scene.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.Scene.prototype.constructor = THREE.Scene;\n\n  THREE.Scene.prototype.copy = function (source, recursive) {\n    THREE.Object3D.prototype.copy.call(this, source, recursive);\n    if (source.background !== null) this.background = source.background.clone();\n    if (source.fog !== null) this.fog = source.fog.clone();\n    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();\n    this.autoUpdate = source.autoUpdate;\n    this.matrixAutoUpdate = source.matrixAutoUpdate;\n    return this;\n  }; // File:src/scenes/Fog.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n\n  THREE.Fog = function (color, near, far) {\n    this.name = '';\n    this.color = new THREE.Color(color);\n    this.near = near !== undefined ? near : 1;\n    this.far = far !== undefined ? far : 1000;\n  };\n\n  THREE.Fog.prototype.clone = function () {\n    return new THREE.Fog(this.color.getHex(), this.near, this.far);\n  }; // File:src/scenes/FogExp2.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n\n  THREE.FogExp2 = function (color, density) {\n    this.name = '';\n    this.color = new THREE.Color(color);\n    this.density = density !== undefined ? density : 0.00025;\n  };\n\n  THREE.FogExp2.prototype.clone = function () {\n    return new THREE.FogExp2(this.color.getHex(), this.density);\n  }; // File:src/renderers/shaders/ShaderChunk.js\n\n\n  THREE.ShaderChunk = {}; // File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\n\n  THREE.ShaderChunk['alphamap_fragment'] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\n\n  THREE.ShaderChunk['alphamap_pars_fragment'] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\n\n  THREE.ShaderChunk['alphatest_fragment'] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\n\n  THREE.ShaderChunk['aomap_fragment'] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\n\n  THREE.ShaderChunk['aomap_pars_fragment'] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\n\n  THREE.ShaderChunk['begin_vertex'] = \"\\nvec3 transformed = vec3( position );\\n\"; // File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\n\n  THREE.ShaderChunk['beginnormal_vertex'] = \"\\nvec3 objectNormal = vec3( normal );\\n\"; // File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\n\n  THREE.ShaderChunk['bsdfs'] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['bumpmap_pars_fragment'] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\n\n  THREE.ShaderChunk['clipping_planes_fragment'] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\n\n  THREE.ShaderChunk['clipping_planes_pars_fragment'] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\n\n  THREE.ShaderChunk['clipping_planes_pars_vertex'] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\n\n  THREE.ShaderChunk['clipping_planes_vertex'] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\n\n  THREE.ShaderChunk['color_fragment'] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\n\n  THREE.ShaderChunk['color_pars_fragment'] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\n\n  THREE.ShaderChunk['color_pars_vertex'] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\n\n  THREE.ShaderChunk['color_vertex'] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/common.glsl\n\n  THREE.ShaderChunk['common'] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\n\n  THREE.ShaderChunk['cube_uv_reflection_fragment'] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\n\n  THREE.ShaderChunk['defaultnormal_vertex'] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\"; // File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\n\n  THREE.ShaderChunk['displacementmap_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\n\n  THREE.ShaderChunk['displacementmap_pars_vertex'] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\n\n  THREE.ShaderChunk['emissivemap_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\n\n  THREE.ShaderChunk['emissivemap_pars_fragment'] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\n\n  THREE.ShaderChunk['encodings_pars_fragment'] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\n\n  THREE.ShaderChunk['encodings_fragment'] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\n\n  THREE.ShaderChunk['envmap_fragment'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['envmap_pars_fragment'] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\n\n  THREE.ShaderChunk['envmap_pars_vertex'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\n\n  THREE.ShaderChunk['envmap_vertex'] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\n\n  THREE.ShaderChunk['fog_fragment'] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\n\n  THREE.ShaderChunk['fog_pars_fragment'] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\n\n  THREE.ShaderChunk['lightmap_fragment'] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['lightmap_pars_fragment'] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\n\n  THREE.ShaderChunk['lights_lambert_vertex'] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\n\n  THREE.ShaderChunk['lights_pars'] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#include <normal_flip>\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#include <normal_flip>\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\n\n  THREE.ShaderChunk['lights_phong_fragment'] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\n\n  THREE.ShaderChunk['lights_phong_pars_fragment'] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\n\n  THREE.ShaderChunk['lights_physical_fragment'] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\n\n  THREE.ShaderChunk['lights_physical_pars_fragment'] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t\tfloat clearCoat;\\n\t\tfloat clearCoatRoughness;\\n\t#endif\\n};\\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\\n}\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\t#ifndef STANDARD\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\t#ifndef STANDARD\\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\t#ifndef STANDARD\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\tfloat dotNL = dotNV;\\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\\n\t#else\\n\t\tfloat clearCoatDHR = 0.0;\\n\t#endif\\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n\t#ifndef STANDARD\\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\\n\t#endif\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/lights_template.glsl\n\n  THREE.ShaderChunk['lights_template'] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\t#ifndef STANDARD\\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\\n\t#else\\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\\n\t#endif\\n\t\t\\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\n\n  THREE.ShaderChunk['logdepthbuf_fragment'] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\n\n  THREE.ShaderChunk['logdepthbuf_pars_fragment'] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\n\n  THREE.ShaderChunk['logdepthbuf_pars_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\n\n  THREE.ShaderChunk['logdepthbuf_vertex'] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\n\n  THREE.ShaderChunk['map_fragment'] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\n\n  THREE.ShaderChunk['map_pars_fragment'] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\n\n  THREE.ShaderChunk['map_particle_fragment'] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\n\n  THREE.ShaderChunk['map_particle_pars_fragment'] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\n\n  THREE.ShaderChunk['metalnessmap_fragment'] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['metalnessmap_pars_fragment'] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\n\n  THREE.ShaderChunk['morphnormal_vertex'] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\n\n  THREE.ShaderChunk['morphtarget_pars_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\n\n  THREE.ShaderChunk['morphtarget_vertex'] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/normal_flip.glsl\n\n  THREE.ShaderChunk['normal_flip'] = \"#ifdef DOUBLE_SIDED\\n\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n#else\\n\tfloat flipNormal = 1.0;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\n\n  THREE.ShaderChunk['normal_fragment'] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal ) * flipNormal;\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['normalmap_pars_fragment'] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/packing.glsl\n\n  THREE.ShaderChunk['packing'] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\n\n  THREE.ShaderChunk['premultiplied_alpha_fragment'] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\n\n  THREE.ShaderChunk['project_vertex'] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\"; // File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\n\n  THREE.ShaderChunk['roughnessmap_fragment'] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['roughnessmap_pars_fragment'] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['shadowmap_pars_fragment'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\n\n  THREE.ShaderChunk['shadowmap_pars_vertex'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\n\n  THREE.ShaderChunk['shadowmap_vertex'] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\n\n  THREE.ShaderChunk['shadowmask_pars_fragment'] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\n\n  THREE.ShaderChunk['skinbase_vertex'] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\n\n  THREE.ShaderChunk['skinning_pars_vertex'] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\n\n  THREE.ShaderChunk['skinning_vertex'] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\n\n  THREE.ShaderChunk['skinnormal_vertex'] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\n\n  THREE.ShaderChunk['specularmap_fragment'] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\n\n  THREE.ShaderChunk['specularmap_pars_fragment'] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\n\n  THREE.ShaderChunk['tonemapping_fragment'] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\n\n  THREE.ShaderChunk['tonemapping_pars_fragment'] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\n\n  THREE.ShaderChunk['uv2_pars_fragment'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\n\n  THREE.ShaderChunk['uv2_pars_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\n\n  THREE.ShaderChunk['uv2_vertex'] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\n\n  THREE.ShaderChunk['uv_pars_fragment'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\n\n  THREE.ShaderChunk['uv_pars_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\"; // File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\n\n  THREE.ShaderChunk['uv_vertex'] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\"; // File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\n\n  THREE.ShaderChunk['worldpos_vertex'] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\"; // File:src/renderers/shaders/UniformsUtils.js\n\n  /**\n   * Uniform Utilities\n   */\n\n  THREE.UniformsUtils = {\n    merge: function merge(uniforms) {\n      var merged = {};\n\n      for (var u = 0; u < uniforms.length; u++) {\n        var tmp = this.clone(uniforms[u]);\n\n        for (var p in tmp) {\n          merged[p] = tmp[p];\n        }\n      }\n\n      return merged;\n    },\n    clone: function clone(uniforms_src) {\n      var uniforms_dst = {};\n\n      for (var u in uniforms_src) {\n        uniforms_dst[u] = {};\n\n        for (var p in uniforms_src[u]) {\n          var parameter_src = uniforms_src[u][p];\n\n          if (parameter_src instanceof THREE.Color || parameter_src instanceof THREE.Vector2 || parameter_src instanceof THREE.Vector3 || parameter_src instanceof THREE.Vector4 || parameter_src instanceof THREE.Matrix3 || parameter_src instanceof THREE.Matrix4 || parameter_src instanceof THREE.Texture) {\n            uniforms_dst[u][p] = parameter_src.clone();\n          } else if (Array.isArray(parameter_src)) {\n            uniforms_dst[u][p] = parameter_src.slice();\n          } else {\n            uniforms_dst[u][p] = parameter_src;\n          }\n        }\n      }\n\n      return uniforms_dst;\n    }\n  }; // File:src/renderers/shaders/UniformsLib.js\n\n  /**\n   * Uniforms library for shared webgl shaders\n   */\n\n  THREE.UniformsLib = {\n    common: {\n      \"diffuse\": {\n        value: new THREE.Color(0xeeeeee)\n      },\n      \"opacity\": {\n        value: 1.0\n      },\n      \"map\": {\n        value: null\n      },\n      \"offsetRepeat\": {\n        value: new THREE.Vector4(0, 0, 1, 1)\n      },\n      \"specularMap\": {\n        value: null\n      },\n      \"alphaMap\": {\n        value: null\n      },\n      \"envMap\": {\n        value: null\n      },\n      \"flipEnvMap\": {\n        value: -1\n      },\n      \"reflectivity\": {\n        value: 1.0\n      },\n      \"refractionRatio\": {\n        value: 0.98\n      }\n    },\n    aomap: {\n      \"aoMap\": {\n        value: null\n      },\n      \"aoMapIntensity\": {\n        value: 1\n      }\n    },\n    lightmap: {\n      \"lightMap\": {\n        value: null\n      },\n      \"lightMapIntensity\": {\n        value: 1\n      }\n    },\n    emissivemap: {\n      \"emissiveMap\": {\n        value: null\n      }\n    },\n    bumpmap: {\n      \"bumpMap\": {\n        value: null\n      },\n      \"bumpScale\": {\n        value: 1\n      }\n    },\n    normalmap: {\n      \"normalMap\": {\n        value: null\n      },\n      \"normalScale\": {\n        value: new THREE.Vector2(1, 1)\n      }\n    },\n    displacementmap: {\n      \"displacementMap\": {\n        value: null\n      },\n      \"displacementScale\": {\n        value: 1\n      },\n      \"displacementBias\": {\n        value: 0\n      }\n    },\n    roughnessmap: {\n      \"roughnessMap\": {\n        value: null\n      }\n    },\n    metalnessmap: {\n      \"metalnessMap\": {\n        value: null\n      }\n    },\n    fog: {\n      \"fogDensity\": {\n        value: 0.00025\n      },\n      \"fogNear\": {\n        value: 1\n      },\n      \"fogFar\": {\n        value: 2000\n      },\n      \"fogColor\": {\n        value: new THREE.Color(0xffffff)\n      }\n    },\n    lights: {\n      \"ambientLightColor\": {\n        value: []\n      },\n      \"directionalLights\": {\n        value: [],\n        properties: {\n          \"direction\": {},\n          \"color\": {},\n          \"shadow\": {},\n          \"shadowBias\": {},\n          \"shadowRadius\": {},\n          \"shadowMapSize\": {}\n        }\n      },\n      \"directionalShadowMap\": {\n        value: []\n      },\n      \"directionalShadowMatrix\": {\n        value: []\n      },\n      \"spotLights\": {\n        value: [],\n        properties: {\n          \"color\": {},\n          \"position\": {},\n          \"direction\": {},\n          \"distance\": {},\n          \"coneCos\": {},\n          \"penumbraCos\": {},\n          \"decay\": {},\n          \"shadow\": {},\n          \"shadowBias\": {},\n          \"shadowRadius\": {},\n          \"shadowMapSize\": {}\n        }\n      },\n      \"spotShadowMap\": {\n        value: []\n      },\n      \"spotShadowMatrix\": {\n        value: []\n      },\n      \"pointLights\": {\n        value: [],\n        properties: {\n          \"color\": {},\n          \"position\": {},\n          \"decay\": {},\n          \"distance\": {},\n          \"shadow\": {},\n          \"shadowBias\": {},\n          \"shadowRadius\": {},\n          \"shadowMapSize\": {}\n        }\n      },\n      \"pointShadowMap\": {\n        value: []\n      },\n      \"pointShadowMatrix\": {\n        value: []\n      },\n      \"hemisphereLights\": {\n        value: [],\n        properties: {\n          \"direction\": {},\n          \"skyColor\": {},\n          \"groundColor\": {}\n        }\n      }\n    },\n    points: {\n      \"diffuse\": {\n        value: new THREE.Color(0xeeeeee)\n      },\n      \"opacity\": {\n        value: 1.0\n      },\n      \"size\": {\n        value: 1.0\n      },\n      \"scale\": {\n        value: 1.0\n      },\n      \"map\": {\n        value: null\n      },\n      \"offsetRepeat\": {\n        value: new THREE.Vector4(0, 0, 1, 1)\n      }\n    }\n  }; // File:src/renderers/shaders/ShaderLib/cube_frag.glsl\n\n  THREE.ShaderChunk['cube_frag'] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\tgl_FragColor.a *= opacity;\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/cube_vert.glsl\n\n  THREE.ShaderChunk['cube_vert'] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/depth_frag.glsl\n\n  THREE.ShaderChunk['depth_frag'] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/depth_vert.glsl\n\n  THREE.ShaderChunk['depth_vert'] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\n\n  THREE.ShaderChunk['distanceRGBA_frag'] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\n\n  THREE.ShaderChunk['distanceRGBA_vert'] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\n\n  THREE.ShaderChunk['equirect_frag'] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\n\n  THREE.ShaderChunk['equirect_vert'] = \"varying vec3 vWorldPosition;\\n#include <common>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\n\n  THREE.ShaderChunk['linedashed_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\n\n  THREE.ShaderChunk['linedashed_vert'] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\n\n  THREE.ShaderChunk['meshbasic_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\n\n  THREE.ShaderChunk['meshbasic_vert'] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\n\n  THREE.ShaderChunk['meshlambert_frag'] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <normal_flip>\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\n\n  THREE.ShaderChunk['meshlambert_vert'] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\n\n  THREE.ShaderChunk['meshphong_frag'] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\n\n  THREE.ShaderChunk['meshphong_vert'] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\n\n  THREE.ShaderChunk['meshphysical_frag'] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifndef STANDARD\\n\tuniform float clearCoat;\\n\tuniform float clearCoatRoughness;\\n#endif\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_flip>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\n\n  THREE.ShaderChunk['meshphysical_vert'] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/normal_frag.glsl\n\n  THREE.ShaderChunk['normal_frag'] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/normal_vert.glsl\n\n  THREE.ShaderChunk['normal_vert'] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/points_frag.glsl\n\n  THREE.ShaderChunk['points_frag'] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/points_vert.glsl\n\n  THREE.ShaderChunk['points_vert'] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\n\n  THREE.ShaderChunk['shadow_frag'] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\"; // File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\n\n  THREE.ShaderChunk['shadow_vert'] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\"; // File:src/renderers/shaders/ShaderLib.js\n\n  /**\n   * Webgl Shader Library for three.js\n   *\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author mikael emtinger / http://gomo.se/\n   */\n\n  THREE.ShaderLib = {\n    'basic': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['fog']]),\n      vertexShader: THREE.ShaderChunk['meshbasic_vert'],\n      fragmentShader: THREE.ShaderChunk['meshbasic_frag']\n    },\n    'lambert': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n        \"emissive\": {\n          value: new THREE.Color(0x000000)\n        }\n      }]),\n      vertexShader: THREE.ShaderChunk['meshlambert_vert'],\n      fragmentShader: THREE.ShaderChunk['meshlambert_frag']\n    },\n    'phong': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['bumpmap'], THREE.UniformsLib['normalmap'], THREE.UniformsLib['displacementmap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n        \"emissive\": {\n          value: new THREE.Color(0x000000)\n        },\n        \"specular\": {\n          value: new THREE.Color(0x111111)\n        },\n        \"shininess\": {\n          value: 30\n        }\n      }]),\n      vertexShader: THREE.ShaderChunk['meshphong_vert'],\n      fragmentShader: THREE.ShaderChunk['meshphong_frag']\n    },\n    'standard': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['aomap'], THREE.UniformsLib['lightmap'], THREE.UniformsLib['emissivemap'], THREE.UniformsLib['bumpmap'], THREE.UniformsLib['normalmap'], THREE.UniformsLib['displacementmap'], THREE.UniformsLib['roughnessmap'], THREE.UniformsLib['metalnessmap'], THREE.UniformsLib['fog'], THREE.UniformsLib['lights'], {\n        \"emissive\": {\n          value: new THREE.Color(0x000000)\n        },\n        \"roughness\": {\n          value: 0.5\n        },\n        \"metalness\": {\n          value: 0\n        },\n        \"envMapIntensity\": {\n          value: 1\n        } // temporary\n\n      }]),\n      vertexShader: THREE.ShaderChunk['meshphysical_vert'],\n      fragmentShader: THREE.ShaderChunk['meshphysical_frag']\n    },\n    'points': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['points'], THREE.UniformsLib['fog']]),\n      vertexShader: THREE.ShaderChunk['points_vert'],\n      fragmentShader: THREE.ShaderChunk['points_frag']\n    },\n    'dashed': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['fog'], {\n        \"scale\": {\n          value: 1\n        },\n        \"dashSize\": {\n          value: 1\n        },\n        \"totalSize\": {\n          value: 2\n        }\n      }]),\n      vertexShader: THREE.ShaderChunk['linedashed_vert'],\n      fragmentShader: THREE.ShaderChunk['linedashed_frag']\n    },\n    'depth': {\n      uniforms: THREE.UniformsUtils.merge([THREE.UniformsLib['common'], THREE.UniformsLib['displacementmap']]),\n      vertexShader: THREE.ShaderChunk['depth_vert'],\n      fragmentShader: THREE.ShaderChunk['depth_frag']\n    },\n    'normal': {\n      uniforms: {\n        \"opacity\": {\n          value: 1.0\n        }\n      },\n      vertexShader: THREE.ShaderChunk['normal_vert'],\n      fragmentShader: THREE.ShaderChunk['normal_frag']\n    },\n\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n    'cube': {\n      uniforms: {\n        \"tCube\": {\n          value: null\n        },\n        \"tFlip\": {\n          value: -1\n        },\n        \"opacity\": {\n          value: 1.0\n        }\n      },\n      vertexShader: THREE.ShaderChunk['cube_vert'],\n      fragmentShader: THREE.ShaderChunk['cube_frag']\n    },\n\n    /* -------------------------------------------------------------------------\n    //\tCube map shader\n     ------------------------------------------------------------------------- */\n    'equirect': {\n      uniforms: {\n        \"tEquirect\": {\n          value: null\n        },\n        \"tFlip\": {\n          value: -1\n        }\n      },\n      vertexShader: THREE.ShaderChunk['equirect_vert'],\n      fragmentShader: THREE.ShaderChunk['equirect_frag']\n    },\n    'distanceRGBA': {\n      uniforms: {\n        \"lightPos\": {\n          value: new THREE.Vector3()\n        }\n      },\n      vertexShader: THREE.ShaderChunk['distanceRGBA_vert'],\n      fragmentShader: THREE.ShaderChunk['distanceRGBA_frag']\n    }\n  };\n  THREE.ShaderLib['physical'] = {\n    uniforms: THREE.UniformsUtils.merge([THREE.ShaderLib['standard'].uniforms, {\n      \"clearCoat\": {\n        value: 0\n      },\n      \"clearCoatRoughness\": {\n        value: 0\n      }\n    }]),\n    vertexShader: THREE.ShaderChunk['meshphysical_vert'],\n    fragmentShader: THREE.ShaderChunk['meshphysical_frag']\n  }; // File:src/renderers/WebGLRenderer.js\n\n  /**\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   * @author szimek / https://github.com/szimek/\n   * @author tschw\n   */\n\n  THREE.WebGLRenderer = function (parameters) {\n    console.log('THREE.WebGLRenderer', THREE.REVISION);\n    parameters = parameters || {};\n\n    var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),\n        _context = parameters.context !== undefined ? parameters.context : null,\n        _alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n        _depth = parameters.depth !== undefined ? parameters.depth : true,\n        _stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n        _antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n        _premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n        _preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\n\n    var lights = [];\n    var opaqueObjects = [];\n    var opaqueObjectsLastIndex = -1;\n    var transparentObjects = [];\n    var transparentObjectsLastIndex = -1;\n    var morphInfluences = new Float32Array(8);\n    var sprites = [];\n    var lensFlares = []; // public properties\n\n    this.domElement = _canvas;\n    this.context = null; // clearing\n\n    this.autoClear = true;\n    this.autoClearColor = true;\n    this.autoClearDepth = true;\n    this.autoClearStencil = true; // scene graph\n\n    this.sortObjects = true; // user-defined clipping\n\n    this.clippingPlanes = [];\n    this.localClippingEnabled = false; // physically based shading\n\n    this.gammaFactor = 2.0; // for backwards compatibility\n\n    this.gammaInput = false;\n    this.gammaOutput = false; // physical lights\n\n    this.physicallyCorrectLights = false; // tone mapping\n\n    this.toneMapping = THREE.LinearToneMapping;\n    this.toneMappingExposure = 1.0;\n    this.toneMappingWhitePoint = 1.0; // morphs\n\n    this.maxMorphTargets = 8;\n    this.maxMorphNormals = 4; // internal properties\n\n    var _this = this,\n        // internal state cache\n    _currentProgram = null,\n        _currentRenderTarget = null,\n        _currentFramebuffer = null,\n        _currentMaterialId = -1,\n        _currentGeometryProgram = '',\n        _currentCamera = null,\n        _currentScissor = new THREE.Vector4(),\n        _currentScissorTest = null,\n        _currentViewport = new THREE.Vector4(),\n        //\n    _usedTextureUnits = 0,\n        //\n    _clearColor = new THREE.Color(0x000000),\n        _clearAlpha = 0,\n        _width = _canvas.width,\n        _height = _canvas.height,\n        _pixelRatio = 1,\n        _scissor = new THREE.Vector4(0, 0, _width, _height),\n        _scissorTest = false,\n        _viewport = new THREE.Vector4(0, 0, _width, _height),\n        // frustum\n    _frustum = new THREE.Frustum(),\n        // clipping\n    _clipping = new THREE.WebGLClipping(),\n        _clippingEnabled = false,\n        _localClippingEnabled = false,\n        _sphere = new THREE.Sphere(),\n        // camera matrices cache\n    _projScreenMatrix = new THREE.Matrix4(),\n        _vector3 = new THREE.Vector3(),\n        // light arrays cache\n    _lights = {\n      hash: '',\n      ambient: [0, 0, 0],\n      directional: [],\n      directionalShadowMap: [],\n      directionalShadowMatrix: [],\n      spot: [],\n      spotShadowMap: [],\n      spotShadowMatrix: [],\n      point: [],\n      pointShadowMap: [],\n      pointShadowMatrix: [],\n      hemi: [],\n      shadows: []\n    },\n        // info\n    _infoRender = {\n      calls: 0,\n      vertices: 0,\n      faces: 0,\n      points: 0\n    };\n\n    this.info = {\n      render: _infoRender,\n      memory: {\n        geometries: 0,\n        textures: 0\n      },\n      programs: null\n    }; // initialize\n\n    var _gl;\n\n    try {\n      var attributes = {\n        alpha: _alpha,\n        depth: _depth,\n        stencil: _stencil,\n        antialias: _antialias,\n        premultipliedAlpha: _premultipliedAlpha,\n        preserveDrawingBuffer: _preserveDrawingBuffer\n      };\n      _gl = _context || _canvas.getContext('webgl', attributes) || _canvas.getContext('experimental-webgl', attributes);\n\n      if (_gl === null) {\n        if (_canvas.getContext('webgl') !== null) {\n          throw 'Error creating WebGL context with your selected attributes.';\n        } else {\n          throw 'Error creating WebGL context.';\n        }\n      } // Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\n      if (_gl.getShaderPrecisionFormat === undefined) {\n        _gl.getShaderPrecisionFormat = function () {\n          return {\n            'rangeMin': 1,\n            'rangeMax': 1,\n            'precision': 1\n          };\n        };\n      }\n\n      _canvas.addEventListener('webglcontextlost', onContextLost, false);\n    } catch (error) {\n      console.error('THREE.WebGLRenderer: ' + error);\n    }\n\n    var extensions = new THREE.WebGLExtensions(_gl);\n    extensions.get('WEBGL_depth_texture');\n    extensions.get('OES_texture_float');\n    extensions.get('OES_texture_float_linear');\n    extensions.get('OES_texture_half_float');\n    extensions.get('OES_texture_half_float_linear');\n    extensions.get('OES_standard_derivatives');\n    extensions.get('ANGLE_instanced_arrays');\n\n    if (extensions.get('OES_element_index_uint')) {\n      THREE.BufferGeometry.MaxIndex = 4294967296;\n    }\n\n    var capabilities = new THREE.WebGLCapabilities(_gl, extensions, parameters);\n    var state = new THREE.WebGLState(_gl, extensions, paramThreeToGL);\n    var properties = new THREE.WebGLProperties();\n    var textures = new THREE.WebGLTextures(_gl, extensions, state, properties, capabilities, paramThreeToGL, this.info);\n    var objects = new THREE.WebGLObjects(_gl, properties, this.info);\n    var programCache = new THREE.WebGLPrograms(this, capabilities);\n    var lightCache = new THREE.WebGLLights();\n    this.info.programs = programCache.programs;\n    var bufferRenderer = new THREE.WebGLBufferRenderer(_gl, extensions, _infoRender);\n    var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer(_gl, extensions, _infoRender); //\n\n    var backgroundCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    var backgroundCamera2 = new THREE.PerspectiveCamera();\n    var backgroundPlaneMesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), new THREE.MeshBasicMaterial({\n      depthTest: false,\n      depthWrite: false,\n      fog: false\n    }));\n    var backgroundBoxShader = THREE.ShaderLib['cube'];\n    var backgroundBoxMesh = new THREE.Mesh(new THREE.BoxBufferGeometry(5, 5, 5), new THREE.ShaderMaterial({\n      uniforms: backgroundBoxShader.uniforms,\n      vertexShader: backgroundBoxShader.vertexShader,\n      fragmentShader: backgroundBoxShader.fragmentShader,\n      side: THREE.BackSide,\n      depthTest: false,\n      depthWrite: false,\n      fog: false\n    })); //\n\n    function getTargetPixelRatio() {\n      return _currentRenderTarget === null ? _pixelRatio : 1;\n    }\n\n    function glClearColor(r, g, b, a) {\n      if (_premultipliedAlpha === true) {\n        r *= a;\n        g *= a;\n        b *= a;\n      }\n\n      state.clearColor(r, g, b, a);\n    }\n\n    function setDefaultGLState() {\n      state.init();\n      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio));\n      state.viewport(_currentViewport.copy(_viewport).multiplyScalar(_pixelRatio));\n      glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n    }\n\n    function resetGLState() {\n      _currentProgram = null;\n      _currentCamera = null;\n      _currentGeometryProgram = '';\n      _currentMaterialId = -1;\n      state.reset();\n    }\n\n    setDefaultGLState();\n    this.context = _gl;\n    this.capabilities = capabilities;\n    this.extensions = extensions;\n    this.properties = properties;\n    this.state = state; // shadow map\n\n    var shadowMap = new THREE.WebGLShadowMap(this, _lights, objects, capabilities);\n    this.shadowMap = shadowMap; // Plugins\n\n    var spritePlugin = new THREE.SpritePlugin(this, sprites);\n    var lensFlarePlugin = new THREE.LensFlarePlugin(this, lensFlares); // API\n\n    this.getContext = function () {\n      return _gl;\n    };\n\n    this.getContextAttributes = function () {\n      return _gl.getContextAttributes();\n    };\n\n    this.forceContextLoss = function () {\n      extensions.get('WEBGL_lose_context').loseContext();\n    };\n\n    this.getMaxAnisotropy = function () {\n      return capabilities.getMaxAnisotropy();\n    };\n\n    this.getPrecision = function () {\n      return capabilities.precision;\n    };\n\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    this.setPixelRatio = function (value) {\n      if (value === undefined) return;\n      _pixelRatio = value;\n      this.setSize(_viewport.z, _viewport.w, false);\n    };\n\n    this.getSize = function () {\n      return {\n        width: _width,\n        height: _height\n      };\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      _width = width;\n      _height = height;\n      _canvas.width = width * _pixelRatio;\n      _canvas.height = height * _pixelRatio;\n\n      if (updateStyle !== false) {\n        _canvas.style.width = width + 'px';\n        _canvas.style.height = height + 'px';\n      }\n\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      state.viewport(_viewport.set(x, y, width, height));\n    };\n\n    this.setScissor = function (x, y, width, height) {\n      state.scissor(_scissor.set(x, y, width, height));\n    };\n\n    this.setScissorTest = function (boolean) {\n      state.setScissorTest(_scissorTest = boolean);\n    }; // Clearing\n\n\n    this.getClearColor = function () {\n      return _clearColor;\n    };\n\n    this.setClearColor = function (color, alpha) {\n      _clearColor.set(color);\n\n      _clearAlpha = alpha !== undefined ? alpha : 1;\n      glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n    };\n\n    this.getClearAlpha = function () {\n      return _clearAlpha;\n    };\n\n    this.setClearAlpha = function (alpha) {\n      _clearAlpha = alpha;\n      glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n    };\n\n    this.clear = function (color, depth, stencil) {\n      var bits = 0;\n      if (color === undefined || color) bits |= _gl.COLOR_BUFFER_BIT;\n      if (depth === undefined || depth) bits |= _gl.DEPTH_BUFFER_BIT;\n      if (stencil === undefined || stencil) bits |= _gl.STENCIL_BUFFER_BIT;\n\n      _gl.clear(bits);\n    };\n\n    this.clearColor = function () {\n      this.clear(true, false, false);\n    };\n\n    this.clearDepth = function () {\n      this.clear(false, true, false);\n    };\n\n    this.clearStencil = function () {\n      this.clear(false, false, true);\n    };\n\n    this.clearTarget = function (renderTarget, color, depth, stencil) {\n      this.setRenderTarget(renderTarget);\n      this.clear(color, depth, stencil);\n    }; // Reset\n\n\n    this.resetGLState = resetGLState;\n\n    this.dispose = function () {\n      transparentObjects = [];\n      transparentObjectsLastIndex = -1;\n      opaqueObjects = [];\n      opaqueObjectsLastIndex = -1;\n\n      _canvas.removeEventListener('webglcontextlost', onContextLost, false);\n    }; // Events\n\n\n    function onContextLost(event) {\n      event.preventDefault();\n      resetGLState();\n      setDefaultGLState();\n      properties.clear();\n    }\n\n    function onMaterialDispose(event) {\n      var material = event.target;\n      material.removeEventListener('dispose', onMaterialDispose);\n      deallocateMaterial(material);\n    } // Buffer deallocation\n\n\n    function deallocateMaterial(material) {\n      releaseMaterialProgramReference(material);\n      properties.delete(material);\n    }\n\n    function releaseMaterialProgramReference(material) {\n      var programInfo = properties.get(material).program;\n      material.program = undefined;\n\n      if (programInfo !== undefined) {\n        programCache.releaseProgram(programInfo);\n      }\n    } // Buffer rendering\n\n\n    this.renderBufferImmediate = function (object, program, material) {\n      state.initAttributes();\n      var buffers = properties.get(object);\n      if (object.hasPositions && !buffers.position) buffers.position = _gl.createBuffer();\n      if (object.hasNormals && !buffers.normal) buffers.normal = _gl.createBuffer();\n      if (object.hasUvs && !buffers.uv) buffers.uv = _gl.createBuffer();\n      if (object.hasColors && !buffers.color) buffers.color = _gl.createBuffer();\n      var attributes = program.getAttributes();\n\n      if (object.hasPositions) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.position);\n\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(attributes.position);\n\n        _gl.vertexAttribPointer(attributes.position, 3, _gl.FLOAT, false, 0, 0);\n      }\n\n      if (object.hasNormals) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.normal);\n\n        if (material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading) {\n          for (var i = 0, l = object.count * 3; i < l; i += 9) {\n            var array = object.normalArray;\n            var nx = (array[i + 0] + array[i + 3] + array[i + 6]) / 3;\n            var ny = (array[i + 1] + array[i + 4] + array[i + 7]) / 3;\n            var nz = (array[i + 2] + array[i + 5] + array[i + 8]) / 3;\n            array[i + 0] = nx;\n            array[i + 1] = ny;\n            array[i + 2] = nz;\n            array[i + 3] = nx;\n            array[i + 4] = ny;\n            array[i + 5] = nz;\n            array[i + 6] = nx;\n            array[i + 7] = ny;\n            array[i + 8] = nz;\n          }\n        }\n\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(attributes.normal);\n\n        _gl.vertexAttribPointer(attributes.normal, 3, _gl.FLOAT, false, 0, 0);\n      }\n\n      if (object.hasUvs && material.map) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.uv);\n\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(attributes.uv);\n\n        _gl.vertexAttribPointer(attributes.uv, 2, _gl.FLOAT, false, 0, 0);\n      }\n\n      if (object.hasColors && material.vertexColors !== THREE.NoColors) {\n        _gl.bindBuffer(_gl.ARRAY_BUFFER, buffers.color);\n\n        _gl.bufferData(_gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW);\n\n        state.enableAttribute(attributes.color);\n\n        _gl.vertexAttribPointer(attributes.color, 3, _gl.FLOAT, false, 0, 0);\n      }\n\n      state.disableUnusedAttributes();\n\n      _gl.drawArrays(_gl.TRIANGLES, 0, object.count);\n\n      object.count = 0;\n    };\n\n    this.renderBufferDirect = function (camera, fog, geometry, material, object, group) {\n      setMaterial(material);\n      var program = setProgram(camera, fog, material, object);\n      var updateBuffers = false;\n      var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\n\n      if (geometryProgram !== _currentGeometryProgram) {\n        _currentGeometryProgram = geometryProgram;\n        updateBuffers = true;\n      } // morph targets\n\n\n      var morphTargetInfluences = object.morphTargetInfluences;\n\n      if (morphTargetInfluences !== undefined) {\n        var activeInfluences = [];\n\n        for (var i = 0, l = morphTargetInfluences.length; i < l; i++) {\n          var influence = morphTargetInfluences[i];\n          activeInfluences.push([influence, i]);\n        }\n\n        activeInfluences.sort(absNumericalSort);\n\n        if (activeInfluences.length > 8) {\n          activeInfluences.length = 8;\n        }\n\n        var morphAttributes = geometry.morphAttributes;\n\n        for (var i = 0, l = activeInfluences.length; i < l; i++) {\n          var influence = activeInfluences[i];\n          morphInfluences[i] = influence[0];\n\n          if (influence[0] !== 0) {\n            var index = influence[1];\n            if (material.morphTargets === true && morphAttributes.position) geometry.addAttribute('morphTarget' + i, morphAttributes.position[index]);\n            if (material.morphNormals === true && morphAttributes.normal) geometry.addAttribute('morphNormal' + i, morphAttributes.normal[index]);\n          } else {\n            if (material.morphTargets === true) geometry.removeAttribute('morphTarget' + i);\n            if (material.morphNormals === true) geometry.removeAttribute('morphNormal' + i);\n          }\n        }\n\n        program.getUniforms().setValue(_gl, 'morphTargetInfluences', morphInfluences);\n        updateBuffers = true;\n      } //\n\n\n      var index = geometry.index;\n      var position = geometry.attributes.position;\n\n      if (material.wireframe === true) {\n        index = objects.getWireframeAttribute(geometry);\n      }\n\n      var renderer;\n\n      if (index !== null) {\n        renderer = indexedBufferRenderer;\n        renderer.setIndex(index);\n      } else {\n        renderer = bufferRenderer;\n      }\n\n      if (updateBuffers) {\n        setupVertexAttributes(material, program, geometry);\n\n        if (index !== null) {\n          _gl.bindBuffer(_gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer(index));\n        }\n      } //\n\n\n      var dataStart = 0;\n      var dataCount = Infinity;\n\n      if (index !== null) {\n        dataCount = index.count;\n      } else if (position !== undefined) {\n        dataCount = position.count;\n      }\n\n      var rangeStart = geometry.drawRange.start;\n      var rangeCount = geometry.drawRange.count;\n      var groupStart = group !== null ? group.start : 0;\n      var groupCount = group !== null ? group.count : Infinity;\n      var drawStart = Math.max(dataStart, rangeStart, groupStart);\n      var drawEnd = Math.min(dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount) - 1;\n      var drawCount = Math.max(0, drawEnd - drawStart + 1); //\n\n      if (object instanceof THREE.Mesh) {\n        if (material.wireframe === true) {\n          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());\n          renderer.setMode(_gl.LINES);\n        } else {\n          switch (object.drawMode) {\n            case THREE.TrianglesDrawMode:\n              renderer.setMode(_gl.TRIANGLES);\n              break;\n\n            case THREE.TriangleStripDrawMode:\n              renderer.setMode(_gl.TRIANGLE_STRIP);\n              break;\n\n            case THREE.TriangleFanDrawMode:\n              renderer.setMode(_gl.TRIANGLE_FAN);\n              break;\n          }\n        }\n      } else if (object instanceof THREE.Line) {\n        var lineWidth = material.linewidth;\n        if (lineWidth === undefined) lineWidth = 1; // Not using Line*Material\n\n        state.setLineWidth(lineWidth * getTargetPixelRatio());\n\n        if (object instanceof THREE.LineSegments) {\n          renderer.setMode(_gl.LINES);\n        } else {\n          renderer.setMode(_gl.LINE_STRIP);\n        }\n      } else if (object instanceof THREE.Points) {\n        renderer.setMode(_gl.POINTS);\n      }\n\n      if (geometry instanceof THREE.InstancedBufferGeometry) {\n        if (geometry.maxInstancedCount > 0) {\n          renderer.renderInstances(geometry, drawStart, drawCount);\n        }\n      } else {\n        renderer.render(drawStart, drawCount);\n      }\n    };\n\n    function setupVertexAttributes(material, program, geometry, startIndex) {\n      var extension;\n\n      if (geometry instanceof THREE.InstancedBufferGeometry) {\n        extension = extensions.get('ANGLE_instanced_arrays');\n\n        if (extension === null) {\n          console.error('THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n          return;\n        }\n      }\n\n      if (startIndex === undefined) startIndex = 0;\n      state.initAttributes();\n      var geometryAttributes = geometry.attributes;\n      var programAttributes = program.getAttributes();\n      var materialDefaultAttributeValues = material.defaultAttributeValues;\n\n      for (var name in programAttributes) {\n        var programAttribute = programAttributes[name];\n\n        if (programAttribute >= 0) {\n          var geometryAttribute = geometryAttributes[name];\n\n          if (geometryAttribute !== undefined) {\n            var type = _gl.FLOAT;\n            var array = geometryAttribute.array;\n            var normalized = geometryAttribute.normalized;\n\n            if (array instanceof Float32Array) {\n              type = _gl.FLOAT;\n            } else if (array instanceof Float64Array) {\n              console.warn(\"Unsupported data buffer format: Float64Array\");\n            } else if (array instanceof Uint16Array) {\n              type = _gl.UNSIGNED_SHORT;\n            } else if (array instanceof Int16Array) {\n              type = _gl.SHORT;\n            } else if (array instanceof Uint32Array) {\n              type = _gl.UNSIGNED_INT;\n            } else if (array instanceof Int32Array) {\n              type = _gl.INT;\n            } else if (array instanceof Int8Array) {\n              type = _gl.BYTE;\n            } else if (array instanceof Uint8Array) {\n              type = _gl.UNSIGNED_BYTE;\n            }\n\n            var size = geometryAttribute.itemSize;\n            var buffer = objects.getAttributeBuffer(geometryAttribute);\n\n            if (geometryAttribute instanceof THREE.InterleavedBufferAttribute) {\n              var data = geometryAttribute.data;\n              var stride = data.stride;\n              var offset = geometryAttribute.offset;\n\n              if (data instanceof THREE.InstancedInterleavedBuffer) {\n                state.enableAttributeAndDivisor(programAttribute, data.meshPerAttribute, extension);\n\n                if (geometry.maxInstancedCount === undefined) {\n                  geometry.maxInstancedCount = data.meshPerAttribute * data.count;\n                }\n              } else {\n                state.enableAttribute(programAttribute);\n              }\n\n              _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n              _gl.vertexAttribPointer(programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, (startIndex * stride + offset) * data.array.BYTES_PER_ELEMENT);\n            } else {\n              if (geometryAttribute instanceof THREE.InstancedBufferAttribute) {\n                state.enableAttributeAndDivisor(programAttribute, geometryAttribute.meshPerAttribute, extension);\n\n                if (geometry.maxInstancedCount === undefined) {\n                  geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n                }\n              } else {\n                state.enableAttribute(programAttribute);\n              }\n\n              _gl.bindBuffer(_gl.ARRAY_BUFFER, buffer);\n\n              _gl.vertexAttribPointer(programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT);\n            }\n          } else if (materialDefaultAttributeValues !== undefined) {\n            var value = materialDefaultAttributeValues[name];\n\n            if (value !== undefined) {\n              switch (value.length) {\n                case 2:\n                  _gl.vertexAttrib2fv(programAttribute, value);\n\n                  break;\n\n                case 3:\n                  _gl.vertexAttrib3fv(programAttribute, value);\n\n                  break;\n\n                case 4:\n                  _gl.vertexAttrib4fv(programAttribute, value);\n\n                  break;\n\n                default:\n                  _gl.vertexAttrib1fv(programAttribute, value);\n\n              }\n            }\n          }\n        }\n      }\n\n      state.disableUnusedAttributes();\n    } // Sorting\n\n\n    function absNumericalSort(a, b) {\n      return Math.abs(b[0]) - Math.abs(a[0]);\n    }\n\n    function painterSortStable(a, b) {\n      if (a.object.renderOrder !== b.object.renderOrder) {\n        return a.object.renderOrder - b.object.renderOrder;\n      } else if (a.material.program && b.material.program && a.material.program !== b.material.program) {\n        return a.material.program.id - b.material.program.id;\n      } else if (a.material.id !== b.material.id) {\n        return a.material.id - b.material.id;\n      } else if (a.z !== b.z) {\n        return a.z - b.z;\n      } else {\n        return a.id - b.id;\n      }\n    }\n\n    function reversePainterSortStable(a, b) {\n      if (a.object.renderOrder !== b.object.renderOrder) {\n        return a.object.renderOrder - b.object.renderOrder;\n      }\n\n      if (a.z !== b.z) {\n        return b.z - a.z;\n      } else {\n        return a.id - b.id;\n      }\n    } // Rendering\n\n\n    this.render = function (scene, camera, renderTarget, forceClear) {\n      if (camera instanceof THREE.Camera === false) {\n        console.error('THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.');\n        return;\n      }\n\n      var fog = scene.fog; // reset caching for this frame\n\n      _currentGeometryProgram = '';\n      _currentMaterialId = -1;\n      _currentCamera = null; // update scene graph\n\n      if (scene.autoUpdate === true) scene.updateMatrixWorld(); // update camera matrices and frustum\n\n      if (camera.parent === null) camera.updateMatrixWorld();\n      camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n\n      _projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n\n      _frustum.setFromMatrix(_projScreenMatrix);\n\n      lights.length = 0;\n      opaqueObjectsLastIndex = -1;\n      transparentObjectsLastIndex = -1;\n      sprites.length = 0;\n      lensFlares.length = 0;\n      _localClippingEnabled = this.localClippingEnabled;\n      _clippingEnabled = _clipping.init(this.clippingPlanes, _localClippingEnabled, camera);\n      projectObject(scene, camera);\n      opaqueObjects.length = opaqueObjectsLastIndex + 1;\n      transparentObjects.length = transparentObjectsLastIndex + 1;\n\n      if (_this.sortObjects === true) {\n        opaqueObjects.sort(painterSortStable);\n        transparentObjects.sort(reversePainterSortStable);\n      } //\n\n\n      if (_clippingEnabled) _clipping.beginShadows();\n      setupShadows(lights);\n      shadowMap.render(scene, camera);\n      setupLights(lights, camera);\n      if (_clippingEnabled) _clipping.endShadows(); //\n\n      _infoRender.calls = 0;\n      _infoRender.vertices = 0;\n      _infoRender.faces = 0;\n      _infoRender.points = 0;\n\n      if (renderTarget === undefined) {\n        renderTarget = null;\n      }\n\n      this.setRenderTarget(renderTarget); //\n\n      var background = scene.background;\n\n      if (background === null) {\n        glClearColor(_clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha);\n      } else if (background instanceof THREE.Color) {\n        glClearColor(background.r, background.g, background.b, 1);\n      }\n\n      if (this.autoClear || forceClear) {\n        this.clear(this.autoClearColor, this.autoClearDepth, this.autoClearStencil);\n      }\n\n      if (background instanceof THREE.CubeTexture) {\n        backgroundCamera2.projectionMatrix.copy(camera.projectionMatrix);\n        backgroundCamera2.matrixWorld.extractRotation(camera.matrixWorld);\n        backgroundCamera2.matrixWorldInverse.getInverse(backgroundCamera2.matrixWorld);\n        backgroundBoxMesh.material.uniforms[\"tCube\"].value = background;\n        backgroundBoxMesh.modelViewMatrix.multiplyMatrices(backgroundCamera2.matrixWorldInverse, backgroundBoxMesh.matrixWorld);\n        objects.update(backgroundBoxMesh);\n\n        _this.renderBufferDirect(backgroundCamera2, null, backgroundBoxMesh.geometry, backgroundBoxMesh.material, backgroundBoxMesh, null);\n      } else if (background instanceof THREE.Texture) {\n        backgroundPlaneMesh.material.map = background;\n        objects.update(backgroundPlaneMesh);\n\n        _this.renderBufferDirect(backgroundCamera, null, backgroundPlaneMesh.geometry, backgroundPlaneMesh.material, backgroundPlaneMesh, null);\n      } //\n\n\n      if (scene.overrideMaterial) {\n        var overrideMaterial = scene.overrideMaterial;\n        renderObjects(opaqueObjects, camera, fog, overrideMaterial);\n        renderObjects(transparentObjects, camera, fog, overrideMaterial);\n      } else {\n        // opaque pass (front-to-back order)\n        state.setBlending(THREE.NoBlending);\n        renderObjects(opaqueObjects, camera, fog); // transparent pass (back-to-front order)\n\n        renderObjects(transparentObjects, camera, fog);\n      } // custom render plugins (post pass)\n\n\n      spritePlugin.render(scene, camera);\n      lensFlarePlugin.render(scene, camera, _currentViewport); // Generate mipmap if we're using any kind of mipmap filtering\n\n      if (renderTarget) {\n        textures.updateRenderTargetMipmap(renderTarget);\n      } // Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\n      state.setDepthTest(true);\n      state.setDepthWrite(true);\n      state.setColorWrite(true); // _gl.finish();\n    };\n\n    function pushRenderItem(object, geometry, material, z, group) {\n      var array, index; // allocate the next position in the appropriate array\n\n      if (material.transparent) {\n        array = transparentObjects;\n        index = ++transparentObjectsLastIndex;\n      } else {\n        array = opaqueObjects;\n        index = ++opaqueObjectsLastIndex;\n      } // recycle existing render item or grow the array\n\n\n      var renderItem = array[index];\n\n      if (renderItem !== undefined) {\n        renderItem.id = object.id;\n        renderItem.object = object;\n        renderItem.geometry = geometry;\n        renderItem.material = material;\n        renderItem.z = _vector3.z;\n        renderItem.group = group;\n      } else {\n        renderItem = {\n          id: object.id,\n          object: object,\n          geometry: geometry,\n          material: material,\n          z: _vector3.z,\n          group: group\n        }; // assert( index === array.length );\n\n        array.push(renderItem);\n      }\n    } // TODO Duplicated code (Frustum)\n\n\n    function isObjectViewable(object) {\n      var geometry = object.geometry;\n      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();\n\n      _sphere.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);\n\n      return isSphereViewable(_sphere);\n    }\n\n    function isSpriteViewable(sprite) {\n      _sphere.center.set(0, 0, 0);\n\n      _sphere.radius = 0.7071067811865476;\n\n      _sphere.applyMatrix4(sprite.matrixWorld);\n\n      return isSphereViewable(_sphere);\n    }\n\n    function isSphereViewable(sphere) {\n      if (!_frustum.intersectsSphere(sphere)) return false;\n      var numPlanes = _clipping.numPlanes;\n      if (numPlanes === 0) return true;\n      var planes = _this.clippingPlanes,\n          center = sphere.center,\n          negRad = -sphere.radius,\n          i = 0;\n\n      do {\n        // out when deeper than radius in the negative halfspace\n        if (planes[i].distanceToPoint(center) < negRad) return false;\n      } while (++i !== numPlanes);\n\n      return true;\n    }\n\n    function projectObject(object, camera) {\n      if (object.visible === false) return;\n\n      if (object.layers.test(camera.layers)) {\n        if (object instanceof THREE.Light) {\n          lights.push(object);\n        } else if (object instanceof THREE.Sprite) {\n          if (object.frustumCulled === false || isSpriteViewable(object) === true) {\n            sprites.push(object);\n          }\n        } else if (object instanceof THREE.LensFlare) {\n          lensFlares.push(object);\n        } else if (object instanceof THREE.ImmediateRenderObject) {\n          if (_this.sortObjects === true) {\n            _vector3.setFromMatrixPosition(object.matrixWorld);\n\n            _vector3.applyProjection(_projScreenMatrix);\n          }\n\n          pushRenderItem(object, null, object.material, _vector3.z, null);\n        } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points) {\n          if (object instanceof THREE.SkinnedMesh) {\n            object.skeleton.update();\n          }\n\n          if (object.frustumCulled === false || isObjectViewable(object) === true) {\n            var material = object.material;\n\n            if (material.visible === true) {\n              if (_this.sortObjects === true) {\n                _vector3.setFromMatrixPosition(object.matrixWorld);\n\n                _vector3.applyProjection(_projScreenMatrix);\n              }\n\n              var geometry = objects.update(object);\n\n              if (material instanceof THREE.MultiMaterial) {\n                var groups = geometry.groups;\n                var materials = material.materials;\n\n                for (var i = 0, l = groups.length; i < l; i++) {\n                  var group = groups[i];\n                  var groupMaterial = materials[group.materialIndex];\n\n                  if (groupMaterial.visible === true) {\n                    pushRenderItem(object, geometry, groupMaterial, _vector3.z, group);\n                  }\n                }\n              } else {\n                pushRenderItem(object, geometry, material, _vector3.z, null);\n              }\n            }\n          }\n        }\n      }\n\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i], camera);\n      }\n    }\n\n    function renderObjects(renderList, camera, fog, overrideMaterial) {\n      for (var i = 0, l = renderList.length; i < l; i++) {\n        var renderItem = renderList[i];\n        var object = renderItem.object;\n        var geometry = renderItem.geometry;\n        var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\n        var group = renderItem.group;\n        object.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, object.matrixWorld);\n        object.normalMatrix.getNormalMatrix(object.modelViewMatrix);\n\n        if (object instanceof THREE.ImmediateRenderObject) {\n          setMaterial(material);\n          var program = setProgram(camera, fog, material, object);\n          _currentGeometryProgram = '';\n          object.render(function (object) {\n            _this.renderBufferImmediate(object, program, material);\n          });\n        } else {\n          _this.renderBufferDirect(camera, fog, geometry, material, object, group);\n        }\n      }\n    }\n\n    function initMaterial(material, fog, object) {\n      var materialProperties = properties.get(material);\n      var parameters = programCache.getParameters(material, _lights, fog, _clipping.numPlanes, object);\n      var code = programCache.getProgramCode(material, parameters);\n      var program = materialProperties.program;\n      var programChange = true;\n\n      if (program === undefined) {\n        // new material\n        material.addEventListener('dispose', onMaterialDispose);\n      } else if (program.code !== code) {\n        // changed glsl or parameters\n        releaseMaterialProgramReference(material);\n      } else if (parameters.shaderID !== undefined) {\n        // same glsl and uniform list\n        return;\n      } else {\n        // only rebuild uniform list\n        programChange = false;\n      }\n\n      if (programChange) {\n        if (parameters.shaderID) {\n          var shader = THREE.ShaderLib[parameters.shaderID];\n          materialProperties.__webglShader = {\n            name: material.type,\n            uniforms: THREE.UniformsUtils.clone(shader.uniforms),\n            vertexShader: shader.vertexShader,\n            fragmentShader: shader.fragmentShader\n          };\n        } else {\n          materialProperties.__webglShader = {\n            name: material.type,\n            uniforms: material.uniforms,\n            vertexShader: material.vertexShader,\n            fragmentShader: material.fragmentShader\n          };\n        }\n\n        material.__webglShader = materialProperties.__webglShader;\n        program = programCache.acquireProgram(material, parameters, code);\n        materialProperties.program = program;\n        material.program = program;\n      }\n\n      var attributes = program.getAttributes();\n\n      if (material.morphTargets) {\n        material.numSupportedMorphTargets = 0;\n\n        for (var i = 0; i < _this.maxMorphTargets; i++) {\n          if (attributes['morphTarget' + i] >= 0) {\n            material.numSupportedMorphTargets++;\n          }\n        }\n      }\n\n      if (material.morphNormals) {\n        material.numSupportedMorphNormals = 0;\n\n        for (var i = 0; i < _this.maxMorphNormals; i++) {\n          if (attributes['morphNormal' + i] >= 0) {\n            material.numSupportedMorphNormals++;\n          }\n        }\n      }\n\n      var uniforms = materialProperties.__webglShader.uniforms;\n\n      if (!(material instanceof THREE.ShaderMaterial) && !(material instanceof THREE.RawShaderMaterial) || material.clipping === true) {\n        materialProperties.numClippingPlanes = _clipping.numPlanes;\n        uniforms.clippingPlanes = _clipping.uniform;\n      }\n\n      if (material.lights) {\n        // store the light setup it was created for\n        materialProperties.lightsHash = _lights.hash; // wire up the material to this renderer's lighting state\n\n        uniforms.ambientLightColor.value = _lights.ambient;\n        uniforms.directionalLights.value = _lights.directional;\n        uniforms.spotLights.value = _lights.spot;\n        uniforms.pointLights.value = _lights.point;\n        uniforms.hemisphereLights.value = _lights.hemi;\n        uniforms.directionalShadowMap.value = _lights.directionalShadowMap;\n        uniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\n        uniforms.spotShadowMap.value = _lights.spotShadowMap;\n        uniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\n        uniforms.pointShadowMap.value = _lights.pointShadowMap;\n        uniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\n      }\n\n      var progUniforms = materialProperties.program.getUniforms(),\n          uniformsList = THREE.WebGLUniforms.seqWithValue(progUniforms.seq, uniforms);\n      materialProperties.uniformsList = uniformsList;\n      materialProperties.dynamicUniforms = THREE.WebGLUniforms.splitDynamic(uniformsList, uniforms);\n    }\n\n    function setMaterial(material) {\n      if (material.side !== THREE.DoubleSide) state.enable(_gl.CULL_FACE);else state.disable(_gl.CULL_FACE);\n      state.setFlipSided(material.side === THREE.BackSide);\n\n      if (material.transparent === true) {\n        state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);\n      } else {\n        state.setBlending(THREE.NoBlending);\n      }\n\n      state.setDepthFunc(material.depthFunc);\n      state.setDepthTest(material.depthTest);\n      state.setDepthWrite(material.depthWrite);\n      state.setColorWrite(material.colorWrite);\n      state.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);\n    }\n\n    function setProgram(camera, fog, material, object) {\n      _usedTextureUnits = 0;\n      var materialProperties = properties.get(material);\n\n      if (_clippingEnabled) {\n        if (_localClippingEnabled || camera !== _currentCamera) {\n          var useCache = camera === _currentCamera && material.id === _currentMaterialId; // we might want to call this function with some ClippingGroup\n          // object instead of the material, once it becomes feasible\n          // (#8465, #8379)\n\n          _clipping.setState(material.clippingPlanes, material.clipShadows, camera, materialProperties, useCache);\n        }\n\n        if (materialProperties.numClippingPlanes !== undefined && materialProperties.numClippingPlanes !== _clipping.numPlanes) {\n          material.needsUpdate = true;\n        }\n      }\n\n      if (materialProperties.program === undefined) {\n        material.needsUpdate = true;\n      }\n\n      if (materialProperties.lightsHash !== undefined && materialProperties.lightsHash !== _lights.hash) {\n        material.needsUpdate = true;\n      }\n\n      if (material.needsUpdate) {\n        initMaterial(material, fog, object);\n        material.needsUpdate = false;\n      }\n\n      var refreshProgram = false;\n      var refreshMaterial = false;\n      var refreshLights = false;\n      var program = materialProperties.program,\n          p_uniforms = program.getUniforms(),\n          m_uniforms = materialProperties.__webglShader.uniforms;\n\n      if (program.id !== _currentProgram) {\n        _gl.useProgram(program.program);\n\n        _currentProgram = program.id;\n        refreshProgram = true;\n        refreshMaterial = true;\n        refreshLights = true;\n      }\n\n      if (material.id !== _currentMaterialId) {\n        _currentMaterialId = material.id;\n        refreshMaterial = true;\n      }\n\n      if (refreshProgram || camera !== _currentCamera) {\n        p_uniforms.set(_gl, camera, 'projectionMatrix');\n\n        if (capabilities.logarithmicDepthBuffer) {\n          p_uniforms.setValue(_gl, 'logDepthBufFC', 2.0 / (Math.log(camera.far + 1.0) / Math.LN2));\n        }\n\n        if (camera !== _currentCamera) {\n          _currentCamera = camera; // lighting uniforms depend on the camera so enforce an update\n          // now, in case this material supports lights - or later, when\n          // the next material that does gets activated:\n\n          refreshMaterial = true; // set to true on material change\n\n          refreshLights = true; // remains set until update done\n        } // load material specific uniforms\n        // (shader material also gets them for the sake of genericity)\n\n\n        if (material instanceof THREE.ShaderMaterial || material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshStandardMaterial || material.envMap) {\n          var uCamPos = p_uniforms.map.cameraPosition;\n\n          if (uCamPos !== undefined) {\n            uCamPos.setValue(_gl, _vector3.setFromMatrixPosition(camera.matrixWorld));\n          }\n        }\n\n        if (material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshStandardMaterial || material instanceof THREE.ShaderMaterial || material.skinning) {\n          p_uniforms.setValue(_gl, 'viewMatrix', camera.matrixWorldInverse);\n        }\n\n        p_uniforms.set(_gl, _this, 'toneMappingExposure');\n        p_uniforms.set(_gl, _this, 'toneMappingWhitePoint');\n      } // skinning uniforms must be set even if material didn't change\n      // auto-setting of texture unit for bone texture must go before other textures\n      // not sure why, but otherwise weird things happen\n\n\n      if (material.skinning) {\n        p_uniforms.setOptional(_gl, object, 'bindMatrix');\n        p_uniforms.setOptional(_gl, object, 'bindMatrixInverse');\n        var skeleton = object.skeleton;\n\n        if (skeleton) {\n          if (capabilities.floatVertexTextures && skeleton.useVertexTexture) {\n            p_uniforms.set(_gl, skeleton, 'boneTexture');\n            p_uniforms.set(_gl, skeleton, 'boneTextureWidth');\n            p_uniforms.set(_gl, skeleton, 'boneTextureHeight');\n          } else {\n            p_uniforms.setOptional(_gl, skeleton, 'boneMatrices');\n          }\n        }\n      }\n\n      if (refreshMaterial) {\n        if (material.lights) {\n          // the current material requires lighting info\n          // note: all lighting uniforms are always set correctly\n          // they simply reference the renderer's state for their\n          // values\n          //\n          // use the current material's .needsUpdate flags to set\n          // the GL state when required\n          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);\n        } // refresh uniforms common to several materials\n\n\n        if (fog && material.fog) {\n          refreshUniformsFog(m_uniforms, fog);\n        }\n\n        if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial || material instanceof THREE.MeshStandardMaterial || material instanceof THREE.MeshDepthMaterial) {\n          refreshUniformsCommon(m_uniforms, material);\n        } // refresh single material specific uniforms\n\n\n        if (material instanceof THREE.LineBasicMaterial) {\n          refreshUniformsLine(m_uniforms, material);\n        } else if (material instanceof THREE.LineDashedMaterial) {\n          refreshUniformsLine(m_uniforms, material);\n          refreshUniformsDash(m_uniforms, material);\n        } else if (material instanceof THREE.PointsMaterial) {\n          refreshUniformsPoints(m_uniforms, material);\n        } else if (material instanceof THREE.MeshLambertMaterial) {\n          refreshUniformsLambert(m_uniforms, material);\n        } else if (material instanceof THREE.MeshPhongMaterial) {\n          refreshUniformsPhong(m_uniforms, material);\n        } else if (material instanceof THREE.MeshPhysicalMaterial) {\n          refreshUniformsPhysical(m_uniforms, material);\n        } else if (material instanceof THREE.MeshStandardMaterial) {\n          refreshUniformsStandard(m_uniforms, material);\n        } else if (material instanceof THREE.MeshDepthMaterial) {\n          if (material.displacementMap) {\n            m_uniforms.displacementMap.value = material.displacementMap;\n            m_uniforms.displacementScale.value = material.displacementScale;\n            m_uniforms.displacementBias.value = material.displacementBias;\n          }\n        } else if (material instanceof THREE.MeshNormalMaterial) {\n          m_uniforms.opacity.value = material.opacity;\n        }\n\n        THREE.WebGLUniforms.upload(_gl, materialProperties.uniformsList, m_uniforms, _this);\n      } // common matrices\n\n\n      p_uniforms.set(_gl, object, 'modelViewMatrix');\n      p_uniforms.set(_gl, object, 'normalMatrix');\n      p_uniforms.setValue(_gl, 'modelMatrix', object.matrixWorld); // dynamic uniforms\n\n      var dynUniforms = materialProperties.dynamicUniforms;\n\n      if (dynUniforms !== null) {\n        THREE.WebGLUniforms.evalDynamic(dynUniforms, m_uniforms, object, camera);\n        THREE.WebGLUniforms.upload(_gl, dynUniforms, m_uniforms, _this);\n      }\n\n      return program;\n    } // Uniforms (refresh uniforms objects)\n\n\n    function refreshUniformsCommon(uniforms, material) {\n      uniforms.opacity.value = material.opacity;\n      uniforms.diffuse.value = material.color;\n\n      if (material.emissive) {\n        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n      }\n\n      uniforms.map.value = material.map;\n      uniforms.specularMap.value = material.specularMap;\n      uniforms.alphaMap.value = material.alphaMap;\n\n      if (material.aoMap) {\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity;\n      } // uv repeat and offset setting priorities\n      // 1. color map\n      // 2. specular map\n      // 3. normal map\n      // 4. bump map\n      // 5. alpha map\n      // 6. emissive map\n\n\n      var uvScaleMap;\n\n      if (material.map) {\n        uvScaleMap = material.map;\n      } else if (material.specularMap) {\n        uvScaleMap = material.specularMap;\n      } else if (material.displacementMap) {\n        uvScaleMap = material.displacementMap;\n      } else if (material.normalMap) {\n        uvScaleMap = material.normalMap;\n      } else if (material.bumpMap) {\n        uvScaleMap = material.bumpMap;\n      } else if (material.roughnessMap) {\n        uvScaleMap = material.roughnessMap;\n      } else if (material.metalnessMap) {\n        uvScaleMap = material.metalnessMap;\n      } else if (material.alphaMap) {\n        uvScaleMap = material.alphaMap;\n      } else if (material.emissiveMap) {\n        uvScaleMap = material.emissiveMap;\n      }\n\n      if (uvScaleMap !== undefined) {\n        // backwards compatibility\n        if (uvScaleMap instanceof THREE.WebGLRenderTarget) {\n          uvScaleMap = uvScaleMap.texture;\n        }\n\n        var offset = uvScaleMap.offset;\n        var repeat = uvScaleMap.repeat;\n        uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);\n      }\n\n      uniforms.envMap.value = material.envMap; // don't flip CubeTexture envMaps, flip everything else:\n      //  WebGLRenderTargetCube will be flipped for backwards compatibility\n      //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n      // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\n      uniforms.flipEnvMap.value = !(material.envMap instanceof THREE.CubeTexture) ? 1 : -1;\n      uniforms.reflectivity.value = material.reflectivity;\n      uniforms.refractionRatio.value = material.refractionRatio;\n    }\n\n    function refreshUniformsLine(uniforms, material) {\n      uniforms.diffuse.value = material.color;\n      uniforms.opacity.value = material.opacity;\n    }\n\n    function refreshUniformsDash(uniforms, material) {\n      uniforms.dashSize.value = material.dashSize;\n      uniforms.totalSize.value = material.dashSize + material.gapSize;\n      uniforms.scale.value = material.scale;\n    }\n\n    function refreshUniformsPoints(uniforms, material) {\n      uniforms.diffuse.value = material.color;\n      uniforms.opacity.value = material.opacity;\n      uniforms.size.value = material.size * _pixelRatio;\n      uniforms.scale.value = _canvas.clientHeight * 0.5;\n      uniforms.map.value = material.map;\n\n      if (material.map !== null) {\n        var offset = material.map.offset;\n        var repeat = material.map.repeat;\n        uniforms.offsetRepeat.value.set(offset.x, offset.y, repeat.x, repeat.y);\n      }\n    }\n\n    function refreshUniformsFog(uniforms, fog) {\n      uniforms.fogColor.value = fog.color;\n\n      if (fog instanceof THREE.Fog) {\n        uniforms.fogNear.value = fog.near;\n        uniforms.fogFar.value = fog.far;\n      } else if (fog instanceof THREE.FogExp2) {\n        uniforms.fogDensity.value = fog.density;\n      }\n    }\n\n    function refreshUniformsLambert(uniforms, material) {\n      if (material.lightMap) {\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n    }\n\n    function refreshUniformsPhong(uniforms, material) {\n      uniforms.specular.value = material.specular;\n      uniforms.shininess.value = Math.max(material.shininess, 1e-4); // to prevent pow( 0.0, 0.0 )\n\n      if (material.lightMap) {\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n    }\n\n    function refreshUniformsStandard(uniforms, material) {\n      uniforms.roughness.value = material.roughness;\n      uniforms.metalness.value = material.metalness;\n\n      if (material.roughnessMap) {\n        uniforms.roughnessMap.value = material.roughnessMap;\n      }\n\n      if (material.metalnessMap) {\n        uniforms.metalnessMap.value = material.metalnessMap;\n      }\n\n      if (material.lightMap) {\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n      }\n\n      if (material.emissiveMap) {\n        uniforms.emissiveMap.value = material.emissiveMap;\n      }\n\n      if (material.bumpMap) {\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.bumpScale.value = material.bumpScale;\n      }\n\n      if (material.normalMap) {\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.normalScale.value.copy(material.normalScale);\n      }\n\n      if (material.displacementMap) {\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n      }\n\n      if (material.envMap) {\n        //uniforms.envMap.value = material.envMap; // part of uniforms common\n        uniforms.envMapIntensity.value = material.envMapIntensity;\n      }\n    }\n\n    function refreshUniformsPhysical(uniforms, material) {\n      uniforms.clearCoat.value = material.clearCoat;\n      uniforms.clearCoatRoughness.value = material.clearCoatRoughness;\n      refreshUniformsStandard(uniforms, material);\n    } // If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\n    function markUniformsLightsNeedsUpdate(uniforms, value) {\n      uniforms.ambientLightColor.needsUpdate = value;\n      uniforms.directionalLights.needsUpdate = value;\n      uniforms.pointLights.needsUpdate = value;\n      uniforms.spotLights.needsUpdate = value;\n      uniforms.hemisphereLights.needsUpdate = value;\n    } // Lighting\n\n\n    function setupShadows(lights) {\n      var lightShadowsLength = 0;\n\n      for (var i = 0, l = lights.length; i < l; i++) {\n        var light = lights[i];\n\n        if (light.castShadow) {\n          _lights.shadows[lightShadowsLength++] = light;\n        }\n      }\n\n      _lights.shadows.length = lightShadowsLength;\n    }\n\n    function setupLights(lights, camera) {\n      var l,\n          ll,\n          light,\n          r = 0,\n          g = 0,\n          b = 0,\n          color,\n          intensity,\n          distance,\n          shadowMap,\n          viewMatrix = camera.matrixWorldInverse,\n          directionalLength = 0,\n          pointLength = 0,\n          spotLength = 0,\n          hemiLength = 0;\n\n      for (l = 0, ll = lights.length; l < ll; l++) {\n        light = lights[l];\n        color = light.color;\n        intensity = light.intensity;\n        distance = light.distance;\n        shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;\n\n        if (light instanceof THREE.AmbientLight) {\n          r += color.r * intensity;\n          g += color.g * intensity;\n          b += color.b * intensity;\n        } else if (light instanceof THREE.DirectionalLight) {\n          var uniforms = lightCache.get(light);\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\n          _vector3.setFromMatrixPosition(light.target.matrixWorld);\n\n          uniforms.direction.sub(_vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            uniforms.shadowBias = light.shadow.bias;\n            uniforms.shadowRadius = light.shadow.radius;\n            uniforms.shadowMapSize = light.shadow.mapSize;\n          }\n\n          _lights.directionalShadowMap[directionalLength] = shadowMap;\n          _lights.directionalShadowMatrix[directionalLength] = light.shadow.matrix;\n          _lights.directional[directionalLength++] = uniforms;\n        } else if (light instanceof THREE.SpotLight) {\n          var uniforms = lightCache.get(light);\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n          uniforms.color.copy(color).multiplyScalar(intensity);\n          uniforms.distance = distance;\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n\n          _vector3.setFromMatrixPosition(light.target.matrixWorld);\n\n          uniforms.direction.sub(_vector3);\n          uniforms.direction.transformDirection(viewMatrix);\n          uniforms.coneCos = Math.cos(light.angle);\n          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));\n          uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            uniforms.shadowBias = light.shadow.bias;\n            uniforms.shadowRadius = light.shadow.radius;\n            uniforms.shadowMapSize = light.shadow.mapSize;\n          }\n\n          _lights.spotShadowMap[spotLength] = shadowMap;\n          _lights.spotShadowMatrix[spotLength] = light.shadow.matrix;\n          _lights.spot[spotLength++] = uniforms;\n        } else if (light instanceof THREE.PointLight) {\n          var uniforms = lightCache.get(light);\n          uniforms.position.setFromMatrixPosition(light.matrixWorld);\n          uniforms.position.applyMatrix4(viewMatrix);\n          uniforms.color.copy(light.color).multiplyScalar(light.intensity);\n          uniforms.distance = light.distance;\n          uniforms.decay = light.distance === 0 ? 0.0 : light.decay;\n          uniforms.shadow = light.castShadow;\n\n          if (light.castShadow) {\n            uniforms.shadowBias = light.shadow.bias;\n            uniforms.shadowRadius = light.shadow.radius;\n            uniforms.shadowMapSize = light.shadow.mapSize;\n          }\n\n          _lights.pointShadowMap[pointLength] = shadowMap;\n\n          if (_lights.pointShadowMatrix[pointLength] === undefined) {\n            _lights.pointShadowMatrix[pointLength] = new THREE.Matrix4();\n          } // for point lights we set the shadow matrix to be a translation-only matrix\n          // equal to inverse of the light's position\n\n\n          _vector3.setFromMatrixPosition(light.matrixWorld).negate();\n\n          _lights.pointShadowMatrix[pointLength].identity().setPosition(_vector3);\n\n          _lights.point[pointLength++] = uniforms;\n        } else if (light instanceof THREE.HemisphereLight) {\n          var uniforms = lightCache.get(light);\n          uniforms.direction.setFromMatrixPosition(light.matrixWorld);\n          uniforms.direction.transformDirection(viewMatrix);\n          uniforms.direction.normalize();\n          uniforms.skyColor.copy(light.color).multiplyScalar(intensity);\n          uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);\n          _lights.hemi[hemiLength++] = uniforms;\n        }\n      }\n\n      _lights.ambient[0] = r;\n      _lights.ambient[1] = g;\n      _lights.ambient[2] = b;\n      _lights.directional.length = directionalLength;\n      _lights.spot.length = spotLength;\n      _lights.point.length = pointLength;\n      _lights.hemi.length = hemiLength;\n      _lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\n    } // GL state setting\n\n\n    this.setFaceCulling = function (cullFace, frontFaceDirection) {\n      state.setCullFace(cullFace);\n      state.setFlipSided(frontFaceDirection === THREE.FrontFaceDirectionCW);\n    }; // Textures\n\n\n    function allocTextureUnit() {\n      var textureUnit = _usedTextureUnits;\n\n      if (textureUnit >= capabilities.maxTextures) {\n        console.warn('WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures);\n      }\n\n      _usedTextureUnits += 1;\n      return textureUnit;\n    }\n\n    this.allocTextureUnit = allocTextureUnit; // this.setTexture2D = setTexture2D;\n\n    this.setTexture2D = function () {\n      var warned = false; // backwards compatibility: peel texture.texture\n\n      return function setTexture2D(texture, slot) {\n        if (texture instanceof THREE.WebGLRenderTarget) {\n          if (!warned) {\n            console.warn(\"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\");\n            warned = true;\n          }\n\n          texture = texture.texture;\n        }\n\n        textures.setTexture2D(texture, slot);\n      };\n    }();\n\n    this.setTexture = function () {\n      var warned = false;\n      return function setTexture(texture, slot) {\n        if (!warned) {\n          console.warn(\"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\");\n          warned = true;\n        }\n\n        textures.setTexture2D(texture, slot);\n      };\n    }();\n\n    this.setTextureCube = function () {\n      var warned = false;\n      return function setTextureCube(texture, slot) {\n        // backwards compatibility: peel texture.texture\n        if (texture instanceof THREE.WebGLRenderTargetCube) {\n          if (!warned) {\n            console.warn(\"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\");\n            warned = true;\n          }\n\n          texture = texture.texture;\n        } // currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\n        // TODO: unify these code paths\n\n\n        if (texture instanceof THREE.CubeTexture || Array.isArray(texture.image) && texture.image.length === 6) {\n          // CompressedTexture can have Array in image :/\n          // this function alone should take care of cube textures\n          textures.setTextureCube(texture, slot);\n        } else {\n          // assumed: texture property of THREE.WebGLRenderTargetCube\n          textures.setTextureCubeDynamic(texture, slot);\n        }\n      };\n    }();\n\n    this.getCurrentRenderTarget = function () {\n      return _currentRenderTarget;\n    };\n\n    this.setRenderTarget = function (renderTarget) {\n      _currentRenderTarget = renderTarget;\n\n      if (renderTarget && properties.get(renderTarget).__webglFramebuffer === undefined) {\n        textures.setupRenderTarget(renderTarget);\n      }\n\n      var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n      var framebuffer;\n\n      if (renderTarget) {\n        var renderTargetProperties = properties.get(renderTarget);\n\n        if (isCube) {\n          framebuffer = renderTargetProperties.__webglFramebuffer[renderTarget.activeCubeFace];\n        } else {\n          framebuffer = renderTargetProperties.__webglFramebuffer;\n        }\n\n        _currentScissor.copy(renderTarget.scissor);\n\n        _currentScissorTest = renderTarget.scissorTest;\n\n        _currentViewport.copy(renderTarget.viewport);\n      } else {\n        framebuffer = null;\n\n        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio);\n\n        _currentScissorTest = _scissorTest;\n\n        _currentViewport.copy(_viewport).multiplyScalar(_pixelRatio);\n      }\n\n      if (_currentFramebuffer !== framebuffer) {\n        _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n        _currentFramebuffer = framebuffer;\n      }\n\n      state.scissor(_currentScissor);\n      state.setScissorTest(_currentScissorTest);\n      state.viewport(_currentViewport);\n\n      if (isCube) {\n        var textureProperties = properties.get(renderTarget.texture);\n\n        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel);\n      }\n    };\n\n    this.readRenderTargetPixels = function (renderTarget, x, y, width, height, buffer) {\n      if (renderTarget instanceof THREE.WebGLRenderTarget === false) {\n        console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.');\n        return;\n      }\n\n      var framebuffer = properties.get(renderTarget).__webglFramebuffer;\n\n      if (framebuffer) {\n        var restore = false;\n\n        if (framebuffer !== _currentFramebuffer) {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n          restore = true;\n        }\n\n        try {\n          var texture = renderTarget.texture;\n\n          if (texture.format !== THREE.RGBAFormat && paramThreeToGL(texture.format) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.');\n            return;\n          }\n\n          if (texture.type !== THREE.UnsignedByteType && paramThreeToGL(texture.type) !== _gl.getParameter(_gl.IMPLEMENTATION_COLOR_READ_TYPE) && !(texture.type === THREE.FloatType && extensions.get('WEBGL_color_buffer_float')) && !(texture.type === THREE.HalfFloatType && extensions.get('EXT_color_buffer_half_float'))) {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.');\n            return;\n          }\n\n          if (_gl.checkFramebufferStatus(_gl.FRAMEBUFFER) === _gl.FRAMEBUFFER_COMPLETE) {\n            // the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n            if (x >= 0 && x <= renderTarget.width - width && y >= 0 && y <= renderTarget.height - height) {\n              _gl.readPixels(x, y, width, height, paramThreeToGL(texture.format), paramThreeToGL(texture.type), buffer);\n            }\n          } else {\n            console.error('THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.');\n          }\n        } finally {\n          if (restore) {\n            _gl.bindFramebuffer(_gl.FRAMEBUFFER, _currentFramebuffer);\n          }\n        }\n      }\n    }; // Map three.js constants to WebGL constants\n\n\n    function paramThreeToGL(p) {\n      var extension;\n      if (p === THREE.RepeatWrapping) return _gl.REPEAT;\n      if (p === THREE.ClampToEdgeWrapping) return _gl.CLAMP_TO_EDGE;\n      if (p === THREE.MirroredRepeatWrapping) return _gl.MIRRORED_REPEAT;\n      if (p === THREE.NearestFilter) return _gl.NEAREST;\n      if (p === THREE.NearestMipMapNearestFilter) return _gl.NEAREST_MIPMAP_NEAREST;\n      if (p === THREE.NearestMipMapLinearFilter) return _gl.NEAREST_MIPMAP_LINEAR;\n      if (p === THREE.LinearFilter) return _gl.LINEAR;\n      if (p === THREE.LinearMipMapNearestFilter) return _gl.LINEAR_MIPMAP_NEAREST;\n      if (p === THREE.LinearMipMapLinearFilter) return _gl.LINEAR_MIPMAP_LINEAR;\n      if (p === THREE.UnsignedByteType) return _gl.UNSIGNED_BYTE;\n      if (p === THREE.UnsignedShort4444Type) return _gl.UNSIGNED_SHORT_4_4_4_4;\n      if (p === THREE.UnsignedShort5551Type) return _gl.UNSIGNED_SHORT_5_5_5_1;\n      if (p === THREE.UnsignedShort565Type) return _gl.UNSIGNED_SHORT_5_6_5;\n      if (p === THREE.ByteType) return _gl.BYTE;\n      if (p === THREE.ShortType) return _gl.SHORT;\n      if (p === THREE.UnsignedShortType) return _gl.UNSIGNED_SHORT;\n      if (p === THREE.IntType) return _gl.INT;\n      if (p === THREE.UnsignedIntType) return _gl.UNSIGNED_INT;\n      if (p === THREE.FloatType) return _gl.FLOAT;\n      extension = extensions.get('OES_texture_half_float');\n\n      if (extension !== null) {\n        if (p === THREE.HalfFloatType) return extension.HALF_FLOAT_OES;\n      }\n\n      if (p === THREE.AlphaFormat) return _gl.ALPHA;\n      if (p === THREE.RGBFormat) return _gl.RGB;\n      if (p === THREE.RGBAFormat) return _gl.RGBA;\n      if (p === THREE.LuminanceFormat) return _gl.LUMINANCE;\n      if (p === THREE.LuminanceAlphaFormat) return _gl.LUMINANCE_ALPHA;\n      if (p === THREE.DepthFormat) return _gl.DEPTH_COMPONENT;\n      if (p === THREE.AddEquation) return _gl.FUNC_ADD;\n      if (p === THREE.SubtractEquation) return _gl.FUNC_SUBTRACT;\n      if (p === THREE.ReverseSubtractEquation) return _gl.FUNC_REVERSE_SUBTRACT;\n      if (p === THREE.ZeroFactor) return _gl.ZERO;\n      if (p === THREE.OneFactor) return _gl.ONE;\n      if (p === THREE.SrcColorFactor) return _gl.SRC_COLOR;\n      if (p === THREE.OneMinusSrcColorFactor) return _gl.ONE_MINUS_SRC_COLOR;\n      if (p === THREE.SrcAlphaFactor) return _gl.SRC_ALPHA;\n      if (p === THREE.OneMinusSrcAlphaFactor) return _gl.ONE_MINUS_SRC_ALPHA;\n      if (p === THREE.DstAlphaFactor) return _gl.DST_ALPHA;\n      if (p === THREE.OneMinusDstAlphaFactor) return _gl.ONE_MINUS_DST_ALPHA;\n      if (p === THREE.DstColorFactor) return _gl.DST_COLOR;\n      if (p === THREE.OneMinusDstColorFactor) return _gl.ONE_MINUS_DST_COLOR;\n      if (p === THREE.SrcAlphaSaturateFactor) return _gl.SRC_ALPHA_SATURATE;\n      extension = extensions.get('WEBGL_compressed_texture_s3tc');\n\n      if (extension !== null) {\n        if (p === THREE.RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n        if (p === THREE.RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n        if (p === THREE.RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n        if (p === THREE.RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n      }\n\n      extension = extensions.get('WEBGL_compressed_texture_pvrtc');\n\n      if (extension !== null) {\n        if (p === THREE.RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n        if (p === THREE.RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n        if (p === THREE.RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n        if (p === THREE.RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n      }\n\n      extension = extensions.get('WEBGL_compressed_texture_etc1');\n\n      if (extension !== null) {\n        if (p === THREE.RGB_ETC1_Format) return extension.COMPRESSED_RGB_ETC1_WEBGL;\n      }\n\n      extension = extensions.get('EXT_blend_minmax');\n\n      if (extension !== null) {\n        if (p === THREE.MinEquation) return extension.MIN_EXT;\n        if (p === THREE.MaxEquation) return extension.MAX_EXT;\n      }\n\n      return 0;\n    }\n  }; // File:src/renderers/WebGLRenderTarget.js\n\n  /**\n   * @author szimek / https://github.com/szimek/\n   * @author alteredq / http://alteredqualia.com/\n   * @author Marius Kintel / https://github.com/kintel\n   */\n\n  /*\n   In options, we can specify:\n   * Texture parameters for an auto-generated target texture\n   * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n  */\n\n\n  THREE.WebGLRenderTarget = function (width, height, options) {\n    this.uuid = THREE.Math.generateUUID();\n    this.width = width;\n    this.height = height;\n    this.scissor = new THREE.Vector4(0, 0, width, height);\n    this.scissorTest = false;\n    this.viewport = new THREE.Vector4(0, 0, width, height);\n    options = options || {};\n    if (options.minFilter === undefined) options.minFilter = THREE.LinearFilter;\n    this.texture = new THREE.Texture(undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding);\n    this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n    this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\n    this.depthTexture = null;\n  };\n\n  Object.assign(THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\n    setSize: function setSize(width, height) {\n      if (this.width !== width || this.height !== height) {\n        this.width = width;\n        this.height = height;\n        this.dispose();\n      }\n\n      this.viewport.set(0, 0, width, height);\n      this.scissor.set(0, 0, width, height);\n    },\n    clone: function clone() {\n      return new this.constructor().copy(this);\n    },\n    copy: function copy(source) {\n      this.width = source.width;\n      this.height = source.height;\n      this.viewport.copy(source.viewport);\n      this.texture = source.texture.clone();\n      this.depthBuffer = source.depthBuffer;\n      this.stencilBuffer = source.stencilBuffer;\n      this.depthTexture = source.depthTexture;\n      return this;\n    },\n    dispose: function dispose() {\n      this.dispatchEvent({\n        type: 'dispose'\n      });\n    }\n  }); // File:src/renderers/WebGLRenderTargetCube.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com\n   */\n\n  THREE.WebGLRenderTargetCube = function (width, height, options) {\n    THREE.WebGLRenderTarget.call(this, width, height, options);\n    this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\n\n    this.activeMipMapLevel = 0;\n  };\n\n  THREE.WebGLRenderTargetCube.prototype = Object.create(THREE.WebGLRenderTarget.prototype);\n  THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube; // File:src/renderers/webgl/WebGLBufferRenderer.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n  THREE.WebGLBufferRenderer = function (_gl, extensions, _infoRender) {\n    var mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    function render(start, count) {\n      _gl.drawArrays(mode, start, count);\n\n      _infoRender.calls++;\n      _infoRender.vertices += count;\n      if (mode === _gl.TRIANGLES) _infoRender.faces += count / 3;\n    }\n\n    function renderInstances(geometry) {\n      var extension = extensions.get('ANGLE_instanced_arrays');\n\n      if (extension === null) {\n        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n\n      var position = geometry.attributes.position;\n      var count = 0;\n\n      if (position instanceof THREE.InterleavedBufferAttribute) {\n        count = position.data.count;\n        extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);\n      } else {\n        count = position.count;\n        extension.drawArraysInstancedANGLE(mode, 0, count, geometry.maxInstancedCount);\n      }\n\n      _infoRender.calls++;\n      _infoRender.vertices += count * geometry.maxInstancedCount;\n      if (mode === _gl.TRIANGLES) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n    }\n\n    this.setMode = setMode;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }; // File:src/renderers/webgl/WebGLClipping.js\n\n\n  THREE.WebGLClipping = function () {\n    var scope = this,\n        globalState = null,\n        numGlobalPlanes = 0,\n        localClippingEnabled = false,\n        renderingShadows = false,\n        plane = new THREE.Plane(),\n        viewNormalMatrix = new THREE.Matrix3(),\n        uniform = {\n      value: null,\n      needsUpdate: false\n    };\n    this.uniform = uniform;\n    this.numPlanes = 0;\n\n    this.init = function (planes, enableLocalClipping, camera) {\n      var enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to\n      // run another frame in order to reset the state:\n      numGlobalPlanes !== 0 || localClippingEnabled;\n      localClippingEnabled = enableLocalClipping;\n      globalState = projectPlanes(planes, camera, 0);\n      numGlobalPlanes = planes.length;\n      return enabled;\n    };\n\n    this.beginShadows = function () {\n      renderingShadows = true;\n      projectPlanes(null);\n    };\n\n    this.endShadows = function () {\n      renderingShadows = false;\n      resetGlobalState();\n    };\n\n    this.setState = function (planes, clipShadows, camera, cache, fromCache) {\n      if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {\n        // there's no local clipping\n        if (renderingShadows) {\n          // there's no global clipping\n          projectPlanes(null);\n        } else {\n          resetGlobalState();\n        }\n      } else {\n        var nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n            lGlobal = nGlobal * 4,\n            dstArray = cache.clippingState || null;\n        uniform.value = dstArray; // ensure unique state\n\n        dstArray = projectPlanes(planes, camera, lGlobal, fromCache);\n\n        for (var i = 0; i !== lGlobal; ++i) {\n          dstArray[i] = globalState[i];\n        }\n\n        cache.clippingState = dstArray;\n        this.numPlanes += nGlobal;\n      }\n    };\n\n    function resetGlobalState() {\n      if (uniform.value !== globalState) {\n        uniform.value = globalState;\n        uniform.needsUpdate = numGlobalPlanes > 0;\n      }\n\n      scope.numPlanes = numGlobalPlanes;\n    }\n\n    function projectPlanes(planes, camera, dstOffset, skipTransform) {\n      var nPlanes = planes !== null ? planes.length : 0,\n          dstArray = null;\n\n      if (nPlanes !== 0) {\n        dstArray = uniform.value;\n\n        if (skipTransform !== true || dstArray === null) {\n          var flatSize = dstOffset + nPlanes * 4,\n              viewMatrix = camera.matrixWorldInverse;\n          viewNormalMatrix.getNormalMatrix(viewMatrix);\n\n          if (dstArray === null || dstArray.length < flatSize) {\n            dstArray = new Float32Array(flatSize);\n          }\n\n          for (var i = 0, i4 = dstOffset; i !== nPlanes; ++i, i4 += 4) {\n            plane.copy(planes[i]).applyMatrix4(viewMatrix, viewNormalMatrix);\n            plane.normal.toArray(dstArray, i4);\n            dstArray[i4 + 3] = plane.constant;\n          }\n        }\n\n        uniform.value = dstArray;\n        uniform.needsUpdate = true;\n      }\n\n      scope.numPlanes = nPlanes;\n      return dstArray;\n    }\n  }; // File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLIndexedBufferRenderer = function (_gl, extensions, _infoRender) {\n    var mode;\n\n    function setMode(value) {\n      mode = value;\n    }\n\n    var type, size;\n\n    function setIndex(index) {\n      if (index.array instanceof Uint32Array && extensions.get('OES_element_index_uint')) {\n        type = _gl.UNSIGNED_INT;\n        size = 4;\n      } else {\n        type = _gl.UNSIGNED_SHORT;\n        size = 2;\n      }\n    }\n\n    function render(start, count) {\n      _gl.drawElements(mode, count, type, start * size);\n\n      _infoRender.calls++;\n      _infoRender.vertices += count;\n      if (mode === _gl.TRIANGLES) _infoRender.faces += count / 3;\n    }\n\n    function renderInstances(geometry, start, count) {\n      var extension = extensions.get('ANGLE_instanced_arrays');\n\n      if (extension === null) {\n        console.error('THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.');\n        return;\n      }\n\n      extension.drawElementsInstancedANGLE(mode, count, type, start * size, geometry.maxInstancedCount);\n      _infoRender.calls++;\n      _infoRender.vertices += count * geometry.maxInstancedCount;\n      if (mode === _gl.TRIANGLES) _infoRender.faces += geometry.maxInstancedCount * count / 3;\n    }\n\n    this.setMode = setMode;\n    this.setIndex = setIndex;\n    this.render = render;\n    this.renderInstances = renderInstances;\n  }; // File:src/renderers/webgl/WebGLExtensions.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLExtensions = function (gl) {\n    var extensions = {};\n\n    this.get = function (name) {\n      if (extensions[name] !== undefined) {\n        return extensions[name];\n      }\n\n      var extension;\n\n      switch (name) {\n        case 'WEBGL_depth_texture':\n          extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n          break;\n\n        case 'EXT_texture_filter_anisotropic':\n          extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n          break;\n\n        case 'WEBGL_compressed_texture_s3tc':\n          extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n          break;\n\n        case 'WEBGL_compressed_texture_pvrtc':\n          extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n          break;\n\n        case 'WEBGL_compressed_texture_etc1':\n          extension = gl.getExtension('WEBGL_compressed_texture_etc1');\n          break;\n\n        default:\n          extension = gl.getExtension(name);\n      }\n\n      if (extension === null) {\n        console.warn('THREE.WebGLRenderer: ' + name + ' extension not supported.');\n      }\n\n      extensions[name] = extension;\n      return extension;\n    };\n  }; // File:src/renderers/webgl/WebGLCapabilities.js\n\n\n  THREE.WebGLCapabilities = function (gl, extensions, parameters) {\n    var maxAnisotropy;\n\n    function getMaxAnisotropy() {\n      if (maxAnisotropy !== undefined) return maxAnisotropy;\n      var extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      if (extension !== null) {\n        maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);\n      } else {\n        maxAnisotropy = 0;\n      }\n\n      return maxAnisotropy;\n    }\n\n    function getMaxPrecision(precision) {\n      if (precision === 'highp') {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n          return 'highp';\n        }\n\n        precision = 'mediump';\n      }\n\n      if (precision === 'mediump') {\n        if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n          return 'mediump';\n        }\n      }\n\n      return 'lowp';\n    }\n\n    this.getMaxAnisotropy = getMaxAnisotropy;\n    this.getMaxPrecision = getMaxPrecision;\n    this.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\n    this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    this.maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    this.maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n    this.maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);\n    this.maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n    this.vertexTextures = this.maxVertexTextures > 0;\n    this.floatFragmentTextures = !!extensions.get('OES_texture_float');\n    this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\n\n    var _maxPrecision = getMaxPrecision(this.precision);\n\n    if (_maxPrecision !== this.precision) {\n      console.warn('THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.');\n      this.precision = _maxPrecision;\n    }\n\n    if (this.logarithmicDepthBuffer) {\n      this.logarithmicDepthBuffer = !!extensions.get('EXT_frag_depth');\n    }\n  }; // File:src/renderers/webgl/WebGLGeometries.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLGeometries = function (gl, properties, info) {\n    var geometries = {};\n\n    function get(object) {\n      var geometry = object.geometry;\n\n      if (geometries[geometry.id] !== undefined) {\n        return geometries[geometry.id];\n      }\n\n      geometry.addEventListener('dispose', onGeometryDispose);\n      var buffergeometry;\n\n      if (geometry instanceof THREE.BufferGeometry) {\n        buffergeometry = geometry;\n      } else if (geometry instanceof THREE.Geometry) {\n        if (geometry._bufferGeometry === undefined) {\n          geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject(object);\n        }\n\n        buffergeometry = geometry._bufferGeometry;\n      }\n\n      geometries[geometry.id] = buffergeometry;\n      info.memory.geometries++;\n      return buffergeometry;\n    }\n\n    function onGeometryDispose(event) {\n      var geometry = event.target;\n      var buffergeometry = geometries[geometry.id];\n\n      if (buffergeometry.index !== null) {\n        deleteAttribute(buffergeometry.index);\n      }\n\n      deleteAttributes(buffergeometry.attributes);\n      geometry.removeEventListener('dispose', onGeometryDispose);\n      delete geometries[geometry.id]; // TODO\n\n      var property = properties.get(geometry);\n\n      if (property.wireframe) {\n        deleteAttribute(property.wireframe);\n      }\n\n      properties.delete(geometry);\n      var bufferproperty = properties.get(buffergeometry);\n\n      if (bufferproperty.wireframe) {\n        deleteAttribute(bufferproperty.wireframe);\n      }\n\n      properties.delete(buffergeometry); //\n\n      info.memory.geometries--;\n    }\n\n    function getAttributeBuffer(attribute) {\n      if (attribute instanceof THREE.InterleavedBufferAttribute) {\n        return properties.get(attribute.data).__webglBuffer;\n      }\n\n      return properties.get(attribute).__webglBuffer;\n    }\n\n    function deleteAttribute(attribute) {\n      var buffer = getAttributeBuffer(attribute);\n\n      if (buffer !== undefined) {\n        gl.deleteBuffer(buffer);\n        removeAttributeBuffer(attribute);\n      }\n    }\n\n    function deleteAttributes(attributes) {\n      for (var name in attributes) {\n        deleteAttribute(attributes[name]);\n      }\n    }\n\n    function removeAttributeBuffer(attribute) {\n      if (attribute instanceof THREE.InterleavedBufferAttribute) {\n        properties.delete(attribute.data);\n      } else {\n        properties.delete(attribute);\n      }\n    }\n\n    this.get = get;\n  }; // File:src/renderers/webgl/WebGLLights.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLLights = function () {\n    var lights = {};\n\n    this.get = function (light) {\n      if (lights[light.id] !== undefined) {\n        return lights[light.id];\n      }\n\n      var uniforms;\n\n      switch (light.type) {\n        case 'DirectionalLight':\n          uniforms = {\n            direction: new THREE.Vector3(),\n            color: new THREE.Color(),\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new THREE.Vector2()\n          };\n          break;\n\n        case 'SpotLight':\n          uniforms = {\n            position: new THREE.Vector3(),\n            direction: new THREE.Vector3(),\n            color: new THREE.Color(),\n            distance: 0,\n            coneCos: 0,\n            penumbraCos: 0,\n            decay: 0,\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new THREE.Vector2()\n          };\n          break;\n\n        case 'PointLight':\n          uniforms = {\n            position: new THREE.Vector3(),\n            color: new THREE.Color(),\n            distance: 0,\n            decay: 0,\n            shadow: false,\n            shadowBias: 0,\n            shadowRadius: 1,\n            shadowMapSize: new THREE.Vector2()\n          };\n          break;\n\n        case 'HemisphereLight':\n          uniforms = {\n            direction: new THREE.Vector3(),\n            skyColor: new THREE.Color(),\n            groundColor: new THREE.Color()\n          };\n          break;\n      }\n\n      lights[light.id] = uniforms;\n      return uniforms;\n    };\n  }; // File:src/renderers/webgl/WebGLObjects.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLObjects = function (gl, properties, info) {\n    var geometries = new THREE.WebGLGeometries(gl, properties, info); //\n\n    function update(object) {\n      // TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\n      var geometry = geometries.get(object);\n\n      if (object.geometry instanceof THREE.Geometry) {\n        geometry.updateFromObject(object);\n      }\n\n      var index = geometry.index;\n      var attributes = geometry.attributes;\n\n      if (index !== null) {\n        updateAttribute(index, gl.ELEMENT_ARRAY_BUFFER);\n      }\n\n      for (var name in attributes) {\n        updateAttribute(attributes[name], gl.ARRAY_BUFFER);\n      } // morph targets\n\n\n      var morphAttributes = geometry.morphAttributes;\n\n      for (var name in morphAttributes) {\n        var array = morphAttributes[name];\n\n        for (var i = 0, l = array.length; i < l; i++) {\n          updateAttribute(array[i], gl.ARRAY_BUFFER);\n        }\n      }\n\n      return geometry;\n    }\n\n    function updateAttribute(attribute, bufferType) {\n      var data = attribute instanceof THREE.InterleavedBufferAttribute ? attribute.data : attribute;\n      var attributeProperties = properties.get(data);\n\n      if (attributeProperties.__webglBuffer === undefined) {\n        createBuffer(attributeProperties, data, bufferType);\n      } else if (attributeProperties.version !== data.version) {\n        updateBuffer(attributeProperties, data, bufferType);\n      }\n    }\n\n    function createBuffer(attributeProperties, data, bufferType) {\n      attributeProperties.__webglBuffer = gl.createBuffer();\n      gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);\n      var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\n      gl.bufferData(bufferType, data.array, usage);\n      attributeProperties.version = data.version;\n    }\n\n    function updateBuffer(attributeProperties, data, bufferType) {\n      gl.bindBuffer(bufferType, attributeProperties.__webglBuffer);\n\n      if (data.dynamic === false || data.updateRange.count === -1) {\n        // Not using update ranges\n        gl.bufferSubData(bufferType, 0, data.array);\n      } else if (data.updateRange.count === 0) {\n        console.error('THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.');\n      } else {\n        gl.bufferSubData(bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT, data.array.subarray(data.updateRange.offset, data.updateRange.offset + data.updateRange.count));\n        data.updateRange.count = 0; // reset range\n      }\n\n      attributeProperties.version = data.version;\n    }\n\n    function getAttributeBuffer(attribute) {\n      if (attribute instanceof THREE.InterleavedBufferAttribute) {\n        return properties.get(attribute.data).__webglBuffer;\n      }\n\n      return properties.get(attribute).__webglBuffer;\n    }\n\n    function getWireframeAttribute(geometry) {\n      var property = properties.get(geometry);\n\n      if (property.wireframe !== undefined) {\n        return property.wireframe;\n      }\n\n      var indices = [];\n      var index = geometry.index;\n      var attributes = geometry.attributes;\n      var position = attributes.position; // console.time( 'wireframe' );\n\n      if (index !== null) {\n        var edges = {};\n        var array = index.array;\n\n        for (var i = 0, l = array.length; i < l; i += 3) {\n          var a = array[i + 0];\n          var b = array[i + 1];\n          var c = array[i + 2];\n          if (checkEdge(edges, a, b)) indices.push(a, b);\n          if (checkEdge(edges, b, c)) indices.push(b, c);\n          if (checkEdge(edges, c, a)) indices.push(c, a);\n        }\n      } else {\n        var array = attributes.position.array;\n\n        for (var i = 0, l = array.length / 3 - 1; i < l; i += 3) {\n          var a = i + 0;\n          var b = i + 1;\n          var c = i + 2;\n          indices.push(a, b, b, c, c, a);\n        }\n      } // console.timeEnd( 'wireframe' );\n\n\n      var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\n      var attribute = new THREE.BufferAttribute(new TypeArray(indices), 1);\n      updateAttribute(attribute, gl.ELEMENT_ARRAY_BUFFER);\n      property.wireframe = attribute;\n      return attribute;\n    }\n\n    function checkEdge(edges, a, b) {\n      if (a > b) {\n        var tmp = a;\n        a = b;\n        b = tmp;\n      }\n\n      var list = edges[a];\n\n      if (list === undefined) {\n        edges[a] = [b];\n        return true;\n      } else if (list.indexOf(b) === -1) {\n        list.push(b);\n        return true;\n      }\n\n      return false;\n    }\n\n    this.getAttributeBuffer = getAttributeBuffer;\n    this.getWireframeAttribute = getWireframeAttribute;\n    this.update = update;\n  }; // File:src/renderers/webgl/WebGLProgram.js\n\n\n  THREE.WebGLProgram = function () {\n    var programIdCount = 0;\n\n    function getEncodingComponents(encoding) {\n      switch (encoding) {\n        case THREE.LinearEncoding:\n          return ['Linear', '( value )'];\n\n        case THREE.sRGBEncoding:\n          return ['sRGB', '( value )'];\n\n        case THREE.RGBEEncoding:\n          return ['RGBE', '( value )'];\n\n        case THREE.RGBM7Encoding:\n          return ['RGBM', '( value, 7.0 )'];\n\n        case THREE.RGBM16Encoding:\n          return ['RGBM', '( value, 16.0 )'];\n\n        case THREE.RGBDEncoding:\n          return ['RGBD', '( value, 256.0 )'];\n\n        case THREE.GammaEncoding:\n          return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];\n\n        default:\n          throw new Error('unsupported encoding: ' + encoding);\n      }\n    }\n\n    function getTexelDecodingFunction(functionName, encoding) {\n      var components = getEncodingComponents(encoding);\n      return \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[0] + \"ToLinear\" + components[1] + \"; }\";\n    }\n\n    function getTexelEncodingFunction(functionName, encoding) {\n      var components = getEncodingComponents(encoding);\n      return \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[0] + components[1] + \"; }\";\n    }\n\n    function getToneMappingFunction(functionName, toneMapping) {\n      var toneMappingName;\n\n      switch (toneMapping) {\n        case THREE.LinearToneMapping:\n          toneMappingName = \"Linear\";\n          break;\n\n        case THREE.ReinhardToneMapping:\n          toneMappingName = \"Reinhard\";\n          break;\n\n        case THREE.Uncharted2ToneMapping:\n          toneMappingName = \"Uncharted2\";\n          break;\n\n        case THREE.CineonToneMapping:\n          toneMappingName = \"OptimizedCineon\";\n          break;\n\n        default:\n          throw new Error('unsupported toneMapping: ' + toneMapping);\n      }\n\n      return \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\n    }\n\n    function generateExtensions(extensions, parameters, rendererExtensions) {\n      extensions = extensions || {};\n      var chunks = [extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ? '#extension GL_OES_standard_derivatives : enable' : '', (extensions.fragDepth || parameters.logarithmicDepthBuffer) && rendererExtensions.get('EXT_frag_depth') ? '#extension GL_EXT_frag_depth : enable' : '', extensions.drawBuffers && rendererExtensions.get('WEBGL_draw_buffers') ? '#extension GL_EXT_draw_buffers : require' : '', (extensions.shaderTextureLOD || parameters.envMap) && rendererExtensions.get('EXT_shader_texture_lod') ? '#extension GL_EXT_shader_texture_lod : enable' : ''];\n      return chunks.filter(filterEmptyLine).join('\\n');\n    }\n\n    function generateDefines(defines) {\n      var chunks = [];\n\n      for (var name in defines) {\n        var value = defines[name];\n        if (value === false) continue;\n        chunks.push('#define ' + name + ' ' + value);\n      }\n\n      return chunks.join('\\n');\n    }\n\n    function fetchAttributeLocations(gl, program, identifiers) {\n      var attributes = {};\n      var n = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n      for (var i = 0; i < n; i++) {\n        var info = gl.getActiveAttrib(program, i);\n        var name = info.name; // console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\n\n        attributes[name] = gl.getAttribLocation(program, name);\n      }\n\n      return attributes;\n    }\n\n    function filterEmptyLine(string) {\n      return string !== '';\n    }\n\n    function replaceLightNums(string, parameters) {\n      return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights);\n    }\n\n    function parseIncludes(string) {\n      var pattern = /#include +<([\\w\\d.]+)>/g;\n\n      function replace(match, include) {\n        var replace = THREE.ShaderChunk[include];\n\n        if (replace === undefined) {\n          throw new Error('Can not resolve #include <' + include + '>');\n        }\n\n        return parseIncludes(replace);\n      }\n\n      return string.replace(pattern, replace);\n    }\n\n    function unrollLoops(string) {\n      var pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\n\n      function replace(match, start, end, snippet) {\n        var unroll = '';\n\n        for (var i = parseInt(start); i < parseInt(end); i++) {\n          unroll += snippet.replace(/\\[ i \\]/g, '[ ' + i + ' ]');\n        }\n\n        return unroll;\n      }\n\n      return string.replace(pattern, replace);\n    }\n\n    return function WebGLProgram(renderer, code, material, parameters) {\n      var gl = renderer.context;\n      var extensions = material.extensions;\n      var defines = material.defines;\n      var vertexShader = material.__webglShader.vertexShader;\n      var fragmentShader = material.__webglShader.fragmentShader;\n      var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n      if (parameters.shadowMapType === THREE.PCFShadowMap) {\n        shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n      } else if (parameters.shadowMapType === THREE.PCFSoftShadowMap) {\n        shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n      }\n\n      var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n      var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n      var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\n      if (parameters.envMap) {\n        switch (material.envMap.mapping) {\n          case THREE.CubeReflectionMapping:\n          case THREE.CubeRefractionMapping:\n            envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n            break;\n\n          case THREE.CubeUVReflectionMapping:\n          case THREE.CubeUVRefractionMapping:\n            envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n            break;\n\n          case THREE.EquirectangularReflectionMapping:\n          case THREE.EquirectangularRefractionMapping:\n            envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\n            break;\n\n          case THREE.SphericalReflectionMapping:\n            envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\n            break;\n        }\n\n        switch (material.envMap.mapping) {\n          case THREE.CubeRefractionMapping:\n          case THREE.EquirectangularRefractionMapping:\n            envMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n            break;\n        }\n\n        switch (material.combine) {\n          case THREE.MultiplyOperation:\n            envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n            break;\n\n          case THREE.MixOperation:\n            envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n            break;\n\n          case THREE.AddOperation:\n            envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n            break;\n        }\n      }\n\n      var gammaFactorDefine = renderer.gammaFactor > 0 ? renderer.gammaFactor : 1.0; // console.log( 'building new program ' );\n      //\n\n      var customExtensions = generateExtensions(extensions, parameters, renderer.extensions);\n      var customDefines = generateDefines(defines); //\n\n      var program = gl.createProgram();\n      var prefixVertex, prefixFragment;\n\n      if (material instanceof THREE.RawShaderMaterial) {\n        prefixVertex = [customDefines].filter(filterEmptyLine).join('\\n');\n        prefixFragment = [customDefines].filter(filterEmptyLine).join('\\n');\n      } else {\n        prefixVertex = ['precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + material.__webglShader.name, customDefines, parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, '#define MAX_BONES ' + parameters.maxBones, parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.skinning ? '#define USE_SKINNING' : '', parameters.useVertexTexture ? '#define BONE_TEXTURE' : '', parameters.morphTargets ? '#define USE_MORPHTARGETS' : '', parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes, parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '', 'uniform mat4 modelMatrix;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform mat4 viewMatrix;', 'uniform mat3 normalMatrix;', 'uniform vec3 cameraPosition;', 'attribute vec3 position;', 'attribute vec3 normal;', 'attribute vec2 uv;', '#ifdef USE_COLOR', '\tattribute vec3 color;', '#endif', '#ifdef USE_MORPHTARGETS', '\tattribute vec3 morphTarget0;', '\tattribute vec3 morphTarget1;', '\tattribute vec3 morphTarget2;', '\tattribute vec3 morphTarget3;', '\t#ifdef USE_MORPHNORMALS', '\t\tattribute vec3 morphNormal0;', '\t\tattribute vec3 morphNormal1;', '\t\tattribute vec3 morphNormal2;', '\t\tattribute vec3 morphNormal3;', '\t#else', '\t\tattribute vec3 morphTarget4;', '\t\tattribute vec3 morphTarget5;', '\t\tattribute vec3 morphTarget6;', '\t\tattribute vec3 morphTarget7;', '\t#endif', '#endif', '#ifdef USE_SKINNING', '\tattribute vec4 skinIndex;', '\tattribute vec4 skinWeight;', '#endif', '\\n'].filter(filterEmptyLine).join('\\n');\n        prefixFragment = [customExtensions, 'precision ' + parameters.precision + ' float;', 'precision ' + parameters.precision + ' int;', '#define SHADER_NAME ' + material.__webglShader.name, customDefines, parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '', '#define GAMMA_FACTOR ' + gammaFactorDefine, parameters.useFog && parameters.fog ? '#define USE_FOG' : '', parameters.useFog && parameters.fogExp ? '#define FOG_EXP2' : '', parameters.map ? '#define USE_MAP' : '', parameters.envMap ? '#define USE_ENVMAP' : '', parameters.envMap ? '#define ' + envMapTypeDefine : '', parameters.envMap ? '#define ' + envMapModeDefine : '', parameters.envMap ? '#define ' + envMapBlendingDefine : '', parameters.lightMap ? '#define USE_LIGHTMAP' : '', parameters.aoMap ? '#define USE_AOMAP' : '', parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '', parameters.bumpMap ? '#define USE_BUMPMAP' : '', parameters.normalMap ? '#define USE_NORMALMAP' : '', parameters.specularMap ? '#define USE_SPECULARMAP' : '', parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '', parameters.metalnessMap ? '#define USE_METALNESSMAP' : '', parameters.alphaMap ? '#define USE_ALPHAMAP' : '', parameters.vertexColors ? '#define USE_COLOR' : '', parameters.flatShading ? '#define FLAT_SHADED' : '', parameters.doubleSided ? '#define DOUBLE_SIDED' : '', parameters.flipSided ? '#define FLIP_SIDED' : '', '#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes, parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '', parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '', parameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '', parameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '', parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '', parameters.logarithmicDepthBuffer && renderer.extensions.get('EXT_frag_depth') ? '#define USE_LOGDEPTHBUF_EXT' : '', parameters.envMap && renderer.extensions.get('EXT_shader_texture_lod') ? '#define TEXTURE_LOD_EXT' : '', 'uniform mat4 viewMatrix;', 'uniform vec3 cameraPosition;', parameters.toneMapping !== THREE.NoToneMapping ? \"#define TONE_MAPPING\" : '', parameters.toneMapping !== THREE.NoToneMapping ? THREE.ShaderChunk['tonemapping_pars_fragment'] : '', // this code is required here because it is used by the toneMapping() function defined below\n        parameters.toneMapping !== THREE.NoToneMapping ? getToneMappingFunction(\"toneMapping\", parameters.toneMapping) : '', parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ? THREE.ShaderChunk['encodings_pars_fragment'] : '', // this code is required here because it is used by the various encoding/decoding function defined below\n        parameters.mapEncoding ? getTexelDecodingFunction('mapTexelToLinear', parameters.mapEncoding) : '', parameters.envMapEncoding ? getTexelDecodingFunction('envMapTexelToLinear', parameters.envMapEncoding) : '', parameters.emissiveMapEncoding ? getTexelDecodingFunction('emissiveMapTexelToLinear', parameters.emissiveMapEncoding) : '', parameters.outputEncoding ? getTexelEncodingFunction(\"linearToOutputTexel\", parameters.outputEncoding) : '', parameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '', '\\n'].filter(filterEmptyLine).join('\\n');\n      }\n\n      vertexShader = parseIncludes(vertexShader, parameters);\n      vertexShader = replaceLightNums(vertexShader, parameters);\n      fragmentShader = parseIncludes(fragmentShader, parameters);\n      fragmentShader = replaceLightNums(fragmentShader, parameters);\n\n      if (material instanceof THREE.ShaderMaterial === false) {\n        vertexShader = unrollLoops(vertexShader);\n        fragmentShader = unrollLoops(fragmentShader);\n      }\n\n      var vertexGlsl = prefixVertex + vertexShader;\n      var fragmentGlsl = prefixFragment + fragmentShader; // console.log( '*VERTEX*', vertexGlsl );\n      // console.log( '*FRAGMENT*', fragmentGlsl );\n\n      var glVertexShader = THREE.WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);\n      var glFragmentShader = THREE.WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);\n      gl.attachShader(program, glVertexShader);\n      gl.attachShader(program, glFragmentShader); // Force a particular attribute to index 0.\n\n      if (material.index0AttributeName !== undefined) {\n        gl.bindAttribLocation(program, 0, material.index0AttributeName);\n      } else if (parameters.morphTargets === true) {\n        // programs with morphTargets displace position out of attribute 0\n        gl.bindAttribLocation(program, 0, 'position');\n      }\n\n      gl.linkProgram(program);\n      var programLog = gl.getProgramInfoLog(program);\n      var vertexLog = gl.getShaderInfoLog(glVertexShader);\n      var fragmentLog = gl.getShaderInfoLog(glFragmentShader);\n      var runnable = true;\n      var haveDiagnostics = true; // console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\n      // console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\n\n      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n        runnable = false;\n        console.error('THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog);\n      } else if (programLog !== '') {\n        console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', programLog);\n      } else if (vertexLog === '' || fragmentLog === '') {\n        haveDiagnostics = false;\n      }\n\n      if (haveDiagnostics) {\n        this.diagnostics = {\n          runnable: runnable,\n          material: material,\n          programLog: programLog,\n          vertexShader: {\n            log: vertexLog,\n            prefix: prefixVertex\n          },\n          fragmentShader: {\n            log: fragmentLog,\n            prefix: prefixFragment\n          }\n        };\n      } // clean up\n\n\n      gl.deleteShader(glVertexShader);\n      gl.deleteShader(glFragmentShader); // set up caching for uniform locations\n\n      var cachedUniforms;\n\n      this.getUniforms = function () {\n        if (cachedUniforms === undefined) {\n          cachedUniforms = new THREE.WebGLUniforms(gl, program, renderer);\n        }\n\n        return cachedUniforms;\n      }; // set up caching for attribute locations\n\n\n      var cachedAttributes;\n\n      this.getAttributes = function () {\n        if (cachedAttributes === undefined) {\n          cachedAttributes = fetchAttributeLocations(gl, program);\n        }\n\n        return cachedAttributes;\n      }; // free resource\n\n\n      this.destroy = function () {\n        gl.deleteProgram(program);\n        this.program = undefined;\n      }; // DEPRECATED\n\n\n      Object.defineProperties(this, {\n        uniforms: {\n          get: function get() {\n            console.warn('THREE.WebGLProgram: .uniforms is now .getUniforms().');\n            return this.getUniforms();\n          }\n        },\n        attributes: {\n          get: function get() {\n            console.warn('THREE.WebGLProgram: .attributes is now .getAttributes().');\n            return this.getAttributes();\n          }\n        }\n      }); //\n\n      this.id = programIdCount++;\n      this.code = code;\n      this.usedTimes = 1;\n      this.program = program;\n      this.vertexShader = glVertexShader;\n      this.fragmentShader = glFragmentShader;\n      return this;\n    };\n  }(); // File:src/renderers/webgl/WebGLPrograms.js\n\n\n  THREE.WebGLPrograms = function (renderer, capabilities) {\n    var programs = [];\n    var shaderIDs = {\n      MeshDepthMaterial: 'depth',\n      MeshNormalMaterial: 'normal',\n      MeshBasicMaterial: 'basic',\n      MeshLambertMaterial: 'lambert',\n      MeshPhongMaterial: 'phong',\n      MeshStandardMaterial: 'physical',\n      MeshPhysicalMaterial: 'physical',\n      LineBasicMaterial: 'basic',\n      LineDashedMaterial: 'dashed',\n      PointsMaterial: 'points'\n    };\n    var parameterNames = [\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\", \"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\", \"roughnessMap\", \"metalnessMap\", \"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\", \"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\", \"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\", \"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\", \"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\", \"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights', \"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"];\n\n    function allocateBones(object) {\n      if (capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture) {\n        return 1024;\n      } else {\n        // default for when object is not specified\n        // ( for example when prebuilding shader to be used with multiple objects )\n        //\n        //  - leave some extra space for other uniforms\n        //  - limit here is ANGLE's 254 max uniform vectors\n        //    (up to 54 should be safe)\n        var nVertexUniforms = capabilities.maxVertexUniforms;\n        var nVertexMatrices = Math.floor((nVertexUniforms - 20) / 4);\n        var maxBones = nVertexMatrices;\n\n        if (object !== undefined && object instanceof THREE.SkinnedMesh) {\n          maxBones = Math.min(object.skeleton.bones.length, maxBones);\n\n          if (maxBones < object.skeleton.bones.length) {\n            console.warn('WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)');\n          }\n        }\n\n        return maxBones;\n      }\n    }\n\n    function getTextureEncodingFromMap(map, gammaOverrideLinear) {\n      var encoding;\n\n      if (!map) {\n        encoding = THREE.LinearEncoding;\n      } else if (map instanceof THREE.Texture) {\n        encoding = map.encoding;\n      } else if (map instanceof THREE.WebGLRenderTarget) {\n        console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\");\n        encoding = map.texture.encoding;\n      } // add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\n\n\n      if (encoding === THREE.LinearEncoding && gammaOverrideLinear) {\n        encoding = THREE.GammaEncoding;\n      }\n\n      return encoding;\n    }\n\n    this.getParameters = function (material, lights, fog, nClipPlanes, object) {\n      var shaderID = shaderIDs[material.type]; // heuristics to create shader parameters according to lights in the scene\n      // (not to blow over maxLights budget)\n\n      var maxBones = allocateBones(object);\n      var precision = renderer.getPrecision();\n\n      if (material.precision !== null) {\n        precision = capabilities.getMaxPrecision(material.precision);\n\n        if (precision !== material.precision) {\n          console.warn('THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.');\n        }\n      }\n\n      var currentRenderTarget = renderer.getCurrentRenderTarget();\n      var parameters = {\n        shaderID: shaderID,\n        precision: precision,\n        supportsVertexTextures: capabilities.vertexTextures,\n        outputEncoding: getTextureEncodingFromMap(!currentRenderTarget ? null : currentRenderTarget.texture, renderer.gammaOutput),\n        map: !!material.map,\n        mapEncoding: getTextureEncodingFromMap(material.map, renderer.gammaInput),\n        envMap: !!material.envMap,\n        envMapMode: material.envMap && material.envMap.mapping,\n        envMapEncoding: getTextureEncodingFromMap(material.envMap, renderer.gammaInput),\n        envMapCubeUV: !!material.envMap && (material.envMap.mapping === THREE.CubeUVReflectionMapping || material.envMap.mapping === THREE.CubeUVRefractionMapping),\n        lightMap: !!material.lightMap,\n        aoMap: !!material.aoMap,\n        emissiveMap: !!material.emissiveMap,\n        emissiveMapEncoding: getTextureEncodingFromMap(material.emissiveMap, renderer.gammaInput),\n        bumpMap: !!material.bumpMap,\n        normalMap: !!material.normalMap,\n        displacementMap: !!material.displacementMap,\n        roughnessMap: !!material.roughnessMap,\n        metalnessMap: !!material.metalnessMap,\n        specularMap: !!material.specularMap,\n        alphaMap: !!material.alphaMap,\n        combine: material.combine,\n        vertexColors: material.vertexColors,\n        fog: !!fog,\n        useFog: material.fog,\n        fogExp: fog instanceof THREE.FogExp2,\n        flatShading: material.shading === THREE.FlatShading,\n        sizeAttenuation: material.sizeAttenuation,\n        logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\n        skinning: material.skinning,\n        maxBones: maxBones,\n        useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\n        morphTargets: material.morphTargets,\n        morphNormals: material.morphNormals,\n        maxMorphTargets: renderer.maxMorphTargets,\n        maxMorphNormals: renderer.maxMorphNormals,\n        numDirLights: lights.directional.length,\n        numPointLights: lights.point.length,\n        numSpotLights: lights.spot.length,\n        numHemiLights: lights.hemi.length,\n        numClippingPlanes: nClipPlanes,\n        shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\n        shadowMapType: renderer.shadowMap.type,\n        toneMapping: renderer.toneMapping,\n        physicallyCorrectLights: renderer.physicallyCorrectLights,\n        premultipliedAlpha: material.premultipliedAlpha,\n        alphaTest: material.alphaTest,\n        doubleSided: material.side === THREE.DoubleSide,\n        flipSided: material.side === THREE.BackSide,\n        depthPacking: material.depthPacking !== undefined ? material.depthPacking : false\n      };\n      return parameters;\n    };\n\n    this.getProgramCode = function (material, parameters) {\n      var array = [];\n\n      if (parameters.shaderID) {\n        array.push(parameters.shaderID);\n      } else {\n        array.push(material.fragmentShader);\n        array.push(material.vertexShader);\n      }\n\n      if (material.defines !== undefined) {\n        for (var name in material.defines) {\n          array.push(name);\n          array.push(material.defines[name]);\n        }\n      }\n\n      for (var i = 0; i < parameterNames.length; i++) {\n        array.push(parameters[parameterNames[i]]);\n      }\n\n      return array.join();\n    };\n\n    this.acquireProgram = function (material, parameters, code) {\n      var program; // Check if code has been already compiled\n\n      for (var p = 0, pl = programs.length; p < pl; p++) {\n        var programInfo = programs[p];\n\n        if (programInfo.code === code) {\n          program = programInfo;\n          ++program.usedTimes;\n          break;\n        }\n      }\n\n      if (program === undefined) {\n        program = new THREE.WebGLProgram(renderer, code, material, parameters);\n        programs.push(program);\n      }\n\n      return program;\n    };\n\n    this.releaseProgram = function (program) {\n      if (--program.usedTimes === 0) {\n        // Remove from unordered set\n        var i = programs.indexOf(program);\n        programs[i] = programs[programs.length - 1];\n        programs.pop(); // Free WebGL resources\n\n        program.destroy();\n      }\n    }; // Exposed for resource monitoring & error feedback via renderer.info:\n\n\n    this.programs = programs;\n  }; // File:src/renderers/webgl/WebGLProperties.js\n\n  /**\n  * @author fordacious / fordacious.github.io\n  */\n\n\n  THREE.WebGLProperties = function () {\n    var properties = {};\n\n    this.get = function (object) {\n      var uuid = object.uuid;\n      var map = properties[uuid];\n\n      if (map === undefined) {\n        map = {};\n        properties[uuid] = map;\n      }\n\n      return map;\n    };\n\n    this.delete = function (object) {\n      delete properties[object.uuid];\n    };\n\n    this.clear = function () {\n      properties = {};\n    };\n  }; // File:src/renderers/webgl/WebGLShader.js\n\n\n  THREE.WebGLShader = function () {\n    function addLineNumbers(string) {\n      var lines = string.split('\\n');\n\n      for (var i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n      }\n\n      return lines.join('\\n');\n    }\n\n    return function WebGLShader(gl, type, string) {\n      var shader = gl.createShader(type);\n      gl.shaderSource(shader, string);\n      gl.compileShader(shader);\n\n      if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n        console.error('THREE.WebGLShader: Shader couldn\\'t compile.');\n      }\n\n      if (gl.getShaderInfoLog(shader) !== '') {\n        console.warn('THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog(shader), addLineNumbers(string));\n      } // --enable-privileged-webgl-extension\n      // console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\n      return shader;\n    };\n  }(); // File:src/renderers/webgl/WebGLShadowMap.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.WebGLShadowMap = function (_renderer, _lights, _objects, capabilities) {\n    var _gl = _renderer.context,\n        _state = _renderer.state,\n        _frustum = new THREE.Frustum(),\n        _projScreenMatrix = new THREE.Matrix4(),\n        _lightShadows = _lights.shadows,\n        _shadowMapSize = new THREE.Vector2(),\n        _maxShadowMapSize = new THREE.Vector2(capabilities.maxTextureSize, capabilities.maxTextureSize),\n        _lookTarget = new THREE.Vector3(),\n        _lightPositionWorld = new THREE.Vector3(),\n        _renderList = [],\n        _MorphingFlag = 1,\n        _SkinningFlag = 2,\n        _NumberOfMaterialVariants = (_MorphingFlag | _SkinningFlag) + 1,\n        _depthMaterials = new Array(_NumberOfMaterialVariants),\n        _distanceMaterials = new Array(_NumberOfMaterialVariants),\n        _materialCache = {};\n\n    var cubeDirections = [new THREE.Vector3(1, 0, 0), new THREE.Vector3(-1, 0, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, -1, 0)];\n    var cubeUps = [new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1), new THREE.Vector3(0, 0, -1)];\n    var cube2DViewPorts = [new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()]; // init\n\n    var depthMaterialTemplate = new THREE.MeshDepthMaterial();\n    depthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\n    depthMaterialTemplate.clipping = true;\n    var distanceShader = THREE.ShaderLib[\"distanceRGBA\"];\n    var distanceUniforms = THREE.UniformsUtils.clone(distanceShader.uniforms);\n\n    for (var i = 0; i !== _NumberOfMaterialVariants; ++i) {\n      var useMorphing = (i & _MorphingFlag) !== 0;\n      var useSkinning = (i & _SkinningFlag) !== 0;\n      var depthMaterial = depthMaterialTemplate.clone();\n      depthMaterial.morphTargets = useMorphing;\n      depthMaterial.skinning = useSkinning;\n      _depthMaterials[i] = depthMaterial;\n      var distanceMaterial = new THREE.ShaderMaterial({\n        defines: {\n          'USE_SHADOWMAP': ''\n        },\n        uniforms: distanceUniforms,\n        vertexShader: distanceShader.vertexShader,\n        fragmentShader: distanceShader.fragmentShader,\n        morphTargets: useMorphing,\n        skinning: useSkinning,\n        clipping: true\n      });\n      _distanceMaterials[i] = distanceMaterial;\n    } //\n\n\n    var scope = this;\n    this.enabled = false;\n    this.autoUpdate = true;\n    this.needsUpdate = false;\n    this.type = THREE.PCFShadowMap;\n    this.renderReverseSided = true;\n    this.renderSingleSided = true;\n\n    this.render = function (scene, camera) {\n      if (scope.enabled === false) return;\n      if (scope.autoUpdate === false && scope.needsUpdate === false) return;\n      if (_lightShadows.length === 0) return; // Set GL state for depth map.\n\n      _state.clearColor(1, 1, 1, 1);\n\n      _state.disable(_gl.BLEND);\n\n      _state.setDepthTest(true);\n\n      _state.setScissorTest(false); // render depth map\n\n\n      var faceCount, isPointLight;\n\n      for (var i = 0, il = _lightShadows.length; i < il; i++) {\n        var light = _lightShadows[i];\n        var shadow = light.shadow;\n\n        if (shadow === undefined) {\n          console.warn('THREE.WebGLShadowMap:', light, 'has no shadow.');\n          continue;\n        }\n\n        var shadowCamera = shadow.camera;\n\n        _shadowMapSize.copy(shadow.mapSize);\n\n        _shadowMapSize.min(_maxShadowMapSize);\n\n        if (light instanceof THREE.PointLight) {\n          faceCount = 6;\n          isPointLight = true;\n          var vpWidth = _shadowMapSize.x;\n          var vpHeight = _shadowMapSize.y; // These viewports map a cube-map onto a 2D texture with the\n          // following orientation:\n          //\n          //  xzXZ\n          //   y Y\n          //\n          // X - Positive x direction\n          // x - Negative x direction\n          // Y - Positive y direction\n          // y - Negative y direction\n          // Z - Positive z direction\n          // z - Negative z direction\n          // positive X\n\n          cube2DViewPorts[0].set(vpWidth * 2, vpHeight, vpWidth, vpHeight); // negative X\n\n          cube2DViewPorts[1].set(0, vpHeight, vpWidth, vpHeight); // positive Z\n\n          cube2DViewPorts[2].set(vpWidth * 3, vpHeight, vpWidth, vpHeight); // negative Z\n\n          cube2DViewPorts[3].set(vpWidth, vpHeight, vpWidth, vpHeight); // positive Y\n\n          cube2DViewPorts[4].set(vpWidth * 3, 0, vpWidth, vpHeight); // negative Y\n\n          cube2DViewPorts[5].set(vpWidth, 0, vpWidth, vpHeight);\n          _shadowMapSize.x *= 4.0;\n          _shadowMapSize.y *= 2.0;\n        } else {\n          faceCount = 1;\n          isPointLight = false;\n        }\n\n        if (shadow.map === null) {\n          var pars = {\n            minFilter: THREE.NearestFilter,\n            magFilter: THREE.NearestFilter,\n            format: THREE.RGBAFormat\n          };\n          shadow.map = new THREE.WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);\n          shadowCamera.updateProjectionMatrix();\n        }\n\n        if (shadow instanceof THREE.SpotLightShadow) {\n          shadow.update(light);\n        }\n\n        var shadowMap = shadow.map;\n        var shadowMatrix = shadow.matrix;\n\n        _lightPositionWorld.setFromMatrixPosition(light.matrixWorld);\n\n        shadowCamera.position.copy(_lightPositionWorld);\n\n        _renderer.setRenderTarget(shadowMap);\n\n        _renderer.clear(); // render shadow map for each cube face (if omni-directional) or\n        // run a single pass if not\n\n\n        for (var face = 0; face < faceCount; face++) {\n          if (isPointLight) {\n            _lookTarget.copy(shadowCamera.position);\n\n            _lookTarget.add(cubeDirections[face]);\n\n            shadowCamera.up.copy(cubeUps[face]);\n            shadowCamera.lookAt(_lookTarget);\n            var vpDimensions = cube2DViewPorts[face];\n\n            _state.viewport(vpDimensions);\n          } else {\n            _lookTarget.setFromMatrixPosition(light.target.matrixWorld);\n\n            shadowCamera.lookAt(_lookTarget);\n          }\n\n          shadowCamera.updateMatrixWorld();\n          shadowCamera.matrixWorldInverse.getInverse(shadowCamera.matrixWorld); // compute shadow matrix\n\n          shadowMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n          shadowMatrix.multiply(shadowCamera.projectionMatrix);\n          shadowMatrix.multiply(shadowCamera.matrixWorldInverse); // update camera matrices and frustum\n\n          _projScreenMatrix.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);\n\n          _frustum.setFromMatrix(_projScreenMatrix); // set object matrices & frustum culling\n\n\n          _renderList.length = 0;\n          projectObject(scene, camera, shadowCamera); // render shadow map\n          // render regular objects\n\n          for (var j = 0, jl = _renderList.length; j < jl; j++) {\n            var object = _renderList[j];\n\n            var geometry = _objects.update(object);\n\n            var material = object.material;\n\n            if (material instanceof THREE.MultiMaterial) {\n              var groups = geometry.groups;\n              var materials = material.materials;\n\n              for (var k = 0, kl = groups.length; k < kl; k++) {\n                var group = groups[k];\n                var groupMaterial = materials[group.materialIndex];\n\n                if (groupMaterial.visible === true) {\n                  var depthMaterial = getDepthMaterial(object, groupMaterial, isPointLight, _lightPositionWorld);\n\n                  _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, group);\n                }\n              }\n            } else {\n              var depthMaterial = getDepthMaterial(object, material, isPointLight, _lightPositionWorld);\n\n              _renderer.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object, null);\n            }\n          }\n        }\n      } // Restore GL state.\n\n\n      var clearColor = _renderer.getClearColor(),\n          clearAlpha = _renderer.getClearAlpha();\n\n      _renderer.setClearColor(clearColor, clearAlpha);\n\n      scope.needsUpdate = false;\n    };\n\n    function getDepthMaterial(object, material, isPointLight, lightPositionWorld) {\n      var geometry = object.geometry;\n      var result = null;\n      var materialVariants = _depthMaterials;\n      var customMaterial = object.customDepthMaterial;\n\n      if (isPointLight) {\n        materialVariants = _distanceMaterials;\n        customMaterial = object.customDistanceMaterial;\n      }\n\n      if (!customMaterial) {\n        var useMorphing = false;\n\n        if (material.morphTargets) {\n          if (geometry instanceof THREE.BufferGeometry) {\n            useMorphing = geometry.morphAttributes && geometry.morphAttributes.position && geometry.morphAttributes.position.length > 0;\n          } else if (geometry instanceof THREE.Geometry) {\n            useMorphing = geometry.morphTargets && geometry.morphTargets.length > 0;\n          }\n        }\n\n        var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\n        var variantIndex = 0;\n        if (useMorphing) variantIndex |= _MorphingFlag;\n        if (useSkinning) variantIndex |= _SkinningFlag;\n        result = materialVariants[variantIndex];\n      } else {\n        result = customMaterial;\n      }\n\n      if (_renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0) {\n        // in this case we need a unique material instance reflecting the\n        // appropriate state\n        var keyA = result.uuid,\n            keyB = material.uuid;\n        var materialsForVariant = _materialCache[keyA];\n\n        if (materialsForVariant === undefined) {\n          materialsForVariant = {};\n          _materialCache[keyA] = materialsForVariant;\n        }\n\n        var cachedMaterial = materialsForVariant[keyB];\n\n        if (cachedMaterial === undefined) {\n          cachedMaterial = result.clone();\n          materialsForVariant[keyB] = cachedMaterial;\n        }\n\n        result = cachedMaterial;\n      }\n\n      result.visible = material.visible;\n      result.wireframe = material.wireframe;\n      var side = material.side;\n\n      if (scope.renderSingleSided && side == THREE.DoubleSide) {\n        side = THREE.FrontSide;\n      }\n\n      if (scope.renderReverseSided) {\n        if (side === THREE.FrontSide) side = THREE.BackSide;else if (side === THREE.BackSide) side = THREE.FrontSide;\n      }\n\n      result.side = side;\n      result.clipShadows = material.clipShadows;\n      result.clippingPlanes = material.clippingPlanes;\n      result.wireframeLinewidth = material.wireframeLinewidth;\n      result.linewidth = material.linewidth;\n\n      if (isPointLight && result.uniforms.lightPos !== undefined) {\n        result.uniforms.lightPos.value.copy(lightPositionWorld);\n      }\n\n      return result;\n    }\n\n    function projectObject(object, camera, shadowCamera) {\n      if (object.visible === false) return;\n\n      if (object.layers.test(camera.layers) && (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points)) {\n        if (object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject(object) === true)) {\n          var material = object.material;\n\n          if (material.visible === true) {\n            object.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object.matrixWorld);\n\n            _renderList.push(object);\n          }\n        }\n      }\n\n      var children = object.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        projectObject(children[i], camera, shadowCamera);\n      }\n    }\n  }; // File:src/renderers/webgl/WebGLState.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLState = function (gl, extensions, paramThreeToGL) {\n    var _this = this;\n\n    this.buffers = {\n      color: new THREE.WebGLColorBuffer(gl, this),\n      depth: new THREE.WebGLDepthBuffer(gl, this),\n      stencil: new THREE.WebGLStencilBuffer(gl, this)\n    };\n    var maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n    var newAttributes = new Uint8Array(maxVertexAttributes);\n    var enabledAttributes = new Uint8Array(maxVertexAttributes);\n    var attributeDivisors = new Uint8Array(maxVertexAttributes);\n    var capabilities = {};\n    var compressedTextureFormats = null;\n    var currentBlending = null;\n    var currentBlendEquation = null;\n    var currentBlendSrc = null;\n    var currentBlendDst = null;\n    var currentBlendEquationAlpha = null;\n    var currentBlendSrcAlpha = null;\n    var currentBlendDstAlpha = null;\n    var currentPremultipledAlpha = false;\n    var currentFlipSided = null;\n    var currentCullFace = null;\n    var currentLineWidth = null;\n    var currentPolygonOffsetFactor = null;\n    var currentPolygonOffsetUnits = null;\n    var currentScissorTest = null;\n    var maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    var currentTextureSlot = null;\n    var currentBoundTextures = {};\n    var currentScissor = new THREE.Vector4();\n    var currentViewport = new THREE.Vector4();\n\n    function createTexture(type, target, count) {\n      var data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.\n\n      var texture = gl.createTexture();\n      gl.bindTexture(type, texture);\n      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n      for (var i = 0; i < count; i++) {\n        gl.texImage2D(target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\n      }\n\n      return texture;\n    }\n\n    var emptyTextures = {};\n    emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);\n    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6); //\n\n    this.init = function () {\n      this.clearColor(0, 0, 0, 1);\n      this.clearDepth(1);\n      this.clearStencil(0);\n      this.enable(gl.DEPTH_TEST);\n      this.setDepthFunc(THREE.LessEqualDepth);\n      this.setFlipSided(false);\n      this.setCullFace(THREE.CullFaceBack);\n      this.enable(gl.CULL_FACE);\n      this.enable(gl.BLEND);\n      this.setBlending(THREE.NormalBlending);\n    };\n\n    this.initAttributes = function () {\n      for (var i = 0, l = newAttributes.length; i < l; i++) {\n        newAttributes[i] = 0;\n      }\n    };\n\n    this.enableAttribute = function (attribute) {\n      newAttributes[attribute] = 1;\n\n      if (enabledAttributes[attribute] === 0) {\n        gl.enableVertexAttribArray(attribute);\n        enabledAttributes[attribute] = 1;\n      }\n\n      if (attributeDivisors[attribute] !== 0) {\n        var extension = extensions.get('ANGLE_instanced_arrays');\n        extension.vertexAttribDivisorANGLE(attribute, 0);\n        attributeDivisors[attribute] = 0;\n      }\n    };\n\n    this.enableAttributeAndDivisor = function (attribute, meshPerAttribute, extension) {\n      newAttributes[attribute] = 1;\n\n      if (enabledAttributes[attribute] === 0) {\n        gl.enableVertexAttribArray(attribute);\n        enabledAttributes[attribute] = 1;\n      }\n\n      if (attributeDivisors[attribute] !== meshPerAttribute) {\n        extension.vertexAttribDivisorANGLE(attribute, meshPerAttribute);\n        attributeDivisors[attribute] = meshPerAttribute;\n      }\n    };\n\n    this.disableUnusedAttributes = function () {\n      for (var i = 0, l = enabledAttributes.length; i !== l; ++i) {\n        if (enabledAttributes[i] !== newAttributes[i]) {\n          gl.disableVertexAttribArray(i);\n          enabledAttributes[i] = 0;\n        }\n      }\n    };\n\n    this.enable = function (id) {\n      if (capabilities[id] !== true) {\n        gl.enable(id);\n        capabilities[id] = true;\n      }\n    };\n\n    this.disable = function (id) {\n      if (capabilities[id] !== false) {\n        gl.disable(id);\n        capabilities[id] = false;\n      }\n    };\n\n    this.getCompressedTextureFormats = function () {\n      if (compressedTextureFormats === null) {\n        compressedTextureFormats = [];\n\n        if (extensions.get('WEBGL_compressed_texture_pvrtc') || extensions.get('WEBGL_compressed_texture_s3tc') || extensions.get('WEBGL_compressed_texture_etc1')) {\n          var formats = gl.getParameter(gl.COMPRESSED_TEXTURE_FORMATS);\n\n          for (var i = 0; i < formats.length; i++) {\n            compressedTextureFormats.push(formats[i]);\n          }\n        }\n      }\n\n      return compressedTextureFormats;\n    };\n\n    this.setBlending = function (blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {\n      if (blending !== THREE.NoBlending) {\n        this.enable(gl.BLEND);\n      } else {\n        this.disable(gl.BLEND);\n        currentBlending = blending; // no blending, that is\n\n        return;\n      }\n\n      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {\n        if (blending === THREE.AdditiveBlending) {\n          if (premultipliedAlpha) {\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);\n          } else {\n            gl.blendEquation(gl.FUNC_ADD);\n            gl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n          }\n        } else if (blending === THREE.SubtractiveBlending) {\n          if (premultipliedAlpha) {\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);\n          } else {\n            gl.blendEquation(gl.FUNC_ADD);\n            gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);\n          }\n        } else if (blending === THREE.MultiplyBlending) {\n          if (premultipliedAlpha) {\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);\n          } else {\n            gl.blendEquation(gl.FUNC_ADD);\n            gl.blendFunc(gl.ZERO, gl.SRC_COLOR);\n          }\n        } else {\n          if (premultipliedAlpha) {\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n          } else {\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n            gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n          }\n        }\n\n        currentBlending = blending;\n        currentPremultipledAlpha = premultipliedAlpha;\n      }\n\n      if (blending === THREE.CustomBlending) {\n        blendEquationAlpha = blendEquationAlpha || blendEquation;\n        blendSrcAlpha = blendSrcAlpha || blendSrc;\n        blendDstAlpha = blendDstAlpha || blendDst;\n\n        if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {\n          gl.blendEquationSeparate(paramThreeToGL(blendEquation), paramThreeToGL(blendEquationAlpha));\n          currentBlendEquation = blendEquation;\n          currentBlendEquationAlpha = blendEquationAlpha;\n        }\n\n        if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {\n          gl.blendFuncSeparate(paramThreeToGL(blendSrc), paramThreeToGL(blendDst), paramThreeToGL(blendSrcAlpha), paramThreeToGL(blendDstAlpha));\n          currentBlendSrc = blendSrc;\n          currentBlendDst = blendDst;\n          currentBlendSrcAlpha = blendSrcAlpha;\n          currentBlendDstAlpha = blendDstAlpha;\n        }\n      } else {\n        currentBlendEquation = null;\n        currentBlendSrc = null;\n        currentBlendDst = null;\n        currentBlendEquationAlpha = null;\n        currentBlendSrcAlpha = null;\n        currentBlendDstAlpha = null;\n      }\n    }; // TODO Deprecate\n\n\n    this.setColorWrite = function (colorWrite) {\n      this.buffers.color.setMask(colorWrite);\n    };\n\n    this.setDepthTest = function (depthTest) {\n      this.buffers.depth.setTest(depthTest);\n    };\n\n    this.setDepthWrite = function (depthWrite) {\n      this.buffers.depth.setMask(depthWrite);\n    };\n\n    this.setDepthFunc = function (depthFunc) {\n      this.buffers.depth.setFunc(depthFunc);\n    };\n\n    this.setStencilTest = function (stencilTest) {\n      this.buffers.stencil.setTest(stencilTest);\n    };\n\n    this.setStencilWrite = function (stencilWrite) {\n      this.buffers.stencil.setMask(stencilWrite);\n    };\n\n    this.setStencilFunc = function (stencilFunc, stencilRef, stencilMask) {\n      this.buffers.stencil.setFunc(stencilFunc, stencilRef, stencilMask);\n    };\n\n    this.setStencilOp = function (stencilFail, stencilZFail, stencilZPass) {\n      this.buffers.stencil.setOp(stencilFail, stencilZFail, stencilZPass);\n    }; //\n\n\n    this.setFlipSided = function (flipSided) {\n      if (currentFlipSided !== flipSided) {\n        if (flipSided) {\n          gl.frontFace(gl.CW);\n        } else {\n          gl.frontFace(gl.CCW);\n        }\n\n        currentFlipSided = flipSided;\n      }\n    };\n\n    this.setCullFace = function (cullFace) {\n      if (cullFace !== THREE.CullFaceNone) {\n        this.enable(gl.CULL_FACE);\n\n        if (cullFace !== currentCullFace) {\n          if (cullFace === THREE.CullFaceBack) {\n            gl.cullFace(gl.BACK);\n          } else if (cullFace === THREE.CullFaceFront) {\n            gl.cullFace(gl.FRONT);\n          } else {\n            gl.cullFace(gl.FRONT_AND_BACK);\n          }\n        }\n      } else {\n        this.disable(gl.CULL_FACE);\n      }\n\n      currentCullFace = cullFace;\n    };\n\n    this.setLineWidth = function (width) {\n      if (width !== currentLineWidth) {\n        gl.lineWidth(width);\n        currentLineWidth = width;\n      }\n    };\n\n    this.setPolygonOffset = function (polygonOffset, factor, units) {\n      if (polygonOffset) {\n        this.enable(gl.POLYGON_OFFSET_FILL);\n\n        if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {\n          gl.polygonOffset(factor, units);\n          currentPolygonOffsetFactor = factor;\n          currentPolygonOffsetUnits = units;\n        }\n      } else {\n        this.disable(gl.POLYGON_OFFSET_FILL);\n      }\n    };\n\n    this.getScissorTest = function () {\n      return currentScissorTest;\n    };\n\n    this.setScissorTest = function (scissorTest) {\n      currentScissorTest = scissorTest;\n\n      if (scissorTest) {\n        this.enable(gl.SCISSOR_TEST);\n      } else {\n        this.disable(gl.SCISSOR_TEST);\n      }\n    }; // texture\n\n\n    this.activeTexture = function (webglSlot) {\n      if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n      if (currentTextureSlot !== webglSlot) {\n        gl.activeTexture(webglSlot);\n        currentTextureSlot = webglSlot;\n      }\n    };\n\n    this.bindTexture = function (webglType, webglTexture) {\n      if (currentTextureSlot === null) {\n        _this.activeTexture();\n      }\n\n      var boundTexture = currentBoundTextures[currentTextureSlot];\n\n      if (boundTexture === undefined) {\n        boundTexture = {\n          type: undefined,\n          texture: undefined\n        };\n        currentBoundTextures[currentTextureSlot] = boundTexture;\n      }\n\n      if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {\n        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);\n        boundTexture.type = webglType;\n        boundTexture.texture = webglTexture;\n      }\n    };\n\n    this.compressedTexImage2D = function () {\n      try {\n        gl.compressedTexImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    this.texImage2D = function () {\n      try {\n        gl.texImage2D.apply(gl, arguments);\n      } catch (error) {\n        console.error(error);\n      }\n    }; // TODO Deprecate\n\n\n    this.clearColor = function (r, g, b, a) {\n      this.buffers.color.setClear(r, g, b, a);\n    };\n\n    this.clearDepth = function (depth) {\n      this.buffers.depth.setClear(depth);\n    };\n\n    this.clearStencil = function (stencil) {\n      this.buffers.stencil.setClear(stencil);\n    }; //\n\n\n    this.scissor = function (scissor) {\n      if (currentScissor.equals(scissor) === false) {\n        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);\n        currentScissor.copy(scissor);\n      }\n    };\n\n    this.viewport = function (viewport) {\n      if (currentViewport.equals(viewport) === false) {\n        gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);\n        currentViewport.copy(viewport);\n      }\n    }; //\n\n\n    this.reset = function () {\n      for (var i = 0; i < enabledAttributes.length; i++) {\n        if (enabledAttributes[i] === 1) {\n          gl.disableVertexAttribArray(i);\n          enabledAttributes[i] = 0;\n        }\n      }\n\n      capabilities = {};\n      compressedTextureFormats = null;\n      currentTextureSlot = null;\n      currentBoundTextures = {};\n      currentBlending = null;\n      currentFlipSided = null;\n      currentCullFace = null;\n      this.buffers.color.reset();\n      this.buffers.depth.reset();\n      this.buffers.stencil.reset();\n    };\n  };\n\n  THREE.WebGLColorBuffer = function (gl, state) {\n    var locked = false;\n    var color = new THREE.Vector4();\n    var currentColorMask = null;\n    var currentColorClear = new THREE.Vector4();\n\n    this.setMask = function (colorMask) {\n      if (currentColorMask !== colorMask && !locked) {\n        gl.colorMask(colorMask, colorMask, colorMask, colorMask);\n        currentColorMask = colorMask;\n      }\n    };\n\n    this.setLocked = function (lock) {\n      locked = lock;\n    };\n\n    this.setClear = function (r, g, b, a) {\n      color.set(r, g, b, a);\n\n      if (currentColorClear.equals(color) === false) {\n        gl.clearColor(r, g, b, a);\n        currentColorClear.copy(color);\n      }\n    };\n\n    this.reset = function () {\n      locked = false;\n      currentColorMask = null;\n      currentColorClear = new THREE.Vector4();\n    };\n  };\n\n  THREE.WebGLDepthBuffer = function (gl, state) {\n    var locked = false;\n    var currentDepthMask = null;\n    var currentDepthFunc = null;\n    var currentDepthClear = null;\n\n    this.setTest = function (depthTest) {\n      if (depthTest) {\n        state.enable(gl.DEPTH_TEST);\n      } else {\n        state.disable(gl.DEPTH_TEST);\n      }\n    };\n\n    this.setMask = function (depthMask) {\n      if (currentDepthMask !== depthMask && !locked) {\n        gl.depthMask(depthMask);\n        currentDepthMask = depthMask;\n      }\n    };\n\n    this.setFunc = function (depthFunc) {\n      if (currentDepthFunc !== depthFunc) {\n        if (depthFunc) {\n          switch (depthFunc) {\n            case THREE.NeverDepth:\n              gl.depthFunc(gl.NEVER);\n              break;\n\n            case THREE.AlwaysDepth:\n              gl.depthFunc(gl.ALWAYS);\n              break;\n\n            case THREE.LessDepth:\n              gl.depthFunc(gl.LESS);\n              break;\n\n            case THREE.LessEqualDepth:\n              gl.depthFunc(gl.LEQUAL);\n              break;\n\n            case THREE.EqualDepth:\n              gl.depthFunc(gl.EQUAL);\n              break;\n\n            case THREE.GreaterEqualDepth:\n              gl.depthFunc(gl.GEQUAL);\n              break;\n\n            case THREE.GreaterDepth:\n              gl.depthFunc(gl.GREATER);\n              break;\n\n            case THREE.NotEqualDepth:\n              gl.depthFunc(gl.NOTEQUAL);\n              break;\n\n            default:\n              gl.depthFunc(gl.LEQUAL);\n          }\n        } else {\n          gl.depthFunc(gl.LEQUAL);\n        }\n\n        currentDepthFunc = depthFunc;\n      }\n    };\n\n    this.setLocked = function (lock) {\n      locked = lock;\n    };\n\n    this.setClear = function (depth) {\n      if (currentDepthClear !== depth) {\n        gl.clearDepth(depth);\n        currentDepthClear = depth;\n      }\n    };\n\n    this.reset = function () {\n      locked = false;\n      currentDepthMask = null;\n      currentDepthFunc = null;\n      currentDepthClear = null;\n    };\n  };\n\n  THREE.WebGLStencilBuffer = function (gl, state) {\n    var locked = false;\n    var currentStencilMask = null;\n    var currentStencilFunc = null;\n    var currentStencilRef = null;\n    var currentStencilFuncMask = null;\n    var currentStencilFail = null;\n    var currentStencilZFail = null;\n    var currentStencilZPass = null;\n    var currentStencilClear = null;\n\n    this.setTest = function (stencilTest) {\n      if (stencilTest) {\n        state.enable(gl.STENCIL_TEST);\n      } else {\n        state.disable(gl.STENCIL_TEST);\n      }\n    };\n\n    this.setMask = function (stencilMask) {\n      if (currentStencilMask !== stencilMask && !locked) {\n        gl.stencilMask(stencilMask);\n        currentStencilMask = stencilMask;\n      }\n    };\n\n    this.setFunc = function (stencilFunc, stencilRef, stencilMask) {\n      if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {\n        gl.stencilFunc(stencilFunc, stencilRef, stencilMask);\n        currentStencilFunc = stencilFunc;\n        currentStencilRef = stencilRef;\n        currentStencilFuncMask = stencilMask;\n      }\n    };\n\n    this.setOp = function (stencilFail, stencilZFail, stencilZPass) {\n      if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {\n        gl.stencilOp(stencilFail, stencilZFail, stencilZPass);\n        currentStencilFail = stencilFail;\n        currentStencilZFail = stencilZFail;\n        currentStencilZPass = stencilZPass;\n      }\n    };\n\n    this.setLocked = function (lock) {\n      locked = lock;\n    };\n\n    this.setClear = function (stencil) {\n      if (currentStencilClear !== stencil) {\n        gl.clearStencil(stencil);\n        currentStencilClear = stencil;\n      }\n    };\n\n    this.reset = function () {\n      locked = false;\n      currentStencilMask = null;\n      currentStencilFunc = null;\n      currentStencilRef = null;\n      currentStencilFuncMask = null;\n      currentStencilFail = null;\n      currentStencilZFail = null;\n      currentStencilZPass = null;\n      currentStencilClear = null;\n    };\n  }; // File:src/renderers/webgl/WebGLTextures.js\n\n  /**\n  * @author mrdoob / http://mrdoob.com/\n  */\n\n\n  THREE.WebGLTextures = function (_gl, extensions, state, properties, capabilities, paramThreeToGL, info) {\n    var _infoMemory = info.memory;\n\n    var _isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext; //\n\n\n    function clampToMaxSize(image, maxSize) {\n      if (image.width > maxSize || image.height > maxSize) {\n        // Warning: Scaling through the canvas will only work with images that use\n        // premultiplied alpha.\n        var scale = maxSize / Math.max(image.width, image.height);\n        var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n        canvas.width = Math.floor(image.width * scale);\n        canvas.height = Math.floor(image.height * scale);\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n        console.warn('THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);\n        return canvas;\n      }\n\n      return image;\n    }\n\n    function isPowerOfTwo(image) {\n      return THREE.Math.isPowerOfTwo(image.width) && THREE.Math.isPowerOfTwo(image.height);\n    }\n\n    function makePowerOfTwo(image) {\n      if (image instanceof HTMLImageElement || image instanceof HTMLCanvasElement) {\n        var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n        canvas.width = THREE.Math.nearestPowerOfTwo(image.width);\n        canvas.height = THREE.Math.nearestPowerOfTwo(image.height);\n        var context = canvas.getContext('2d');\n        context.drawImage(image, 0, 0, canvas.width, canvas.height);\n        console.warn('THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image);\n        return canvas;\n      }\n\n      return image;\n    }\n\n    function textureNeedsPowerOfTwo(texture) {\n      if (texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping) return true;\n      if (texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) return true;\n      return false;\n    } // Fallback filters for non-power-of-2 textures\n\n\n    function filterFallback(f) {\n      if (f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter) {\n        return _gl.NEAREST;\n      }\n\n      return _gl.LINEAR;\n    } //\n\n\n    function onTextureDispose(event) {\n      var texture = event.target;\n      texture.removeEventListener('dispose', onTextureDispose);\n      deallocateTexture(texture);\n      _infoMemory.textures--;\n    }\n\n    function onRenderTargetDispose(event) {\n      var renderTarget = event.target;\n      renderTarget.removeEventListener('dispose', onRenderTargetDispose);\n      deallocateRenderTarget(renderTarget);\n      _infoMemory.textures--;\n    } //\n\n\n    function deallocateTexture(texture) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.image && textureProperties.__image__webglTextureCube) {\n        // cube texture\n        _gl.deleteTexture(textureProperties.__image__webglTextureCube);\n      } else {\n        // 2D texture\n        if (textureProperties.__webglInit === undefined) return;\n\n        _gl.deleteTexture(textureProperties.__webglTexture);\n      } // remove all webgl properties\n\n\n      properties.delete(texture);\n    }\n\n    function deallocateRenderTarget(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n      var textureProperties = properties.get(renderTarget.texture);\n      if (!renderTarget) return;\n\n      if (textureProperties.__webglTexture !== undefined) {\n        _gl.deleteTexture(textureProperties.__webglTexture);\n      }\n\n      if (renderTarget.depthTexture) {\n        renderTarget.depthTexture.dispose();\n      }\n\n      if (renderTarget instanceof THREE.WebGLRenderTargetCube) {\n        for (var i = 0; i < 6; i++) {\n          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i]);\n\n          if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i]);\n        }\n      } else {\n        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);\n\n        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);\n      }\n\n      properties.delete(renderTarget.texture);\n      properties.delete(renderTarget);\n    } //\n\n\n    function setTexture2D(texture, slot) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.version > 0 && textureProperties.__version !== texture.version) {\n        var image = texture.image;\n\n        if (image === undefined) {\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is undefined', texture);\n        } else if (image.complete === false) {\n          console.warn('THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture);\n        } else {\n          uploadTexture(textureProperties, texture, slot);\n          return;\n        }\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n    }\n\n    function setTextureCube(texture, slot) {\n      var textureProperties = properties.get(texture);\n\n      if (texture.image.length === 6) {\n        if (texture.version > 0 && textureProperties.__version !== texture.version) {\n          if (!textureProperties.__image__webglTextureCube) {\n            texture.addEventListener('dispose', onTextureDispose);\n            textureProperties.__image__webglTextureCube = _gl.createTexture();\n            _infoMemory.textures++;\n          }\n\n          state.activeTexture(_gl.TEXTURE0 + slot);\n          state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n\n          _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n          var isCompressed = texture instanceof THREE.CompressedTexture;\n          var isDataTexture = texture.image[0] instanceof THREE.DataTexture;\n          var cubeImage = [];\n\n          for (var i = 0; i < 6; i++) {\n            if (!isCompressed && !isDataTexture) {\n              cubeImage[i] = clampToMaxSize(texture.image[i], capabilities.maxCubemapSize);\n            } else {\n              cubeImage[i] = isDataTexture ? texture.image[i].image : texture.image[i];\n            }\n          }\n\n          var image = cubeImage[0],\n              isPowerOfTwoImage = isPowerOfTwo(image),\n              glFormat = paramThreeToGL(texture.format),\n              glType = paramThreeToGL(texture.type);\n          setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage);\n\n          for (var i = 0; i < 6; i++) {\n            if (!isCompressed) {\n              if (isDataTexture) {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[i].width, cubeImage[i].height, 0, glFormat, glType, cubeImage[i].data);\n              } else {\n                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[i]);\n              }\n            } else {\n              var mipmap,\n                  mipmaps = cubeImage[i].mipmaps;\n\n              for (var j = 0, jl = mipmaps.length; j < jl; j++) {\n                mipmap = mipmaps[j];\n\n                if (texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat) {\n                  if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n                    state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n                  } else {\n                    console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\");\n                  }\n                } else {\n                  state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n                }\n              }\n            }\n          }\n\n          if (texture.generateMipmaps && isPowerOfTwoImage) {\n            _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n          }\n\n          textureProperties.__version = texture.version;\n          if (texture.onUpdate) texture.onUpdate(texture);\n        } else {\n          state.activeTexture(_gl.TEXTURE0 + slot);\n          state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube);\n        }\n      }\n    }\n\n    function setTextureCubeDynamic(texture, slot) {\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_CUBE_MAP, properties.get(texture).__webglTexture);\n    }\n\n    function setTextureParameters(textureType, texture, isPowerOfTwoImage) {\n      var extension;\n\n      if (isPowerOfTwoImage) {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL(texture.wrapS));\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL(texture.wrapT));\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL(texture.magFilter));\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL(texture.minFilter));\n      } else {\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE);\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE);\n\n        if (texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping) {\n          console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture);\n        }\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterFallback(texture.magFilter));\n\n        _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterFallback(texture.minFilter));\n\n        if (texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) {\n          console.warn('THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture);\n        }\n      }\n\n      extension = extensions.get('EXT_texture_filter_anisotropic');\n\n      if (extension) {\n        if (texture.type === THREE.FloatType && extensions.get('OES_texture_float_linear') === null) return;\n        if (texture.type === THREE.HalfFloatType && extensions.get('OES_texture_half_float_linear') === null) return;\n\n        if (texture.anisotropy > 1 || properties.get(texture).__currentAnisotropy) {\n          _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture.anisotropy, capabilities.getMaxAnisotropy()));\n\n          properties.get(texture).__currentAnisotropy = texture.anisotropy;\n        }\n      }\n    }\n\n    function uploadTexture(textureProperties, texture, slot) {\n      if (textureProperties.__webglInit === undefined) {\n        textureProperties.__webglInit = true;\n        texture.addEventListener('dispose', onTextureDispose);\n        textureProperties.__webglTexture = _gl.createTexture();\n        _infoMemory.textures++;\n      }\n\n      state.activeTexture(_gl.TEXTURE0 + slot);\n      state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n\n      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture.flipY);\n\n      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha);\n\n      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture.unpackAlignment);\n\n      var image = clampToMaxSize(texture.image, capabilities.maxTextureSize);\n\n      if (textureNeedsPowerOfTwo(texture) && isPowerOfTwo(image) === false) {\n        image = makePowerOfTwo(image);\n      }\n\n      var isPowerOfTwoImage = isPowerOfTwo(image),\n          glFormat = paramThreeToGL(texture.format),\n          glType = paramThreeToGL(texture.type);\n      setTextureParameters(_gl.TEXTURE_2D, texture, isPowerOfTwoImage);\n      var mipmap,\n          mipmaps = texture.mipmaps;\n\n      if (texture instanceof THREE.DepthTexture) {\n        // populate depth texture with dummy data\n        var internalFormat = _gl.DEPTH_COMPONENT;\n\n        if (texture.type === THREE.FloatType) {\n          if (!_isWebGL2) throw new Error('Float Depth Texture only supported in WebGL2.0');\n          internalFormat = _gl.DEPTH_COMPONENT32F;\n        } else if (_isWebGL2) {\n          // WebGL 2.0 requires signed internalformat for glTexImage2D\n          internalFormat = _gl.DEPTH_COMPONENT16;\n        }\n\n        state.texImage2D(_gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null);\n      } else if (texture instanceof THREE.DataTexture) {\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && isPowerOfTwoImage) {\n          for (var i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data);\n        }\n      } else if (texture instanceof THREE.CompressedTexture) {\n        for (var i = 0, il = mipmaps.length; i < il; i++) {\n          mipmap = mipmaps[i];\n\n          if (texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat) {\n            if (state.getCompressedTextureFormats().indexOf(glFormat) > -1) {\n              state.compressedTexImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data);\n            } else {\n              console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\");\n            }\n          } else {\n            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);\n          }\n        }\n      } else {\n        // regular Texture (image, video, canvas)\n        // use manually created mipmaps if available\n        // if there are no manual mipmaps\n        // set 0 level mipmap and then use GL to generate other mipmap levels\n        if (mipmaps.length > 0 && isPowerOfTwoImage) {\n          for (var i = 0, il = mipmaps.length; i < il; i++) {\n            mipmap = mipmaps[i];\n            state.texImage2D(_gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap);\n          }\n\n          texture.generateMipmaps = false;\n        } else {\n          state.texImage2D(_gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image);\n        }\n      }\n\n      if (texture.generateMipmaps && isPowerOfTwoImage) _gl.generateMipmap(_gl.TEXTURE_2D);\n      textureProperties.__version = texture.version;\n      if (texture.onUpdate) texture.onUpdate(texture);\n    } // Render targets\n    // Setup storage for target texture and bind it to correct framebuffer\n\n\n    function setupFrameBufferTexture(framebuffer, renderTarget, attachment, textureTarget) {\n      var glFormat = paramThreeToGL(renderTarget.texture.format);\n      var glType = paramThreeToGL(renderTarget.texture.type);\n      state.texImage2D(textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null);\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(renderTarget.texture).__webglTexture, 0);\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    } // Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\n\n    function setupRenderBufferStorage(renderbuffer, renderTarget) {\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);\n\n      if (renderTarget.depthBuffer && !renderTarget.stencilBuffer) {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height);\n\n        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n      } else if (renderTarget.depthBuffer && renderTarget.stencilBuffer) {\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height);\n\n        _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer);\n      } else {\n        // FIXME: We don't support !depth !stencil\n        _gl.renderbufferStorage(_gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height);\n      }\n\n      _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);\n    } // Setup resources for a Depth Texture for a FBO (needs an extension)\n\n\n    function setupDepthTexture(framebuffer, renderTarget) {\n      var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n      if (isCube) throw new Error('Depth Texture with cube render targets is not supported!');\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);\n\n      if (!(renderTarget.depthTexture instanceof THREE.DepthTexture)) {\n        throw new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\n      } // upload an empty depth texture with framebuffer size\n\n\n      if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {\n        renderTarget.depthTexture.image.width = renderTarget.width;\n        renderTarget.depthTexture.image.height = renderTarget.height;\n        renderTarget.depthTexture.needsUpdate = true;\n      }\n\n      setTexture2D(renderTarget.depthTexture, 0);\n\n      var webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;\n\n      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);\n    } // Setup GL resources for a non-texture depth buffer\n\n\n    function setupDepthRenderbuffer(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n      var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n\n      if (renderTarget.depthTexture) {\n        if (isCube) throw new Error('target.depthTexture not supported in Cube render targets');\n        setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);\n      } else {\n        if (isCube) {\n          renderTargetProperties.__webglDepthbuffer = [];\n\n          for (var i = 0; i < 6; i++) {\n            _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i]);\n\n            renderTargetProperties.__webglDepthbuffer[i] = _gl.createRenderbuffer();\n            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i], renderTarget);\n          }\n        } else {\n          _gl.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);\n\n          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget);\n        }\n      }\n\n      _gl.bindFramebuffer(_gl.FRAMEBUFFER, null);\n    } // Set up GL resources for the render target\n\n\n    function setupRenderTarget(renderTarget) {\n      var renderTargetProperties = properties.get(renderTarget);\n      var textureProperties = properties.get(renderTarget.texture);\n      renderTarget.addEventListener('dispose', onRenderTargetDispose);\n      textureProperties.__webglTexture = _gl.createTexture();\n      _infoMemory.textures++;\n      var isCube = renderTarget instanceof THREE.WebGLRenderTargetCube;\n      var isTargetPowerOfTwo = isPowerOfTwo(renderTarget); // Setup framebuffer\n\n      if (isCube) {\n        renderTargetProperties.__webglFramebuffer = [];\n\n        for (var i = 0; i < 6; i++) {\n          renderTargetProperties.__webglFramebuffer[i] = _gl.createFramebuffer();\n        }\n      } else {\n        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n      } // Setup color buffer\n\n\n      if (isCube) {\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo);\n\n        for (var i = 0; i < 6; i++) {\n          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i);\n        }\n\n        if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_CUBE_MAP);\n        state.bindTexture(_gl.TEXTURE_CUBE_MAP, null);\n      } else {\n        state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture);\n        setTextureParameters(_gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo);\n        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D);\n        if (renderTarget.texture.generateMipmaps && isTargetPowerOfTwo) _gl.generateMipmap(_gl.TEXTURE_2D);\n        state.bindTexture(_gl.TEXTURE_2D, null);\n      } // Setup depth and stencil buffers\n\n\n      if (renderTarget.depthBuffer) {\n        setupDepthRenderbuffer(renderTarget);\n      }\n    }\n\n    function updateRenderTargetMipmap(renderTarget) {\n      var texture = renderTarget.texture;\n\n      if (texture.generateMipmaps && isPowerOfTwo(renderTarget) && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter) {\n        var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\n        var webglTexture = properties.get(texture).__webglTexture;\n\n        state.bindTexture(target, webglTexture);\n\n        _gl.generateMipmap(target);\n\n        state.bindTexture(target, null);\n      }\n    }\n\n    this.setTexture2D = setTexture2D;\n    this.setTextureCube = setTextureCube;\n    this.setTextureCubeDynamic = setTextureCubeDynamic;\n    this.setupRenderTarget = setupRenderTarget;\n    this.updateRenderTargetMipmap = updateRenderTargetMipmap;\n  }; // File:src/renderers/webgl/WebGLUniforms.js\n\n  /**\n   *\n   * Uniforms of a program.\n   * Those form a tree structure with a special top-level container for the root,\n   * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\n   *\n   *\n   * Properties of inner nodes including the top-level container:\n   *\n   * .seq - array of nested uniforms\n   * .map - nested uniforms by name\n   *\n   *\n   * Methods of all nodes except the top-level container:\n   *\n   * .setValue( gl, value, [renderer] )\n   *\n   * \t\tuploads a uniform value(s)\n   *  \tthe 'renderer' parameter is needed for sampler uniforms\n   *\n   *\n   * Static methods of the top-level container (renderer factorizations):\n   *\n   * .upload( gl, seq, values, renderer )\n   *\n   * \t\tsets uniforms in 'seq' to 'values[id].value'\n   *\n   * .seqWithValue( seq, values ) : filteredSeq\n   *\n   * \t\tfilters 'seq' entries with corresponding entry in values\n   *\n   * .splitDynamic( seq, values ) : filteredSeq\n   *\n   * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\n   *\n   *\n   * Methods of the top-level container (renderer factorizations):\n   *\n   * .setValue( gl, name, value )\n   *\n   * \t\tsets uniform with  name 'name' to 'value'\n   *\n   * .set( gl, obj, prop )\n   *\n   * \t\tsets uniform from object and property with same name than uniform\n   *\n   * .setOptional( gl, obj, prop )\n   *\n   * \t\tlike .set for an optional property of the object\n   *\n   *\n   * @author tschw\n   *\n   */\n\n\n  THREE.WebGLUniforms = function () {\n    // scope\n    var emptyTexture = new THREE.Texture();\n    var emptyCubeTexture = new THREE.CubeTexture(); // --- Base for inner nodes (including the root) ---\n\n    var UniformContainer = function UniformContainer() {\n      this.seq = [];\n      this.map = {};\n    },\n        // --- Utilities ---\n    // Array Caches (provide typed arrays for temporary by size)\n    arrayCacheF32 = [],\n        arrayCacheI32 = [],\n        uncacheTemporaryArrays = function uncacheTemporaryArrays() {\n      arrayCacheF32.length = 0;\n      arrayCacheI32.length = 0;\n    },\n        // Flattening for arrays of vectors and matrices\n    flatten = function flatten(array, nBlocks, blockSize) {\n      var firstElem = array[0];\n      if (firstElem <= 0 || firstElem > 0) return array; // unoptimized: ! isNaN( firstElem )\n      // see http://jacksondunstan.com/articles/983\n\n      var n = nBlocks * blockSize,\n          r = arrayCacheF32[n];\n\n      if (r === undefined) {\n        r = new Float32Array(n);\n        arrayCacheF32[n] = r;\n      }\n\n      if (nBlocks !== 0) {\n        firstElem.toArray(r, 0);\n\n        for (var i = 1, offset = 0; i !== nBlocks; ++i) {\n          offset += blockSize;\n          array[i].toArray(r, offset);\n        }\n      }\n\n      return r;\n    },\n        // Texture unit allocation\n    allocTexUnits = function allocTexUnits(renderer, n) {\n      var r = arrayCacheI32[n];\n\n      if (r === undefined) {\n        r = new Int32Array(n);\n        arrayCacheI32[n] = r;\n      }\n\n      for (var i = 0; i !== n; ++i) {\n        r[i] = renderer.allocTextureUnit();\n      }\n\n      return r;\n    },\n        // --- Setters ---\n    // Note: Defining these methods externally, because they come in a bunch\n    // and this way their names minify.\n    // Single scalar\n    setValue1f = function setValue1f(gl, v) {\n      gl.uniform1f(this.addr, v);\n    },\n        setValue1i = function setValue1i(gl, v) {\n      gl.uniform1i(this.addr, v);\n    },\n        // Single float vector (from flat array or THREE.VectorN)\n    setValue2fv = function setValue2fv(gl, v) {\n      if (v.x === undefined) gl.uniform2fv(this.addr, v);else gl.uniform2f(this.addr, v.x, v.y);\n    },\n        setValue3fv = function setValue3fv(gl, v) {\n      if (v.x !== undefined) gl.uniform3f(this.addr, v.x, v.y, v.z);else if (v.r !== undefined) gl.uniform3f(this.addr, v.r, v.g, v.b);else gl.uniform3fv(this.addr, v);\n    },\n        setValue4fv = function setValue4fv(gl, v) {\n      if (v.x === undefined) gl.uniform4fv(this.addr, v);else gl.uniform4f(this.addr, v.x, v.y, v.z, v.w);\n    },\n        // Single matrix (from flat array or MatrixN)\n    setValue2fm = function setValue2fm(gl, v) {\n      gl.uniformMatrix2fv(this.addr, false, v.elements || v);\n    },\n        setValue3fm = function setValue3fm(gl, v) {\n      gl.uniformMatrix3fv(this.addr, false, v.elements || v);\n    },\n        setValue4fm = function setValue4fm(gl, v) {\n      gl.uniformMatrix4fv(this.addr, false, v.elements || v);\n    },\n        // Single texture (2D / Cube)\n    setValueT1 = function setValueT1(gl, v, renderer) {\n      var unit = renderer.allocTextureUnit();\n      gl.uniform1i(this.addr, unit);\n      renderer.setTexture2D(v || emptyTexture, unit);\n    },\n        setValueT6 = function setValueT6(gl, v, renderer) {\n      var unit = renderer.allocTextureUnit();\n      gl.uniform1i(this.addr, unit);\n      renderer.setTextureCube(v || emptyCubeTexture, unit);\n    },\n        // Integer / Boolean vectors or arrays thereof (always flat arrays)\n    setValue2iv = function setValue2iv(gl, v) {\n      gl.uniform2iv(this.addr, v);\n    },\n        setValue3iv = function setValue3iv(gl, v) {\n      gl.uniform3iv(this.addr, v);\n    },\n        setValue4iv = function setValue4iv(gl, v) {\n      gl.uniform4iv(this.addr, v);\n    },\n        // Helper to pick the right setter for the singular case\n    getSingularSetter = function getSingularSetter(type) {\n      switch (type) {\n        case 0x1406:\n          return setValue1f;\n        // FLOAT\n\n        case 0x8b50:\n          return setValue2fv;\n        // _VEC2\n\n        case 0x8b51:\n          return setValue3fv;\n        // _VEC3\n\n        case 0x8b52:\n          return setValue4fv;\n        // _VEC4\n\n        case 0x8b5a:\n          return setValue2fm;\n        // _MAT2\n\n        case 0x8b5b:\n          return setValue3fm;\n        // _MAT3\n\n        case 0x8b5c:\n          return setValue4fm;\n        // _MAT4\n\n        case 0x8b5e:\n          return setValueT1;\n        // SAMPLER_2D\n\n        case 0x8b60:\n          return setValueT6;\n        // SAMPLER_CUBE\n\n        case 0x1404:\n        case 0x8b56:\n          return setValue1i;\n        // INT, BOOL\n\n        case 0x8b53:\n        case 0x8b57:\n          return setValue2iv;\n        // _VEC2\n\n        case 0x8b54:\n        case 0x8b58:\n          return setValue3iv;\n        // _VEC3\n\n        case 0x8b55:\n        case 0x8b59:\n          return setValue4iv;\n        // _VEC4\n      }\n    },\n        // Array of scalars\n    setValue1fv = function setValue1fv(gl, v) {\n      gl.uniform1fv(this.addr, v);\n    },\n        setValue1iv = function setValue1iv(gl, v) {\n      gl.uniform1iv(this.addr, v);\n    },\n        // Array of vectors (flat or from THREE classes)\n    setValueV2a = function setValueV2a(gl, v) {\n      gl.uniform2fv(this.addr, flatten(v, this.size, 2));\n    },\n        setValueV3a = function setValueV3a(gl, v) {\n      gl.uniform3fv(this.addr, flatten(v, this.size, 3));\n    },\n        setValueV4a = function setValueV4a(gl, v) {\n      gl.uniform4fv(this.addr, flatten(v, this.size, 4));\n    },\n        // Array of matrices (flat or from THREE clases)\n    setValueM2a = function setValueM2a(gl, v) {\n      gl.uniformMatrix2fv(this.addr, false, flatten(v, this.size, 4));\n    },\n        setValueM3a = function setValueM3a(gl, v) {\n      gl.uniformMatrix3fv(this.addr, false, flatten(v, this.size, 9));\n    },\n        setValueM4a = function setValueM4a(gl, v) {\n      gl.uniformMatrix4fv(this.addr, false, flatten(v, this.size, 16));\n    },\n        // Array of textures (2D / Cube)\n    setValueT1a = function setValueT1a(gl, v, renderer) {\n      var n = v.length,\n          units = allocTexUnits(renderer, n);\n      gl.uniform1iv(this.addr, units);\n\n      for (var i = 0; i !== n; ++i) {\n        renderer.setTexture2D(v[i] || emptyTexture, units[i]);\n      }\n    },\n        setValueT6a = function setValueT6a(gl, v, renderer) {\n      var n = v.length,\n          units = allocTexUnits(renderer, n);\n      gl.uniform1iv(this.addr, units);\n\n      for (var i = 0; i !== n; ++i) {\n        renderer.setTextureCube(v[i] || emptyCubeTexture, units[i]);\n      }\n    },\n        // Helper to pick the right setter for a pure (bottom-level) array\n    getPureArraySetter = function getPureArraySetter(type) {\n      switch (type) {\n        case 0x1406:\n          return setValue1fv;\n        // FLOAT\n\n        case 0x8b50:\n          return setValueV2a;\n        // _VEC2\n\n        case 0x8b51:\n          return setValueV3a;\n        // _VEC3\n\n        case 0x8b52:\n          return setValueV4a;\n        // _VEC4\n\n        case 0x8b5a:\n          return setValueM2a;\n        // _MAT2\n\n        case 0x8b5b:\n          return setValueM3a;\n        // _MAT3\n\n        case 0x8b5c:\n          return setValueM4a;\n        // _MAT4\n\n        case 0x8b5e:\n          return setValueT1a;\n        // SAMPLER_2D\n\n        case 0x8b60:\n          return setValueT6a;\n        // SAMPLER_CUBE\n\n        case 0x1404:\n        case 0x8b56:\n          return setValue1iv;\n        // INT, BOOL\n\n        case 0x8b53:\n        case 0x8b57:\n          return setValue2iv;\n        // _VEC2\n\n        case 0x8b54:\n        case 0x8b58:\n          return setValue3iv;\n        // _VEC3\n\n        case 0x8b55:\n        case 0x8b59:\n          return setValue4iv;\n        // _VEC4\n      }\n    },\n        // --- Uniform Classes ---\n    SingleUniform = function SingleUniform(id, activeInfo, addr) {\n      this.id = id;\n      this.addr = addr;\n      this.setValue = getSingularSetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n    },\n        PureArrayUniform = function PureArrayUniform(id, activeInfo, addr) {\n      this.id = id;\n      this.addr = addr;\n      this.size = activeInfo.size;\n      this.setValue = getPureArraySetter(activeInfo.type); // this.path = activeInfo.name; // DEBUG\n    },\n        StructuredUniform = function StructuredUniform(id) {\n      this.id = id;\n      UniformContainer.call(this); // mix-in\n    };\n\n    StructuredUniform.prototype.setValue = function (gl, value) {\n      // Note: Don't need an extra 'renderer' parameter, since samplers\n      // are not allowed in structured uniforms.\n      var seq = this.seq;\n\n      for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i];\n        u.setValue(gl, value[u.id]);\n      }\n    }; // --- Top-level ---\n    // Parser - builds up the property tree from the path strings\n\n\n    var RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\n        // extracts\n    // \t- the identifier (member name or array index)\n    //  - followed by an optional right bracket (found when array index)\n    //  - followed by an optional left bracket or dot (type of subscript)\n    //\n    // Note: These portions can be read in a non-overlapping fashion and\n    // allow straightforward parsing of the hierarchy that WebGL encodes\n    // in the uniform names.\n    addUniform = function addUniform(container, uniformObject) {\n      container.seq.push(uniformObject);\n      container.map[uniformObject.id] = uniformObject;\n    },\n        parseUniform = function parseUniform(activeInfo, addr, container) {\n      var path = activeInfo.name,\n          pathLength = path.length; // reset RegExp object, because of the early exit of a previous run\n\n      RePathPart.lastIndex = 0;\n\n      for (;;) {\n        var match = RePathPart.exec(path),\n            matchEnd = RePathPart.lastIndex,\n            id = match[1],\n            idIsIndex = match[2] === ']',\n            subscript = match[3];\n        if (idIsIndex) id = id | 0; // convert to integer\n\n        if (subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength) {\n          // bare name or \"pure\" bottom-level array \"[0]\" suffix\n          addUniform(container, subscript === undefined ? new SingleUniform(id, activeInfo, addr) : new PureArrayUniform(id, activeInfo, addr));\n          break;\n        } else {\n          // step into inner node / create it in case it doesn't exist\n          var map = container.map,\n              next = map[id];\n\n          if (next === undefined) {\n            next = new StructuredUniform(id);\n            addUniform(container, next);\n          }\n\n          container = next;\n        }\n      }\n    },\n        // Root Container\n    WebGLUniforms = function WebGLUniforms(gl, program, renderer) {\n      UniformContainer.call(this);\n      this.renderer = renderer;\n      var n = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n      for (var i = 0; i !== n; ++i) {\n        var info = gl.getActiveUniform(program, i),\n            path = info.name,\n            addr = gl.getUniformLocation(program, path);\n        parseUniform(info, addr, this);\n      }\n    };\n\n    WebGLUniforms.prototype.setValue = function (gl, name, value) {\n      var u = this.map[name];\n      if (u !== undefined) u.setValue(gl, value, this.renderer);\n    };\n\n    WebGLUniforms.prototype.set = function (gl, object, name) {\n      var u = this.map[name];\n      if (u !== undefined) u.setValue(gl, object[name], this.renderer);\n    };\n\n    WebGLUniforms.prototype.setOptional = function (gl, object, name) {\n      var v = object[name];\n      if (v !== undefined) this.setValue(gl, name, v);\n    }; // Static interface\n\n\n    WebGLUniforms.upload = function (gl, seq, values, renderer) {\n      for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i],\n            v = values[u.id];\n\n        if (v.needsUpdate !== false) {\n          // note: always updating when .needsUpdate is undefined\n          u.setValue(gl, v.value, renderer);\n        }\n      }\n    };\n\n    WebGLUniforms.seqWithValue = function (seq, values) {\n      var r = [];\n\n      for (var i = 0, n = seq.length; i !== n; ++i) {\n        var u = seq[i];\n        if (u.id in values) r.push(u);\n      }\n\n      return r;\n    };\n\n    WebGLUniforms.splitDynamic = function (seq, values) {\n      var r = null,\n          n = seq.length,\n          w = 0;\n\n      for (var i = 0; i !== n; ++i) {\n        var u = seq[i],\n            v = values[u.id];\n\n        if (v && v.dynamic === true) {\n          if (r === null) r = [];\n          r.push(u);\n        } else {\n          // in-place compact 'seq', removing the matches\n          if (w < i) seq[w] = u;\n          ++w;\n        }\n      }\n\n      if (w < n) seq.length = w;\n      return r;\n    };\n\n    WebGLUniforms.evalDynamic = function (seq, values, object, camera) {\n      for (var i = 0, n = seq.length; i !== n; ++i) {\n        var v = values[seq[i].id],\n            f = v.onUpdateCallback;\n        if (f !== undefined) f.call(v, object, camera);\n      }\n    };\n\n    return WebGLUniforms;\n  }(); // File:src/renderers/webgl/plugins/LensFlarePlugin.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n\n  THREE.LensFlarePlugin = function (renderer, flares) {\n    var gl = renderer.context;\n    var state = renderer.state;\n    var vertexBuffer, elementBuffer;\n    var shader, program, attributes, uniforms;\n    var tempTexture, occlusionTexture;\n\n    function init() {\n      var vertices = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, 1, 1, 1, 1, -1, 1, 0, 1]);\n      var faces = new Uint16Array([0, 1, 2, 0, 2, 3]); // buffers\n\n      vertexBuffer = gl.createBuffer();\n      elementBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW); // textures\n\n      tempTexture = gl.createTexture();\n      occlusionTexture = gl.createTexture();\n      state.bindTexture(gl.TEXTURE_2D, tempTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      state.bindTexture(gl.TEXTURE_2D, occlusionTexture);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      shader = {\n        vertexShader: [\"uniform lowp int renderType;\", \"uniform vec3 screenPosition;\", \"uniform vec2 scale;\", \"uniform float rotation;\", \"uniform sampler2D occlusionMap;\", \"attribute vec2 position;\", \"attribute vec2 uv;\", \"varying vec2 vUV;\", \"varying float vVisibility;\", \"void main() {\", \"vUV = uv;\", \"vec2 pos = position;\", \"if ( renderType == 2 ) {\", \"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\", \"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\", \"vVisibility =        visibility.r / 9.0;\", \"vVisibility *= 1.0 - visibility.g / 9.0;\", \"vVisibility *=       visibility.b / 9.0;\", \"vVisibility *= 1.0 - visibility.a / 9.0;\", \"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\", \"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\", \"}\", \"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\", \"}\"].join(\"\\n\"),\n        fragmentShader: [\"uniform lowp int renderType;\", \"uniform sampler2D map;\", \"uniform float opacity;\", \"uniform vec3 color;\", \"varying vec2 vUV;\", \"varying float vVisibility;\", \"void main() {\", // pink square\n        \"if ( renderType == 0 ) {\", \"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\", // restore\n        \"} else if ( renderType == 1 ) {\", \"gl_FragColor = texture2D( map, vUV );\", // flare\n        \"} else {\", \"vec4 texture = texture2D( map, vUV );\", \"texture.a *= opacity * vVisibility;\", \"gl_FragColor = texture;\", \"gl_FragColor.rgb *= color;\", \"}\", \"}\"].join(\"\\n\")\n      };\n      program = createProgram(shader);\n      attributes = {\n        vertex: gl.getAttribLocation(program, \"position\"),\n        uv: gl.getAttribLocation(program, \"uv\")\n      };\n      uniforms = {\n        renderType: gl.getUniformLocation(program, \"renderType\"),\n        map: gl.getUniformLocation(program, \"map\"),\n        occlusionMap: gl.getUniformLocation(program, \"occlusionMap\"),\n        opacity: gl.getUniformLocation(program, \"opacity\"),\n        color: gl.getUniformLocation(program, \"color\"),\n        scale: gl.getUniformLocation(program, \"scale\"),\n        rotation: gl.getUniformLocation(program, \"rotation\"),\n        screenPosition: gl.getUniformLocation(program, \"screenPosition\")\n      };\n    }\n    /*\n     * Render lens flares\n     * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\n     *         reads these back and calculates occlusion.\n     */\n\n\n    this.render = function (scene, camera, viewport) {\n      if (flares.length === 0) return;\n      var tempPosition = new THREE.Vector3();\n      var invAspect = viewport.w / viewport.z,\n          halfViewportWidth = viewport.z * 0.5,\n          halfViewportHeight = viewport.w * 0.5;\n      var size = 16 / viewport.w,\n          scale = new THREE.Vector2(size * invAspect, size);\n      var screenPosition = new THREE.Vector3(1, 1, 0),\n          screenPositionPixels = new THREE.Vector2(1, 1);\n      var validArea = new THREE.Box2();\n      validArea.min.set(0, 0);\n      validArea.max.set(viewport.z - 16, viewport.w - 16);\n\n      if (program === undefined) {\n        init();\n      }\n\n      gl.useProgram(program);\n      state.initAttributes();\n      state.enableAttribute(attributes.vertex);\n      state.enableAttribute(attributes.uv);\n      state.disableUnusedAttributes(); // loop through all lens flares to update their occlusion and positions\n      // setup gl and common used attribs/uniforms\n\n      gl.uniform1i(uniforms.occlusionMap, 0);\n      gl.uniform1i(uniforms.map, 1);\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n      gl.vertexAttribPointer(attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0);\n      gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n      state.disable(gl.CULL_FACE);\n      state.setDepthWrite(false);\n\n      for (var i = 0, l = flares.length; i < l; i++) {\n        size = 16 / viewport.w;\n        scale.set(size * invAspect, size); // calc object screen position\n\n        var flare = flares[i];\n        tempPosition.set(flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14]);\n        tempPosition.applyMatrix4(camera.matrixWorldInverse);\n        tempPosition.applyProjection(camera.projectionMatrix); // setup arrays for gl programs\n\n        screenPosition.copy(tempPosition); // horizontal and vertical coordinate of the lower left corner of the pixels to copy\n\n        screenPositionPixels.x = viewport.x + screenPosition.x * halfViewportWidth + halfViewportWidth - 8;\n        screenPositionPixels.y = viewport.y + screenPosition.y * halfViewportHeight + halfViewportHeight - 8; // screen cull\n\n        if (validArea.containsPoint(screenPositionPixels) === true) {\n          // save current RGB to temp texture\n          state.activeTexture(gl.TEXTURE0);\n          state.bindTexture(gl.TEXTURE_2D, null);\n          state.activeTexture(gl.TEXTURE1);\n          state.bindTexture(gl.TEXTURE_2D, tempTexture);\n          gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0); // render pink quad\n\n          gl.uniform1i(uniforms.renderType, 0);\n          gl.uniform2f(uniforms.scale, scale.x, scale.y);\n          gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);\n          state.disable(gl.BLEND);\n          state.enable(gl.DEPTH_TEST);\n          gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); // copy result to occlusionMap\n\n          state.activeTexture(gl.TEXTURE0);\n          state.bindTexture(gl.TEXTURE_2D, occlusionTexture);\n          gl.copyTexImage2D(gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0); // restore graphics\n\n          gl.uniform1i(uniforms.renderType, 1);\n          state.disable(gl.DEPTH_TEST);\n          state.activeTexture(gl.TEXTURE1);\n          state.bindTexture(gl.TEXTURE_2D, tempTexture);\n          gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0); // update object positions\n\n          flare.positionScreen.copy(screenPosition);\n\n          if (flare.customUpdateCallback) {\n            flare.customUpdateCallback(flare);\n          } else {\n            flare.updateLensFlares();\n          } // render flares\n\n\n          gl.uniform1i(uniforms.renderType, 2);\n          state.enable(gl.BLEND);\n\n          for (var j = 0, jl = flare.lensFlares.length; j < jl; j++) {\n            var sprite = flare.lensFlares[j];\n\n            if (sprite.opacity > 0.001 && sprite.scale > 0.001) {\n              screenPosition.x = sprite.x;\n              screenPosition.y = sprite.y;\n              screenPosition.z = sprite.z;\n              size = sprite.size * sprite.scale / viewport.w;\n              scale.x = size * invAspect;\n              scale.y = size;\n              gl.uniform3f(uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z);\n              gl.uniform2f(uniforms.scale, scale.x, scale.y);\n              gl.uniform1f(uniforms.rotation, sprite.rotation);\n              gl.uniform1f(uniforms.opacity, sprite.opacity);\n              gl.uniform3f(uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b);\n              state.setBlending(sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst);\n              renderer.setTexture2D(sprite.texture, 1);\n              gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n            }\n          }\n        }\n      } // restore gl\n\n\n      state.enable(gl.CULL_FACE);\n      state.enable(gl.DEPTH_TEST);\n      state.setDepthWrite(true);\n      renderer.resetGLState();\n    };\n\n    function createProgram(shader) {\n      var program = gl.createProgram();\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      var prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\n      gl.shaderSource(fragmentShader, prefix + shader.fragmentShader);\n      gl.shaderSource(vertexShader, prefix + shader.vertexShader);\n      gl.compileShader(fragmentShader);\n      gl.compileShader(vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.attachShader(program, vertexShader);\n      gl.linkProgram(program);\n      return program;\n    }\n  }; // File:src/renderers/webgl/plugins/SpritePlugin.js\n\n  /**\n   * @author mikael emtinger / http://gomo.se/\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n\n  THREE.SpritePlugin = function (renderer, sprites) {\n    var gl = renderer.context;\n    var state = renderer.state;\n    var vertexBuffer, elementBuffer;\n    var program, attributes, uniforms;\n    var texture; // decompose matrixWorld\n\n    var spritePosition = new THREE.Vector3();\n    var spriteRotation = new THREE.Quaternion();\n    var spriteScale = new THREE.Vector3();\n\n    function init() {\n      var vertices = new Float32Array([-0.5, -0.5, 0, 0, 0.5, -0.5, 1, 0, 0.5, 0.5, 1, 1, -0.5, 0.5, 0, 1]);\n      var faces = new Uint16Array([0, 1, 2, 0, 2, 3]);\n      vertexBuffer = gl.createBuffer();\n      elementBuffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW);\n      program = createProgram();\n      attributes = {\n        position: gl.getAttribLocation(program, 'position'),\n        uv: gl.getAttribLocation(program, 'uv')\n      };\n      uniforms = {\n        uvOffset: gl.getUniformLocation(program, 'uvOffset'),\n        uvScale: gl.getUniformLocation(program, 'uvScale'),\n        rotation: gl.getUniformLocation(program, 'rotation'),\n        scale: gl.getUniformLocation(program, 'scale'),\n        color: gl.getUniformLocation(program, 'color'),\n        map: gl.getUniformLocation(program, 'map'),\n        opacity: gl.getUniformLocation(program, 'opacity'),\n        modelViewMatrix: gl.getUniformLocation(program, 'modelViewMatrix'),\n        projectionMatrix: gl.getUniformLocation(program, 'projectionMatrix'),\n        fogType: gl.getUniformLocation(program, 'fogType'),\n        fogDensity: gl.getUniformLocation(program, 'fogDensity'),\n        fogNear: gl.getUniformLocation(program, 'fogNear'),\n        fogFar: gl.getUniformLocation(program, 'fogFar'),\n        fogColor: gl.getUniformLocation(program, 'fogColor'),\n        alphaTest: gl.getUniformLocation(program, 'alphaTest')\n      };\n      var canvas = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n      canvas.width = 8;\n      canvas.height = 8;\n      var context = canvas.getContext('2d');\n      context.fillStyle = 'white';\n      context.fillRect(0, 0, 8, 8);\n      texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n    }\n\n    this.render = function (scene, camera) {\n      if (sprites.length === 0) return; // setup gl\n\n      if (program === undefined) {\n        init();\n      }\n\n      gl.useProgram(program);\n      state.initAttributes();\n      state.enableAttribute(attributes.position);\n      state.enableAttribute(attributes.uv);\n      state.disableUnusedAttributes();\n      state.disable(gl.CULL_FACE);\n      state.enable(gl.BLEND);\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n      gl.vertexAttribPointer(attributes.position, 2, gl.FLOAT, false, 2 * 8, 0);\n      gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8);\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, elementBuffer);\n      gl.uniformMatrix4fv(uniforms.projectionMatrix, false, camera.projectionMatrix.elements);\n      state.activeTexture(gl.TEXTURE0);\n      gl.uniform1i(uniforms.map, 0);\n      var oldFogType = 0;\n      var sceneFogType = 0;\n      var fog = scene.fog;\n\n      if (fog) {\n        gl.uniform3f(uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b);\n\n        if (fog instanceof THREE.Fog) {\n          gl.uniform1f(uniforms.fogNear, fog.near);\n          gl.uniform1f(uniforms.fogFar, fog.far);\n          gl.uniform1i(uniforms.fogType, 1);\n          oldFogType = 1;\n          sceneFogType = 1;\n        } else if (fog instanceof THREE.FogExp2) {\n          gl.uniform1f(uniforms.fogDensity, fog.density);\n          gl.uniform1i(uniforms.fogType, 2);\n          oldFogType = 2;\n          sceneFogType = 2;\n        }\n      } else {\n        gl.uniform1i(uniforms.fogType, 0);\n        oldFogType = 0;\n        sceneFogType = 0;\n      } // update positions and sort\n\n\n      for (var i = 0, l = sprites.length; i < l; i++) {\n        var sprite = sprites[i];\n        sprite.modelViewMatrix.multiplyMatrices(camera.matrixWorldInverse, sprite.matrixWorld);\n        sprite.z = -sprite.modelViewMatrix.elements[14];\n      }\n\n      sprites.sort(painterSortStable); // render all sprites\n\n      var scale = [];\n\n      for (var i = 0, l = sprites.length; i < l; i++) {\n        var sprite = sprites[i];\n        var material = sprite.material;\n        if (material.visible === false) continue;\n        gl.uniform1f(uniforms.alphaTest, material.alphaTest);\n        gl.uniformMatrix4fv(uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements);\n        sprite.matrixWorld.decompose(spritePosition, spriteRotation, spriteScale);\n        scale[0] = spriteScale.x;\n        scale[1] = spriteScale.y;\n        var fogType = 0;\n\n        if (scene.fog && material.fog) {\n          fogType = sceneFogType;\n        }\n\n        if (oldFogType !== fogType) {\n          gl.uniform1i(uniforms.fogType, fogType);\n          oldFogType = fogType;\n        }\n\n        if (material.map !== null) {\n          gl.uniform2f(uniforms.uvOffset, material.map.offset.x, material.map.offset.y);\n          gl.uniform2f(uniforms.uvScale, material.map.repeat.x, material.map.repeat.y);\n        } else {\n          gl.uniform2f(uniforms.uvOffset, 0, 0);\n          gl.uniform2f(uniforms.uvScale, 1, 1);\n        }\n\n        gl.uniform1f(uniforms.opacity, material.opacity);\n        gl.uniform3f(uniforms.color, material.color.r, material.color.g, material.color.b);\n        gl.uniform1f(uniforms.rotation, material.rotation);\n        gl.uniform2fv(uniforms.scale, scale);\n        state.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst);\n        state.setDepthTest(material.depthTest);\n        state.setDepthWrite(material.depthWrite);\n\n        if (material.map) {\n          renderer.setTexture2D(material.map, 0);\n        } else {\n          renderer.setTexture2D(texture, 0);\n        }\n\n        gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n      } // restore gl\n\n\n      state.enable(gl.CULL_FACE);\n      renderer.resetGLState();\n    };\n\n    function createProgram() {\n      var program = gl.createProgram();\n      var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      gl.shaderSource(vertexShader, ['precision ' + renderer.getPrecision() + ' float;', 'uniform mat4 modelViewMatrix;', 'uniform mat4 projectionMatrix;', 'uniform float rotation;', 'uniform vec2 scale;', 'uniform vec2 uvOffset;', 'uniform vec2 uvScale;', 'attribute vec2 position;', 'attribute vec2 uv;', 'varying vec2 vUV;', 'void main() {', 'vUV = uvOffset + uv * uvScale;', 'vec2 alignedPosition = position * scale;', 'vec2 rotatedPosition;', 'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;', 'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;', 'vec4 finalPosition;', 'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );', 'finalPosition.xy += rotatedPosition;', 'finalPosition = projectionMatrix * finalPosition;', 'gl_Position = finalPosition;', '}'].join('\\n'));\n      gl.shaderSource(fragmentShader, ['precision ' + renderer.getPrecision() + ' float;', 'uniform vec3 color;', 'uniform sampler2D map;', 'uniform float opacity;', 'uniform int fogType;', 'uniform vec3 fogColor;', 'uniform float fogDensity;', 'uniform float fogNear;', 'uniform float fogFar;', 'uniform float alphaTest;', 'varying vec2 vUV;', 'void main() {', 'vec4 texture = texture2D( map, vUV );', 'if ( texture.a < alphaTest ) discard;', 'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );', 'if ( fogType > 0 ) {', 'float depth = gl_FragCoord.z / gl_FragCoord.w;', 'float fogFactor = 0.0;', 'if ( fogType == 1 ) {', 'fogFactor = smoothstep( fogNear, fogFar, depth );', '} else {', 'const float LOG2 = 1.442695;', 'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );', 'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );', '}', 'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );', '}', '}'].join('\\n'));\n      gl.compileShader(vertexShader);\n      gl.compileShader(fragmentShader);\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      return program;\n    }\n\n    function painterSortStable(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else {\n        return b.id - a.id;\n      }\n    }\n  }; // File:src/Three.Legacy.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  Object.assign(THREE, {\n    Face4: function Face4(a, b, c, d, normal, color, materialIndex) {\n      console.warn('THREE.Face4 has been removed. A THREE.Face3 will be created instead.');\n      return new THREE.Face3(a, b, c, normal, color, materialIndex);\n    },\n    LineStrip: 0,\n    LinePieces: 1,\n    MeshFaceMaterial: THREE.MultiMaterial,\n    PointCloud: function PointCloud(geometry, material) {\n      console.warn('THREE.PointCloud has been renamed to THREE.Points.');\n      return new THREE.Points(geometry, material);\n    },\n    Particle: THREE.Sprite,\n    ParticleSystem: function ParticleSystem(geometry, material) {\n      console.warn('THREE.ParticleSystem has been renamed to THREE.Points.');\n      return new THREE.Points(geometry, material);\n    },\n    PointCloudMaterial: function PointCloudMaterial(parameters) {\n      console.warn('THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.');\n      return new THREE.PointsMaterial(parameters);\n    },\n    ParticleBasicMaterial: function ParticleBasicMaterial(parameters) {\n      console.warn('THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.');\n      return new THREE.PointsMaterial(parameters);\n    },\n    ParticleSystemMaterial: function ParticleSystemMaterial(parameters) {\n      console.warn('THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.');\n      return new THREE.PointsMaterial(parameters);\n    },\n    Vertex: function Vertex(x, y, z) {\n      console.warn('THREE.Vertex has been removed. Use THREE.Vector3 instead.');\n      return new THREE.Vector3(x, y, z);\n    }\n  }); //\n\n  Object.assign(THREE.Box2.prototype, {\n    empty: function empty() {\n      console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().');\n      return this.isEmpty();\n    },\n    isIntersectionBox: function isIntersectionBox(box) {\n      console.warn('THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().');\n      return this.intersectsBox(box);\n    }\n  });\n  Object.assign(THREE.Box3.prototype, {\n    empty: function empty() {\n      console.warn('THREE.Box3: .empty() has been renamed to .isEmpty().');\n      return this.isEmpty();\n    },\n    isIntersectionBox: function isIntersectionBox(box) {\n      console.warn('THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().');\n      return this.intersectsBox(box);\n    },\n    isIntersectionSphere: function isIntersectionSphere(sphere) {\n      console.warn('THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n      return this.intersectsSphere(sphere);\n    }\n  });\n  Object.assign(THREE.Matrix3.prototype, {\n    multiplyVector3: function multiplyVector3(vector) {\n      console.warn('THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.');\n      return vector.applyMatrix3(this);\n    },\n    multiplyVector3Array: function multiplyVector3Array(a) {\n      console.warn('THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');\n      return this.applyToVector3Array(a);\n    }\n  });\n  Object.assign(THREE.Matrix4.prototype, {\n    extractPosition: function extractPosition(m) {\n      console.warn('THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().');\n      return this.copyPosition(m);\n    },\n    setRotationFromQuaternion: function setRotationFromQuaternion(q) {\n      console.warn('THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().');\n      return this.makeRotationFromQuaternion(q);\n    },\n    multiplyVector3: function multiplyVector3(vector) {\n      console.warn('THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.');\n      return vector.applyProjection(this);\n    },\n    multiplyVector4: function multiplyVector4(vector) {\n      console.warn('THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n      return vector.applyMatrix4(this);\n    },\n    multiplyVector3Array: function multiplyVector3Array(a) {\n      console.warn('THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.');\n      return this.applyToVector3Array(a);\n    },\n    rotateAxis: function rotateAxis(v) {\n      console.warn('THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.');\n      v.transformDirection(this);\n    },\n    crossVector: function crossVector(vector) {\n      console.warn('THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.');\n      return vector.applyMatrix4(this);\n    },\n    translate: function translate(v) {\n      console.error('THREE.Matrix4: .translate() has been removed.');\n    },\n    rotateX: function rotateX(angle) {\n      console.error('THREE.Matrix4: .rotateX() has been removed.');\n    },\n    rotateY: function rotateY(angle) {\n      console.error('THREE.Matrix4: .rotateY() has been removed.');\n    },\n    rotateZ: function rotateZ(angle) {\n      console.error('THREE.Matrix4: .rotateZ() has been removed.');\n    },\n    rotateByAxis: function rotateByAxis(axis, angle) {\n      console.error('THREE.Matrix4: .rotateByAxis() has been removed.');\n    }\n  });\n  Object.assign(THREE.Plane.prototype, {\n    isIntersectionLine: function isIntersectionLine(line) {\n      console.warn('THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().');\n      return this.intersectsLine(line);\n    }\n  });\n  Object.assign(THREE.Quaternion.prototype, {\n    multiplyVector3: function multiplyVector3(vector) {\n      console.warn('THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.');\n      return vector.applyQuaternion(this);\n    }\n  });\n  Object.assign(THREE.Ray.prototype, {\n    isIntersectionBox: function isIntersectionBox(box) {\n      console.warn('THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().');\n      return this.intersectsBox(box);\n    },\n    isIntersectionPlane: function isIntersectionPlane(plane) {\n      console.warn('THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().');\n      return this.intersectsPlane(plane);\n    },\n    isIntersectionSphere: function isIntersectionSphere(sphere) {\n      console.warn('THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().');\n      return this.intersectsSphere(sphere);\n    }\n  });\n  Object.assign(THREE.Vector3.prototype, {\n    setEulerFromRotationMatrix: function setEulerFromRotationMatrix() {\n      console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n    },\n    setEulerFromQuaternion: function setEulerFromQuaternion() {\n      console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n    },\n    getPositionFromMatrix: function getPositionFromMatrix(m) {\n      console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n      return this.setFromMatrixPosition(m);\n    },\n    getScaleFromMatrix: function getScaleFromMatrix(m) {\n      console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n      return this.setFromMatrixScale(m);\n    },\n    getColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n      console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n      return this.setFromMatrixColumn(matrix, index);\n    }\n  }); //\n\n  Object.assign(THREE.Object3D.prototype, {\n    getChildByName: function getChildByName(name) {\n      console.warn('THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().');\n      return this.getObjectByName(name);\n    },\n    renderDepth: function renderDepth(value) {\n      console.warn('THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.');\n    },\n    translate: function translate(distance, axis) {\n      console.warn('THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.');\n      return this.translateOnAxis(axis, distance);\n    }\n  });\n  Object.defineProperties(THREE.Object3D.prototype, {\n    eulerOrder: {\n      get: function get() {\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n        return this.rotation.order;\n      },\n      set: function set(value) {\n        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.');\n        this.rotation.order = value;\n      }\n    },\n    useQuaternion: {\n      get: function get() {\n        console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n      },\n      set: function set(value) {\n        console.warn('THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.');\n      }\n    }\n  });\n  Object.defineProperties(THREE.LOD.prototype, {\n    objects: {\n      get: function get() {\n        console.warn('THREE.LOD: .objects has been renamed to .levels.');\n        return this.levels;\n      }\n    }\n  }); //\n\n  THREE.PerspectiveCamera.prototype.setLens = function (focalLength, filmGauge) {\n    console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. \" + \"Use .setFocalLength and .filmGauge for a photographic setup.\");\n    if (filmGauge !== undefined) this.filmGauge = filmGauge;\n    this.setFocalLength(focalLength);\n  }; //\n\n\n  Object.defineProperties(THREE.Light.prototype, {\n    onlyShadow: {\n      set: function set(value) {\n        console.warn('THREE.Light: .onlyShadow has been removed.');\n      }\n    },\n    shadowCameraFov: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.');\n        this.shadow.camera.fov = value;\n      }\n    },\n    shadowCameraLeft: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraLeft is now .shadow.camera.left.');\n        this.shadow.camera.left = value;\n      }\n    },\n    shadowCameraRight: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraRight is now .shadow.camera.right.');\n        this.shadow.camera.right = value;\n      }\n    },\n    shadowCameraTop: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.');\n        this.shadow.camera.top = value;\n      }\n    },\n    shadowCameraBottom: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.');\n        this.shadow.camera.bottom = value;\n      }\n    },\n    shadowCameraNear: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraNear is now .shadow.camera.near.');\n        this.shadow.camera.near = value;\n      }\n    },\n    shadowCameraFar: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.');\n        this.shadow.camera.far = value;\n      }\n    },\n    shadowCameraVisible: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.');\n      }\n    },\n    shadowBias: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowBias is now .shadow.bias.');\n        this.shadow.bias = value;\n      }\n    },\n    shadowDarkness: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowDarkness has been removed.');\n      }\n    },\n    shadowMapWidth: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.');\n        this.shadow.mapSize.width = value;\n      }\n    },\n    shadowMapHeight: {\n      set: function set(value) {\n        console.warn('THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.');\n        this.shadow.mapSize.height = value;\n      }\n    }\n  }); //\n\n  Object.defineProperties(THREE.BufferAttribute.prototype, {\n    length: {\n      get: function get() {\n        console.warn('THREE.BufferAttribute: .length has been deprecated. Please use .count.');\n        return this.array.length;\n      }\n    }\n  });\n  Object.assign(THREE.BufferGeometry.prototype, {\n    addIndex: function addIndex(index) {\n      console.warn('THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().');\n      this.setIndex(index);\n    },\n    addDrawCall: function addDrawCall(start, count, indexOffset) {\n      if (indexOffset !== undefined) {\n        console.warn('THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.');\n      }\n\n      console.warn('THREE.BufferGeometry: .addDrawCall() is now .addGroup().');\n      this.addGroup(start, count);\n    },\n    clearDrawCalls: function clearDrawCalls() {\n      console.warn('THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().');\n      this.clearGroups();\n    },\n    computeTangents: function computeTangents() {\n      console.warn('THREE.BufferGeometry: .computeTangents() has been removed.');\n    },\n    computeOffsets: function computeOffsets() {\n      console.warn('THREE.BufferGeometry: .computeOffsets() has been removed.');\n    }\n  });\n  Object.defineProperties(THREE.BufferGeometry.prototype, {\n    drawcalls: {\n      get: function get() {\n        console.error('THREE.BufferGeometry: .drawcalls has been renamed to .groups.');\n        return this.groups;\n      }\n    },\n    offsets: {\n      get: function get() {\n        console.warn('THREE.BufferGeometry: .offsets has been renamed to .groups.');\n        return this.groups;\n      }\n    }\n  }); //\n\n  Object.defineProperties(THREE.Material.prototype, {\n    wrapAround: {\n      get: function get() {\n        console.warn('THREE.' + this.type + ': .wrapAround has been removed.');\n      },\n      set: function set(value) {\n        console.warn('THREE.' + this.type + ': .wrapAround has been removed.');\n      }\n    },\n    wrapRGB: {\n      get: function get() {\n        console.warn('THREE.' + this.type + ': .wrapRGB has been removed.');\n        return new THREE.Color();\n      }\n    }\n  });\n  Object.defineProperties(THREE.MeshPhongMaterial.prototype, {\n    metal: {\n      get: function get() {\n        console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.');\n        return false;\n      },\n      set: function set(value) {\n        console.warn('THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead');\n      }\n    }\n  });\n  Object.defineProperties(THREE.ShaderMaterial.prototype, {\n    derivatives: {\n      get: function get() {\n        console.warn('THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n        return this.extensions.derivatives;\n      },\n      set: function set(value) {\n        console.warn('THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.');\n        this.extensions.derivatives = value;\n      }\n    }\n  }); //\n\n  THREE.EventDispatcher.prototype = Object.assign(Object.create({\n    // Note: Extra base ensures these properties are not 'assign'ed.\n    constructor: THREE.EventDispatcher,\n    apply: function apply(target) {\n      console.warn(\"THREE.EventDispatcher: .apply is deprecated, \" + \"just inherit or Object.assign the prototype to mix-in.\");\n      Object.assign(target, this);\n    }\n  }), THREE.EventDispatcher.prototype); //\n\n  Object.assign(THREE.WebGLRenderer.prototype, {\n    supportsFloatTextures: function supportsFloatTextures() {\n      console.warn('THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).');\n      return this.extensions.get('OES_texture_float');\n    },\n    supportsHalfFloatTextures: function supportsHalfFloatTextures() {\n      console.warn('THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).');\n      return this.extensions.get('OES_texture_half_float');\n    },\n    supportsStandardDerivatives: function supportsStandardDerivatives() {\n      console.warn('THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).');\n      return this.extensions.get('OES_standard_derivatives');\n    },\n    supportsCompressedTextureS3TC: function supportsCompressedTextureS3TC() {\n      console.warn('THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).');\n      return this.extensions.get('WEBGL_compressed_texture_s3tc');\n    },\n    supportsCompressedTexturePVRTC: function supportsCompressedTexturePVRTC() {\n      console.warn('THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).');\n      return this.extensions.get('WEBGL_compressed_texture_pvrtc');\n    },\n    supportsBlendMinMax: function supportsBlendMinMax() {\n      console.warn('THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).');\n      return this.extensions.get('EXT_blend_minmax');\n    },\n    supportsVertexTextures: function supportsVertexTextures() {\n      return this.capabilities.vertexTextures;\n    },\n    supportsInstancedArrays: function supportsInstancedArrays() {\n      console.warn('THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).');\n      return this.extensions.get('ANGLE_instanced_arrays');\n    },\n    enableScissorTest: function enableScissorTest(boolean) {\n      console.warn('THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().');\n      this.setScissorTest(boolean);\n    },\n    initMaterial: function initMaterial() {\n      console.warn('THREE.WebGLRenderer: .initMaterial() has been removed.');\n    },\n    addPrePlugin: function addPrePlugin() {\n      console.warn('THREE.WebGLRenderer: .addPrePlugin() has been removed.');\n    },\n    addPostPlugin: function addPostPlugin() {\n      console.warn('THREE.WebGLRenderer: .addPostPlugin() has been removed.');\n    },\n    updateShadowMap: function updateShadowMap() {\n      console.warn('THREE.WebGLRenderer: .updateShadowMap() has been removed.');\n    }\n  });\n  Object.defineProperties(THREE.WebGLRenderer.prototype, {\n    shadowMapEnabled: {\n      get: function get() {\n        return this.shadowMap.enabled;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.');\n        this.shadowMap.enabled = value;\n      }\n    },\n    shadowMapType: {\n      get: function get() {\n        return this.shadowMap.type;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.');\n        this.shadowMap.type = value;\n      }\n    },\n    shadowMapCullFace: {\n      get: function get() {\n        return this.shadowMap.cullFace;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.');\n        this.shadowMap.cullFace = value;\n      }\n    }\n  });\n  Object.defineProperties(THREE.WebGLShadowMap.prototype, {\n    cullFace: {\n      get: function get() {\n        return this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\n      },\n      set: function set(cullFace) {\n        var value = cullFace !== THREE.CullFaceBack;\n        console.warn(\"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\");\n        this.renderReverseSided = value;\n      }\n    }\n  }); //\n\n  Object.defineProperties(THREE.WebGLRenderTarget.prototype, {\n    wrapS: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n        return this.texture.wrapS;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.');\n        this.texture.wrapS = value;\n      }\n    },\n    wrapT: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n        return this.texture.wrapT;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.');\n        this.texture.wrapT = value;\n      }\n    },\n    magFilter: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n        return this.texture.magFilter;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.');\n        this.texture.magFilter = value;\n      }\n    },\n    minFilter: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n        return this.texture.minFilter;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.');\n        this.texture.minFilter = value;\n      }\n    },\n    anisotropy: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n        return this.texture.anisotropy;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.');\n        this.texture.anisotropy = value;\n      }\n    },\n    offset: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n        return this.texture.offset;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.');\n        this.texture.offset = value;\n      }\n    },\n    repeat: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n        return this.texture.repeat;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.');\n        this.texture.repeat = value;\n      }\n    },\n    format: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n        return this.texture.format;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.');\n        this.texture.format = value;\n      }\n    },\n    type: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n        return this.texture.type;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.');\n        this.texture.type = value;\n      }\n    },\n    generateMipmaps: {\n      get: function get() {\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n        return this.texture.generateMipmaps;\n      },\n      set: function set(value) {\n        console.warn('THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.');\n        this.texture.generateMipmaps = value;\n      }\n    }\n  }); //\n\n  Object.assign(THREE.Audio.prototype, {\n    load: function load(file) {\n      console.warn('THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.');\n      var scope = this;\n      var audioLoader = new THREE.AudioLoader();\n      audioLoader.load(file, function (buffer) {\n        scope.setBuffer(buffer);\n      });\n      return this;\n    }\n  });\n  Object.assign(THREE.AudioAnalyser.prototype, {\n    getData: function getData(file) {\n      console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().');\n      return this.getFrequencyData();\n    }\n  }); //\n\n  THREE.GeometryUtils = {\n    merge: function merge(geometry1, geometry2, materialIndexOffset) {\n      console.warn('THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.');\n      var matrix;\n\n      if (geometry2 instanceof THREE.Mesh) {\n        geometry2.matrixAutoUpdate && geometry2.updateMatrix();\n        matrix = geometry2.matrix;\n        geometry2 = geometry2.geometry;\n      }\n\n      geometry1.merge(geometry2, matrix, materialIndexOffset);\n    },\n    center: function center(geometry) {\n      console.warn('THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.');\n      return geometry.center();\n    }\n  };\n  THREE.ImageUtils = {\n    crossOrigin: undefined,\n    loadTexture: function loadTexture(url, mapping, onLoad, onError) {\n      console.warn('THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.');\n      var loader = new THREE.TextureLoader();\n      loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(url, onLoad, undefined, onError);\n      if (mapping) texture.mapping = mapping;\n      return texture;\n    },\n    loadTextureCube: function loadTextureCube(urls, mapping, onLoad, onError) {\n      console.warn('THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.');\n      var loader = new THREE.CubeTextureLoader();\n      loader.setCrossOrigin(this.crossOrigin);\n      var texture = loader.load(urls, onLoad, undefined, onError);\n      if (mapping) texture.mapping = mapping;\n      return texture;\n    },\n    loadCompressedTexture: function loadCompressedTexture() {\n      console.error('THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.');\n    },\n    loadCompressedTextureCube: function loadCompressedTextureCube() {\n      console.error('THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.');\n    }\n  }; //\n\n  THREE.Projector = function () {\n    console.error('THREE.Projector has been moved to /examples/js/renderers/Projector.js.');\n\n    this.projectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .projectVector() is now vector.project().');\n      vector.project(camera);\n    };\n\n    this.unprojectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n      vector.unproject(camera);\n    };\n\n    this.pickingRay = function (vector, camera) {\n      console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n    };\n  }; //\n\n\n  THREE.CanvasRenderer = function () {\n    console.error('THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js');\n    this.domElement = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');\n\n    this.clear = function () {};\n\n    this.render = function () {};\n\n    this.setClearColor = function () {};\n\n    this.setSize = function () {};\n  }; // File:src/extras/CurveUtils.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   */\n\n\n  THREE.CurveUtils = {\n    tangentQuadraticBezier: function tangentQuadraticBezier(t, p0, p1, p2) {\n      return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n    },\n    // Puay Bing, thanks for helping with this derivative!\n    tangentCubicBezier: function tangentCubicBezier(t, p0, p1, p2, p3) {\n      return -3 * p0 * (1 - t) * (1 - t) + 3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) + 6 * t * p2 * (1 - t) - 3 * t * t * p2 + 3 * t * t * p3;\n    },\n    tangentSpline: function tangentSpline(t, p0, p1, p2, p3) {\n      // To check if my formulas are correct\n      var h00 = 6 * t * t - 6 * t; // derived from 2t^3 − 3t^2 + 1\n\n      var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\n\n      var h01 = -6 * t * t + 6 * t; // − 2t3 + 3t2\n\n      var h11 = 3 * t * t - 2 * t; // t3 − t2\n\n      return h00 + h10 + h01 + h11;\n    },\n    // Catmull-Rom\n    interpolate: function interpolate(p0, p1, p2, p3, t) {\n      var v0 = (p2 - p0) * 0.5;\n      var v1 = (p3 - p1) * 0.5;\n      var t2 = t * t;\n      var t3 = t * t2;\n      return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n    }\n  }; // File:src/extras/SceneUtils.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.SceneUtils = {\n    createMultiMaterialObject: function createMultiMaterialObject(geometry, materials) {\n      var group = new THREE.Group();\n\n      for (var i = 0, l = materials.length; i < l; i++) {\n        group.add(new THREE.Mesh(geometry, materials[i]));\n      }\n\n      return group;\n    },\n    detach: function detach(child, parent, scene) {\n      child.applyMatrix(parent.matrixWorld);\n      parent.remove(child);\n      scene.add(child);\n    },\n    attach: function attach(child, scene, parent) {\n      var matrixWorldInverse = new THREE.Matrix4();\n      matrixWorldInverse.getInverse(parent.matrixWorld);\n      child.applyMatrix(matrixWorldInverse);\n      scene.remove(child);\n      parent.add(child);\n    }\n  }; // File:src/extras/ShapeUtils.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   */\n\n  THREE.ShapeUtils = {\n    // calculate area of the contour polygon\n    area: function area(contour) {\n      var n = contour.length;\n      var a = 0.0;\n\n      for (var p = n - 1, q = 0; q < n; p = q++) {\n        a += contour[p].x * contour[q].y - contour[q].x * contour[p].y;\n      }\n\n      return a * 0.5;\n    },\n    triangulate: function () {\n      /**\n       * This code is a quick port of code written in C++ which was submitted to\n       * flipcode.com by John W. Ratcliff  // July 22, 2000\n       * See original code and more information here:\n       * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\n       *\n       * ported to actionscript by Zevan Rosser\n       * www.actionsnippet.com\n       *\n       * ported to javascript by Joshua Koo\n       * http://www.lab4games.net/zz85/blog\n       *\n       */\n      function snip(contour, u, v, w, n, verts) {\n        var p;\n        var ax, ay, bx, by;\n        var cx, cy, px, py;\n        ax = contour[verts[u]].x;\n        ay = contour[verts[u]].y;\n        bx = contour[verts[v]].x;\n        by = contour[verts[v]].y;\n        cx = contour[verts[w]].x;\n        cy = contour[verts[w]].y;\n        if (Number.EPSILON > (bx - ax) * (cy - ay) - (by - ay) * (cx - ax)) return false;\n        var aX, aY, bX, bY, cX, cY;\n        var apx, apy, bpx, bpy, cpx, cpy;\n        var cCROSSap, bCROSScp, aCROSSbp;\n        aX = cx - bx;\n        aY = cy - by;\n        bX = ax - cx;\n        bY = ay - cy;\n        cX = bx - ax;\n        cY = by - ay;\n\n        for (p = 0; p < n; p++) {\n          px = contour[verts[p]].x;\n          py = contour[verts[p]].y;\n          if (px === ax && py === ay || px === bx && py === by || px === cx && py === cy) continue;\n          apx = px - ax;\n          apy = py - ay;\n          bpx = px - bx;\n          bpy = py - by;\n          cpx = px - cx;\n          cpy = py - cy; // see if p is inside triangle abc\n\n          aCROSSbp = aX * bpy - aY * bpx;\n          cCROSSap = cX * apy - cY * apx;\n          bCROSScp = bX * cpy - bY * cpx;\n          if (aCROSSbp >= -Number.EPSILON && bCROSScp >= -Number.EPSILON && cCROSSap >= -Number.EPSILON) return false;\n        }\n\n        return true;\n      } // takes in an contour array and returns\n\n\n      return function triangulate(contour, indices) {\n        var n = contour.length;\n        if (n < 3) return null;\n        var result = [],\n            verts = [],\n            vertIndices = [];\n        /* we want a counter-clockwise polygon in verts */\n\n        var u, v, w;\n\n        if (THREE.ShapeUtils.area(contour) > 0.0) {\n          for (v = 0; v < n; v++) {\n            verts[v] = v;\n          }\n        } else {\n          for (v = 0; v < n; v++) {\n            verts[v] = n - 1 - v;\n          }\n        }\n\n        var nv = n;\n        /*  remove nv - 2 vertices, creating 1 triangle every time */\n\n        var count = 2 * nv;\n        /* error detection */\n\n        for (v = nv - 1; nv > 2;) {\n          /* if we loop, it is probably a non-simple polygon */\n          if (count-- <= 0) {\n            //** Triangulate: ERROR - probable bad polygon!\n            //throw ( \"Warning, unable to triangulate polygon!\" );\n            //return null;\n            // Sometimes warning is fine, especially polygons are triangulated in reverse.\n            console.warn('THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()');\n            if (indices) return vertIndices;\n            return result;\n          }\n          /* three consecutive vertices in current polygon, <u,v,w> */\n\n\n          u = v;\n          if (nv <= u) u = 0;\n          /* previous */\n\n          v = u + 1;\n          if (nv <= v) v = 0;\n          /* new v    */\n\n          w = v + 1;\n          if (nv <= w) w = 0;\n          /* next     */\n\n          if (snip(contour, u, v, w, nv, verts)) {\n            var a, b, c, s, t;\n            /* true names of the vertices */\n\n            a = verts[u];\n            b = verts[v];\n            c = verts[w];\n            /* output Triangle */\n\n            result.push([contour[a], contour[b], contour[c]]);\n            vertIndices.push([verts[u], verts[v], verts[w]]);\n            /* remove v from the remaining polygon */\n\n            for (s = v, t = v + 1; t < nv; s++, t++) {\n              verts[s] = verts[t];\n            }\n\n            nv--;\n            /* reset error detection counter */\n\n            count = 2 * nv;\n          }\n        }\n\n        if (indices) return vertIndices;\n        return result;\n      };\n    }(),\n    triangulateShape: function triangulateShape(contour, holes) {\n      function removeDupEndPts(points) {\n        var l = points.length;\n\n        if (l > 2 && points[l - 1].equals(points[0])) {\n          points.pop();\n        }\n      }\n\n      removeDupEndPts(contour);\n      holes.forEach(removeDupEndPts);\n\n      function point_in_segment_2D_colin(inSegPt1, inSegPt2, inOtherPt) {\n        // inOtherPt needs to be collinear to the inSegment\n        if (inSegPt1.x !== inSegPt2.x) {\n          if (inSegPt1.x < inSegPt2.x) {\n            return inSegPt1.x <= inOtherPt.x && inOtherPt.x <= inSegPt2.x;\n          } else {\n            return inSegPt2.x <= inOtherPt.x && inOtherPt.x <= inSegPt1.x;\n          }\n        } else {\n          if (inSegPt1.y < inSegPt2.y) {\n            return inSegPt1.y <= inOtherPt.y && inOtherPt.y <= inSegPt2.y;\n          } else {\n            return inSegPt2.y <= inOtherPt.y && inOtherPt.y <= inSegPt1.y;\n          }\n        }\n      }\n\n      function intersect_segments_2D(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs) {\n        var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,\n            seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\n        var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,\n            seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\n        var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\n        var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\n        var limit = seg1dy * seg2dx - seg1dx * seg2dy;\n        var perpSeg1 = seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\n\n        if (Math.abs(limit) > Number.EPSILON) {\n          // not parallel\n          var perpSeg2;\n\n          if (limit > 0) {\n            if (perpSeg1 < 0 || perpSeg1 > limit) return [];\n            perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n            if (perpSeg2 < 0 || perpSeg2 > limit) return [];\n          } else {\n            if (perpSeg1 > 0 || perpSeg1 < limit) return [];\n            perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\n            if (perpSeg2 > 0 || perpSeg2 < limit) return [];\n          } // i.e. to reduce rounding errors\n          // intersection at endpoint of segment#1?\n\n\n          if (perpSeg2 === 0) {\n            if (inExcludeAdjacentSegs && (perpSeg1 === 0 || perpSeg1 === limit)) return [];\n            return [inSeg1Pt1];\n          }\n\n          if (perpSeg2 === limit) {\n            if (inExcludeAdjacentSegs && (perpSeg1 === 0 || perpSeg1 === limit)) return [];\n            return [inSeg1Pt2];\n          } // intersection at endpoint of segment#2?\n\n\n          if (perpSeg1 === 0) return [inSeg2Pt1];\n          if (perpSeg1 === limit) return [inSeg2Pt2]; // return real intersection point\n\n          var factorSeg1 = perpSeg2 / limit;\n          return [{\n            x: inSeg1Pt1.x + factorSeg1 * seg1dx,\n            y: inSeg1Pt1.y + factorSeg1 * seg1dy\n          }];\n        } else {\n          // parallel or collinear\n          if (perpSeg1 !== 0 || seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy) return []; // they are collinear or degenerate\n\n          var seg1Pt = seg1dx === 0 && seg1dy === 0; // segment1 is just a point?\n\n          var seg2Pt = seg2dx === 0 && seg2dy === 0; // segment2 is just a point?\n          // both segments are points\n\n          if (seg1Pt && seg2Pt) {\n            if (inSeg1Pt1.x !== inSeg2Pt1.x || inSeg1Pt1.y !== inSeg2Pt1.y) return []; // they are distinct  points\n\n            return [inSeg1Pt1]; // they are the same point\n          } // segment#1  is a single point\n\n\n          if (seg1Pt) {\n            if (!point_in_segment_2D_colin(inSeg2Pt1, inSeg2Pt2, inSeg1Pt1)) return []; // but not in segment#2\n\n            return [inSeg1Pt1];\n          } // segment#2  is a single point\n\n\n          if (seg2Pt) {\n            if (!point_in_segment_2D_colin(inSeg1Pt1, inSeg1Pt2, inSeg2Pt1)) return []; // but not in segment#1\n\n            return [inSeg2Pt1];\n          } // they are collinear segments, which might overlap\n\n\n          var seg1min, seg1max, seg1minVal, seg1maxVal;\n          var seg2min, seg2max, seg2minVal, seg2maxVal;\n\n          if (seg1dx !== 0) {\n            // the segments are NOT on a vertical line\n            if (inSeg1Pt1.x < inSeg1Pt2.x) {\n              seg1min = inSeg1Pt1;\n              seg1minVal = inSeg1Pt1.x;\n              seg1max = inSeg1Pt2;\n              seg1maxVal = inSeg1Pt2.x;\n            } else {\n              seg1min = inSeg1Pt2;\n              seg1minVal = inSeg1Pt2.x;\n              seg1max = inSeg1Pt1;\n              seg1maxVal = inSeg1Pt1.x;\n            }\n\n            if (inSeg2Pt1.x < inSeg2Pt2.x) {\n              seg2min = inSeg2Pt1;\n              seg2minVal = inSeg2Pt1.x;\n              seg2max = inSeg2Pt2;\n              seg2maxVal = inSeg2Pt2.x;\n            } else {\n              seg2min = inSeg2Pt2;\n              seg2minVal = inSeg2Pt2.x;\n              seg2max = inSeg2Pt1;\n              seg2maxVal = inSeg2Pt1.x;\n            }\n          } else {\n            // the segments are on a vertical line\n            if (inSeg1Pt1.y < inSeg1Pt2.y) {\n              seg1min = inSeg1Pt1;\n              seg1minVal = inSeg1Pt1.y;\n              seg1max = inSeg1Pt2;\n              seg1maxVal = inSeg1Pt2.y;\n            } else {\n              seg1min = inSeg1Pt2;\n              seg1minVal = inSeg1Pt2.y;\n              seg1max = inSeg1Pt1;\n              seg1maxVal = inSeg1Pt1.y;\n            }\n\n            if (inSeg2Pt1.y < inSeg2Pt2.y) {\n              seg2min = inSeg2Pt1;\n              seg2minVal = inSeg2Pt1.y;\n              seg2max = inSeg2Pt2;\n              seg2maxVal = inSeg2Pt2.y;\n            } else {\n              seg2min = inSeg2Pt2;\n              seg2minVal = inSeg2Pt2.y;\n              seg2max = inSeg2Pt1;\n              seg2maxVal = inSeg2Pt1.y;\n            }\n          }\n\n          if (seg1minVal <= seg2minVal) {\n            if (seg1maxVal < seg2minVal) return [];\n\n            if (seg1maxVal === seg2minVal) {\n              if (inExcludeAdjacentSegs) return [];\n              return [seg2min];\n            }\n\n            if (seg1maxVal <= seg2maxVal) return [seg2min, seg1max];\n            return [seg2min, seg2max];\n          } else {\n            if (seg1minVal > seg2maxVal) return [];\n\n            if (seg1minVal === seg2maxVal) {\n              if (inExcludeAdjacentSegs) return [];\n              return [seg1min];\n            }\n\n            if (seg1maxVal <= seg2maxVal) return [seg1min, seg1max];\n            return [seg1min, seg2max];\n          }\n        }\n      }\n\n      function isPointInsideAngle(inVertex, inLegFromPt, inLegToPt, inOtherPt) {\n        // The order of legs is important\n        // translation of all points, so that Vertex is at (0,0)\n        var legFromPtX = inLegFromPt.x - inVertex.x,\n            legFromPtY = inLegFromPt.y - inVertex.y;\n        var legToPtX = inLegToPt.x - inVertex.x,\n            legToPtY = inLegToPt.y - inVertex.y;\n        var otherPtX = inOtherPt.x - inVertex.x,\n            otherPtY = inOtherPt.y - inVertex.y; // main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\n\n        var from2toAngle = legFromPtX * legToPtY - legFromPtY * legToPtX;\n        var from2otherAngle = legFromPtX * otherPtY - legFromPtY * otherPtX;\n\n        if (Math.abs(from2toAngle) > Number.EPSILON) {\n          // angle != 180 deg.\n          var other2toAngle = otherPtX * legToPtY - otherPtY * legToPtX; // console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\n\n          if (from2toAngle > 0) {\n            // main angle < 180 deg.\n            return from2otherAngle >= 0 && other2toAngle >= 0;\n          } else {\n            // main angle > 180 deg.\n            return from2otherAngle >= 0 || other2toAngle >= 0;\n          }\n        } else {\n          // angle == 180 deg.\n          // console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\n          return from2otherAngle > 0;\n        }\n      }\n\n      function removeHoles(contour, holes) {\n        var shape = contour.concat(); // work on this shape\n\n        var hole;\n\n        function isCutLineInsideAngles(inShapeIdx, inHoleIdx) {\n          // Check if hole point lies within angle around shape point\n          var lastShapeIdx = shape.length - 1;\n          var prevShapeIdx = inShapeIdx - 1;\n          if (prevShapeIdx < 0) prevShapeIdx = lastShapeIdx;\n          var nextShapeIdx = inShapeIdx + 1;\n          if (nextShapeIdx > lastShapeIdx) nextShapeIdx = 0;\n          var insideAngle = isPointInsideAngle(shape[inShapeIdx], shape[prevShapeIdx], shape[nextShapeIdx], hole[inHoleIdx]);\n\n          if (!insideAngle) {\n            // console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\n            return false;\n          } // Check if shape point lies within angle around hole point\n\n\n          var lastHoleIdx = hole.length - 1;\n          var prevHoleIdx = inHoleIdx - 1;\n          if (prevHoleIdx < 0) prevHoleIdx = lastHoleIdx;\n          var nextHoleIdx = inHoleIdx + 1;\n          if (nextHoleIdx > lastHoleIdx) nextHoleIdx = 0;\n          insideAngle = isPointInsideAngle(hole[inHoleIdx], hole[prevHoleIdx], hole[nextHoleIdx], shape[inShapeIdx]);\n\n          if (!insideAngle) {\n            // console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\n            return false;\n          }\n\n          return true;\n        }\n\n        function intersectsShapeEdge(inShapePt, inHolePt) {\n          // checks for intersections with shape edges\n          var sIdx, nextIdx, intersection;\n\n          for (sIdx = 0; sIdx < shape.length; sIdx++) {\n            nextIdx = sIdx + 1;\n            nextIdx %= shape.length;\n            intersection = intersect_segments_2D(inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true);\n            if (intersection.length > 0) return true;\n          }\n\n          return false;\n        }\n\n        var indepHoles = [];\n\n        function intersectsHoleEdge(inShapePt, inHolePt) {\n          // checks for intersections with hole edges\n          var ihIdx, chkHole, hIdx, nextIdx, intersection;\n\n          for (ihIdx = 0; ihIdx < indepHoles.length; ihIdx++) {\n            chkHole = holes[indepHoles[ihIdx]];\n\n            for (hIdx = 0; hIdx < chkHole.length; hIdx++) {\n              nextIdx = hIdx + 1;\n              nextIdx %= chkHole.length;\n              intersection = intersect_segments_2D(inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true);\n              if (intersection.length > 0) return true;\n            }\n          }\n\n          return false;\n        }\n\n        var holeIndex,\n            shapeIndex,\n            shapePt,\n            holePt,\n            holeIdx,\n            cutKey,\n            failedCuts = [],\n            tmpShape1,\n            tmpShape2,\n            tmpHole1,\n            tmpHole2;\n\n        for (var h = 0, hl = holes.length; h < hl; h++) {\n          indepHoles.push(h);\n        }\n\n        var minShapeIndex = 0;\n        var counter = indepHoles.length * 2;\n\n        while (indepHoles.length > 0) {\n          counter--;\n\n          if (counter < 0) {\n            console.log(\"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\");\n            break;\n          } // search for shape-vertex and hole-vertex,\n          // which can be connected without intersections\n\n\n          for (shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex++) {\n            shapePt = shape[shapeIndex];\n            holeIndex = -1; // search for hole which can be reached without intersections\n\n            for (var h = 0; h < indepHoles.length; h++) {\n              holeIdx = indepHoles[h]; // prevent multiple checks\n\n              cutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\n              if (failedCuts[cutKey] !== undefined) continue;\n              hole = holes[holeIdx];\n\n              for (var h2 = 0; h2 < hole.length; h2++) {\n                holePt = hole[h2];\n                if (!isCutLineInsideAngles(shapeIndex, h2)) continue;\n                if (intersectsShapeEdge(shapePt, holePt)) continue;\n                if (intersectsHoleEdge(shapePt, holePt)) continue;\n                holeIndex = h2;\n                indepHoles.splice(h, 1);\n                tmpShape1 = shape.slice(0, shapeIndex + 1);\n                tmpShape2 = shape.slice(shapeIndex);\n                tmpHole1 = hole.slice(holeIndex);\n                tmpHole2 = hole.slice(0, holeIndex + 1);\n                shape = tmpShape1.concat(tmpHole1).concat(tmpHole2).concat(tmpShape2);\n                minShapeIndex = shapeIndex; // Debug only, to show the selected cuts\n                // glob_CutLines.push( [ shapePt, holePt ] );\n\n                break;\n              }\n\n              if (holeIndex >= 0) break; // hole-vertex found\n\n              failedCuts[cutKey] = true; // remember failure\n            }\n\n            if (holeIndex >= 0) break; // hole-vertex found\n          }\n        }\n\n        return shape;\n        /* shape with no holes */\n      }\n\n      var i,\n          il,\n          f,\n          face,\n          key,\n          index,\n          allPointsMap = {}; // To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\n\n      var allpoints = contour.concat();\n\n      for (var h = 0, hl = holes.length; h < hl; h++) {\n        Array.prototype.push.apply(allpoints, holes[h]);\n      } //console.log( \"allpoints\",allpoints, allpoints.length );\n      // prepare all points map\n\n\n      for (i = 0, il = allpoints.length; i < il; i++) {\n        key = allpoints[i].x + \":\" + allpoints[i].y;\n\n        if (allPointsMap[key] !== undefined) {\n          console.warn(\"THREE.ShapeUtils: Duplicate point\", key, i);\n        }\n\n        allPointsMap[key] = i;\n      } // remove holes by cutting paths to holes and adding them to the shape\n\n\n      var shapeWithoutHoles = removeHoles(contour, holes);\n      var triangles = THREE.ShapeUtils.triangulate(shapeWithoutHoles, false); // True returns indices for points of spooled shape\n      //console.log( \"triangles\",triangles, triangles.length );\n      // check all face vertices against all points map\n\n      for (i = 0, il = triangles.length; i < il; i++) {\n        face = triangles[i];\n\n        for (f = 0; f < 3; f++) {\n          key = face[f].x + \":\" + face[f].y;\n          index = allPointsMap[key];\n\n          if (index !== undefined) {\n            face[f] = index;\n          }\n        }\n      }\n\n      return triangles.concat();\n    },\n    isClockWise: function isClockWise(pts) {\n      return THREE.ShapeUtils.area(pts) < 0;\n    },\n    // Bezier Curves formulas obtained from\n    // http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n    // Quad Bezier Functions\n    b2: function () {\n      function b2p0(t, p) {\n        var k = 1 - t;\n        return k * k * p;\n      }\n\n      function b2p1(t, p) {\n        return 2 * (1 - t) * t * p;\n      }\n\n      function b2p2(t, p) {\n        return t * t * p;\n      }\n\n      return function b2(t, p0, p1, p2) {\n        return b2p0(t, p0) + b2p1(t, p1) + b2p2(t, p2);\n      };\n    }(),\n    // Cubic Bezier Functions\n    b3: function () {\n      function b3p0(t, p) {\n        var k = 1 - t;\n        return k * k * k * p;\n      }\n\n      function b3p1(t, p) {\n        var k = 1 - t;\n        return 3 * k * k * t * p;\n      }\n\n      function b3p2(t, p) {\n        var k = 1 - t;\n        return 3 * k * t * t * p;\n      }\n\n      function b3p3(t, p) {\n        return t * t * t * p;\n      }\n\n      return function b3(t, p0, p1, p2, p3) {\n        return b3p0(t, p0) + b3p1(t, p1) + b3p2(t, p2) + b3p3(t, p3);\n      };\n    }()\n  }; // File:src/extras/core/Curve.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * Extensible curve object\n   *\n   * Some common of Curve methods\n   * .getPoint(t), getTangent(t)\n   * .getPointAt(u), getTagentAt(u)\n   * .getPoints(), .getSpacedPoints()\n   * .getLength()\n   * .updateArcLengths()\n   *\n   * This following classes subclasses THREE.Curve:\n   *\n   * -- 2d classes --\n   * THREE.LineCurve\n   * THREE.QuadraticBezierCurve\n   * THREE.CubicBezierCurve\n   * THREE.SplineCurve\n   * THREE.ArcCurve\n   * THREE.EllipseCurve\n   *\n   * -- 3d classes --\n   * THREE.LineCurve3\n   * THREE.QuadraticBezierCurve3\n   * THREE.CubicBezierCurve3\n   * THREE.SplineCurve3\n   *\n   * A series of curves can be represented as a THREE.CurvePath\n   *\n   **/\n\n  /**************************************************************\n   *\tAbstract Curve base class\n   **************************************************************/\n\n  THREE.Curve = function () {};\n\n  THREE.Curve.prototype = {\n    constructor: THREE.Curve,\n    // Virtual base class method to overwrite and implement in subclasses\n    //\t- t [0 .. 1]\n    getPoint: function getPoint(t) {\n      console.warn(\"THREE.Curve: Warning, getPoint() not implemented!\");\n      return null;\n    },\n    // Get point at relative position in curve according to arc length\n    // - u [0 .. 1]\n    getPointAt: function getPointAt(u) {\n      var t = this.getUtoTmapping(u);\n      return this.getPoint(t);\n    },\n    // Get sequence of points using getPoint( t )\n    getPoints: function getPoints(divisions) {\n      if (!divisions) divisions = 5;\n      var points = [];\n\n      for (var d = 0; d <= divisions; d++) {\n        points.push(this.getPoint(d / divisions));\n      }\n\n      return points;\n    },\n    // Get sequence of points using getPointAt( u )\n    getSpacedPoints: function getSpacedPoints(divisions) {\n      if (!divisions) divisions = 5;\n      var points = [];\n\n      for (var d = 0; d <= divisions; d++) {\n        points.push(this.getPointAt(d / divisions));\n      }\n\n      return points;\n    },\n    // Get total curve arc length\n    getLength: function getLength() {\n      var lengths = this.getLengths();\n      return lengths[lengths.length - 1];\n    },\n    // Get list of cumulative segment lengths\n    getLengths: function getLengths(divisions) {\n      if (!divisions) divisions = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;\n\n      if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {\n        //console.log( \"cached\", this.cacheArcLengths );\n        return this.cacheArcLengths;\n      }\n\n      this.needsUpdate = false;\n      var cache = [];\n      var current,\n          last = this.getPoint(0);\n      var p,\n          sum = 0;\n      cache.push(0);\n\n      for (p = 1; p <= divisions; p++) {\n        current = this.getPoint(p / divisions);\n        sum += current.distanceTo(last);\n        cache.push(sum);\n        last = current;\n      }\n\n      this.cacheArcLengths = cache;\n      return cache; // { sums: cache, sum:sum }; Sum is in the last element.\n    },\n    updateArcLengths: function updateArcLengths() {\n      this.needsUpdate = true;\n      this.getLengths();\n    },\n    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n    getUtoTmapping: function getUtoTmapping(u, distance) {\n      var arcLengths = this.getLengths();\n      var i = 0,\n          il = arcLengths.length;\n      var targetArcLength; // The targeted u distance value to get\n\n      if (distance) {\n        targetArcLength = distance;\n      } else {\n        targetArcLength = u * arcLengths[il - 1];\n      } //var time = Date.now();\n      // binary search for the index with largest value smaller than target u distance\n\n\n      var low = 0,\n          high = il - 1,\n          comparison;\n\n      while (low <= high) {\n        i = Math.floor(low + (high - low) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n        comparison = arcLengths[i] - targetArcLength;\n\n        if (comparison < 0) {\n          low = i + 1;\n        } else if (comparison > 0) {\n          high = i - 1;\n        } else {\n          high = i;\n          break; // DONE\n        }\n      }\n\n      i = high; //console.log('b' , i, low, high, Date.now()- time);\n\n      if (arcLengths[i] === targetArcLength) {\n        var t = i / (il - 1);\n        return t;\n      } // we could get finer grain at lengths, or use simple interpolation between two points\n\n\n      var lengthBefore = arcLengths[i];\n      var lengthAfter = arcLengths[i + 1];\n      var segmentLength = lengthAfter - lengthBefore; // determine where we are between the 'before' and 'after' points\n\n      var segmentFraction = (targetArcLength - lengthBefore) / segmentLength; // add that fractional amount to t\n\n      var t = (i + segmentFraction) / (il - 1);\n      return t;\n    },\n    // Returns a unit vector tangent at t\n    // In case any sub curve does not implement its tangent derivation,\n    // 2 points a small delta apart will be used to find its gradient\n    // which seems to give a reasonable approximation\n    getTangent: function getTangent(t) {\n      var delta = 0.0001;\n      var t1 = t - delta;\n      var t2 = t + delta; // Capping in case of danger\n\n      if (t1 < 0) t1 = 0;\n      if (t2 > 1) t2 = 1;\n      var pt1 = this.getPoint(t1);\n      var pt2 = this.getPoint(t2);\n      var vec = pt2.clone().sub(pt1);\n      return vec.normalize();\n    },\n    getTangentAt: function getTangentAt(u) {\n      var t = this.getUtoTmapping(u);\n      return this.getTangent(t);\n    }\n  }; // TODO: Transformation for Curves?\n\n  /**************************************************************\n   *\t3D Curves\n   **************************************************************/\n  // A Factory method for creating new curve subclasses\n\n  THREE.Curve.create = function (constructor, getPointFunc) {\n    constructor.prototype = Object.create(THREE.Curve.prototype);\n    constructor.prototype.constructor = constructor;\n    constructor.prototype.getPoint = getPointFunc;\n    return constructor;\n  }; // File:src/extras/core/CurvePath.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   **/\n\n  /**************************************************************\n   *\tCurved Path - a curve path is simply a array of connected\n   *  curves, but retains the api of a curve\n   **************************************************************/\n\n\n  THREE.CurvePath = function () {\n    this.curves = [];\n    this.autoClose = false; // Automatically closes the path\n  };\n\n  THREE.CurvePath.prototype = Object.assign(Object.create(THREE.Curve.prototype), {\n    constructor: THREE.CurvePath,\n    add: function add(curve) {\n      this.curves.push(curve);\n    },\n    closePath: function closePath() {\n      // Add a line curve if start and end of lines are not connected\n      var startPoint = this.curves[0].getPoint(0);\n      var endPoint = this.curves[this.curves.length - 1].getPoint(1);\n\n      if (!startPoint.equals(endPoint)) {\n        this.curves.push(new THREE.LineCurve(endPoint, startPoint));\n      }\n    },\n    // To get accurate point with reference to\n    // entire path distance at time t,\n    // following has to be done:\n    // 1. Length of each sub path have to be known\n    // 2. Locate and identify type of curve\n    // 3. Get t for the curve\n    // 4. Return curve.getPointAt(t')\n    getPoint: function getPoint(t) {\n      var d = t * this.getLength();\n      var curveLengths = this.getCurveLengths();\n      var i = 0; // To think about boundaries points.\n\n      while (i < curveLengths.length) {\n        if (curveLengths[i] >= d) {\n          var diff = curveLengths[i] - d;\n          var curve = this.curves[i];\n          var segmentLength = curve.getLength();\n          var u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n          return curve.getPointAt(u);\n        }\n\n        i++;\n      }\n\n      return null; // loop where sum != 0, sum > d , sum+1 <d\n    },\n    // We cannot use the default THREE.Curve getPoint() with getLength() because in\n    // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n    // getPoint() depends on getLength\n    getLength: function getLength() {\n      var lens = this.getCurveLengths();\n      return lens[lens.length - 1];\n    },\n    // cacheLengths must be recalculated.\n    updateArcLengths: function updateArcLengths() {\n      this.needsUpdate = true;\n      this.cacheLengths = null;\n      this.getLengths();\n    },\n    // Compute lengths and cache them\n    // We cannot overwrite getLengths() because UtoT mapping uses it.\n    getCurveLengths: function getCurveLengths() {\n      // We use cache values if curves and cache array are same length\n      if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {\n        return this.cacheLengths;\n      } // Get length of sub-curve\n      // Push sums into cached array\n\n\n      var lengths = [],\n          sums = 0;\n\n      for (var i = 0, l = this.curves.length; i < l; i++) {\n        sums += this.curves[i].getLength();\n        lengths.push(sums);\n      }\n\n      this.cacheLengths = lengths;\n      return lengths;\n    },\n    getSpacedPoints: function getSpacedPoints(divisions) {\n      if (!divisions) divisions = 40;\n      var points = [];\n\n      for (var i = 0; i <= divisions; i++) {\n        points.push(this.getPoint(i / divisions));\n      }\n\n      if (this.autoClose) {\n        points.push(points[0]);\n      }\n\n      return points;\n    },\n    getPoints: function getPoints(divisions) {\n      divisions = divisions || 12;\n      var points = [],\n          last;\n\n      for (var i = 0, curves = this.curves; i < curves.length; i++) {\n        var curve = curves[i];\n        var resolution = curve instanceof THREE.EllipseCurve ? divisions * 2 : curve instanceof THREE.LineCurve ? 1 : curve instanceof THREE.SplineCurve ? divisions * curve.points.length : divisions;\n        var pts = curve.getPoints(resolution);\n\n        for (var j = 0; j < pts.length; j++) {\n          var point = pts[j];\n          if (last && last.equals(point)) continue; // ensures no consecutive points are duplicates\n\n          points.push(point);\n          last = point;\n        }\n      }\n\n      if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {\n        points.push(points[0]);\n      }\n\n      return points;\n    },\n\n    /**************************************************************\n     *\tCreate Geometries Helpers\n     **************************************************************/\n    /// Generate geometry from path points (for Line or Points objects)\n    createPointsGeometry: function createPointsGeometry(divisions) {\n      var pts = this.getPoints(divisions);\n      return this.createGeometry(pts);\n    },\n    // Generate geometry from equidistant sampling along the path\n    createSpacedPointsGeometry: function createSpacedPointsGeometry(divisions) {\n      var pts = this.getSpacedPoints(divisions);\n      return this.createGeometry(pts);\n    },\n    createGeometry: function createGeometry(points) {\n      var geometry = new THREE.Geometry();\n\n      for (var i = 0, l = points.length; i < l; i++) {\n        var point = points[i];\n        geometry.vertices.push(new THREE.Vector3(point.x, point.y, point.z || 0));\n      }\n\n      return geometry;\n    }\n  }); // File:src/extras/core/Font.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.Font = function (data) {\n    this.data = data;\n  };\n\n  Object.assign(THREE.Font.prototype, {\n    generateShapes: function generateShapes(text, size, divisions) {\n      function createPaths(text) {\n        var chars = String(text).split('');\n        var scale = size / data.resolution;\n        var offset = 0;\n        var paths = [];\n\n        for (var i = 0; i < chars.length; i++) {\n          var ret = createPath(chars[i], scale, offset);\n          offset += ret.offset;\n          paths.push(ret.path);\n        }\n\n        return paths;\n      }\n\n      function createPath(c, scale, offset) {\n        var glyph = data.glyphs[c] || data.glyphs['?'];\n        if (!glyph) return;\n        var path = new THREE.ShapePath();\n        var pts = [],\n            b2 = THREE.ShapeUtils.b2,\n            b3 = THREE.ShapeUtils.b3;\n        var x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\n\n        if (glyph.o) {\n          var outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(' '));\n\n          for (var i = 0, l = outline.length; i < l;) {\n            var action = outline[i++];\n\n            switch (action) {\n              case 'm':\n                // moveTo\n                x = outline[i++] * scale + offset;\n                y = outline[i++] * scale;\n                path.moveTo(x, y);\n                break;\n\n              case 'l':\n                // lineTo\n                x = outline[i++] * scale + offset;\n                y = outline[i++] * scale;\n                path.lineTo(x, y);\n                break;\n\n              case 'q':\n                // quadraticCurveTo\n                cpx = outline[i++] * scale + offset;\n                cpy = outline[i++] * scale;\n                cpx1 = outline[i++] * scale + offset;\n                cpy1 = outline[i++] * scale;\n                path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);\n                laste = pts[pts.length - 1];\n\n                if (laste) {\n                  cpx0 = laste.x;\n                  cpy0 = laste.y;\n\n                  for (var i2 = 1; i2 <= divisions; i2++) {\n                    var t = i2 / divisions;\n                    b2(t, cpx0, cpx1, cpx);\n                    b2(t, cpy0, cpy1, cpy);\n                  }\n                }\n\n                break;\n\n              case 'b':\n                // bezierCurveTo\n                cpx = outline[i++] * scale + offset;\n                cpy = outline[i++] * scale;\n                cpx1 = outline[i++] * scale + offset;\n                cpy1 = outline[i++] * scale;\n                cpx2 = outline[i++] * scale + offset;\n                cpy2 = outline[i++] * scale;\n                path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);\n                laste = pts[pts.length - 1];\n\n                if (laste) {\n                  cpx0 = laste.x;\n                  cpy0 = laste.y;\n\n                  for (var i2 = 1; i2 <= divisions; i2++) {\n                    var t = i2 / divisions;\n                    b3(t, cpx0, cpx1, cpx2, cpx);\n                    b3(t, cpy0, cpy1, cpy2, cpy);\n                  }\n                }\n\n                break;\n            }\n          }\n        }\n\n        return {\n          offset: glyph.ha * scale,\n          path: path\n        };\n      } //\n\n\n      if (size === undefined) size = 100;\n      if (divisions === undefined) divisions = 4;\n      var data = this.data;\n      var paths = createPaths(text);\n      var shapes = [];\n\n      for (var p = 0, pl = paths.length; p < pl; p++) {\n        Array.prototype.push.apply(shapes, paths[p].toShapes());\n      }\n\n      return shapes;\n    }\n  }); // File:src/extras/core/Path.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * Creates free form 2d path using series of points, lines or curves.\n   *\n   **/\n\n  THREE.Path = function (points) {\n    THREE.CurvePath.call(this);\n    this.currentPoint = new THREE.Vector2();\n\n    if (points) {\n      this.fromPoints(points);\n    }\n  };\n\n  THREE.Path.prototype = Object.assign(Object.create(THREE.CurvePath.prototype), {\n    constructor: THREE.Path,\n    // Create path using straight lines to connect all points\n    // - vectors: array of Vector2\n    fromPoints: function fromPoints(vectors) {\n      this.moveTo(vectors[0].x, vectors[0].y);\n\n      for (var i = 1, l = vectors.length; i < l; i++) {\n        this.lineTo(vectors[i].x, vectors[i].y);\n      }\n    },\n    moveTo: function moveTo(x, y) {\n      this.currentPoint.set(x, y); // TODO consider referencing vectors instead of copying?\n    },\n    lineTo: function lineTo(x, y) {\n      var curve = new THREE.LineCurve(this.currentPoint.clone(), new THREE.Vector2(x, y));\n      this.curves.push(curve);\n      this.currentPoint.set(x, y);\n    },\n    quadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n      var curve = new THREE.QuadraticBezierCurve(this.currentPoint.clone(), new THREE.Vector2(aCPx, aCPy), new THREE.Vector2(aX, aY));\n      this.curves.push(curve);\n      this.currentPoint.set(aX, aY);\n    },\n    bezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      var curve = new THREE.CubicBezierCurve(this.currentPoint.clone(), new THREE.Vector2(aCP1x, aCP1y), new THREE.Vector2(aCP2x, aCP2y), new THREE.Vector2(aX, aY));\n      this.curves.push(curve);\n      this.currentPoint.set(aX, aY);\n    },\n    splineThru: function splineThru(pts\n    /*Array of Vector*/\n    ) {\n      var npts = [this.currentPoint.clone()].concat(pts);\n      var curve = new THREE.SplineCurve(npts);\n      this.curves.push(curve);\n      this.currentPoint.copy(pts[pts.length - 1]);\n    },\n    arc: function arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      var x0 = this.currentPoint.x;\n      var y0 = this.currentPoint.y;\n      this.absarc(aX + x0, aY + y0, aRadius, aStartAngle, aEndAngle, aClockwise);\n    },\n    absarc: function absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n      this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n    },\n    ellipse: function ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n      var x0 = this.currentPoint.x;\n      var y0 = this.currentPoint.y;\n      this.absellipse(aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n    },\n    absellipse: function absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n      var curve = new THREE.EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);\n\n      if (this.curves.length > 0) {\n        // if a previous curve is present, attempt to join\n        var firstPoint = curve.getPoint(0);\n\n        if (!firstPoint.equals(this.currentPoint)) {\n          this.lineTo(firstPoint.x, firstPoint.y);\n        }\n      }\n\n      this.curves.push(curve);\n      var lastPoint = curve.getPoint(1);\n      this.currentPoint.copy(lastPoint);\n    }\n  }); // minimal class for proxing functions to Path. Replaces old \"extractSubpaths()\"\n\n  THREE.ShapePath = function () {\n    this.subPaths = [];\n    this.currentPath = null;\n  };\n\n  THREE.ShapePath.prototype = {\n    moveTo: function moveTo(x, y) {\n      this.currentPath = new THREE.Path();\n      this.subPaths.push(this.currentPath);\n      this.currentPath.moveTo(x, y);\n    },\n    lineTo: function lineTo(x, y) {\n      this.currentPath.lineTo(x, y);\n    },\n    quadraticCurveTo: function quadraticCurveTo(aCPx, aCPy, aX, aY) {\n      this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);\n    },\n    bezierCurveTo: function bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {\n      this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);\n    },\n    splineThru: function splineThru(pts) {\n      this.currentPath.splineThru(pts);\n    },\n    toShapes: function toShapes(isCCW, noHoles) {\n      function toShapesNoHoles(inSubpaths) {\n        var shapes = [];\n\n        for (var i = 0, l = inSubpaths.length; i < l; i++) {\n          var tmpPath = inSubpaths[i];\n          var tmpShape = new THREE.Shape();\n          tmpShape.curves = tmpPath.curves;\n          shapes.push(tmpShape);\n        }\n\n        return shapes;\n      }\n\n      function isPointInsidePolygon(inPt, inPolygon) {\n        var polyLen = inPolygon.length; // inPt on polygon contour => immediate success    or\n        // toggling of inside/outside at every single! intersection point of an edge\n        //  with the horizontal line through inPt, left of inPt\n        //  not counting lowerY endpoints of edges and whole edges on that line\n\n        var inside = false;\n\n        for (var p = polyLen - 1, q = 0; q < polyLen; p = q++) {\n          var edgeLowPt = inPolygon[p];\n          var edgeHighPt = inPolygon[q];\n          var edgeDx = edgeHighPt.x - edgeLowPt.x;\n          var edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n          if (Math.abs(edgeDy) > Number.EPSILON) {\n            // not parallel\n            if (edgeDy < 0) {\n              edgeLowPt = inPolygon[q];\n              edgeDx = -edgeDx;\n              edgeHighPt = inPolygon[p];\n              edgeDy = -edgeDy;\n            }\n\n            if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;\n\n            if (inPt.y === edgeLowPt.y) {\n              if (inPt.x === edgeLowPt.x) return true; // inPt is on contour ?\n              // continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n            } else {\n              var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);\n              if (perpEdge === 0) return true; // inPt is on contour ?\n\n              if (perpEdge < 0) continue;\n              inside = !inside; // true intersection left of inPt\n            }\n          } else {\n            // parallel or collinear\n            if (inPt.y !== edgeLowPt.y) continue; // parallel\n            // edge lies on the same horizontal line as inPt\n\n            if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true; // inPt: Point on contour !\n            // continue;\n          }\n        }\n\n        return inside;\n      }\n\n      var isClockWise = THREE.ShapeUtils.isClockWise;\n      var subPaths = this.subPaths;\n      if (subPaths.length === 0) return [];\n      if (noHoles === true) return toShapesNoHoles(subPaths);\n      var solid,\n          tmpPath,\n          tmpShape,\n          shapes = [];\n\n      if (subPaths.length === 1) {\n        tmpPath = subPaths[0];\n        tmpShape = new THREE.Shape();\n        tmpShape.curves = tmpPath.curves;\n        shapes.push(tmpShape);\n        return shapes;\n      }\n\n      var holesFirst = !isClockWise(subPaths[0].getPoints());\n      holesFirst = isCCW ? !holesFirst : holesFirst; // console.log(\"Holes first\", holesFirst);\n\n      var betterShapeHoles = [];\n      var newShapes = [];\n      var newShapeHoles = [];\n      var mainIdx = 0;\n      var tmpPoints;\n      newShapes[mainIdx] = undefined;\n      newShapeHoles[mainIdx] = [];\n\n      for (var i = 0, l = subPaths.length; i < l; i++) {\n        tmpPath = subPaths[i];\n        tmpPoints = tmpPath.getPoints();\n        solid = isClockWise(tmpPoints);\n        solid = isCCW ? !solid : solid;\n\n        if (solid) {\n          if (!holesFirst && newShapes[mainIdx]) mainIdx++;\n          newShapes[mainIdx] = {\n            s: new THREE.Shape(),\n            p: tmpPoints\n          };\n          newShapes[mainIdx].s.curves = tmpPath.curves;\n          if (holesFirst) mainIdx++;\n          newShapeHoles[mainIdx] = []; //console.log('cw', i);\n        } else {\n          newShapeHoles[mainIdx].push({\n            h: tmpPath,\n            p: tmpPoints[0]\n          }); //console.log('ccw', i);\n        }\n      } // only Holes? -> probably all Shapes with wrong orientation\n\n\n      if (!newShapes[0]) return toShapesNoHoles(subPaths);\n\n      if (newShapes.length > 1) {\n        var ambiguous = false;\n        var toChange = [];\n\n        for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          betterShapeHoles[sIdx] = [];\n        }\n\n        for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {\n          var sho = newShapeHoles[sIdx];\n\n          for (var hIdx = 0; hIdx < sho.length; hIdx++) {\n            var ho = sho[hIdx];\n            var hole_unassigned = true;\n\n            for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {\n              if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {\n                if (sIdx !== s2Idx) toChange.push({\n                  froms: sIdx,\n                  tos: s2Idx,\n                  hole: hIdx\n                });\n\n                if (hole_unassigned) {\n                  hole_unassigned = false;\n                  betterShapeHoles[s2Idx].push(ho);\n                } else {\n                  ambiguous = true;\n                }\n              }\n            }\n\n            if (hole_unassigned) {\n              betterShapeHoles[sIdx].push(ho);\n            }\n          }\n        } // console.log(\"ambiguous: \", ambiguous);\n\n\n        if (toChange.length > 0) {\n          // console.log(\"to change: \", toChange);\n          if (!ambiguous) newShapeHoles = betterShapeHoles;\n        }\n      }\n\n      var tmpHoles;\n\n      for (var i = 0, il = newShapes.length; i < il; i++) {\n        tmpShape = newShapes[i].s;\n        shapes.push(tmpShape);\n        tmpHoles = newShapeHoles[i];\n\n        for (var j = 0, jl = tmpHoles.length; j < jl; j++) {\n          tmpShape.holes.push(tmpHoles[j].h);\n        }\n      } //console.log(\"shape\", shapes);\n\n\n      return shapes;\n    } // File:src/extras/core/Shape.js\n\n    /**\n     * @author zz85 / http://www.lab4games.net/zz85/blog\n     * Defines a 2d shape plane using paths.\n     **/\n    // STEP 1 Create a path.\n    // STEP 2 Turn path into shape.\n    // STEP 3 ExtrudeGeometry takes in Shape/Shapes\n    // STEP 3a - Extract points from each shape, turn to vertices\n    // STEP 3b - Triangulate each shape, add faces.\n\n  };\n\n  THREE.Shape = function () {\n    THREE.Path.apply(this, arguments);\n    this.holes = [];\n  };\n\n  THREE.Shape.prototype = Object.assign(Object.create(THREE.Path.prototype), {\n    constructor: THREE.Shape,\n    // Convenience method to return ExtrudeGeometry\n    extrude: function extrude(options) {\n      return new THREE.ExtrudeGeometry(this, options);\n    },\n    // Convenience method to return ShapeGeometry\n    makeGeometry: function makeGeometry(options) {\n      return new THREE.ShapeGeometry(this, options);\n    },\n    getPointsHoles: function getPointsHoles(divisions) {\n      var holesPts = [];\n\n      for (var i = 0, l = this.holes.length; i < l; i++) {\n        holesPts[i] = this.holes[i].getPoints(divisions);\n      }\n\n      return holesPts;\n    },\n    // Get points of shape and holes (keypoints based on segments parameter)\n    extractAllPoints: function extractAllPoints(divisions) {\n      return {\n        shape: this.getPoints(divisions),\n        holes: this.getPointsHoles(divisions)\n      };\n    },\n    extractPoints: function extractPoints(divisions) {\n      return this.extractAllPoints(divisions);\n    }\n  }); // File:src/extras/curves/LineCurve.js\n\n  /**************************************************************\n   *\tLine\n   **************************************************************/\n\n  THREE.LineCurve = function (v1, v2) {\n    this.v1 = v1;\n    this.v2 = v2;\n  };\n\n  THREE.LineCurve.prototype = Object.create(THREE.Curve.prototype);\n  THREE.LineCurve.prototype.constructor = THREE.LineCurve;\n\n  THREE.LineCurve.prototype.getPoint = function (t) {\n    if (t === 1) {\n      return this.v2.clone();\n    }\n\n    var point = this.v2.clone().sub(this.v1);\n    point.multiplyScalar(t).add(this.v1);\n    return point;\n  }; // Line curve is linear, so we can overwrite default getPointAt\n\n\n  THREE.LineCurve.prototype.getPointAt = function (u) {\n    return this.getPoint(u);\n  };\n\n  THREE.LineCurve.prototype.getTangent = function (t) {\n    var tangent = this.v2.clone().sub(this.v1);\n    return tangent.normalize();\n  }; // File:src/extras/curves/QuadraticBezierCurve.js\n\n  /**************************************************************\n   *\tQuadratic Bezier curve\n   **************************************************************/\n\n\n  THREE.QuadraticBezierCurve = function (v0, v1, v2) {\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n  };\n\n  THREE.QuadraticBezierCurve.prototype = Object.create(THREE.Curve.prototype);\n  THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\n\n  THREE.QuadraticBezierCurve.prototype.getPoint = function (t) {\n    var b2 = THREE.ShapeUtils.b2;\n    return new THREE.Vector2(b2(t, this.v0.x, this.v1.x, this.v2.x), b2(t, this.v0.y, this.v1.y, this.v2.y));\n  };\n\n  THREE.QuadraticBezierCurve.prototype.getTangent = function (t) {\n    var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\n    return new THREE.Vector2(tangentQuadraticBezier(t, this.v0.x, this.v1.x, this.v2.x), tangentQuadraticBezier(t, this.v0.y, this.v1.y, this.v2.y)).normalize();\n  }; // File:src/extras/curves/CubicBezierCurve.js\n\n  /**************************************************************\n   *\tCubic Bezier curve\n   **************************************************************/\n\n\n  THREE.CubicBezierCurve = function (v0, v1, v2, v3) {\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n  };\n\n  THREE.CubicBezierCurve.prototype = Object.create(THREE.Curve.prototype);\n  THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\n\n  THREE.CubicBezierCurve.prototype.getPoint = function (t) {\n    var b3 = THREE.ShapeUtils.b3;\n    return new THREE.Vector2(b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y));\n  };\n\n  THREE.CubicBezierCurve.prototype.getTangent = function (t) {\n    var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\n    return new THREE.Vector2(tangentCubicBezier(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), tangentCubicBezier(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y)).normalize();\n  }; // File:src/extras/curves/SplineCurve.js\n\n  /**************************************************************\n   *\tSpline curve\n   **************************************************************/\n\n\n  THREE.SplineCurve = function (points\n  /* array of Vector2 */\n  ) {\n    this.points = points == undefined ? [] : points;\n  };\n\n  THREE.SplineCurve.prototype = Object.create(THREE.Curve.prototype);\n  THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\n\n  THREE.SplineCurve.prototype.getPoint = function (t) {\n    var points = this.points;\n    var point = (points.length - 1) * t;\n    var intPoint = Math.floor(point);\n    var weight = point - intPoint;\n    var point0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n    var point1 = points[intPoint];\n    var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    var interpolate = THREE.CurveUtils.interpolate;\n    return new THREE.Vector2(interpolate(point0.x, point1.x, point2.x, point3.x, weight), interpolate(point0.y, point1.y, point2.y, point3.y, weight));\n  }; // File:src/extras/curves/EllipseCurve.js\n\n  /**************************************************************\n   *\tEllipse curve\n   **************************************************************/\n\n\n  THREE.EllipseCurve = function (aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {\n    this.aX = aX;\n    this.aY = aY;\n    this.xRadius = xRadius;\n    this.yRadius = yRadius;\n    this.aStartAngle = aStartAngle;\n    this.aEndAngle = aEndAngle;\n    this.aClockwise = aClockwise;\n    this.aRotation = aRotation || 0;\n  };\n\n  THREE.EllipseCurve.prototype = Object.create(THREE.Curve.prototype);\n  THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\n\n  THREE.EllipseCurve.prototype.getPoint = function (t) {\n    var twoPi = Math.PI * 2;\n    var deltaAngle = this.aEndAngle - this.aStartAngle;\n    var samePoints = Math.abs(deltaAngle) < Number.EPSILON; // ensures that deltaAngle is 0 .. 2 PI\n\n    while (deltaAngle < 0) {\n      deltaAngle += twoPi;\n    }\n\n    while (deltaAngle > twoPi) {\n      deltaAngle -= twoPi;\n    }\n\n    if (deltaAngle < Number.EPSILON) {\n      if (samePoints) {\n        deltaAngle = 0;\n      } else {\n        deltaAngle = twoPi;\n      }\n    }\n\n    if (this.aClockwise === true && !samePoints) {\n      if (deltaAngle === twoPi) {\n        deltaAngle = -twoPi;\n      } else {\n        deltaAngle = deltaAngle - twoPi;\n      }\n    }\n\n    var angle = this.aStartAngle + t * deltaAngle;\n    var x = this.aX + this.xRadius * Math.cos(angle);\n    var y = this.aY + this.yRadius * Math.sin(angle);\n\n    if (this.aRotation !== 0) {\n      var cos = Math.cos(this.aRotation);\n      var sin = Math.sin(this.aRotation);\n      var tx = x - this.aX;\n      var ty = y - this.aY; // Rotate the point about the center of the ellipse.\n\n      x = tx * cos - ty * sin + this.aX;\n      y = tx * sin + ty * cos + this.aY;\n    }\n\n    return new THREE.Vector2(x, y);\n  }; // File:src/extras/curves/ArcCurve.js\n\n  /**************************************************************\n   *\tArc curve\n   **************************************************************/\n\n\n  THREE.ArcCurve = function (aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {\n    THREE.EllipseCurve.call(this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);\n  };\n\n  THREE.ArcCurve.prototype = Object.create(THREE.EllipseCurve.prototype);\n  THREE.ArcCurve.prototype.constructor = THREE.ArcCurve; // File:src/extras/curves/LineCurve3.js\n\n  /**************************************************************\n   *\tLine3D\n   **************************************************************/\n\n  THREE.LineCurve3 = THREE.Curve.create(function (v1, v2) {\n    this.v1 = v1;\n    this.v2 = v2;\n  }, function (t) {\n    if (t === 1) {\n      return this.v2.clone();\n    }\n\n    var vector = new THREE.Vector3();\n    vector.subVectors(this.v2, this.v1); // diff\n\n    vector.multiplyScalar(t);\n    vector.add(this.v1);\n    return vector;\n  }); // File:src/extras/curves/QuadraticBezierCurve3.js\n\n  /**************************************************************\n   *\tQuadratic Bezier 3D curve\n   **************************************************************/\n\n  THREE.QuadraticBezierCurve3 = THREE.Curve.create(function (v0, v1, v2) {\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n  }, function (t) {\n    var b2 = THREE.ShapeUtils.b2;\n    return new THREE.Vector3(b2(t, this.v0.x, this.v1.x, this.v2.x), b2(t, this.v0.y, this.v1.y, this.v2.y), b2(t, this.v0.z, this.v1.z, this.v2.z));\n  }); // File:src/extras/curves/CubicBezierCurve3.js\n\n  /**************************************************************\n   *\tCubic Bezier 3D curve\n   **************************************************************/\n\n  THREE.CubicBezierCurve3 = THREE.Curve.create(function (v0, v1, v2, v3) {\n    this.v0 = v0;\n    this.v1 = v1;\n    this.v2 = v2;\n    this.v3 = v3;\n  }, function (t) {\n    var b3 = THREE.ShapeUtils.b3;\n    return new THREE.Vector3(b3(t, this.v0.x, this.v1.x, this.v2.x, this.v3.x), b3(t, this.v0.y, this.v1.y, this.v2.y, this.v3.y), b3(t, this.v0.z, this.v1.z, this.v2.z, this.v3.z));\n  }); // File:src/extras/curves/SplineCurve3.js\n\n  /**************************************************************\n   *\tSpline 3D curve\n   **************************************************************/\n\n  THREE.SplineCurve3 = THREE.Curve.create(function (points\n  /* array of Vector3 */\n  ) {\n    console.warn('THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3');\n    this.points = points == undefined ? [] : points;\n  }, function (t) {\n    var points = this.points;\n    var point = (points.length - 1) * t;\n    var intPoint = Math.floor(point);\n    var weight = point - intPoint;\n    var point0 = points[intPoint == 0 ? intPoint : intPoint - 1];\n    var point1 = points[intPoint];\n    var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n    var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n    var interpolate = THREE.CurveUtils.interpolate;\n    return new THREE.Vector3(interpolate(point0.x, point1.x, point2.x, point3.x, weight), interpolate(point0.y, point1.y, point2.y, point3.y, weight), interpolate(point0.z, point1.z, point2.z, point3.z, weight));\n  }); // File:src/extras/curves/CatmullRomCurve3.js\n\n  /**\n   * @author zz85 https://github.com/zz85\n   *\n   * Centripetal CatmullRom Curve - which is useful for avoiding\n   * cusps and self-intersections in non-uniform catmull rom curves.\n   * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n   *\n   * curve.type accepts centripetal(default), chordal and catmullrom\n   * curve.tension is used for catmullrom which defaults to 0.5\n   */\n\n  THREE.CatmullRomCurve3 = function () {\n    var tmp = new THREE.Vector3(),\n        px = new CubicPoly(),\n        py = new CubicPoly(),\n        pz = new CubicPoly();\n    /*\n    Based on an optimized c++ solution in\n     - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n     - http://ideone.com/NoEbVM\n    \tThis CubicPoly class could be used for reusing some variables and calculations,\n    but for three.js curve use, it could be possible inlined and flatten into a single function call\n    which can be placed in CurveUtils.\n    */\n\n    function CubicPoly() {}\n    /*\n     * Compute coefficients for a cubic polynomial\n     *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n     * such that\n     *   p(0) = x0, p(1) = x1\n     *  and\n     *   p'(0) = t0, p'(1) = t1.\n     */\n\n\n    CubicPoly.prototype.init = function (x0, x1, t0, t1) {\n      this.c0 = x0;\n      this.c1 = t0;\n      this.c2 = -3 * x0 + 3 * x1 - 2 * t0 - t1;\n      this.c3 = 2 * x0 - 2 * x1 + t0 + t1;\n    };\n\n    CubicPoly.prototype.initNonuniformCatmullRom = function (x0, x1, x2, x3, dt0, dt1, dt2) {\n      // compute tangents when parameterized in [t1,t2]\n      var t1 = (x1 - x0) / dt0 - (x2 - x0) / (dt0 + dt1) + (x2 - x1) / dt1;\n      var t2 = (x2 - x1) / dt1 - (x3 - x1) / (dt1 + dt2) + (x3 - x2) / dt2; // rescale tangents for parametrization in [0,1]\n\n      t1 *= dt1;\n      t2 *= dt1; // initCubicPoly\n\n      this.init(x1, x2, t1, t2);\n    }; // standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\n\n\n    CubicPoly.prototype.initCatmullRom = function (x0, x1, x2, x3, tension) {\n      this.init(x1, x2, tension * (x2 - x0), tension * (x3 - x1));\n    };\n\n    CubicPoly.prototype.calc = function (t) {\n      var t2 = t * t;\n      var t3 = t2 * t;\n      return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\n    }; // Subclass Three.js curve\n\n\n    return THREE.Curve.create(function (p\n    /* array of Vector3 */\n    ) {\n      this.points = p || [];\n      this.closed = false;\n    }, function (t) {\n      var points = this.points,\n          point,\n          intPoint,\n          weight,\n          l;\n      l = points.length;\n      if (l < 2) console.log('duh, you need at least 2 points');\n      point = (l - (this.closed ? 0 : 1)) * t;\n      intPoint = Math.floor(point);\n      weight = point - intPoint;\n\n      if (this.closed) {\n        intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / points.length) + 1) * points.length;\n      } else if (weight === 0 && intPoint === l - 1) {\n        intPoint = l - 2;\n        weight = 1;\n      }\n\n      var p0, p1, p2, p3; // 4 points\n\n      if (this.closed || intPoint > 0) {\n        p0 = points[(intPoint - 1) % l];\n      } else {\n        // extrapolate first point\n        tmp.subVectors(points[0], points[1]).add(points[0]);\n        p0 = tmp;\n      }\n\n      p1 = points[intPoint % l];\n      p2 = points[(intPoint + 1) % l];\n\n      if (this.closed || intPoint + 2 < l) {\n        p3 = points[(intPoint + 2) % l];\n      } else {\n        // extrapolate last point\n        tmp.subVectors(points[l - 1], points[l - 2]).add(points[l - 1]);\n        p3 = tmp;\n      }\n\n      if (this.type === undefined || this.type === 'centripetal' || this.type === 'chordal') {\n        // init Centripetal / Chordal Catmull-Rom\n        var pow = this.type === 'chordal' ? 0.5 : 0.25;\n        var dt0 = Math.pow(p0.distanceToSquared(p1), pow);\n        var dt1 = Math.pow(p1.distanceToSquared(p2), pow);\n        var dt2 = Math.pow(p2.distanceToSquared(p3), pow); // safety check for repeated points\n\n        if (dt1 < 1e-4) dt1 = 1.0;\n        if (dt0 < 1e-4) dt0 = dt1;\n        if (dt2 < 1e-4) dt2 = dt1;\n        px.initNonuniformCatmullRom(p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2);\n        py.initNonuniformCatmullRom(p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2);\n        pz.initNonuniformCatmullRom(p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2);\n      } else if (this.type === 'catmullrom') {\n        var tension = this.tension !== undefined ? this.tension : 0.5;\n        px.initCatmullRom(p0.x, p1.x, p2.x, p3.x, tension);\n        py.initCatmullRom(p0.y, p1.y, p2.y, p3.y, tension);\n        pz.initCatmullRom(p0.z, p1.z, p2.z, p3.z, tension);\n      }\n\n      var v = new THREE.Vector3(px.calc(weight), py.calc(weight), pz.calc(weight));\n      return v;\n    });\n  }(); // File:src/extras/curves/ClosedSplineCurve3.js\n\n  /**************************************************************\n   *\tClosed Spline 3D curve\n   **************************************************************/\n\n\n  THREE.ClosedSplineCurve3 = function (points) {\n    console.warn('THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.');\n    THREE.CatmullRomCurve3.call(this, points);\n    this.type = 'catmullrom';\n    this.closed = true;\n  };\n\n  THREE.ClosedSplineCurve3.prototype = Object.create(THREE.CatmullRomCurve3.prototype); // File:src/extras/geometries/BoxGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\n   */\n\n  THREE.BoxGeometry = function (width, height, depth, widthSegments, heightSegments, depthSegments) {\n    THREE.Geometry.call(this);\n    this.type = 'BoxGeometry';\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments\n    };\n    this.fromBufferGeometry(new THREE.BoxBufferGeometry(width, height, depth, widthSegments, heightSegments, depthSegments));\n    this.mergeVertices();\n  };\n\n  THREE.BoxGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\n  THREE.CubeGeometry = THREE.BoxGeometry; // File:src/extras/geometries/BoxBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  THREE.BoxBufferGeometry = function (width, height, depth, widthSegments, heightSegments, depthSegments) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'BoxBufferGeometry';\n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      depthSegments: depthSegments\n    };\n    var scope = this; // segments\n\n    widthSegments = Math.floor(widthSegments) || 1;\n    heightSegments = Math.floor(heightSegments) || 1;\n    depthSegments = Math.floor(depthSegments) || 1; // these are used to calculate buffer length\n\n    var vertexCount = calculateVertexCount(widthSegments, heightSegments, depthSegments);\n    var indexCount = calculateIndexCount(widthSegments, heightSegments, depthSegments); // buffers\n\n    var indices = new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount);\n    var vertices = new Float32Array(vertexCount * 3);\n    var normals = new Float32Array(vertexCount * 3);\n    var uvs = new Float32Array(vertexCount * 2); // offset variables\n\n    var vertexBufferOffset = 0;\n    var uvBufferOffset = 0;\n    var indexBufferOffset = 0;\n    var numberOfVertices = 0; // group variables\n\n    var groupStart = 0; // build each side of the box geometry\n\n    buildPlane('z', 'y', 'x', -1, -1, depth, height, width, depthSegments, heightSegments, 0); // px\n\n    buildPlane('z', 'y', 'x', 1, -1, depth, height, -width, depthSegments, heightSegments, 1); // nx\n\n    buildPlane('x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2); // py\n\n    buildPlane('x', 'z', 'y', 1, -1, width, depth, -height, widthSegments, depthSegments, 3); // ny\n\n    buildPlane('x', 'y', 'z', 1, -1, width, height, depth, widthSegments, heightSegments, 4); // pz\n\n    buildPlane('x', 'y', 'z', -1, -1, width, height, -depth, widthSegments, heightSegments, 5); // nz\n    // build geometry\n\n    this.setIndex(new THREE.BufferAttribute(indices, 1));\n    this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n    this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2)); // helper functions\n\n    function calculateVertexCount(w, h, d) {\n      var vertices = 0; // calculate the amount of vertices for each side (plane)\n\n      vertices += (w + 1) * (h + 1) * 2; // xy\n\n      vertices += (w + 1) * (d + 1) * 2; // xz\n\n      vertices += (d + 1) * (h + 1) * 2; // zy\n\n      return vertices;\n    }\n\n    function calculateIndexCount(w, h, d) {\n      var index = 0; // calculate the amount of squares for each side\n\n      index += w * h * 2; // xy\n\n      index += w * d * 2; // xz\n\n      index += d * h * 2; // zy\n\n      return index * 6; // two triangles per square => six vertices per square\n    }\n\n    function buildPlane(u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex) {\n      var segmentWidth = width / gridX;\n      var segmentHeight = height / gridY;\n      var widthHalf = width / 2;\n      var heightHalf = height / 2;\n      var depthHalf = depth / 2;\n      var gridX1 = gridX + 1;\n      var gridY1 = gridY + 1;\n      var vertexCounter = 0;\n      var groupCount = 0;\n      var vector = new THREE.Vector3(); // generate vertices, normals and uvs\n\n      for (var iy = 0; iy < gridY1; iy++) {\n        var y = iy * segmentHeight - heightHalf;\n\n        for (var ix = 0; ix < gridX1; ix++) {\n          var x = ix * segmentWidth - widthHalf; // set values to correct vector component\n\n          vector[u] = x * udir;\n          vector[v] = y * vdir;\n          vector[w] = depthHalf; // now apply vector to vertex buffer\n\n          vertices[vertexBufferOffset] = vector.x;\n          vertices[vertexBufferOffset + 1] = vector.y;\n          vertices[vertexBufferOffset + 2] = vector.z; // set values to correct vector component\n\n          vector[u] = 0;\n          vector[v] = 0;\n          vector[w] = depth > 0 ? 1 : -1; // now apply vector to normal buffer\n\n          normals[vertexBufferOffset] = vector.x;\n          normals[vertexBufferOffset + 1] = vector.y;\n          normals[vertexBufferOffset + 2] = vector.z; // uvs\n\n          uvs[uvBufferOffset] = ix / gridX;\n          uvs[uvBufferOffset + 1] = 1 - iy / gridY; // update offsets and counters\n\n          vertexBufferOffset += 3;\n          uvBufferOffset += 2;\n          vertexCounter += 1;\n        }\n      } // 1. you need three indices to draw a single face\n      // 2. a single segment consists of two faces\n      // 3. so we need to generate six (2*3) indices per segment\n\n\n      for (iy = 0; iy < gridY; iy++) {\n        for (ix = 0; ix < gridX; ix++) {\n          // indices\n          var a = numberOfVertices + ix + gridX1 * iy;\n          var b = numberOfVertices + ix + gridX1 * (iy + 1);\n          var c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);\n          var d = numberOfVertices + (ix + 1) + gridX1 * iy; // face one\n\n          indices[indexBufferOffset] = a;\n          indices[indexBufferOffset + 1] = b;\n          indices[indexBufferOffset + 2] = d; // face two\n\n          indices[indexBufferOffset + 3] = b;\n          indices[indexBufferOffset + 4] = c;\n          indices[indexBufferOffset + 5] = d; // update offsets and counters\n\n          indexBufferOffset += 6;\n          groupCount += 6;\n        }\n      } // add a group to the geometry. this will ensure multi material support\n\n\n      scope.addGroup(groupStart, groupCount, materialIndex); // calculate new start value for groups\n\n      groupStart += groupCount; // update total number of vertices\n\n      numberOfVertices += vertexCounter;\n    }\n  };\n\n  THREE.BoxBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry; // File:src/extras/geometries/CircleGeometry.js\n\n  /**\n   * @author hughes\n   */\n\n  THREE.CircleGeometry = function (radius, segments, thetaStart, thetaLength) {\n    THREE.Geometry.call(this);\n    this.type = 'CircleGeometry';\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new THREE.CircleBufferGeometry(radius, segments, thetaStart, thetaLength));\n  };\n\n  THREE.CircleGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry; // File:src/extras/geometries/CircleBufferGeometry.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   */\n\n  THREE.CircleBufferGeometry = function (radius, segments, thetaStart, thetaLength) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'CircleBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      segments: segments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    radius = radius || 50;\n    segments = segments !== undefined ? Math.max(3, segments) : 8;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n    var vertices = segments + 2;\n    var positions = new Float32Array(vertices * 3);\n    var normals = new Float32Array(vertices * 3);\n    var uvs = new Float32Array(vertices * 2); // center data is already zero, but need to set a few extras\n\n    normals[2] = 1.0;\n    uvs[0] = 0.5;\n    uvs[1] = 0.5;\n\n    for (var s = 0, i = 3, ii = 2; s <= segments; s++, i += 3, ii += 2) {\n      var segment = thetaStart + s / segments * thetaLength;\n      positions[i] = radius * Math.cos(segment);\n      positions[i + 1] = radius * Math.sin(segment);\n      normals[i + 2] = 1; // normal z\n\n      uvs[ii] = (positions[i] / radius + 1) / 2;\n      uvs[ii + 1] = (positions[i + 1] / radius + 1) / 2;\n    }\n\n    var indices = [];\n\n    for (var i = 1; i <= segments; i++) {\n      indices.push(i, i + 1, 0);\n    }\n\n    this.setIndex(new THREE.BufferAttribute(new Uint16Array(indices), 1));\n    this.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n    this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n    this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius);\n  };\n\n  THREE.CircleBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry; // File:src/extras/geometries/CylinderBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  THREE.CylinderBufferGeometry = function (radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'CylinderBufferGeometry';\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    var scope = this;\n    radiusTop = radiusTop !== undefined ? radiusTop : 20;\n    radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\n    height = height !== undefined ? height : 100;\n    radialSegments = Math.floor(radialSegments) || 8;\n    heightSegments = Math.floor(heightSegments) || 1;\n    openEnded = openEnded !== undefined ? openEnded : false;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0.0;\n    thetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI; // used to calculate buffer length\n\n    var nbCap = 0;\n\n    if (openEnded === false) {\n      if (radiusTop > 0) nbCap++;\n      if (radiusBottom > 0) nbCap++;\n    }\n\n    var vertexCount = calculateVertexCount();\n    var indexCount = calculateIndexCount(); // buffers\n\n    var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n    var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n    var index = 0,\n        indexOffset = 0,\n        indexArray = [],\n        halfHeight = height / 2; // group variables\n\n    var groupStart = 0; // generate geometry\n\n    generateTorso();\n\n    if (openEnded === false) {\n      if (radiusTop > 0) generateCap(true);\n      if (radiusBottom > 0) generateCap(false);\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.addAttribute('position', vertices);\n    this.addAttribute('normal', normals);\n    this.addAttribute('uv', uvs); // helper functions\n\n    function calculateVertexCount() {\n      var count = (radialSegments + 1) * (heightSegments + 1);\n\n      if (openEnded === false) {\n        count += (radialSegments + 1) * nbCap + radialSegments * nbCap;\n      }\n\n      return count;\n    }\n\n    function calculateIndexCount() {\n      var count = radialSegments * heightSegments * 2 * 3;\n\n      if (openEnded === false) {\n        count += radialSegments * nbCap * 3;\n      }\n\n      return count;\n    }\n\n    function generateTorso() {\n      var x, y;\n      var normal = new THREE.Vector3();\n      var vertex = new THREE.Vector3();\n      var groupCount = 0; // this will be used to calculate the normal\n\n      var tanTheta = (radiusBottom - radiusTop) / height; // generate vertices, normals and uvs\n\n      for (y = 0; y <= heightSegments; y++) {\n        var indexRow = [];\n        var v = y / heightSegments; // calculate the radius of the current row\n\n        var radius = v * (radiusBottom - radiusTop) + radiusTop;\n\n        for (x = 0; x <= radialSegments; x++) {\n          var u = x / radialSegments; // vertex\n\n          vertex.x = radius * Math.sin(u * thetaLength + thetaStart);\n          vertex.y = -v * height + halfHeight;\n          vertex.z = radius * Math.cos(u * thetaLength + thetaStart);\n          vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n          normal.copy(vertex); // handle special case if radiusTop/radiusBottom is zero\n\n          if (radiusTop === 0 && y === 0 || radiusBottom === 0 && y === heightSegments) {\n            normal.x = Math.sin(u * thetaLength + thetaStart);\n            normal.z = Math.cos(u * thetaLength + thetaStart);\n          }\n\n          normal.setY(Math.sqrt(normal.x * normal.x + normal.z * normal.z) * tanTheta).normalize();\n          normals.setXYZ(index, normal.x, normal.y, normal.z); // uv\n\n          uvs.setXY(index, u, 1 - v); // save index of vertex in respective row\n\n          indexRow.push(index); // increase index\n\n          index++;\n        } // now save vertices of the row in our index array\n\n\n        indexArray.push(indexRow);\n      } // generate indices\n\n\n      for (x = 0; x < radialSegments; x++) {\n        for (y = 0; y < heightSegments; y++) {\n          // we use the index array to access the correct indices\n          var i1 = indexArray[y][x];\n          var i2 = indexArray[y + 1][x];\n          var i3 = indexArray[y + 1][x + 1];\n          var i4 = indexArray[y][x + 1]; // face one\n\n          indices.setX(indexOffset, i1);\n          indexOffset++;\n          indices.setX(indexOffset, i2);\n          indexOffset++;\n          indices.setX(indexOffset, i4);\n          indexOffset++; // face two\n\n          indices.setX(indexOffset, i2);\n          indexOffset++;\n          indices.setX(indexOffset, i3);\n          indexOffset++;\n          indices.setX(indexOffset, i4);\n          indexOffset++; // update counters\n\n          groupCount += 6;\n        }\n      } // add a group to the geometry. this will ensure multi material support\n\n\n      scope.addGroup(groupStart, groupCount, 0); // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n\n    function generateCap(top) {\n      var x, centerIndexStart, centerIndexEnd;\n      var uv = new THREE.Vector2();\n      var vertex = new THREE.Vector3();\n      var groupCount = 0;\n      var radius = top === true ? radiusTop : radiusBottom;\n      var sign = top === true ? 1 : -1; // save the index of the first center vertex\n\n      centerIndexStart = index; // first we generate the center vertex data of the cap.\n      // because the geometry needs one set of uvs per face,\n      // we must generate a center vertex per face/segment\n\n      for (x = 1; x <= radialSegments; x++) {\n        // vertex\n        vertices.setXYZ(index, 0, halfHeight * sign, 0); // normal\n\n        normals.setXYZ(index, 0, sign, 0); // uv\n\n        uv.x = 0.5;\n        uv.y = 0.5;\n        uvs.setXY(index, uv.x, uv.y); // increase index\n\n        index++;\n      } // save the index of the last center vertex\n\n\n      centerIndexEnd = index; // now we generate the surrounding vertices, normals and uvs\n\n      for (x = 0; x <= radialSegments; x++) {\n        var u = x / radialSegments;\n        var theta = u * thetaLength + thetaStart;\n        var cosTheta = Math.cos(theta);\n        var sinTheta = Math.sin(theta); // vertex\n\n        vertex.x = radius * sinTheta;\n        vertex.y = halfHeight * sign;\n        vertex.z = radius * cosTheta;\n        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n        normals.setXYZ(index, 0, sign, 0); // uv\n\n        uv.x = cosTheta * 0.5 + 0.5;\n        uv.y = sinTheta * 0.5 * sign + 0.5;\n        uvs.setXY(index, uv.x, uv.y); // increase index\n\n        index++;\n      } // generate indices\n\n\n      for (x = 0; x < radialSegments; x++) {\n        var c = centerIndexStart + x;\n        var i = centerIndexEnd + x;\n\n        if (top === true) {\n          // face top\n          indices.setX(indexOffset, i);\n          indexOffset++;\n          indices.setX(indexOffset, i + 1);\n          indexOffset++;\n          indices.setX(indexOffset, c);\n          indexOffset++;\n        } else {\n          // face bottom\n          indices.setX(indexOffset, i + 1);\n          indexOffset++;\n          indices.setX(indexOffset, i);\n          indexOffset++;\n          indices.setX(indexOffset, c);\n          indexOffset++;\n        } // update counters\n\n\n        groupCount += 3;\n      } // add a group to the geometry. this will ensure multi material support\n\n\n      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2); // calculate new start value for groups\n\n      groupStart += groupCount;\n    }\n  };\n\n  THREE.CylinderBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry; // File:src/extras/geometries/CylinderGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.CylinderGeometry = function (radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    THREE.Geometry.call(this);\n    this.type = 'CylinderGeometry';\n    this.parameters = {\n      radiusTop: radiusTop,\n      radiusBottom: radiusBottom,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new THREE.CylinderBufferGeometry(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength));\n    this.mergeVertices();\n  };\n\n  THREE.CylinderGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry; // File:src/extras/geometries/ConeBufferGeometry.js\n\n  /*\n   * @author: abelnation / http://github.com/abelnation\n   */\n\n  THREE.ConeBufferGeometry = function (radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    THREE.CylinderBufferGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n  };\n\n  THREE.ConeBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry; // File:src/extras/geometries/ConeGeometry.js\n\n  /**\n   * @author abelnation / http://github.com/abelnation\n   */\n\n  THREE.ConeGeometry = function (radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength) {\n    THREE.CylinderGeometry.call(this, 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);\n    this.type = 'ConeGeometry';\n    this.parameters = {\n      radius: radius,\n      height: height,\n      radialSegments: radialSegments,\n      heightSegments: heightSegments,\n      openEnded: openEnded,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n  };\n\n  THREE.ConeGeometry.prototype = Object.create(THREE.CylinderGeometry.prototype);\n  THREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry; // File:src/extras/geometries/EdgesGeometry.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n  THREE.EdgesGeometry = function (geometry, thresholdAngle) {\n    THREE.BufferGeometry.call(this);\n    thresholdAngle = thresholdAngle !== undefined ? thresholdAngle : 1;\n    var thresholdDot = Math.cos(THREE.Math.DEG2RAD * thresholdAngle);\n    var edge = [0, 0],\n        hash = {};\n\n    function sortFunction(a, b) {\n      return a - b;\n    }\n\n    var keys = ['a', 'b', 'c'];\n    var geometry2;\n\n    if (geometry instanceof THREE.BufferGeometry) {\n      geometry2 = new THREE.Geometry();\n      geometry2.fromBufferGeometry(geometry);\n    } else {\n      geometry2 = geometry.clone();\n    }\n\n    geometry2.mergeVertices();\n    geometry2.computeFaceNormals();\n    var vertices = geometry2.vertices;\n    var faces = geometry2.faces;\n\n    for (var i = 0, l = faces.length; i < l; i++) {\n      var face = faces[i];\n\n      for (var j = 0; j < 3; j++) {\n        edge[0] = face[keys[j]];\n        edge[1] = face[keys[(j + 1) % 3]];\n        edge.sort(sortFunction);\n        var key = edge.toString();\n\n        if (hash[key] === undefined) {\n          hash[key] = {\n            vert1: edge[0],\n            vert2: edge[1],\n            face1: i,\n            face2: undefined\n          };\n        } else {\n          hash[key].face2 = i;\n        }\n      }\n    }\n\n    var coords = [];\n\n    for (var key in hash) {\n      var h = hash[key];\n\n      if (h.face2 === undefined || faces[h.face1].normal.dot(faces[h.face2].normal) <= thresholdDot) {\n        var vertex = vertices[h.vert1];\n        coords.push(vertex.x);\n        coords.push(vertex.y);\n        coords.push(vertex.z);\n        vertex = vertices[h.vert2];\n        coords.push(vertex.x);\n        coords.push(vertex.y);\n        coords.push(vertex.z);\n      }\n    }\n\n    this.addAttribute('position', new THREE.BufferAttribute(new Float32Array(coords), 3));\n  };\n\n  THREE.EdgesGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry; // File:src/extras/geometries/ExtrudeGeometry.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Creates extruded geometry from a path shape.\n   *\n   * parameters = {\n   *\n   *  curveSegments: <int>, // number of points on the curves\n   *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n   *  amount: <int>, // Depth to extrude the shape\n   *\n   *  bevelEnabled: <bool>, // turn on bevel\n   *  bevelThickness: <float>, // how deep into the original shape bevel goes\n   *  bevelSize: <float>, // how far from shape outline is bevel\n   *  bevelSegments: <int>, // number of bevel layers\n   *\n   *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\n   *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\n   *\n   *  uvGenerator: <Object> // object that provides UV generator functions\n   *\n   * }\n   **/\n\n  THREE.ExtrudeGeometry = function (shapes, options) {\n    if (typeof shapes === \"undefined\") {\n      shapes = [];\n      return;\n    }\n\n    THREE.Geometry.call(this);\n    this.type = 'ExtrudeGeometry';\n    shapes = Array.isArray(shapes) ? shapes : [shapes];\n    this.addShapeList(shapes, options);\n    this.computeFaceNormals(); // can't really use automatic vertex normals\n    // as then front and back sides get smoothed too\n    // should do separate smoothing just for sides\n    //this.computeVertexNormals();\n    //console.log( \"took\", ( Date.now() - startTime ) );\n  };\n\n  THREE.ExtrudeGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\n\n  THREE.ExtrudeGeometry.prototype.addShapeList = function (shapes, options) {\n    var sl = shapes.length;\n\n    for (var s = 0; s < sl; s++) {\n      var shape = shapes[s];\n      this.addShape(shape, options);\n    }\n  };\n\n  THREE.ExtrudeGeometry.prototype.addShape = function (shape, options) {\n    var amount = options.amount !== undefined ? options.amount : 100;\n    var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\n\n    var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\n\n    var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n    var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\n\n    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n    var steps = options.steps !== undefined ? options.steps : 1;\n    var extrudePath = options.extrudePath;\n    var extrudePts,\n        extrudeByPath = false; // Use default WorldUVGenerator if no UV generators are specified.\n\n    var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\n    var splineTube, binormal, normal, position2;\n\n    if (extrudePath) {\n      extrudePts = extrudePath.getSpacedPoints(steps);\n      extrudeByPath = true;\n      bevelEnabled = false; // bevels not supported for path extrusion\n      // SETUP TNB variables\n      // Reuse TNB from TubeGeomtry for now.\n      // TODO1 - have a .isClosed in spline?\n\n      splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false); // console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n      binormal = new THREE.Vector3();\n      normal = new THREE.Vector3();\n      position2 = new THREE.Vector3();\n    } // Safeguards if bevels are not enabled\n\n\n    if (!bevelEnabled) {\n      bevelSegments = 0;\n      bevelThickness = 0;\n      bevelSize = 0;\n    } // Variables initialization\n\n\n    var ahole, h, hl; // looping of holes\n\n    var scope = this;\n    var shapesOffset = this.vertices.length;\n    var shapePoints = shape.extractPoints(curveSegments);\n    var vertices = shapePoints.shape;\n    var holes = shapePoints.holes;\n    var reverse = !THREE.ShapeUtils.isClockWise(vertices);\n\n    if (reverse) {\n      vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n\n        if (THREE.ShapeUtils.isClockWise(ahole)) {\n          holes[h] = ahole.reverse();\n        }\n      }\n\n      reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\n    }\n\n    var faces = THREE.ShapeUtils.triangulateShape(vertices, holes);\n    /* Vertices */\n\n    var contour = vertices; // vertices has all points but contour has only points of circumference\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n      vertices = vertices.concat(ahole);\n    }\n\n    function scalePt2(pt, vec, size) {\n      if (!vec) console.error(\"THREE.ExtrudeGeometry: vec does not exist\");\n      return vec.clone().multiplyScalar(size).add(pt);\n    }\n\n    var b,\n        bs,\n        t,\n        z,\n        vert,\n        vlen = vertices.length,\n        face,\n        flen = faces.length; // Find directions for point movement\n\n    function getBevelVec(inPt, inPrev, inNext) {\n      // computes for inPt the corresponding point inPt' on a new contour\n      //   shifted by 1 unit (length of normalized vector) to the left\n      // if we walk along contour clockwise, this new contour is outside the old one\n      //\n      // inPt' is the intersection of the two lines parallel to the two\n      //  adjacent edges of inPt at a distance of 1 unit on the left side.\n      var v_trans_x,\n          v_trans_y,\n          shrink_by = 1; // resulting translation vector for inPt\n      // good reading for geometry algorithms (here: line-line intersection)\n      // http://geomalgorithms.com/a05-_intersect-1.html\n\n      var v_prev_x = inPt.x - inPrev.x,\n          v_prev_y = inPt.y - inPrev.y;\n      var v_next_x = inNext.x - inPt.x,\n          v_next_y = inNext.y - inPt.y;\n      var v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y; // check for collinear edges\n\n      var collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;\n\n      if (Math.abs(collinear0) > Number.EPSILON) {\n        // not collinear\n        // length of vectors for normalizing\n        var v_prev_len = Math.sqrt(v_prev_lensq);\n        var v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y); // shift adjacent points by unit vectors to the left\n\n        var ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;\n        var ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;\n        var ptNextShift_x = inNext.x - v_next_y / v_next_len;\n        var ptNextShift_y = inNext.y + v_next_x / v_next_len; // scaling factor for v_prev to intersection point\n\n        var sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x); // vector from inPt to intersection point\n\n        v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;\n        v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y; // Don't normalize!, otherwise sharp corners become ugly\n        //  but prevent crazy spikes\n\n        var v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;\n\n        if (v_trans_lensq <= 2) {\n          return new THREE.Vector2(v_trans_x, v_trans_y);\n        } else {\n          shrink_by = Math.sqrt(v_trans_lensq / 2);\n        }\n      } else {\n        // handle special case of collinear edges\n        var direction_eq = false; // assumes: opposite\n\n        if (v_prev_x > Number.EPSILON) {\n          if (v_next_x > Number.EPSILON) {\n            direction_eq = true;\n          }\n        } else {\n          if (v_prev_x < -Number.EPSILON) {\n            if (v_next_x < -Number.EPSILON) {\n              direction_eq = true;\n            }\n          } else {\n            if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {\n              direction_eq = true;\n            }\n          }\n        }\n\n        if (direction_eq) {\n          // console.log(\"Warning: lines are a straight sequence\");\n          v_trans_x = -v_prev_y;\n          v_trans_y = v_prev_x;\n          shrink_by = Math.sqrt(v_prev_lensq);\n        } else {\n          // console.log(\"Warning: lines are a straight spike\");\n          v_trans_x = v_prev_x;\n          v_trans_y = v_prev_y;\n          shrink_by = Math.sqrt(v_prev_lensq / 2);\n        }\n      }\n\n      return new THREE.Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);\n    }\n\n    var contourMovements = [];\n\n    for (var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n      if (j === il) j = 0;\n      if (k === il) k = 0; //  (j)---(i)---(k)\n      // console.log('i,j,k', i, j , k)\n\n      contourMovements[i] = getBevelVec(contour[i], contour[j], contour[k]);\n    }\n\n    var holesMovements = [],\n        oneHoleMovements,\n        verticesMovements = contourMovements.concat();\n\n    for (h = 0, hl = holes.length; h < hl; h++) {\n      ahole = holes[h];\n      oneHoleMovements = [];\n\n      for (i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i++, j++, k++) {\n        if (j === il) j = 0;\n        if (k === il) k = 0; //  (j)---(i)---(k)\n\n        oneHoleMovements[i] = getBevelVec(ahole[i], ahole[j], ahole[k]);\n      }\n\n      holesMovements.push(oneHoleMovements);\n      verticesMovements = verticesMovements.concat(oneHoleMovements);\n    } // Loop bevelSegments, 1 for the front, 1 for the back\n\n\n    for (b = 0; b < bevelSegments; b++) {\n      //for ( b = bevelSegments; b > 0; b -- ) {\n      t = b / bevelSegments;\n      z = bevelThickness * (1 - t); //z = bevelThickness * t;\n\n      bs = bevelSize * Math.sin(t * Math.PI / 2); // curved\n      //bs = bevelSize * t; // linear\n      // contract shape\n\n      for (i = 0, il = contour.length; i < il; i++) {\n        vert = scalePt2(contour[i], contourMovements[i], bs);\n        v(vert.x, vert.y, -z);\n      } // expand holes\n\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        oneHoleMovements = holesMovements[h];\n\n        for (i = 0, il = ahole.length; i < il; i++) {\n          vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n          v(vert.x, vert.y, -z);\n        }\n      }\n    }\n\n    bs = bevelSize; // Back facing vertices\n\n    for (i = 0; i < vlen; i++) {\n      vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n      if (!extrudeByPath) {\n        v(vert.x, vert.y, 0);\n      } else {\n        // v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n        normal.copy(splineTube.normals[0]).multiplyScalar(vert.x);\n        binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);\n        position2.copy(extrudePts[0]).add(normal).add(binormal);\n        v(position2.x, position2.y, position2.z);\n      }\n    } // Add stepped vertices...\n    // Including front facing vertices\n\n\n    var s;\n\n    for (s = 1; s <= steps; s++) {\n      for (i = 0; i < vlen; i++) {\n        vert = bevelEnabled ? scalePt2(vertices[i], verticesMovements[i], bs) : vertices[i];\n\n        if (!extrudeByPath) {\n          v(vert.x, vert.y, amount / steps * s);\n        } else {\n          // v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n          normal.copy(splineTube.normals[s]).multiplyScalar(vert.x);\n          binormal.copy(splineTube.binormals[s]).multiplyScalar(vert.y);\n          position2.copy(extrudePts[s]).add(normal).add(binormal);\n          v(position2.x, position2.y, position2.z);\n        }\n      }\n    } // Add bevel segments planes\n    //for ( b = 1; b <= bevelSegments; b ++ ) {\n\n\n    for (b = bevelSegments - 1; b >= 0; b--) {\n      t = b / bevelSegments;\n      z = bevelThickness * (1 - t); //bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\n\n      bs = bevelSize * Math.sin(t * Math.PI / 2); // contract shape\n\n      for (i = 0, il = contour.length; i < il; i++) {\n        vert = scalePt2(contour[i], contourMovements[i], bs);\n        v(vert.x, vert.y, amount + z);\n      } // expand holes\n\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        oneHoleMovements = holesMovements[h];\n\n        for (i = 0, il = ahole.length; i < il; i++) {\n          vert = scalePt2(ahole[i], oneHoleMovements[i], bs);\n\n          if (!extrudeByPath) {\n            v(vert.x, vert.y, amount + z);\n          } else {\n            v(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z);\n          }\n        }\n      }\n    }\n    /* Faces */\n    // Top and bottom faces\n\n\n    buildLidFaces(); // Sides faces\n\n    buildSideFaces(); /////  Internal functions\n\n    function buildLidFaces() {\n      if (bevelEnabled) {\n        var layer = 0; // steps + 1\n\n        var offset = vlen * layer; // Bottom faces\n\n        for (i = 0; i < flen; i++) {\n          face = faces[i];\n          f3(face[2] + offset, face[1] + offset, face[0] + offset);\n        }\n\n        layer = steps + bevelSegments * 2;\n        offset = vlen * layer; // Top faces\n\n        for (i = 0; i < flen; i++) {\n          face = faces[i];\n          f3(face[0] + offset, face[1] + offset, face[2] + offset);\n        }\n      } else {\n        // Bottom faces\n        for (i = 0; i < flen; i++) {\n          face = faces[i];\n          f3(face[2], face[1], face[0]);\n        } // Top faces\n\n\n        for (i = 0; i < flen; i++) {\n          face = faces[i];\n          f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);\n        }\n      }\n    } // Create faces for the z-sides of the shape\n\n\n    function buildSideFaces() {\n      var layeroffset = 0;\n      sidewalls(contour, layeroffset);\n      layeroffset += contour.length;\n\n      for (h = 0, hl = holes.length; h < hl; h++) {\n        ahole = holes[h];\n        sidewalls(ahole, layeroffset); //, true\n\n        layeroffset += ahole.length;\n      }\n    }\n\n    function sidewalls(contour, layeroffset) {\n      var j, k;\n      i = contour.length;\n\n      while (--i >= 0) {\n        j = i;\n        k = i - 1;\n        if (k < 0) k = contour.length - 1; //console.log('b', i,j, i-1, k,vertices.length);\n\n        var s = 0,\n            sl = steps + bevelSegments * 2;\n\n        for (s = 0; s < sl; s++) {\n          var slen1 = vlen * s;\n          var slen2 = vlen * (s + 1);\n          var a = layeroffset + j + slen1,\n              b = layeroffset + k + slen1,\n              c = layeroffset + k + slen2,\n              d = layeroffset + j + slen2;\n          f4(a, b, c, d, contour, s, sl, j, k);\n        }\n      }\n    }\n\n    function v(x, y, z) {\n      scope.vertices.push(new THREE.Vector3(x, y, z));\n    }\n\n    function f3(a, b, c) {\n      a += shapesOffset;\n      b += shapesOffset;\n      c += shapesOffset;\n      scope.faces.push(new THREE.Face3(a, b, c, null, null, 0));\n      var uvs = uvgen.generateTopUV(scope, a, b, c);\n      scope.faceVertexUvs[0].push(uvs);\n    }\n\n    function f4(a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2) {\n      a += shapesOffset;\n      b += shapesOffset;\n      c += shapesOffset;\n      d += shapesOffset;\n      scope.faces.push(new THREE.Face3(a, b, d, null, null, 1));\n      scope.faces.push(new THREE.Face3(b, c, d, null, null, 1));\n      var uvs = uvgen.generateSideWallUV(scope, a, b, c, d);\n      scope.faceVertexUvs[0].push([uvs[0], uvs[1], uvs[3]]);\n      scope.faceVertexUvs[0].push([uvs[1], uvs[2], uvs[3]]);\n    }\n  };\n\n  THREE.ExtrudeGeometry.WorldUVGenerator = {\n    generateTopUV: function generateTopUV(geometry, indexA, indexB, indexC) {\n      var vertices = geometry.vertices;\n      var a = vertices[indexA];\n      var b = vertices[indexB];\n      var c = vertices[indexC];\n      return [new THREE.Vector2(a.x, a.y), new THREE.Vector2(b.x, b.y), new THREE.Vector2(c.x, c.y)];\n    },\n    generateSideWallUV: function generateSideWallUV(geometry, indexA, indexB, indexC, indexD) {\n      var vertices = geometry.vertices;\n      var a = vertices[indexA];\n      var b = vertices[indexB];\n      var c = vertices[indexC];\n      var d = vertices[indexD];\n\n      if (Math.abs(a.y - b.y) < 0.01) {\n        return [new THREE.Vector2(a.x, 1 - a.z), new THREE.Vector2(b.x, 1 - b.z), new THREE.Vector2(c.x, 1 - c.z), new THREE.Vector2(d.x, 1 - d.z)];\n      } else {\n        return [new THREE.Vector2(a.y, 1 - a.z), new THREE.Vector2(b.y, 1 - b.z), new THREE.Vector2(c.y, 1 - c.z), new THREE.Vector2(d.y, 1 - d.z)];\n      }\n    }\n  }; // File:src/extras/geometries/ShapeGeometry.js\n\n  /**\n   * @author jonobr1 / http://jonobr1.com\n   *\n   * Creates a one-sided polygonal geometry from a path shape. Similar to\n   * ExtrudeGeometry.\n   *\n   * parameters = {\n   *\n   *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\n   *\n   *\tmaterial: <int> // material index for front and back faces\n   *\tuvGenerator: <Object> // object that provides UV generator functions\n   *\n   * }\n   **/\n\n  THREE.ShapeGeometry = function (shapes, options) {\n    THREE.Geometry.call(this);\n    this.type = 'ShapeGeometry';\n    if (Array.isArray(shapes) === false) shapes = [shapes];\n    this.addShapeList(shapes, options);\n    this.computeFaceNormals();\n  };\n\n  THREE.ShapeGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\n  /**\n   * Add an array of shapes to THREE.ShapeGeometry.\n   */\n\n  THREE.ShapeGeometry.prototype.addShapeList = function (shapes, options) {\n    for (var i = 0, l = shapes.length; i < l; i++) {\n      this.addShape(shapes[i], options);\n    }\n\n    return this;\n  };\n  /**\n   * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\n   */\n\n\n  THREE.ShapeGeometry.prototype.addShape = function (shape, options) {\n    if (options === undefined) options = {};\n    var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n    var material = options.material;\n    var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator; //\n\n    var i, l, hole;\n    var shapesOffset = this.vertices.length;\n    var shapePoints = shape.extractPoints(curveSegments);\n    var vertices = shapePoints.shape;\n    var holes = shapePoints.holes;\n    var reverse = !THREE.ShapeUtils.isClockWise(vertices);\n\n    if (reverse) {\n      vertices = vertices.reverse(); // Maybe we should also check if holes are in the opposite direction, just to be safe...\n\n      for (i = 0, l = holes.length; i < l; i++) {\n        hole = holes[i];\n\n        if (THREE.ShapeUtils.isClockWise(hole)) {\n          holes[i] = hole.reverse();\n        }\n      }\n\n      reverse = false;\n    }\n\n    var faces = THREE.ShapeUtils.triangulateShape(vertices, holes); // Vertices\n\n    for (i = 0, l = holes.length; i < l; i++) {\n      hole = holes[i];\n      vertices = vertices.concat(hole);\n    } //\n\n\n    var vert,\n        vlen = vertices.length;\n    var face,\n        flen = faces.length;\n\n    for (i = 0; i < vlen; i++) {\n      vert = vertices[i];\n      this.vertices.push(new THREE.Vector3(vert.x, vert.y, 0));\n    }\n\n    for (i = 0; i < flen; i++) {\n      face = faces[i];\n      var a = face[0] + shapesOffset;\n      var b = face[1] + shapesOffset;\n      var c = face[2] + shapesOffset;\n      this.faces.push(new THREE.Face3(a, b, c, null, null, material));\n      this.faceVertexUvs[0].push(uvgen.generateTopUV(this, a, b, c));\n    }\n  }; // File:src/extras/geometries/LatheBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n  // points - to create a closed torus, one must use a set of points\n  //    like so: [ a, b, c, d, a ], see first is the same as last.\n  // segments - the number of circumference segments to create\n  // phiStart - the starting radian\n  // phiLength - the radian (0 to 2PI) range of the lathed section\n  //    2PI is a closed lathe, less than 2PI is a portion.\n\n\n  THREE.LatheBufferGeometry = function (points, segments, phiStart, phiLength) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'LatheBufferGeometry';\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength\n    };\n    segments = Math.floor(segments) || 12;\n    phiStart = phiStart || 0;\n    phiLength = phiLength || Math.PI * 2; // clamp phiLength so it's in range of [ 0, 2PI ]\n\n    phiLength = THREE.Math.clamp(phiLength, 0, Math.PI * 2); // these are used to calculate buffer length\n\n    var vertexCount = (segments + 1) * points.length;\n    var indexCount = segments * points.length * 2 * 3; // buffers\n\n    var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n    var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n    var index = 0,\n        indexOffset = 0,\n        base;\n    var inversePointLength = 1.0 / (points.length - 1);\n    var inverseSegments = 1.0 / segments;\n    var vertex = new THREE.Vector3();\n    var uv = new THREE.Vector2();\n    var i, j; // generate vertices and uvs\n\n    for (i = 0; i <= segments; i++) {\n      var phi = phiStart + i * inverseSegments * phiLength;\n      var sin = Math.sin(phi);\n      var cos = Math.cos(phi);\n\n      for (j = 0; j <= points.length - 1; j++) {\n        // vertex\n        vertex.x = points[j].x * sin;\n        vertex.y = points[j].y;\n        vertex.z = points[j].x * cos;\n        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // uv\n\n        uv.x = i / segments;\n        uv.y = j / (points.length - 1);\n        uvs.setXY(index, uv.x, uv.y); // increase index\n\n        index++;\n      }\n    } // generate indices\n\n\n    for (i = 0; i < segments; i++) {\n      for (j = 0; j < points.length - 1; j++) {\n        base = j + i * points.length; // indices\n\n        var a = base;\n        var b = base + points.length;\n        var c = base + points.length + 1;\n        var d = base + 1; // face one\n\n        indices.setX(indexOffset, a);\n        indexOffset++;\n        indices.setX(indexOffset, b);\n        indexOffset++;\n        indices.setX(indexOffset, d);\n        indexOffset++; // face two\n\n        indices.setX(indexOffset, b);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++;\n        indices.setX(indexOffset, d);\n        indexOffset++;\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.addAttribute('position', vertices);\n    this.addAttribute('uv', uvs); // generate normals\n\n    this.computeVertexNormals(); // if the geometry is closed, we need to average the normals along the seam.\n    // because the corresponding vertices are identical (but still have different UVs).\n\n    if (phiLength === Math.PI * 2) {\n      var normals = this.attributes.normal.array;\n      var n1 = new THREE.Vector3();\n      var n2 = new THREE.Vector3();\n      var n = new THREE.Vector3(); // this is the buffer offset for the last line of vertices\n\n      base = segments * points.length * 3;\n\n      for (i = 0, j = 0; i < points.length; i++, j += 3) {\n        // select the normal of the vertex in the first line\n        n1.x = normals[j + 0];\n        n1.y = normals[j + 1];\n        n1.z = normals[j + 2]; // select the normal of the vertex in the last line\n\n        n2.x = normals[base + j + 0];\n        n2.y = normals[base + j + 1];\n        n2.z = normals[base + j + 2]; // average normals\n\n        n.addVectors(n1, n2).normalize(); // assign the new values to both normals\n\n        normals[j + 0] = normals[base + j + 0] = n.x;\n        normals[j + 1] = normals[base + j + 1] = n.y;\n        normals[j + 2] = normals[base + j + 2] = n.z;\n      } // next row\n\n    }\n  };\n\n  THREE.LatheBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry; // File:src/extras/geometries/LatheGeometry.js\n\n  /**\n   * @author astrodud / http://astrodud.isgreat.org/\n   * @author zz85 / https://github.com/zz85\n   * @author bhouston / http://clara.io\n   */\n  // points - to create a closed torus, one must use a set of points\n  //    like so: [ a, b, c, d, a ], see first is the same as last.\n  // segments - the number of circumference segments to create\n  // phiStart - the starting radian\n  // phiLength - the radian (0 to 2PI) range of the lathed section\n  //    2PI is a closed lathe, less than 2PI is a portion.\n\n  THREE.LatheGeometry = function (points, segments, phiStart, phiLength) {\n    THREE.Geometry.call(this);\n    this.type = 'LatheGeometry';\n    this.parameters = {\n      points: points,\n      segments: segments,\n      phiStart: phiStart,\n      phiLength: phiLength\n    };\n    this.fromBufferGeometry(new THREE.LatheBufferGeometry(points, segments, phiStart, phiLength));\n    this.mergeVertices();\n  };\n\n  THREE.LatheGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry; // File:src/extras/geometries/PlaneGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n   */\n\n  THREE.PlaneGeometry = function (width, height, widthSegments, heightSegments) {\n    THREE.Geometry.call(this);\n    this.type = 'PlaneGeometry';\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments\n    };\n    this.fromBufferGeometry(new THREE.PlaneBufferGeometry(width, height, widthSegments, heightSegments));\n  };\n\n  THREE.PlaneGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry; // File:src/extras/geometries/PlaneBufferGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\n   */\n\n  THREE.PlaneBufferGeometry = function (width, height, widthSegments, heightSegments) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'PlaneBufferGeometry';\n    this.parameters = {\n      width: width,\n      height: height,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments\n    };\n    var width_half = width / 2;\n    var height_half = height / 2;\n    var gridX = Math.floor(widthSegments) || 1;\n    var gridY = Math.floor(heightSegments) || 1;\n    var gridX1 = gridX + 1;\n    var gridY1 = gridY + 1;\n    var segment_width = width / gridX;\n    var segment_height = height / gridY;\n    var vertices = new Float32Array(gridX1 * gridY1 * 3);\n    var normals = new Float32Array(gridX1 * gridY1 * 3);\n    var uvs = new Float32Array(gridX1 * gridY1 * 2);\n    var offset = 0;\n    var offset2 = 0;\n\n    for (var iy = 0; iy < gridY1; iy++) {\n      var y = iy * segment_height - height_half;\n\n      for (var ix = 0; ix < gridX1; ix++) {\n        var x = ix * segment_width - width_half;\n        vertices[offset] = x;\n        vertices[offset + 1] = -y;\n        normals[offset + 2] = 1;\n        uvs[offset2] = ix / gridX;\n        uvs[offset2 + 1] = 1 - iy / gridY;\n        offset += 3;\n        offset2 += 2;\n      }\n    }\n\n    offset = 0;\n    var indices = new (vertices.length / 3 > 65535 ? Uint32Array : Uint16Array)(gridX * gridY * 6);\n\n    for (var iy = 0; iy < gridY; iy++) {\n      for (var ix = 0; ix < gridX; ix++) {\n        var a = ix + gridX1 * iy;\n        var b = ix + gridX1 * (iy + 1);\n        var c = ix + 1 + gridX1 * (iy + 1);\n        var d = ix + 1 + gridX1 * iy;\n        indices[offset] = a;\n        indices[offset + 1] = b;\n        indices[offset + 2] = d;\n        indices[offset + 3] = b;\n        indices[offset + 4] = c;\n        indices[offset + 5] = d;\n        offset += 6;\n      }\n    }\n\n    this.setIndex(new THREE.BufferAttribute(indices, 1));\n    this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n    this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n  };\n\n  THREE.PlaneBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry; // File:src/extras/geometries/RingBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  THREE.RingBufferGeometry = function (innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'RingBufferGeometry';\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    innerRadius = innerRadius || 20;\n    outerRadius = outerRadius || 50;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\n    thetaSegments = thetaSegments !== undefined ? Math.max(3, thetaSegments) : 8;\n    phiSegments = phiSegments !== undefined ? Math.max(1, phiSegments) : 1; // these are used to calculate buffer length\n\n    var vertexCount = (thetaSegments + 1) * (phiSegments + 1);\n    var indexCount = thetaSegments * phiSegments * 2 * 3; // buffers\n\n    var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n    var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // some helper variables\n\n    var index = 0,\n        indexOffset = 0,\n        segment;\n    var radius = innerRadius;\n    var radiusStep = (outerRadius - innerRadius) / phiSegments;\n    var vertex = new THREE.Vector3();\n    var uv = new THREE.Vector2();\n    var j, i; // generate vertices, normals and uvs\n    // values are generate from the inside of the ring to the outside\n\n    for (j = 0; j <= phiSegments; j++) {\n      for (i = 0; i <= thetaSegments; i++) {\n        segment = thetaStart + i / thetaSegments * thetaLength; // vertex\n\n        vertex.x = radius * Math.cos(segment);\n        vertex.y = radius * Math.sin(segment);\n        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal\n\n        normals.setXYZ(index, 0, 0, 1); // uv\n\n        uv.x = (vertex.x / outerRadius + 1) / 2;\n        uv.y = (vertex.y / outerRadius + 1) / 2;\n        uvs.setXY(index, uv.x, uv.y); // increase index\n\n        index++;\n      } // increase the radius for next row of vertices\n\n\n      radius += radiusStep;\n    } // generate indices\n\n\n    for (j = 0; j < phiSegments; j++) {\n      var thetaSegmentLevel = j * (thetaSegments + 1);\n\n      for (i = 0; i < thetaSegments; i++) {\n        segment = i + thetaSegmentLevel; // indices\n\n        var a = segment;\n        var b = segment + thetaSegments + 1;\n        var c = segment + thetaSegments + 2;\n        var d = segment + 1; // face one\n\n        indices.setX(indexOffset, a);\n        indexOffset++;\n        indices.setX(indexOffset, b);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++; // face two\n\n        indices.setX(indexOffset, a);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++;\n        indices.setX(indexOffset, d);\n        indexOffset++;\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.addAttribute('position', vertices);\n    this.addAttribute('normal', normals);\n    this.addAttribute('uv', uvs);\n  };\n\n  THREE.RingBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry; // File:src/extras/geometries/RingGeometry.js\n\n  /**\n   * @author Kaleb Murphy\n   */\n\n  THREE.RingGeometry = function (innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength) {\n    THREE.Geometry.call(this);\n    this.type = 'RingGeometry';\n    this.parameters = {\n      innerRadius: innerRadius,\n      outerRadius: outerRadius,\n      thetaSegments: thetaSegments,\n      phiSegments: phiSegments,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new THREE.RingBufferGeometry(innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength));\n  };\n\n  THREE.RingGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.RingGeometry.prototype.constructor = THREE.RingGeometry; // File:src/extras/geometries/SphereGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.SphereGeometry = function (radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n    THREE.Geometry.call(this);\n    this.type = 'SphereGeometry';\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    this.fromBufferGeometry(new THREE.SphereBufferGeometry(radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength));\n  };\n\n  THREE.SphereGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry; // File:src/extras/geometries/SphereBufferGeometry.js\n\n  /**\n   * @author benaadams / https://twitter.com/ben_a_adams\n   * based on THREE.SphereGeometry\n   */\n\n  THREE.SphereBufferGeometry = function (radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'SphereBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      widthSegments: widthSegments,\n      heightSegments: heightSegments,\n      phiStart: phiStart,\n      phiLength: phiLength,\n      thetaStart: thetaStart,\n      thetaLength: thetaLength\n    };\n    radius = radius || 50;\n    widthSegments = Math.max(3, Math.floor(widthSegments) || 8);\n    heightSegments = Math.max(2, Math.floor(heightSegments) || 6);\n    phiStart = phiStart !== undefined ? phiStart : 0;\n    phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\n    thetaStart = thetaStart !== undefined ? thetaStart : 0;\n    thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\n    var thetaEnd = thetaStart + thetaLength;\n    var vertexCount = (widthSegments + 1) * (heightSegments + 1);\n    var positions = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2);\n    var index = 0,\n        vertices = [],\n        normal = new THREE.Vector3();\n\n    for (var y = 0; y <= heightSegments; y++) {\n      var verticesRow = [];\n      var v = y / heightSegments;\n\n      for (var x = 0; x <= widthSegments; x++) {\n        var u = x / widthSegments;\n        var px = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        var py = radius * Math.cos(thetaStart + v * thetaLength);\n        var pz = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        normal.set(px, py, pz).normalize();\n        positions.setXYZ(index, px, py, pz);\n        normals.setXYZ(index, normal.x, normal.y, normal.z);\n        uvs.setXY(index, u, 1 - v);\n        verticesRow.push(index);\n        index++;\n      }\n\n      vertices.push(verticesRow);\n    }\n\n    var indices = [];\n\n    for (var y = 0; y < heightSegments; y++) {\n      for (var x = 0; x < widthSegments; x++) {\n        var v1 = vertices[y][x + 1];\n        var v2 = vertices[y][x];\n        var v3 = vertices[y + 1][x];\n        var v4 = vertices[y + 1][x + 1];\n        if (y !== 0 || thetaStart > 0) indices.push(v1, v2, v4);\n        if (y !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(v2, v3, v4);\n      }\n    }\n\n    this.setIndex(new (positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute)(indices, 1));\n    this.addAttribute('position', positions);\n    this.addAttribute('normal', normals);\n    this.addAttribute('uv', uvs);\n    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius);\n  };\n\n  THREE.SphereBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry; // File:src/extras/geometries/TextGeometry.js\n\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Text = 3D Text\n   *\n   * parameters = {\n   *  font: <THREE.Font>, // font\n   *\n   *  size: <float>, // size of the text\n   *  height: <float>, // thickness to extrude text\n   *  curveSegments: <int>, // number of points on the curves\n   *\n   *  bevelEnabled: <bool>, // turn on bevel\n   *  bevelThickness: <float>, // how deep into text bevel goes\n   *  bevelSize: <float> // how far from text outline is bevel\n   * }\n   */\n\n  THREE.TextGeometry = function (text, parameters) {\n    parameters = parameters || {};\n    var font = parameters.font;\n\n    if (font instanceof THREE.Font === false) {\n      console.error('THREE.TextGeometry: font parameter is not an instance of THREE.Font.');\n      return new THREE.Geometry();\n    }\n\n    var shapes = font.generateShapes(text, parameters.size, parameters.curveSegments); // translate parameters to ExtrudeGeometry API\n\n    parameters.amount = parameters.height !== undefined ? parameters.height : 50; // defaults\n\n    if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n    if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n    if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n    THREE.ExtrudeGeometry.call(this, shapes, parameters);\n    this.type = 'TextGeometry';\n  };\n\n  THREE.TextGeometry.prototype = Object.create(THREE.ExtrudeGeometry.prototype);\n  THREE.TextGeometry.prototype.constructor = THREE.TextGeometry; // File:src/extras/geometries/TorusBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   */\n\n  THREE.TorusBufferGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'TorusBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    radius = radius || 100;\n    tube = tube || 40;\n    radialSegments = Math.floor(radialSegments) || 8;\n    tubularSegments = Math.floor(tubularSegments) || 6;\n    arc = arc || Math.PI * 2; // used to calculate buffer length\n\n    var vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    var indexCount = radialSegments * tubularSegments * 2 * 3; // buffers\n\n    var indices = new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount);\n    var vertices = new Float32Array(vertexCount * 3);\n    var normals = new Float32Array(vertexCount * 3);\n    var uvs = new Float32Array(vertexCount * 2); // offset variables\n\n    var vertexBufferOffset = 0;\n    var uvBufferOffset = 0;\n    var indexBufferOffset = 0; // helper variables\n\n    var center = new THREE.Vector3();\n    var vertex = new THREE.Vector3();\n    var normal = new THREE.Vector3();\n    var j, i; // generate vertices, normals and uvs\n\n    for (j = 0; j <= radialSegments; j++) {\n      for (i = 0; i <= tubularSegments; i++) {\n        var u = i / tubularSegments * arc;\n        var v = j / radialSegments * Math.PI * 2; // vertex\n\n        vertex.x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        vertex.y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        vertex.z = tube * Math.sin(v);\n        vertices[vertexBufferOffset] = vertex.x;\n        vertices[vertexBufferOffset + 1] = vertex.y;\n        vertices[vertexBufferOffset + 2] = vertex.z; // this vector is used to calculate the normal\n\n        center.x = radius * Math.cos(u);\n        center.y = radius * Math.sin(u); // normal\n\n        normal.subVectors(vertex, center).normalize();\n        normals[vertexBufferOffset] = normal.x;\n        normals[vertexBufferOffset + 1] = normal.y;\n        normals[vertexBufferOffset + 2] = normal.z; // uv\n\n        uvs[uvBufferOffset] = i / tubularSegments;\n        uvs[uvBufferOffset + 1] = j / radialSegments; // update offsets\n\n        vertexBufferOffset += 3;\n        uvBufferOffset += 2;\n      }\n    } // generate indices\n\n\n    for (j = 1; j <= radialSegments; j++) {\n      for (i = 1; i <= tubularSegments; i++) {\n        // indices\n        var a = (tubularSegments + 1) * j + i - 1;\n        var b = (tubularSegments + 1) * (j - 1) + i - 1;\n        var c = (tubularSegments + 1) * (j - 1) + i;\n        var d = (tubularSegments + 1) * j + i; // face one\n\n        indices[indexBufferOffset] = a;\n        indices[indexBufferOffset + 1] = b;\n        indices[indexBufferOffset + 2] = d; // face two\n\n        indices[indexBufferOffset + 3] = b;\n        indices[indexBufferOffset + 4] = c;\n        indices[indexBufferOffset + 5] = d; // update offset\n\n        indexBufferOffset += 6;\n      }\n    } // build geometry\n\n\n    this.setIndex(new THREE.BufferAttribute(indices, 1));\n    this.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new THREE.BufferAttribute(normals, 3));\n    this.addAttribute('uv', new THREE.BufferAttribute(uvs, 2));\n  };\n\n  THREE.TorusBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry; // File:src/extras/geometries/TorusGeometry.js\n\n  /**\n   * @author oosmoxiecode\n   * @author mrdoob / http://mrdoob.com/\n   * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\n   */\n\n  THREE.TorusGeometry = function (radius, tube, radialSegments, tubularSegments, arc) {\n    THREE.Geometry.call(this);\n    this.type = 'TorusGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      radialSegments: radialSegments,\n      tubularSegments: tubularSegments,\n      arc: arc\n    };\n    this.fromBufferGeometry(new THREE.TorusBufferGeometry(radius, tube, radialSegments, tubularSegments, arc));\n  };\n\n  THREE.TorusGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry; // File:src/extras/geometries/TorusKnotBufferGeometry.js\n\n  /**\n   * @author Mugen87 / https://github.com/Mugen87\n   *\n   * see: http://www.blackpawn.com/texts/pqtorus/\n   */\n\n  THREE.TorusKnotBufferGeometry = function (radius, tube, tubularSegments, radialSegments, p, q) {\n    THREE.BufferGeometry.call(this);\n    this.type = 'TorusKnotBufferGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q\n    };\n    radius = radius || 100;\n    tube = tube || 40;\n    tubularSegments = Math.floor(tubularSegments) || 64;\n    radialSegments = Math.floor(radialSegments) || 8;\n    p = p || 2;\n    q = q || 3; // used to calculate buffer length\n\n    var vertexCount = (radialSegments + 1) * (tubularSegments + 1);\n    var indexCount = radialSegments * tubularSegments * 2 * 3; // buffers\n\n    var indices = new THREE.BufferAttribute(new (indexCount > 65535 ? Uint32Array : Uint16Array)(indexCount), 1);\n    var vertices = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var normals = new THREE.BufferAttribute(new Float32Array(vertexCount * 3), 3);\n    var uvs = new THREE.BufferAttribute(new Float32Array(vertexCount * 2), 2); // helper variables\n\n    var i,\n        j,\n        index = 0,\n        indexOffset = 0;\n    var vertex = new THREE.Vector3();\n    var normal = new THREE.Vector3();\n    var uv = new THREE.Vector2();\n    var P1 = new THREE.Vector3();\n    var P2 = new THREE.Vector3();\n    var B = new THREE.Vector3();\n    var T = new THREE.Vector3();\n    var N = new THREE.Vector3(); // generate vertices, normals and uvs\n\n    for (i = 0; i <= tubularSegments; ++i) {\n      // the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n      var u = i / tubularSegments * p * Math.PI * 2; // now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n      // these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n      calculatePositionOnCurve(u, p, q, radius, P1);\n      calculatePositionOnCurve(u + 0.01, p, q, radius, P2); // calculate orthonormal basis\n\n      T.subVectors(P2, P1);\n      N.addVectors(P2, P1);\n      B.crossVectors(T, N);\n      N.crossVectors(B, T); // normalize B, N. T can be ignored, we don't use it\n\n      B.normalize();\n      N.normalize();\n\n      for (j = 0; j <= radialSegments; ++j) {\n        // now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n        // because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n        var v = j / radialSegments * Math.PI * 2;\n        var cx = -tube * Math.cos(v);\n        var cy = tube * Math.sin(v); // now calculate the final vertex position.\n        // first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n        vertex.x = P1.x + (cx * N.x + cy * B.x);\n        vertex.y = P1.y + (cx * N.y + cy * B.y);\n        vertex.z = P1.z + (cx * N.z + cy * B.z); // vertex\n\n        vertices.setXYZ(index, vertex.x, vertex.y, vertex.z); // normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n        normal.subVectors(vertex, P1).normalize();\n        normals.setXYZ(index, normal.x, normal.y, normal.z); // uv\n\n        uv.x = i / tubularSegments;\n        uv.y = j / radialSegments;\n        uvs.setXY(index, uv.x, uv.y); // increase index\n\n        index++;\n      }\n    } // generate indices\n\n\n    for (j = 1; j <= tubularSegments; j++) {\n      for (i = 1; i <= radialSegments; i++) {\n        // indices\n        var a = (radialSegments + 1) * (j - 1) + (i - 1);\n        var b = (radialSegments + 1) * j + (i - 1);\n        var c = (radialSegments + 1) * j + i;\n        var d = (radialSegments + 1) * (j - 1) + i; // face one\n\n        indices.setX(indexOffset, a);\n        indexOffset++;\n        indices.setX(indexOffset, b);\n        indexOffset++;\n        indices.setX(indexOffset, d);\n        indexOffset++; // face two\n\n        indices.setX(indexOffset, b);\n        indexOffset++;\n        indices.setX(indexOffset, c);\n        indexOffset++;\n        indices.setX(indexOffset, d);\n        indexOffset++;\n      }\n    } // build geometry\n\n\n    this.setIndex(indices);\n    this.addAttribute('position', vertices);\n    this.addAttribute('normal', normals);\n    this.addAttribute('uv', uvs); // this function calculates the current position on the torus curve\n\n    function calculatePositionOnCurve(u, p, q, radius, position) {\n      var cu = Math.cos(u);\n      var su = Math.sin(u);\n      var quOverP = q / p * u;\n      var cs = Math.cos(quOverP);\n      position.x = radius * (2 + cs) * 0.5 * cu;\n      position.y = radius * (2 + cs) * su * 0.5;\n      position.z = radius * Math.sin(quOverP) * 0.5;\n    }\n  };\n\n  THREE.TorusKnotBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry; // File:src/extras/geometries/TorusKnotGeometry.js\n\n  /**\n   * @author oosmoxiecode\n   */\n\n  THREE.TorusKnotGeometry = function (radius, tube, tubularSegments, radialSegments, p, q, heightScale) {\n    THREE.Geometry.call(this);\n    this.type = 'TorusKnotGeometry';\n    this.parameters = {\n      radius: radius,\n      tube: tube,\n      tubularSegments: tubularSegments,\n      radialSegments: radialSegments,\n      p: p,\n      q: q\n    };\n    if (heightScale !== undefined) console.warn('THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.');\n    this.fromBufferGeometry(new THREE.TorusKnotBufferGeometry(radius, tube, tubularSegments, radialSegments, p, q));\n    this.mergeVertices();\n  };\n\n  THREE.TorusKnotGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry; // File:src/extras/geometries/TubeGeometry.js\n\n  /**\n   * @author WestLangley / https://github.com/WestLangley\n   * @author zz85 / https://github.com/zz85\n   * @author miningold / https://github.com/miningold\n   * @author jonobr1 / https://github.com/jonobr1\n   *\n   * Modified from the TorusKnotGeometry by @oosmoxiecode\n   *\n   * Creates a tube which extrudes along a 3d spline\n   *\n   * Uses parallel transport frames as described in\n   * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n   */\n\n  THREE.TubeGeometry = function (path, segments, radius, radialSegments, closed, taper) {\n    THREE.Geometry.call(this);\n    this.type = 'TubeGeometry';\n    this.parameters = {\n      path: path,\n      segments: segments,\n      radius: radius,\n      radialSegments: radialSegments,\n      closed: closed,\n      taper: taper\n    };\n    segments = segments || 64;\n    radius = radius || 1;\n    radialSegments = radialSegments || 8;\n    closed = closed || false;\n    taper = taper || THREE.TubeGeometry.NoTaper;\n    var grid = [];\n    var scope = this,\n        tangent,\n        normal,\n        binormal,\n        numpoints = segments + 1,\n        u,\n        v,\n        r,\n        cx,\n        cy,\n        pos,\n        pos2 = new THREE.Vector3(),\n        i,\n        j,\n        ip,\n        jp,\n        a,\n        b,\n        c,\n        d,\n        uva,\n        uvb,\n        uvc,\n        uvd;\n    var frames = new THREE.TubeGeometry.FrenetFrames(path, segments, closed),\n        tangents = frames.tangents,\n        normals = frames.normals,\n        binormals = frames.binormals; // proxy internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals;\n\n    function vert(x, y, z) {\n      return scope.vertices.push(new THREE.Vector3(x, y, z)) - 1;\n    } // construct the grid\n\n\n    for (i = 0; i < numpoints; i++) {\n      grid[i] = [];\n      u = i / (numpoints - 1);\n      pos = path.getPointAt(u);\n      tangent = tangents[i];\n      normal = normals[i];\n      binormal = binormals[i];\n      r = radius * taper(u);\n\n      for (j = 0; j < radialSegments; j++) {\n        v = j / radialSegments * 2 * Math.PI;\n        cx = -r * Math.cos(v); // TODO: Hack: Negating it so it faces outside.\n\n        cy = r * Math.sin(v);\n        pos2.copy(pos);\n        pos2.x += cx * normal.x + cy * binormal.x;\n        pos2.y += cx * normal.y + cy * binormal.y;\n        pos2.z += cx * normal.z + cy * binormal.z;\n        grid[i][j] = vert(pos2.x, pos2.y, pos2.z);\n      }\n    } // construct the mesh\n\n\n    for (i = 0; i < segments; i++) {\n      for (j = 0; j < radialSegments; j++) {\n        ip = closed ? (i + 1) % segments : i + 1;\n        jp = (j + 1) % radialSegments;\n        a = grid[i][j]; // *** NOT NECESSARILY PLANAR ! ***\n\n        b = grid[ip][j];\n        c = grid[ip][jp];\n        d = grid[i][jp];\n        uva = new THREE.Vector2(i / segments, j / radialSegments);\n        uvb = new THREE.Vector2((i + 1) / segments, j / radialSegments);\n        uvc = new THREE.Vector2((i + 1) / segments, (j + 1) / radialSegments);\n        uvd = new THREE.Vector2(i / segments, (j + 1) / radialSegments);\n        this.faces.push(new THREE.Face3(a, b, d));\n        this.faceVertexUvs[0].push([uva, uvb, uvd]);\n        this.faces.push(new THREE.Face3(b, c, d));\n        this.faceVertexUvs[0].push([uvb.clone(), uvc, uvd.clone()]);\n      }\n    }\n\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n  };\n\n  THREE.TubeGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\n\n  THREE.TubeGeometry.NoTaper = function (u) {\n    return 1;\n  };\n\n  THREE.TubeGeometry.SinusoidalTaper = function (u) {\n    return Math.sin(Math.PI * u);\n  }; // For computing of Frenet frames, exposing the tangents, normals and binormals the spline\n\n\n  THREE.TubeGeometry.FrenetFrames = function (path, segments, closed) {\n    var normal = new THREE.Vector3(),\n        tangents = [],\n        normals = [],\n        binormals = [],\n        vec = new THREE.Vector3(),\n        mat = new THREE.Matrix4(),\n        numpoints = segments + 1,\n        theta,\n        smallest,\n        tx,\n        ty,\n        tz,\n        i,\n        u; // expose internals\n\n    this.tangents = tangents;\n    this.normals = normals;\n    this.binormals = binormals; // compute the tangent vectors for each segment on the path\n\n    for (i = 0; i < numpoints; i++) {\n      u = i / (numpoints - 1);\n      tangents[i] = path.getTangentAt(u);\n      tangents[i].normalize();\n    }\n\n    initialNormal3();\n    /*\n    function initialNormal1(lastBinormal) {\n    \t// fixed start binormal. Has dangers of 0 vectors\n    \tnormals[ 0 ] = new THREE.Vector3();\n    \tbinormals[ 0 ] = new THREE.Vector3();\n    \tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\n    \tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\n    \tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    }\n    \tfunction initialNormal2() {\n    \t\t// This uses the Frenet-Serret formula for deriving binormal\n    \tvar t2 = path.getTangentAt( epsilon );\n    \t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\n    \tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\n    \t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\n    \tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\n    \t}\n    */\n\n    function initialNormal3() {\n      // select an initial normal vector perpendicular to the first tangent vector,\n      // and in the direction of the smallest tangent xyz component\n      normals[0] = new THREE.Vector3();\n      binormals[0] = new THREE.Vector3();\n      smallest = Number.MAX_VALUE;\n      tx = Math.abs(tangents[0].x);\n      ty = Math.abs(tangents[0].y);\n      tz = Math.abs(tangents[0].z);\n\n      if (tx <= smallest) {\n        smallest = tx;\n        normal.set(1, 0, 0);\n      }\n\n      if (ty <= smallest) {\n        smallest = ty;\n        normal.set(0, 1, 0);\n      }\n\n      if (tz <= smallest) {\n        normal.set(0, 0, 1);\n      }\n\n      vec.crossVectors(tangents[0], normal).normalize();\n      normals[0].crossVectors(tangents[0], vec);\n      binormals[0].crossVectors(tangents[0], normals[0]);\n    } // compute the slowly-varying normal and binormal vectors for each segment on the path\n\n\n    for (i = 1; i < numpoints; i++) {\n      normals[i] = normals[i - 1].clone();\n      binormals[i] = binormals[i - 1].clone();\n      vec.crossVectors(tangents[i - 1], tangents[i]);\n\n      if (vec.length() > Number.EPSILON) {\n        vec.normalize();\n        theta = Math.acos(THREE.Math.clamp(tangents[i - 1].dot(tangents[i]), -1, 1)); // clamp for floating pt errors\n\n        normals[i].applyMatrix4(mat.makeRotationAxis(vec, theta));\n      }\n\n      binormals[i].crossVectors(tangents[i], normals[i]);\n    } // if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\n    if (closed) {\n      theta = Math.acos(THREE.Math.clamp(normals[0].dot(normals[numpoints - 1]), -1, 1));\n      theta /= numpoints - 1;\n\n      if (tangents[0].dot(vec.crossVectors(normals[0], normals[numpoints - 1])) > 0) {\n        theta = -theta;\n      }\n\n      for (i = 1; i < numpoints; i++) {\n        // twist a little...\n        normals[i].applyMatrix4(mat.makeRotationAxis(tangents[i], theta * i));\n        binormals[i].crossVectors(tangents[i], normals[i]);\n      }\n    }\n  }; // File:src/extras/geometries/PolyhedronGeometry.js\n\n  /**\n   * @author clockworkgeek / https://github.com/clockworkgeek\n   * @author timothypratley / https://github.com/timothypratley\n   * @author WestLangley / http://github.com/WestLangley\n  */\n\n\n  THREE.PolyhedronGeometry = function (vertices, indices, radius, detail) {\n    THREE.Geometry.call(this);\n    this.type = 'PolyhedronGeometry';\n    this.parameters = {\n      vertices: vertices,\n      indices: indices,\n      radius: radius,\n      detail: detail\n    };\n    radius = radius || 1;\n    detail = detail || 0;\n    var that = this;\n\n    for (var i = 0, l = vertices.length; i < l; i += 3) {\n      prepare(new THREE.Vector3(vertices[i], vertices[i + 1], vertices[i + 2]));\n    }\n\n    var p = this.vertices;\n    var faces = [];\n\n    for (var i = 0, j = 0, l = indices.length; i < l; i += 3, j++) {\n      var v1 = p[indices[i]];\n      var v2 = p[indices[i + 1]];\n      var v3 = p[indices[i + 2]];\n      faces[j] = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n    }\n\n    var centroid = new THREE.Vector3();\n\n    for (var i = 0, l = faces.length; i < l; i++) {\n      subdivide(faces[i], detail);\n    } // Handle case when face straddles the seam\n\n\n    for (var i = 0, l = this.faceVertexUvs[0].length; i < l; i++) {\n      var uvs = this.faceVertexUvs[0][i];\n      var x0 = uvs[0].x;\n      var x1 = uvs[1].x;\n      var x2 = uvs[2].x;\n      var max = Math.max(x0, x1, x2);\n      var min = Math.min(x0, x1, x2);\n\n      if (max > 0.9 && min < 0.1) {\n        // 0.9 is somewhat arbitrary\n        if (x0 < 0.2) uvs[0].x += 1;\n        if (x1 < 0.2) uvs[1].x += 1;\n        if (x2 < 0.2) uvs[2].x += 1;\n      }\n    } // Apply radius\n\n\n    for (var i = 0, l = this.vertices.length; i < l; i++) {\n      this.vertices[i].multiplyScalar(radius);\n    } // Merge vertices\n\n\n    this.mergeVertices();\n    this.computeFaceNormals();\n    this.boundingSphere = new THREE.Sphere(new THREE.Vector3(), radius); // Project vector onto sphere's surface\n\n    function prepare(vector) {\n      var vertex = vector.normalize().clone();\n      vertex.index = that.vertices.push(vertex) - 1; // Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\n\n      var u = azimuth(vector) / 2 / Math.PI + 0.5;\n      var v = inclination(vector) / Math.PI + 0.5;\n      vertex.uv = new THREE.Vector2(u, 1 - v);\n      return vertex;\n    } // Approximate a curved face with recursively sub-divided triangles.\n\n\n    function make(v1, v2, v3) {\n      var face = new THREE.Face3(v1.index, v2.index, v3.index, [v1.clone(), v2.clone(), v3.clone()]);\n      that.faces.push(face);\n      centroid.copy(v1).add(v2).add(v3).divideScalar(3);\n      var azi = azimuth(centroid);\n      that.faceVertexUvs[0].push([correctUV(v1.uv, v1, azi), correctUV(v2.uv, v2, azi), correctUV(v3.uv, v3, azi)]);\n    } // Analytically subdivide a face to the required detail level.\n\n\n    function subdivide(face, detail) {\n      var cols = Math.pow(2, detail);\n      var a = prepare(that.vertices[face.a]);\n      var b = prepare(that.vertices[face.b]);\n      var c = prepare(that.vertices[face.c]);\n      var v = []; // Construct all of the vertices for this subdivision.\n\n      for (var i = 0; i <= cols; i++) {\n        v[i] = [];\n        var aj = prepare(a.clone().lerp(c, i / cols));\n        var bj = prepare(b.clone().lerp(c, i / cols));\n        var rows = cols - i;\n\n        for (var j = 0; j <= rows; j++) {\n          if (j === 0 && i === cols) {\n            v[i][j] = aj;\n          } else {\n            v[i][j] = prepare(aj.clone().lerp(bj, j / rows));\n          }\n        }\n      } // Construct all of the faces.\n\n\n      for (var i = 0; i < cols; i++) {\n        for (var j = 0; j < 2 * (cols - i) - 1; j++) {\n          var k = Math.floor(j / 2);\n\n          if (j % 2 === 0) {\n            make(v[i][k + 1], v[i + 1][k], v[i][k]);\n          } else {\n            make(v[i][k + 1], v[i + 1][k + 1], v[i + 1][k]);\n          }\n        }\n      }\n    } // Angle around the Y axis, counter-clockwise when looking from above.\n\n\n    function azimuth(vector) {\n      return Math.atan2(vector.z, -vector.x);\n    } // Angle above the XZ plane.\n\n\n    function inclination(vector) {\n      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));\n    } // Texture fixing helper. Spheres have some odd behaviours.\n\n\n    function correctUV(uv, vector, azimuth) {\n      if (azimuth < 0 && uv.x === 1) uv = new THREE.Vector2(uv.x - 1, uv.y);\n      if (vector.x === 0 && vector.z === 0) uv = new THREE.Vector2(azimuth / 2 / Math.PI + 0.5, uv.y);\n      return uv.clone();\n    }\n  };\n\n  THREE.PolyhedronGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry; // File:src/extras/geometries/DodecahedronGeometry.js\n\n  /**\n   * @author Abe Pazos / https://hamoid.com\n   */\n\n  THREE.DodecahedronGeometry = function (radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n    var r = 1 / t;\n    var vertices = [// (±1, ±1, ±1)\n    -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, // (0, ±1/φ, ±φ)\n    0, -r, -t, 0, -r, t, 0, r, -t, 0, r, t, // (±1/φ, ±φ, 0)\n    -r, -t, 0, -r, t, 0, r, -t, 0, r, t, 0, // (±φ, 0, ±1/φ)\n    -t, 0, -r, t, 0, -r, -t, 0, r, t, 0, r];\n    var indices = [3, 11, 7, 3, 7, 15, 3, 15, 13, 7, 19, 17, 7, 17, 6, 7, 6, 15, 17, 4, 8, 17, 8, 10, 17, 10, 6, 8, 0, 16, 8, 16, 2, 8, 2, 10, 0, 12, 1, 0, 1, 18, 0, 18, 16, 6, 10, 2, 6, 2, 13, 6, 13, 15, 2, 16, 18, 2, 18, 3, 2, 3, 13, 18, 1, 9, 18, 9, 11, 18, 11, 3, 4, 14, 12, 4, 12, 0, 4, 0, 8, 11, 9, 5, 11, 5, 19, 11, 19, 7, 19, 5, 14, 19, 14, 4, 19, 4, 17, 1, 12, 14, 1, 14, 5, 1, 5, 9];\n    THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'DodecahedronGeometry';\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  };\n\n  THREE.DodecahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\n  THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry; // File:src/extras/geometries/IcosahedronGeometry.js\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   */\n\n  THREE.IcosahedronGeometry = function (radius, detail) {\n    var t = (1 + Math.sqrt(5)) / 2;\n    var vertices = [-1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, 0, 0, -1, t, 0, 1, t, 0, -1, -t, 0, 1, -t, t, 0, -1, t, 0, 1, -t, 0, -1, -t, 0, 1];\n    var indices = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 1, 5, 9, 5, 11, 4, 11, 10, 2, 10, 7, 6, 7, 1, 8, 3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7, 9, 8, 1];\n    THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'IcosahedronGeometry';\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  };\n\n  THREE.IcosahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\n  THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry; // File:src/extras/geometries/OctahedronGeometry.js\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   */\n\n  THREE.OctahedronGeometry = function (radius, detail) {\n    var vertices = [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1];\n    var indices = [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2];\n    THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'OctahedronGeometry';\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  };\n\n  THREE.OctahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\n  THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry; // File:src/extras/geometries/TetrahedronGeometry.js\n\n  /**\n   * @author timothypratley / https://github.com/timothypratley\n   */\n\n  THREE.TetrahedronGeometry = function (radius, detail) {\n    var vertices = [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1];\n    var indices = [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1];\n    THREE.PolyhedronGeometry.call(this, vertices, indices, radius, detail);\n    this.type = 'TetrahedronGeometry';\n    this.parameters = {\n      radius: radius,\n      detail: detail\n    };\n  };\n\n  THREE.TetrahedronGeometry.prototype = Object.create(THREE.PolyhedronGeometry.prototype);\n  THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry; // File:src/extras/geometries/ParametricGeometry.js\n\n  /**\n   * @author zz85 / https://github.com/zz85\n   * Parametric Surfaces Geometry\n   * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\n   *\n   * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\n   *\n   */\n\n  THREE.ParametricGeometry = function (func, slices, stacks) {\n    THREE.Geometry.call(this);\n    this.type = 'ParametricGeometry';\n    this.parameters = {\n      func: func,\n      slices: slices,\n      stacks: stacks\n    };\n    var verts = this.vertices;\n    var faces = this.faces;\n    var uvs = this.faceVertexUvs[0];\n    var i, j, p;\n    var u, v;\n    var sliceCount = slices + 1;\n\n    for (i = 0; i <= stacks; i++) {\n      v = i / stacks;\n\n      for (j = 0; j <= slices; j++) {\n        u = j / slices;\n        p = func(u, v);\n        verts.push(p);\n      }\n    }\n\n    var a, b, c, d;\n    var uva, uvb, uvc, uvd;\n\n    for (i = 0; i < stacks; i++) {\n      for (j = 0; j < slices; j++) {\n        a = i * sliceCount + j;\n        b = i * sliceCount + j + 1;\n        c = (i + 1) * sliceCount + j + 1;\n        d = (i + 1) * sliceCount + j;\n        uva = new THREE.Vector2(j / slices, i / stacks);\n        uvb = new THREE.Vector2((j + 1) / slices, i / stacks);\n        uvc = new THREE.Vector2((j + 1) / slices, (i + 1) / stacks);\n        uvd = new THREE.Vector2(j / slices, (i + 1) / stacks);\n        faces.push(new THREE.Face3(a, b, d));\n        uvs.push([uva, uvb, uvd]);\n        faces.push(new THREE.Face3(b, c, d));\n        uvs.push([uvb.clone(), uvc, uvd.clone()]);\n      }\n    } // console.log(this);\n    // magic bullet\n    // var diff = this.mergeVertices();\n    // console.log('removed ', diff, ' vertices by merging');\n\n\n    this.computeFaceNormals();\n    this.computeVertexNormals();\n  };\n\n  THREE.ParametricGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry; // File:src/extras/geometries/WireframeGeometry.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.WireframeGeometry = function (geometry) {\n    THREE.BufferGeometry.call(this);\n    var edge = [0, 0],\n        hash = {};\n\n    function sortFunction(a, b) {\n      return a - b;\n    }\n\n    var keys = ['a', 'b', 'c'];\n\n    if (geometry instanceof THREE.Geometry) {\n      var vertices = geometry.vertices;\n      var faces = geometry.faces;\n      var numEdges = 0; // allocate maximal size\n\n      var edges = new Uint32Array(6 * faces.length);\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n\n        for (var j = 0; j < 3; j++) {\n          edge[0] = face[keys[j]];\n          edge[1] = face[keys[(j + 1) % 3]];\n          edge.sort(sortFunction);\n          var key = edge.toString();\n\n          if (hash[key] === undefined) {\n            edges[2 * numEdges] = edge[0];\n            edges[2 * numEdges + 1] = edge[1];\n            hash[key] = true;\n            numEdges++;\n          }\n        }\n      }\n\n      var coords = new Float32Array(numEdges * 2 * 3);\n\n      for (var i = 0, l = numEdges; i < l; i++) {\n        for (var j = 0; j < 2; j++) {\n          var vertex = vertices[edges[2 * i + j]];\n          var index = 6 * i + 3 * j;\n          coords[index + 0] = vertex.x;\n          coords[index + 1] = vertex.y;\n          coords[index + 2] = vertex.z;\n        }\n      }\n\n      this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n    } else if (geometry instanceof THREE.BufferGeometry) {\n      if (geometry.index !== null) {\n        // Indexed BufferGeometry\n        var indices = geometry.index.array;\n        var vertices = geometry.attributes.position;\n        var groups = geometry.groups;\n        var numEdges = 0;\n\n        if (groups.length === 0) {\n          geometry.addGroup(0, indices.length);\n        } // allocate maximal size\n\n\n        var edges = new Uint32Array(2 * indices.length);\n\n        for (var o = 0, ol = groups.length; o < ol; ++o) {\n          var group = groups[o];\n          var start = group.start;\n          var count = group.count;\n\n          for (var i = start, il = start + count; i < il; i += 3) {\n            for (var j = 0; j < 3; j++) {\n              edge[0] = indices[i + j];\n              edge[1] = indices[i + (j + 1) % 3];\n              edge.sort(sortFunction);\n              var key = edge.toString();\n\n              if (hash[key] === undefined) {\n                edges[2 * numEdges] = edge[0];\n                edges[2 * numEdges + 1] = edge[1];\n                hash[key] = true;\n                numEdges++;\n              }\n            }\n          }\n        }\n\n        var coords = new Float32Array(numEdges * 2 * 3);\n\n        for (var i = 0, l = numEdges; i < l; i++) {\n          for (var j = 0; j < 2; j++) {\n            var index = 6 * i + 3 * j;\n            var index2 = edges[2 * i + j];\n            coords[index + 0] = vertices.getX(index2);\n            coords[index + 1] = vertices.getY(index2);\n            coords[index + 2] = vertices.getZ(index2);\n          }\n        }\n\n        this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n      } else {\n        // non-indexed BufferGeometry\n        var vertices = geometry.attributes.position.array;\n        var numEdges = vertices.length / 3;\n        var numTris = numEdges / 3;\n        var coords = new Float32Array(numEdges * 2 * 3);\n\n        for (var i = 0, l = numTris; i < l; i++) {\n          for (var j = 0; j < 3; j++) {\n            var index = 18 * i + 6 * j;\n            var index1 = 9 * i + 3 * j;\n            coords[index + 0] = vertices[index1];\n            coords[index + 1] = vertices[index1 + 1];\n            coords[index + 2] = vertices[index1 + 2];\n            var index2 = 9 * i + 3 * ((j + 1) % 3);\n            coords[index + 3] = vertices[index2];\n            coords[index + 4] = vertices[index2 + 1];\n            coords[index + 5] = vertices[index2 + 2];\n          }\n        }\n\n        this.addAttribute('position', new THREE.BufferAttribute(coords, 3));\n      }\n    }\n  };\n\n  THREE.WireframeGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry; // File:src/extras/helpers/AxisHelper.js\n\n  /**\n   * @author sroucheray / http://sroucheray.org/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n  THREE.AxisHelper = function (size) {\n    size = size || 1;\n    var vertices = new Float32Array([0, 0, 0, size, 0, 0, 0, 0, 0, 0, size, 0, 0, 0, 0, 0, 0, size]);\n    var colors = new Float32Array([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1]);\n    var geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.BufferAttribute(vertices, 3));\n    geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3));\n    var material = new THREE.LineBasicMaterial({\n      vertexColors: THREE.VertexColors\n    });\n    THREE.LineSegments.call(this, geometry, material);\n  };\n\n  THREE.AxisHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.AxisHelper.prototype.constructor = THREE.AxisHelper; // File:src/extras/helpers/ArrowHelper.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   * @author zz85 / http://github.com/zz85\n   * @author bhouston / http://clara.io\n   *\n   * Creates an arrow for visualizing directions\n   *\n   * Parameters:\n   *  dir - Vector3\n   *  origin - Vector3\n   *  length - Number\n   *  color - color in hex value\n   *  headLength - Number\n   *  headWidth - Number\n   */\n\n  THREE.ArrowHelper = function () {\n    var lineGeometry = new THREE.BufferGeometry();\n    lineGeometry.addAttribute('position', new THREE.Float32Attribute([0, 0, 0, 0, 1, 0], 3));\n    var coneGeometry = new THREE.CylinderBufferGeometry(0, 0.5, 1, 5, 1);\n    coneGeometry.translate(0, -0.5, 0);\n    return function ArrowHelper(dir, origin, length, color, headLength, headWidth) {\n      // dir is assumed to be normalized\n      THREE.Object3D.call(this);\n      if (color === undefined) color = 0xffff00;\n      if (length === undefined) length = 1;\n      if (headLength === undefined) headLength = 0.2 * length;\n      if (headWidth === undefined) headWidth = 0.2 * headLength;\n      this.position.copy(origin);\n      this.line = new THREE.Line(lineGeometry, new THREE.LineBasicMaterial({\n        color: color\n      }));\n      this.line.matrixAutoUpdate = false;\n      this.add(this.line);\n      this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({\n        color: color\n      }));\n      this.cone.matrixAutoUpdate = false;\n      this.add(this.cone);\n      this.setDirection(dir);\n      this.setLength(length, headLength, headWidth);\n    };\n  }();\n\n  THREE.ArrowHelper.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\n\n  THREE.ArrowHelper.prototype.setDirection = function () {\n    var axis = new THREE.Vector3();\n    var radians;\n    return function setDirection(dir) {\n      // dir is assumed to be normalized\n      if (dir.y > 0.99999) {\n        this.quaternion.set(0, 0, 0, 1);\n      } else if (dir.y < -0.99999) {\n        this.quaternion.set(1, 0, 0, 0);\n      } else {\n        axis.set(dir.z, 0, -dir.x).normalize();\n        radians = Math.acos(dir.y);\n        this.quaternion.setFromAxisAngle(axis, radians);\n      }\n    };\n  }();\n\n  THREE.ArrowHelper.prototype.setLength = function (length, headLength, headWidth) {\n    if (headLength === undefined) headLength = 0.2 * length;\n    if (headWidth === undefined) headWidth = 0.2 * headLength;\n    this.line.scale.set(1, Math.max(0, length - headLength), 1);\n    this.line.updateMatrix();\n    this.cone.scale.set(headWidth, headLength, headWidth);\n    this.cone.position.y = length;\n    this.cone.updateMatrix();\n  };\n\n  THREE.ArrowHelper.prototype.setColor = function (color) {\n    this.line.material.color.copy(color);\n    this.cone.material.color.copy(color);\n  }; // File:src/extras/helpers/BoxHelper.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.BoxHelper = function (object, color) {\n    if (color === undefined) color = 0xffff00;\n    var indices = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);\n    var positions = new Float32Array(8 * 3);\n    var geometry = new THREE.BufferGeometry();\n    geometry.setIndex(new THREE.BufferAttribute(indices, 1));\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3));\n    THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n      color: color\n    }));\n\n    if (object !== undefined) {\n      this.update(object);\n    }\n  };\n\n  THREE.BoxHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\n\n  THREE.BoxHelper.prototype.update = function () {\n    var box = new THREE.Box3();\n    return function update(object) {\n      if (object instanceof THREE.Box3) {\n        box.copy(object);\n      } else {\n        box.setFromObject(object);\n      }\n\n      if (box.isEmpty()) return;\n      var min = box.min;\n      var max = box.max;\n      /*\n        5____4\n      1/___0/|\n      | 6__|_7\n      2/___3/\n      \t0: max.x, max.y, max.z\n      1: min.x, max.y, max.z\n      2: min.x, min.y, max.z\n      3: max.x, min.y, max.z\n      4: max.x, max.y, min.z\n      5: min.x, max.y, min.z\n      6: min.x, min.y, min.z\n      7: max.x, min.y, min.z\n      */\n\n      var position = this.geometry.attributes.position;\n      var array = position.array;\n      array[0] = max.x;\n      array[1] = max.y;\n      array[2] = max.z;\n      array[3] = min.x;\n      array[4] = max.y;\n      array[5] = max.z;\n      array[6] = min.x;\n      array[7] = min.y;\n      array[8] = max.z;\n      array[9] = max.x;\n      array[10] = min.y;\n      array[11] = max.z;\n      array[12] = max.x;\n      array[13] = max.y;\n      array[14] = min.z;\n      array[15] = min.x;\n      array[16] = max.y;\n      array[17] = min.z;\n      array[18] = min.x;\n      array[19] = min.y;\n      array[20] = min.z;\n      array[21] = max.x;\n      array[22] = min.y;\n      array[23] = min.z;\n      position.needsUpdate = true;\n      this.geometry.computeBoundingSphere();\n    };\n  }(); // File:src/extras/helpers/BoundingBoxHelper.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   */\n  // a helper to show the world-axis-aligned bounding box for an object\n\n\n  THREE.BoundingBoxHelper = function (object, hex) {\n    var color = hex !== undefined ? hex : 0x888888;\n    this.object = object;\n    this.box = new THREE.Box3();\n    THREE.Mesh.call(this, new THREE.BoxGeometry(1, 1, 1), new THREE.MeshBasicMaterial({\n      color: color,\n      wireframe: true\n    }));\n  };\n\n  THREE.BoundingBoxHelper.prototype = Object.create(THREE.Mesh.prototype);\n  THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\n\n  THREE.BoundingBoxHelper.prototype.update = function () {\n    this.box.setFromObject(this.object);\n    this.box.size(this.scale);\n    this.box.center(this.position);\n  }; // File:src/extras/helpers/CameraHelper.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   *\t- shows frustum, line of sight and up of the camera\n   *\t- suitable for fast updates\n   * \t- based on frustum visualization in lightgl.js shadowmap example\n   *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n   */\n\n\n  THREE.CameraHelper = function (camera) {\n    var geometry = new THREE.Geometry();\n    var material = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      vertexColors: THREE.FaceColors\n    });\n    var pointMap = {}; // colors\n\n    var hexFrustum = 0xffaa00;\n    var hexCone = 0xff0000;\n    var hexUp = 0x00aaff;\n    var hexTarget = 0xffffff;\n    var hexCross = 0x333333; // near\n\n    addLine(\"n1\", \"n2\", hexFrustum);\n    addLine(\"n2\", \"n4\", hexFrustum);\n    addLine(\"n4\", \"n3\", hexFrustum);\n    addLine(\"n3\", \"n1\", hexFrustum); // far\n\n    addLine(\"f1\", \"f2\", hexFrustum);\n    addLine(\"f2\", \"f4\", hexFrustum);\n    addLine(\"f4\", \"f3\", hexFrustum);\n    addLine(\"f3\", \"f1\", hexFrustum); // sides\n\n    addLine(\"n1\", \"f1\", hexFrustum);\n    addLine(\"n2\", \"f2\", hexFrustum);\n    addLine(\"n3\", \"f3\", hexFrustum);\n    addLine(\"n4\", \"f4\", hexFrustum); // cone\n\n    addLine(\"p\", \"n1\", hexCone);\n    addLine(\"p\", \"n2\", hexCone);\n    addLine(\"p\", \"n3\", hexCone);\n    addLine(\"p\", \"n4\", hexCone); // up\n\n    addLine(\"u1\", \"u2\", hexUp);\n    addLine(\"u2\", \"u3\", hexUp);\n    addLine(\"u3\", \"u1\", hexUp); // target\n\n    addLine(\"c\", \"t\", hexTarget);\n    addLine(\"p\", \"c\", hexCross); // cross\n\n    addLine(\"cn1\", \"cn2\", hexCross);\n    addLine(\"cn3\", \"cn4\", hexCross);\n    addLine(\"cf1\", \"cf2\", hexCross);\n    addLine(\"cf3\", \"cf4\", hexCross);\n\n    function addLine(a, b, hex) {\n      addPoint(a, hex);\n      addPoint(b, hex);\n    }\n\n    function addPoint(id, hex) {\n      geometry.vertices.push(new THREE.Vector3());\n      geometry.colors.push(new THREE.Color(hex));\n\n      if (pointMap[id] === undefined) {\n        pointMap[id] = [];\n      }\n\n      pointMap[id].push(geometry.vertices.length - 1);\n    }\n\n    THREE.LineSegments.call(this, geometry, material);\n    this.camera = camera;\n    if (this.camera.updateProjectionMatrix) this.camera.updateProjectionMatrix();\n    this.matrix = camera.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.pointMap = pointMap;\n    this.update();\n  };\n\n  THREE.CameraHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\n\n  THREE.CameraHelper.prototype.update = function () {\n    var geometry, pointMap;\n    var vector = new THREE.Vector3();\n    var camera = new THREE.Camera();\n\n    function setPoint(point, x, y, z) {\n      vector.set(x, y, z).unproject(camera);\n      var points = pointMap[point];\n\n      if (points !== undefined) {\n        for (var i = 0, il = points.length; i < il; i++) {\n          geometry.vertices[points[i]].copy(vector);\n        }\n      }\n    }\n\n    return function update() {\n      geometry = this.geometry;\n      pointMap = this.pointMap;\n      var w = 1,\n          h = 1; // we need just camera projection matrix\n      // world matrix must be identity\n\n      camera.projectionMatrix.copy(this.camera.projectionMatrix); // center / target\n\n      setPoint(\"c\", 0, 0, -1);\n      setPoint(\"t\", 0, 0, 1); // near\n\n      setPoint(\"n1\", -w, -h, -1);\n      setPoint(\"n2\", w, -h, -1);\n      setPoint(\"n3\", -w, h, -1);\n      setPoint(\"n4\", w, h, -1); // far\n\n      setPoint(\"f1\", -w, -h, 1);\n      setPoint(\"f2\", w, -h, 1);\n      setPoint(\"f3\", -w, h, 1);\n      setPoint(\"f4\", w, h, 1); // up\n\n      setPoint(\"u1\", w * 0.7, h * 1.1, -1);\n      setPoint(\"u2\", -w * 0.7, h * 1.1, -1);\n      setPoint(\"u3\", 0, h * 2, -1); // cross\n\n      setPoint(\"cf1\", -w, 0, 1);\n      setPoint(\"cf2\", w, 0, 1);\n      setPoint(\"cf3\", 0, -h, 1);\n      setPoint(\"cf4\", 0, h, 1);\n      setPoint(\"cn1\", -w, 0, -1);\n      setPoint(\"cn2\", w, 0, -1);\n      setPoint(\"cn3\", 0, -h, -1);\n      setPoint(\"cn4\", 0, h, -1);\n      geometry.verticesNeedUpdate = true;\n    };\n  }(); // File:src/extras/helpers/DirectionalLightHelper.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n   */\n\n\n  THREE.DirectionalLightHelper = function (light, size) {\n    THREE.Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    if (size === undefined) size = 1;\n    var geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.Float32Attribute([-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0], 3));\n    var material = new THREE.LineBasicMaterial({\n      fog: false\n    });\n    this.add(new THREE.Line(geometry, material));\n    geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.Float32Attribute([0, 0, 0, 0, 0, 1], 3));\n    this.add(new THREE.Line(geometry, material));\n    this.update();\n  };\n\n  THREE.DirectionalLightHelper.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\n\n  THREE.DirectionalLightHelper.prototype.dispose = function () {\n    var lightPlane = this.children[0];\n    var targetLine = this.children[1];\n    lightPlane.geometry.dispose();\n    lightPlane.material.dispose();\n    targetLine.geometry.dispose();\n    targetLine.material.dispose();\n  };\n\n  THREE.DirectionalLightHelper.prototype.update = function () {\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    var v3 = new THREE.Vector3();\n    return function update() {\n      v1.setFromMatrixPosition(this.light.matrixWorld);\n      v2.setFromMatrixPosition(this.light.target.matrixWorld);\n      v3.subVectors(v2, v1);\n      var lightPlane = this.children[0];\n      var targetLine = this.children[1];\n      lightPlane.lookAt(v3);\n      lightPlane.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n      targetLine.lookAt(v3);\n      targetLine.scale.z = v3.length();\n    };\n  }(); // File:src/extras/helpers/EdgesHelper.js\n\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   * @param object THREE.Mesh whose geometry will be used\n   * @param hex line color\n   * @param thresholdAngle the minimum angle (in degrees),\n   * between the face normals of adjacent faces,\n   * that is required to render an edge. A value of 10 means\n   * an edge is only rendered if the angle is at least 10 degrees.\n   */\n\n\n  THREE.EdgesHelper = function (object, hex, thresholdAngle) {\n    var color = hex !== undefined ? hex : 0xffffff;\n    THREE.LineSegments.call(this, new THREE.EdgesGeometry(object.geometry, thresholdAngle), new THREE.LineBasicMaterial({\n      color: color\n    }));\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n  };\n\n  THREE.EdgesHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper; // File:src/extras/helpers/FaceNormalsHelper.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n  */\n\n  THREE.FaceNormalsHelper = function (object, size, hex, linewidth) {\n    // FaceNormalsHelper only supports THREE.Geometry\n    this.object = object;\n    this.size = size !== undefined ? size : 1;\n    var color = hex !== undefined ? hex : 0xffff00;\n    var width = linewidth !== undefined ? linewidth : 1; //\n\n    var nNormals = 0;\n    var objGeometry = this.object.geometry;\n\n    if (objGeometry instanceof THREE.Geometry) {\n      nNormals = objGeometry.faces.length;\n    } else {\n      console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');\n    } //\n\n\n    var geometry = new THREE.BufferGeometry();\n    var positions = new THREE.Float32Attribute(nNormals * 2 * 3, 3);\n    geometry.addAttribute('position', positions);\n    THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n      color: color,\n      linewidth: width\n    })); //\n\n    this.matrixAutoUpdate = false;\n    this.update();\n  };\n\n  THREE.FaceNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\n\n  THREE.FaceNormalsHelper.prototype.update = function () {\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    var normalMatrix = new THREE.Matrix3();\n    return function update() {\n      this.object.updateMatrixWorld(true);\n      normalMatrix.getNormalMatrix(this.object.matrixWorld);\n      var matrixWorld = this.object.matrixWorld;\n      var position = this.geometry.attributes.position; //\n\n      var objGeometry = this.object.geometry;\n      var vertices = objGeometry.vertices;\n      var faces = objGeometry.faces;\n      var idx = 0;\n\n      for (var i = 0, l = faces.length; i < l; i++) {\n        var face = faces[i];\n        var normal = face.normal;\n        v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);\n        v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n        position.setXYZ(idx, v1.x, v1.y, v1.z);\n        idx = idx + 1;\n        position.setXYZ(idx, v2.x, v2.y, v2.z);\n        idx = idx + 1;\n      }\n\n      position.needsUpdate = true;\n      return this;\n    };\n  }(); // File:src/extras/helpers/GridHelper.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.GridHelper = function (size, divisions, color1, color2) {\n    divisions = divisions || 1;\n    color1 = new THREE.Color(color1 !== undefined ? color1 : 0x444444);\n    color2 = new THREE.Color(color2 !== undefined ? color2 : 0x888888);\n    var center = divisions / 2;\n    var step = size * 2 / divisions;\n    var vertices = [],\n        colors = [];\n\n    for (var i = 0, j = 0, k = -size; i <= divisions; i++, k += step) {\n      vertices.push(-size, 0, k, size, 0, k);\n      vertices.push(k, 0, -size, k, 0, size);\n      var color = i === center ? color1 : color2;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n      color.toArray(colors, j);\n      j += 3;\n    }\n\n    var geometry = new THREE.BufferGeometry();\n    geometry.addAttribute('position', new THREE.Float32Attribute(vertices, 3));\n    geometry.addAttribute('color', new THREE.Float32Attribute(colors, 3));\n    var material = new THREE.LineBasicMaterial({\n      vertexColors: THREE.VertexColors\n    });\n    THREE.LineSegments.call(this, geometry, material);\n  };\n\n  THREE.GridHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.GridHelper.prototype.constructor = THREE.GridHelper;\n\n  THREE.GridHelper.prototype.setColors = function () {\n    console.error('THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.');\n  }; // File:src/extras/helpers/HemisphereLightHelper.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.HemisphereLightHelper = function (light, sphereSize) {\n    THREE.Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.colors = [new THREE.Color(), new THREE.Color()];\n    var geometry = new THREE.SphereGeometry(sphereSize, 4, 2);\n    geometry.rotateX(-Math.PI / 2);\n\n    for (var i = 0, il = 8; i < il; i++) {\n      geometry.faces[i].color = this.colors[i < 4 ? 0 : 1];\n    }\n\n    var material = new THREE.MeshBasicMaterial({\n      vertexColors: THREE.FaceColors,\n      wireframe: true\n    });\n    this.lightSphere = new THREE.Mesh(geometry, material);\n    this.add(this.lightSphere);\n    this.update();\n  };\n\n  THREE.HemisphereLightHelper.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\n\n  THREE.HemisphereLightHelper.prototype.dispose = function () {\n    this.lightSphere.geometry.dispose();\n    this.lightSphere.material.dispose();\n  };\n\n  THREE.HemisphereLightHelper.prototype.update = function () {\n    var vector = new THREE.Vector3();\n    return function update() {\n      this.colors[0].copy(this.light.color).multiplyScalar(this.light.intensity);\n      this.colors[1].copy(this.light.groundColor).multiplyScalar(this.light.intensity);\n      this.lightSphere.lookAt(vector.setFromMatrixPosition(this.light.matrixWorld).negate());\n      this.lightSphere.geometry.colorsNeedUpdate = true;\n    };\n  }(); // File:src/extras/helpers/PointLightHelper.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.PointLightHelper = function (light, sphereSize) {\n    this.light = light;\n    this.light.updateMatrixWorld();\n    var geometry = new THREE.SphereBufferGeometry(sphereSize, 4, 2);\n    var material = new THREE.MeshBasicMaterial({\n      wireframe: true,\n      fog: false\n    });\n    material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n    THREE.Mesh.call(this, geometry, material);\n    this.matrix = this.light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    /*\n    var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n    var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n    \tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n    this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n    \tvar d = light.distance;\n    \tif ( d === 0.0 ) {\n    \t\tthis.lightDistance.visible = false;\n    \t} else {\n    \t\tthis.lightDistance.scale.set( d, d, d );\n    \t}\n    \tthis.add( this.lightDistance );\n    */\n  };\n\n  THREE.PointLightHelper.prototype = Object.create(THREE.Mesh.prototype);\n  THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\n\n  THREE.PointLightHelper.prototype.dispose = function () {\n    this.geometry.dispose();\n    this.material.dispose();\n  };\n\n  THREE.PointLightHelper.prototype.update = function () {\n    this.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n    /*\n    var d = this.light.distance;\n    \tif ( d === 0.0 ) {\n    \t\tthis.lightDistance.visible = false;\n    \t} else {\n    \t\tthis.lightDistance.visible = true;\n    \tthis.lightDistance.scale.set( d, d, d );\n    \t}\n    */\n  }; // File:src/extras/helpers/SkeletonHelper.js\n\n  /**\n   * @author Sean Griffin / http://twitter.com/sgrif\n   * @author Michael Guerrero / http://realitymeltdown.com\n   * @author mrdoob / http://mrdoob.com/\n   * @author ikerr / http://verold.com\n   */\n\n\n  THREE.SkeletonHelper = function (object) {\n    this.bones = this.getBoneList(object);\n    var geometry = new THREE.Geometry();\n\n    for (var i = 0; i < this.bones.length; i++) {\n      var bone = this.bones[i];\n\n      if (bone.parent instanceof THREE.Bone) {\n        geometry.vertices.push(new THREE.Vector3());\n        geometry.vertices.push(new THREE.Vector3());\n        geometry.colors.push(new THREE.Color(0, 0, 1));\n        geometry.colors.push(new THREE.Color(0, 1, 0));\n      }\n    }\n\n    geometry.dynamic = true;\n    var material = new THREE.LineBasicMaterial({\n      vertexColors: THREE.VertexColors,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    THREE.LineSegments.call(this, geometry, material);\n    this.root = object;\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n    this.update();\n  };\n\n  THREE.SkeletonHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\n\n  THREE.SkeletonHelper.prototype.getBoneList = function (object) {\n    var boneList = [];\n\n    if (object instanceof THREE.Bone) {\n      boneList.push(object);\n    }\n\n    for (var i = 0; i < object.children.length; i++) {\n      boneList.push.apply(boneList, this.getBoneList(object.children[i]));\n    }\n\n    return boneList;\n  };\n\n  THREE.SkeletonHelper.prototype.update = function () {\n    var geometry = this.geometry;\n    var matrixWorldInv = new THREE.Matrix4().getInverse(this.root.matrixWorld);\n    var boneMatrix = new THREE.Matrix4();\n    var j = 0;\n\n    for (var i = 0; i < this.bones.length; i++) {\n      var bone = this.bones[i];\n\n      if (bone.parent instanceof THREE.Bone) {\n        boneMatrix.multiplyMatrices(matrixWorldInv, bone.matrixWorld);\n        geometry.vertices[j].setFromMatrixPosition(boneMatrix);\n        boneMatrix.multiplyMatrices(matrixWorldInv, bone.parent.matrixWorld);\n        geometry.vertices[j + 1].setFromMatrixPosition(boneMatrix);\n        j += 2;\n      }\n    }\n\n    geometry.verticesNeedUpdate = true;\n    geometry.computeBoundingSphere();\n  }; // File:src/extras/helpers/SpotLightHelper.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n  */\n\n\n  THREE.SpotLightHelper = function (light) {\n    THREE.Object3D.call(this);\n    this.light = light;\n    this.light.updateMatrixWorld();\n    this.matrix = light.matrixWorld;\n    this.matrixAutoUpdate = false;\n    var geometry = new THREE.BufferGeometry();\n    var positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n    for (var i = 0, j = 1, l = 32; i < l; i++, j++) {\n      var p1 = i / l * Math.PI * 2;\n      var p2 = j / l * Math.PI * 2;\n      positions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n    }\n\n    geometry.addAttribute('position', new THREE.Float32Attribute(positions, 3));\n    var material = new THREE.LineBasicMaterial({\n      fog: false\n    });\n    this.cone = new THREE.LineSegments(geometry, material);\n    this.add(this.cone);\n    this.update();\n  };\n\n  THREE.SpotLightHelper.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\n\n  THREE.SpotLightHelper.prototype.dispose = function () {\n    this.cone.geometry.dispose();\n    this.cone.material.dispose();\n  };\n\n  THREE.SpotLightHelper.prototype.update = function () {\n    var vector = new THREE.Vector3();\n    var vector2 = new THREE.Vector3();\n    return function update() {\n      var coneLength = this.light.distance ? this.light.distance : 1000;\n      var coneWidth = coneLength * Math.tan(this.light.angle);\n      this.cone.scale.set(coneWidth, coneWidth, coneLength);\n      vector.setFromMatrixPosition(this.light.matrixWorld);\n      vector2.setFromMatrixPosition(this.light.target.matrixWorld);\n      this.cone.lookAt(vector2.sub(vector));\n      this.cone.material.color.copy(this.light.color).multiplyScalar(this.light.intensity);\n    };\n  }(); // File:src/extras/helpers/VertexNormalsHelper.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author WestLangley / http://github.com/WestLangley\n  */\n\n\n  THREE.VertexNormalsHelper = function (object, size, hex, linewidth) {\n    this.object = object;\n    this.size = size !== undefined ? size : 1;\n    var color = hex !== undefined ? hex : 0xff0000;\n    var width = linewidth !== undefined ? linewidth : 1; //\n\n    var nNormals = 0;\n    var objGeometry = this.object.geometry;\n\n    if (objGeometry instanceof THREE.Geometry) {\n      nNormals = objGeometry.faces.length * 3;\n    } else if (objGeometry instanceof THREE.BufferGeometry) {\n      nNormals = objGeometry.attributes.normal.count;\n    } //\n\n\n    var geometry = new THREE.BufferGeometry();\n    var positions = new THREE.Float32Attribute(nNormals * 2 * 3, 3);\n    geometry.addAttribute('position', positions);\n    THREE.LineSegments.call(this, geometry, new THREE.LineBasicMaterial({\n      color: color,\n      linewidth: width\n    })); //\n\n    this.matrixAutoUpdate = false;\n    this.update();\n  };\n\n  THREE.VertexNormalsHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\n\n  THREE.VertexNormalsHelper.prototype.update = function () {\n    var v1 = new THREE.Vector3();\n    var v2 = new THREE.Vector3();\n    var normalMatrix = new THREE.Matrix3();\n    return function update() {\n      var keys = ['a', 'b', 'c'];\n      this.object.updateMatrixWorld(true);\n      normalMatrix.getNormalMatrix(this.object.matrixWorld);\n      var matrixWorld = this.object.matrixWorld;\n      var position = this.geometry.attributes.position; //\n\n      var objGeometry = this.object.geometry;\n\n      if (objGeometry instanceof THREE.Geometry) {\n        var vertices = objGeometry.vertices;\n        var faces = objGeometry.faces;\n        var idx = 0;\n\n        for (var i = 0, l = faces.length; i < l; i++) {\n          var face = faces[i];\n\n          for (var j = 0, jl = face.vertexNormals.length; j < jl; j++) {\n            var vertex = vertices[face[keys[j]]];\n            var normal = face.vertexNormals[j];\n            v1.copy(vertex).applyMatrix4(matrixWorld);\n            v2.copy(normal).applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n            position.setXYZ(idx, v1.x, v1.y, v1.z);\n            idx = idx + 1;\n            position.setXYZ(idx, v2.x, v2.y, v2.z);\n            idx = idx + 1;\n          }\n        }\n      } else if (objGeometry instanceof THREE.BufferGeometry) {\n        var objPos = objGeometry.attributes.position;\n        var objNorm = objGeometry.attributes.normal;\n        var idx = 0; // for simplicity, ignore index and drawcalls, and render every normal\n\n        for (var j = 0, jl = objPos.count; j < jl; j++) {\n          v1.set(objPos.getX(j), objPos.getY(j), objPos.getZ(j)).applyMatrix4(matrixWorld);\n          v2.set(objNorm.getX(j), objNorm.getY(j), objNorm.getZ(j));\n          v2.applyMatrix3(normalMatrix).normalize().multiplyScalar(this.size).add(v1);\n          position.setXYZ(idx, v1.x, v1.y, v1.z);\n          idx = idx + 1;\n          position.setXYZ(idx, v2.x, v2.y, v2.z);\n          idx = idx + 1;\n        }\n      }\n\n      position.needsUpdate = true;\n      return this;\n    };\n  }(); // File:src/extras/helpers/WireframeHelper.js\n\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n\n\n  THREE.WireframeHelper = function (object, hex) {\n    var color = hex !== undefined ? hex : 0xffffff;\n    THREE.LineSegments.call(this, new THREE.WireframeGeometry(object.geometry), new THREE.LineBasicMaterial({\n      color: color\n    }));\n    this.matrix = object.matrixWorld;\n    this.matrixAutoUpdate = false;\n  };\n\n  THREE.WireframeHelper.prototype = Object.create(THREE.LineSegments.prototype);\n  THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper; // File:src/extras/objects/ImmediateRenderObject.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.ImmediateRenderObject = function (material) {\n    THREE.Object3D.call(this);\n    this.material = material;\n\n    this.render = function (renderCallback) {};\n  };\n\n  THREE.ImmediateRenderObject.prototype = Object.create(THREE.Object3D.prototype);\n  THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject; // File:src/extras/objects/MorphBlendMesh.js\n\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n\n  THREE.MorphBlendMesh = function (geometry, material) {\n    THREE.Mesh.call(this, geometry, material);\n    this.animationsMap = {};\n    this.animationsList = []; // prepare default animation\n    // (all frames played together in 1 second)\n\n    var numFrames = this.geometry.morphTargets.length;\n    var name = \"__default\";\n    var startFrame = 0;\n    var endFrame = numFrames - 1;\n    var fps = numFrames / 1;\n    this.createAnimation(name, startFrame, endFrame, fps);\n    this.setAnimationWeight(name, 1);\n  };\n\n  THREE.MorphBlendMesh.prototype = Object.create(THREE.Mesh.prototype);\n  THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\n\n  THREE.MorphBlendMesh.prototype.createAnimation = function (name, start, end, fps) {\n    var animation = {\n      start: start,\n      end: end,\n      length: end - start + 1,\n      fps: fps,\n      duration: (end - start) / fps,\n      lastFrame: 0,\n      currentFrame: 0,\n      active: false,\n      time: 0,\n      direction: 1,\n      weight: 1,\n      directionBackwards: false,\n      mirroredLoop: false\n    };\n    this.animationsMap[name] = animation;\n    this.animationsList.push(animation);\n  };\n\n  THREE.MorphBlendMesh.prototype.autoCreateAnimations = function (fps) {\n    var pattern = /([a-z]+)_?(\\d+)/i;\n    var firstAnimation,\n        frameRanges = {};\n    var geometry = this.geometry;\n\n    for (var i = 0, il = geometry.morphTargets.length; i < il; i++) {\n      var morph = geometry.morphTargets[i];\n      var chunks = morph.name.match(pattern);\n\n      if (chunks && chunks.length > 1) {\n        var name = chunks[1];\n        if (!frameRanges[name]) frameRanges[name] = {\n          start: Infinity,\n          end: -Infinity\n        };\n        var range = frameRanges[name];\n        if (i < range.start) range.start = i;\n        if (i > range.end) range.end = i;\n        if (!firstAnimation) firstAnimation = name;\n      }\n    }\n\n    for (var name in frameRanges) {\n      var range = frameRanges[name];\n      this.createAnimation(name, range.start, range.end, fps);\n    }\n\n    this.firstAnimation = firstAnimation;\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function (name) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.direction = 1;\n      animation.directionBackwards = false;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function (name) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.direction = -1;\n      animation.directionBackwards = true;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationFPS = function (name, fps) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.fps = fps;\n      animation.duration = (animation.end - animation.start) / animation.fps;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationDuration = function (name, duration) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.duration = duration;\n      animation.fps = (animation.end - animation.start) / animation.duration;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationWeight = function (name, weight) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.weight = weight;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.setAnimationTime = function (name, time) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.time = time;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.getAnimationTime = function (name) {\n    var time = 0;\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      time = animation.time;\n    }\n\n    return time;\n  };\n\n  THREE.MorphBlendMesh.prototype.getAnimationDuration = function (name) {\n    var duration = -1;\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      duration = animation.duration;\n    }\n\n    return duration;\n  };\n\n  THREE.MorphBlendMesh.prototype.playAnimation = function (name) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.time = 0;\n      animation.active = true;\n    } else {\n      console.warn(\"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\");\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.stopAnimation = function (name) {\n    var animation = this.animationsMap[name];\n\n    if (animation) {\n      animation.active = false;\n    }\n  };\n\n  THREE.MorphBlendMesh.prototype.update = function (delta) {\n    for (var i = 0, il = this.animationsList.length; i < il; i++) {\n      var animation = this.animationsList[i];\n      if (!animation.active) continue;\n      var frameTime = animation.duration / animation.length;\n      animation.time += animation.direction * delta;\n\n      if (animation.mirroredLoop) {\n        if (animation.time > animation.duration || animation.time < 0) {\n          animation.direction *= -1;\n\n          if (animation.time > animation.duration) {\n            animation.time = animation.duration;\n            animation.directionBackwards = true;\n          }\n\n          if (animation.time < 0) {\n            animation.time = 0;\n            animation.directionBackwards = false;\n          }\n        }\n      } else {\n        animation.time = animation.time % animation.duration;\n        if (animation.time < 0) animation.time += animation.duration;\n      }\n\n      var keyframe = animation.start + THREE.Math.clamp(Math.floor(animation.time / frameTime), 0, animation.length - 1);\n      var weight = animation.weight;\n\n      if (keyframe !== animation.currentFrame) {\n        this.morphTargetInfluences[animation.lastFrame] = 0;\n        this.morphTargetInfluences[animation.currentFrame] = 1 * weight;\n        this.morphTargetInfluences[keyframe] = 0;\n        animation.lastFrame = animation.currentFrame;\n        animation.currentFrame = keyframe;\n      }\n\n      var mix = animation.time % frameTime / frameTime;\n      if (animation.directionBackwards) mix = 1 - mix;\n\n      if (animation.currentFrame !== animation.lastFrame) {\n        this.morphTargetInfluences[animation.currentFrame] = mix * weight;\n        this.morphTargetInfluences[animation.lastFrame] = (1 - mix) * weight;\n      } else {\n        this.morphTargetInfluences[animation.currentFrame] = weight;\n      }\n    }\n  };\n\n  if (typeof define !== \"undefined\" && define instanceof Function && define.amd != undefined) {\n    define(function () {\n      return THREE;\n    });\n  } else if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = THREE;\n  } else if (this != undefined) {\n    this.THREE = THREE;\n  }\n\n  ;\n})(this || {});","module.exports = function() {\n\tthrow new Error(\"define cannot be used indirect\");\n};\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","module.exports = function (THREE) {\n  /**\n   * @author miibond\n   * Generate a texture that represents the luminosity of the current scene, adapted over time\n   * to simulate the optic nerve responding to the amount of light it is receiving.\n   * Based on a GDC2007 presentation by Wolfgang Engel titled \"Post-Processing Pipeline\"\n   *\n   * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf\n   */\n  THREE.AdaptiveToneMappingPass = function (adaptive, resolution) {\n    this.resolution = resolution !== undefined ? resolution : 256;\n    this.needsInit = true;\n    this.adaptive = adaptive !== undefined ? !!adaptive : true;\n    this.luminanceRT = null;\n    this.previousLuminanceRT = null;\n    this.currentLuminanceRT = null;\n    if (THREE.CopyShader === undefined) console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.CopyShader\");\n    var copyShader = THREE.CopyShader;\n    this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n    this.materialCopy = new THREE.ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: THREE.NoBlending,\n      depthTest: false\n    });\n    if (THREE.LuminosityShader === undefined) console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.LuminosityShader\");\n    this.materialLuminance = new THREE.ShaderMaterial({\n      uniforms: THREE.UniformsUtils.clone(THREE.LuminosityShader.uniforms),\n      vertexShader: THREE.LuminosityShader.vertexShader,\n      fragmentShader: THREE.LuminosityShader.fragmentShader,\n      blending: THREE.NoBlending\n    });\n    this.adaptLuminanceShader = {\n      defines: {\n        \"MIP_LEVEL_1X1\": (Math.log(this.resolution) / Math.log(2.0)).toFixed(1)\n      },\n      uniforms: {\n        \"lastLum\": {\n          type: \"t\",\n          value: null\n        },\n        \"currentLum\": {\n          type: \"t\",\n          value: null\n        },\n        \"delta\": {\n          type: 'f',\n          value: 0.016\n        },\n        \"tau\": {\n          type: 'f',\n          value: 1.0\n        }\n      },\n      vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join('\\n'),\n      fragmentShader: [\"varying vec2 vUv;\", \"uniform sampler2D lastLum;\", \"uniform sampler2D currentLum;\", \"uniform float delta;\", \"uniform float tau;\", \"void main() {\", \"vec4 lastLum = texture2D( lastLum, vUv, MIP_LEVEL_1X1 );\", \"vec4 currentLum = texture2D( currentLum, vUv, MIP_LEVEL_1X1 );\", \"float fLastLum = lastLum.r;\", \"float fCurrentLum = currentLum.r;\", //The adaption seems to work better in extreme lighting differences\n      //if the input luminance is squared.\n      \"fCurrentLum *= fCurrentLum;\", // Adapt the luminance using Pattanaik's technique\n      \"float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\", // \"fAdaptedLum = sqrt(fAdaptedLum);\",\n      \"gl_FragColor = vec4( vec3( fAdaptedLum ), 1.0 );\", \"}\"].join('\\n')\n    };\n    this.materialAdaptiveLum = new THREE.ShaderMaterial({\n      uniforms: THREE.UniformsUtils.clone(this.adaptLuminanceShader.uniforms),\n      vertexShader: this.adaptLuminanceShader.vertexShader,\n      fragmentShader: this.adaptLuminanceShader.fragmentShader,\n      defines: this.adaptLuminanceShader.defines,\n      blending: THREE.NoBlending\n    });\n    if (THREE.ToneMapShader === undefined) console.error(\"THREE.AdaptiveToneMappingPass relies on THREE.ToneMapShader\");\n    this.materialToneMap = new THREE.ShaderMaterial({\n      uniforms: THREE.UniformsUtils.clone(THREE.ToneMapShader.uniforms),\n      vertexShader: THREE.ToneMapShader.vertexShader,\n      fragmentShader: THREE.ToneMapShader.fragmentShader,\n      blending: THREE.NoBlending\n    });\n    this.enabled = true;\n    this.needsSwap = true;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.AdaptiveToneMappingPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n      if (this.needsInit) {\n        this.reset(renderer);\n        this.luminanceRT.type = readBuffer.type;\n        this.previousLuminanceRT.type = readBuffer.type;\n        this.currentLuminanceRT.type = readBuffer.type;\n        this.needsInit = false;\n      }\n\n      if (this.adaptive) {\n        //Render the luminance of the current scene into a render target with mipmapping enabled\n        this.quad.material = this.materialLuminance;\n        this.materialLuminance.uniforms.tDiffuse.value = readBuffer;\n        renderer.render(this.scene, this.camera, this.currentLuminanceRT); //Use the new luminance values, the previous luminance and the frame delta to\n        //adapt the luminance over time.\n\n        this.quad.material = this.materialAdaptiveLum;\n        this.materialAdaptiveLum.uniforms.delta.value = delta;\n        this.materialAdaptiveLum.uniforms.lastLum.value = this.previousLuminanceRT;\n        this.materialAdaptiveLum.uniforms.currentLum.value = this.currentLuminanceRT;\n        renderer.render(this.scene, this.camera, this.luminanceRT); //Copy the new adapted luminance value so that it can be used by the next frame.\n\n        this.quad.material = this.materialCopy;\n        this.copyUniforms.tDiffuse.value = this.luminanceRT;\n        renderer.render(this.scene, this.camera, this.previousLuminanceRT);\n      }\n\n      this.quad.material = this.materialToneMap;\n      this.materialToneMap.uniforms.tDiffuse.value = readBuffer;\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n    },\n    reset: function reset(renderer) {\n      // render targets\n      if (this.luminanceRT) {\n        this.luminanceRT.dispose();\n      }\n\n      if (this.currentLuminanceRT) {\n        this.currentLuminanceRT.dispose();\n      }\n\n      if (this.previousLuminanceRT) {\n        this.previousLuminanceRT.dispose();\n      }\n\n      var pars = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat\n      };\n      this.luminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, pars);\n      this.luminanceRT.generateMipmaps = false;\n      this.previousLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, pars);\n      this.previousLuminanceRT.generateMipmaps = false; //We only need mipmapping for the current luminosity because we want a down-sampled version to sample in our adaptive shader\n\n      pars.minFilter = THREE.LinearMipMapLinearFilter;\n      this.currentLuminanceRT = new THREE.WebGLRenderTarget(this.resolution, this.resolution, pars);\n\n      if (this.adaptive) {\n        this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n        this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;\n      } //Put something in the adaptive luminance texture so that the scene can render initially\n\n\n      this.quad.material = new THREE.MeshBasicMaterial({\n        color: 0x777777\n      });\n      this.materialLuminance.needsUpdate = true;\n      this.materialAdaptiveLum.needsUpdate = true;\n      this.materialToneMap.needsUpdate = true; // renderer.render( this.scene, this.camera, this.luminanceRT );\n      // renderer.render( this.scene, this.camera, this.previousLuminanceRT );\n      // renderer.render( this.scene, this.camera, this.currentLuminanceRT );\n    },\n    setAdaptive: function setAdaptive(adaptive) {\n      if (adaptive) {\n        this.adaptive = true;\n        this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"] = \"\";\n        this.materialToneMap.uniforms.luminanceMap.value = this.luminanceRT;\n      } else {\n        this.adaptive = false;\n        delete this.materialToneMap.defines[\"ADAPTED_LUMINANCE\"];\n        this.materialToneMap.uniforms.luminanceMap.value = undefined;\n      }\n\n      this.materialToneMap.needsUpdate = true;\n    },\n    setAdaptionRate: function setAdaptionRate(rate) {\n      if (rate) {\n        this.materialAdaptiveLum.uniforms.tau.value = Math.abs(rate);\n      }\n    },\n    setMaxLuminance: function setMaxLuminance(maxLum) {\n      if (maxLum) {\n        this.materialToneMap.uniforms.maxLuminance.value = maxLum;\n      }\n    },\n    setAverageLuminance: function setAverageLuminance(avgLum) {\n      if (avgLum) {\n        this.materialToneMap.uniforms.averageLuminance.value = avgLum;\n      }\n    },\n    setMiddleGrey: function setMiddleGrey(middleGrey) {\n      if (middleGrey) {\n        this.materialToneMap.uniforms.middleGrey.value = middleGrey;\n      }\n    },\n    dispose: function dispose() {\n      if (this.luminanceRT) {\n        this.luminanceRT.dispose();\n      }\n\n      if (this.previousLuminanceRT) {\n        this.previousLuminanceRT.dispose();\n      }\n\n      if (this.currentLuminanceRT) {\n        this.currentLuminanceRT.dispose();\n      }\n\n      if (this.materialLuminance) {\n        this.materialLuminance.dispose();\n      }\n\n      if (this.materialAdaptiveLum) {\n        this.materialAdaptiveLum.dispose();\n      }\n\n      if (this.materialCopy) {\n        this.materialCopy.dispose();\n      }\n\n      if (this.materialToneMap) {\n        this.materialToneMap.dispose();\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://www.mrdoob.com\n   *\n   * Simple test shader\n   */\n  THREE.BasicShader = {\n    uniforms: {},\n    vertexShader: [\"void main() {\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"void main() {\", \"gl_FragColor = vec4( 1.0, 0.0, 0.0, 0.5 );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Bleach bypass shader [http://en.wikipedia.org/wiki/Bleach_bypass]\n   * - based on Nvidia example\n   * http://developer.download.nvidia.com/shaderlibrary/webpages/shader_library.html#post_bleach_bypass\n   */\n  THREE.BleachBypassShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 base = texture2D( tDiffuse, vUv );\", \"vec3 lumCoeff = vec3( 0.25, 0.65, 0.1 );\", \"float lum = dot( lumCoeff, base.rgb );\", \"vec3 blend = vec3( lum );\", \"float L = min( 1.0, max( 0.0, 10.0 * ( lum - 0.45 ) ) );\", \"vec3 result1 = 2.0 * base.rgb * blend;\", \"vec3 result2 = 1.0 - 2.0 * ( 1.0 - blend ) * ( 1.0 - base.rgb );\", \"vec3 newColor = mix( result1, result2, L );\", \"float A2 = opacity * base.a;\", \"vec3 mixRGB = A2 * newColor.rgb;\", \"mixRGB += ( ( 1.0 - A2 ) * base.rgb );\", \"gl_FragColor = vec4( mixRGB, base.a );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Blend two textures\n   */\n  THREE.BlendShader = {\n    uniforms: {\n      \"tDiffuse1\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDiffuse2\": {\n        type: \"t\",\n        value: null\n      },\n      \"mixRatio\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform float mixRatio;\", \"uniform sampler2D tDiffuse1;\", \"uniform sampler2D tDiffuse2;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel1 = texture2D( tDiffuse1, vUv );\", \"vec4 texel2 = texture2D( tDiffuse2, vUv );\", \"gl_FragColor = opacity * mix( texel1, texel2, mixRatio );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.BloomPass = function (strength, kernelSize, sigma, resolution) {\n    strength = strength !== undefined ? strength : 1;\n    kernelSize = kernelSize !== undefined ? kernelSize : 25;\n    sigma = sigma !== undefined ? sigma : 4.0;\n    resolution = resolution !== undefined ? resolution : 256; // render targets\n\n    var pars = {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBFormat\n    };\n    this.renderTargetX = new THREE.WebGLRenderTarget(resolution, resolution, pars);\n    this.renderTargetY = new THREE.WebGLRenderTarget(resolution, resolution, pars); // copy material\n\n    if (THREE.CopyShader === undefined) console.error(\"THREE.BloomPass relies on THREE.CopyShader\");\n    var copyShader = THREE.CopyShader;\n    this.copyUniforms = THREE.UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms[\"opacity\"].value = strength;\n    this.materialCopy = new THREE.ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: THREE.AdditiveBlending,\n      transparent: true\n    }); // convolution material\n\n    if (THREE.ConvolutionShader === undefined) console.error(\"THREE.BloomPass relies on THREE.ConvolutionShader\");\n    var convolutionShader = THREE.ConvolutionShader;\n    this.convolutionUniforms = THREE.UniformsUtils.clone(convolutionShader.uniforms);\n    this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurX;\n    this.convolutionUniforms[\"cKernel\"].value = THREE.ConvolutionShader.buildKernel(sigma);\n    this.materialConvolution = new THREE.ShaderMaterial({\n      uniforms: this.convolutionUniforms,\n      vertexShader: convolutionShader.vertexShader,\n      fragmentShader: convolutionShader.fragmentShader,\n      defines: {\n        \"KERNEL_SIZE_FLOAT\": kernelSize.toFixed(1),\n        \"KERNEL_SIZE_INT\": kernelSize.toFixed(0)\n      }\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.BloomPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n      if (maskActive) renderer.context.disable(renderer.context.STENCIL_TEST); // Render quad with blured scene into texture (convolution pass 1)\n\n      this.quad.material = this.materialConvolution;\n      this.convolutionUniforms[\"tDiffuse\"].value = readBuffer;\n      this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurX;\n      renderer.render(this.scene, this.camera, this.renderTargetX, true); // Render quad with blured scene into texture (convolution pass 2)\n\n      this.convolutionUniforms[\"tDiffuse\"].value = this.renderTargetX;\n      this.convolutionUniforms[\"uImageIncrement\"].value = THREE.BloomPass.blurY;\n      renderer.render(this.scene, this.camera, this.renderTargetY, true); // Render original scene with superimposed blur to texture\n\n      this.quad.material = this.materialCopy;\n      this.copyUniforms[\"tDiffuse\"].value = this.renderTargetY;\n      if (maskActive) renderer.context.enable(renderer.context.STENCIL_TEST);\n      renderer.render(this.scene, this.camera, readBuffer, this.clear);\n    }\n  };\n  THREE.BloomPass.blurX = new THREE.Vector2(0.001953125, 0.0);\n  THREE.BloomPass.blurY = new THREE.Vector2(0.0, 0.001953125);\n};","module.exports = function (THREE) {\n  /**\n   * Depth-of-field post-process with bokeh shader\n   */\n  THREE.BokehPass = function (scene, camera, params) {\n    this.scene = scene;\n    this.camera = camera;\n    var focus = params.focus !== undefined ? params.focus : 1.0;\n    var aspect = params.aspect !== undefined ? params.aspect : camera.aspect;\n    var aperture = params.aperture !== undefined ? params.aperture : 0.025;\n    var maxblur = params.maxblur !== undefined ? params.maxblur : 1.0; // render targets\n\n    var width = params.width || window.innerWidth || 1;\n    var height = params.height || window.innerHeight || 1;\n    this.renderTargetColor = new THREE.WebGLRenderTarget(width, height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      format: THREE.RGBFormat\n    });\n    this.renderTargetDepth = this.renderTargetColor.clone(); // depth material\n\n    this.materialDepth = new THREE.MeshDepthMaterial(); // bokeh material\n\n    if (THREE.BokehShader === undefined) {\n      console.error(\"THREE.BokehPass relies on THREE.BokehShader\");\n    }\n\n    var bokehShader = THREE.BokehShader;\n    var bokehUniforms = THREE.UniformsUtils.clone(bokehShader.uniforms);\n    bokehUniforms[\"tDepth\"].value = this.renderTargetDepth;\n    bokehUniforms[\"focus\"].value = focus;\n    bokehUniforms[\"aspect\"].value = aspect;\n    bokehUniforms[\"aperture\"].value = aperture;\n    bokehUniforms[\"maxblur\"].value = maxblur;\n    this.materialBokeh = new THREE.ShaderMaterial({\n      uniforms: bokehUniforms,\n      vertexShader: bokehShader.vertexShader,\n      fragmentShader: bokehShader.fragmentShader\n    });\n    this.uniforms = bokehUniforms;\n    this.enabled = true;\n    this.needsSwap = false;\n    this.renderToScreen = false;\n    this.clear = false;\n    this.camera2 = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene2 = new THREE.Scene();\n    this.quad2 = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene2.add(this.quad2);\n  };\n\n  THREE.BokehPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta, maskActive) {\n      this.quad2.material = this.materialBokeh; // Render depth into texture\n\n      this.scene.overrideMaterial = this.materialDepth;\n      renderer.render(this.scene, this.camera, this.renderTargetDepth, true); // Render bokeh composite\n\n      this.uniforms[\"tColor\"].value = readBuffer;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene2, this.camera2);\n      } else {\n        renderer.render(this.scene2, this.camera2, writeBuffer, this.clear);\n      }\n\n      this.scene.overrideMaterial = null;\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Depth-of-field shader with bokeh\n   * ported from GLSL shader by Martins Upitis\n   * http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html\n   */\n  THREE.BokehShader = {\n    uniforms: {\n      \"tColor\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDepth\": {\n        type: \"t\",\n        value: null\n      },\n      \"focus\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"aspect\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"aperture\": {\n        type: \"f\",\n        value: 0.025\n      },\n      \"maxblur\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"varying vec2 vUv;\", \"uniform sampler2D tColor;\", \"uniform sampler2D tDepth;\", \"uniform float maxblur;\", // max blur amount\n    \"uniform float aperture;\", // aperture - bigger values for shallower depth of field\n    \"uniform float focus;\", \"uniform float aspect;\", \"void main() {\", \"vec2 aspectcorrect = vec2( 1.0, aspect );\", \"vec4 depth1 = texture2D( tDepth, vUv );\", \"float factor = depth1.x - focus;\", \"vec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\", \"vec2 dofblur9 = dofblur * 0.9;\", \"vec2 dofblur7 = dofblur * 0.7;\", \"vec2 dofblur4 = dofblur * 0.4;\", \"vec4 col = vec4( 0.0 );\", \"col += texture2D( tColor, vUv.xy );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\", \"col += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\", \"gl_FragColor = col / 41.0;\", \"gl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / https://github.com/zz85 | twitter.com/blurspline\n   *\n   * Depth-of-field shader with bokeh\n   * ported from GLSL shader by Martins Upitis\n   * http://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)\n   *\n   * Requires #define RINGS and SAMPLES integers\n   */\n  THREE.BokehShader = {\n    uniforms: {\n      \"textureWidth\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"textureHeight\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"focalDepth\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"focalLength\": {\n        type: \"f\",\n        value: 24.0\n      },\n      \"fstop\": {\n        type: \"f\",\n        value: 0.9\n      },\n      \"tColor\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDepth\": {\n        type: \"t\",\n        value: null\n      },\n      \"maxblur\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"showFocus\": {\n        type: \"i\",\n        value: 0\n      },\n      \"manualdof\": {\n        type: \"i\",\n        value: 0\n      },\n      \"vignetting\": {\n        type: \"i\",\n        value: 0\n      },\n      \"depthblur\": {\n        type: \"i\",\n        value: 0\n      },\n      \"threshold\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"gain\": {\n        type: \"f\",\n        value: 2.0\n      },\n      \"bias\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"fringe\": {\n        type: \"f\",\n        value: 0.7\n      },\n      \"znear\": {\n        type: \"f\",\n        value: 0.1\n      },\n      \"zfar\": {\n        type: \"f\",\n        value: 100\n      },\n      \"noise\": {\n        type: \"i\",\n        value: 1\n      },\n      \"dithering\": {\n        type: \"f\",\n        value: 0.0001\n      },\n      \"pentagon\": {\n        type: \"i\",\n        value: 0\n      },\n      \"shaderFocus\": {\n        type: \"i\",\n        value: 1\n      },\n      \"focusCoords\": {\n        type: \"v2\",\n        value: new THREE.Vector2()\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"varying vec2 vUv;\", \"uniform sampler2D tColor;\", \"uniform sampler2D tDepth;\", \"uniform float textureWidth;\", \"uniform float textureHeight;\", \"const float PI = 3.14159265;\", \"uniform float focalDepth;  //focal distance value in meters, but you may use autofocus option below\", \"uniform float focalLength; //focal length in mm\", \"uniform float fstop; //f-stop value\", \"uniform bool showFocus; //show debug focus point and focal range (red = focal point, green = focal range)\", \"/*\", \"make sure that these two values are the same for your camera, otherwise distances will be wrong.\", \"*/\", \"uniform float znear; // camera clipping start\", \"uniform float zfar; // camera clipping end\", \"//------------------------------------------\", \"//user variables\", \"const int samples = SAMPLES; //samples on the first ring\", \"const int rings = RINGS; //ring count\", \"const int maxringsamples = rings * samples;\", \"uniform bool manualdof; // manual dof calculation\", \"float ndofstart = 1.0; // near dof blur start\", \"float ndofdist = 2.0; // near dof blur falloff distance\", \"float fdofstart = 1.0; // far dof blur start\", \"float fdofdist = 3.0; // far dof blur falloff distance\", \"float CoC = 0.03; //circle of confusion size in mm (35mm film = 0.03mm)\", \"uniform bool vignetting; // use optical lens vignetting\", \"float vignout = 1.3; // vignetting outer border\", \"float vignin = 0.0; // vignetting inner border\", \"float vignfade = 22.0; // f-stops till vignete fades\", \"uniform bool shaderFocus;\", \"// disable if you use external focalDepth value\", \"uniform vec2 focusCoords;\", \"// autofocus point on screen (0.0,0.0 - left lower corner, 1.0,1.0 - upper right)\", \"// if center of screen use vec2(0.5, 0.5);\", \"uniform float maxblur;\", \"//clamp value of max blur (0.0 = no blur, 1.0 default)\", \"uniform float threshold; // highlight threshold;\", \"uniform float gain; // highlight gain;\", \"uniform float bias; // bokeh edge bias\", \"uniform float fringe; // bokeh chromatic aberration / fringing\", \"uniform bool noise; //use noise instead of pattern for sample dithering\", \"uniform float dithering;\", \"uniform bool depthblur; // blur the depth buffer\", \"float dbsize = 1.25; // depth blur size\", \"/*\", \"next part is experimental\", \"not looking good with small sample and ring count\", \"looks okay starting from samples = 4, rings = 4\", \"*/\", \"uniform bool pentagon; //use pentagon as bokeh shape?\", \"float feather = 0.4; //pentagon shape feather\", \"//------------------------------------------\", \"float penta(vec2 coords) {\", \"//pentagonal shape\", \"float scale = float(rings) - 1.3;\", \"vec4  HS0 = vec4( 1.0,         0.0,         0.0,  1.0);\", \"vec4  HS1 = vec4( 0.309016994, 0.951056516, 0.0,  1.0);\", \"vec4  HS2 = vec4(-0.809016994, 0.587785252, 0.0,  1.0);\", \"vec4  HS3 = vec4(-0.809016994,-0.587785252, 0.0,  1.0);\", \"vec4  HS4 = vec4( 0.309016994,-0.951056516, 0.0,  1.0);\", \"vec4  HS5 = vec4( 0.0        ,0.0         , 1.0,  1.0);\", \"vec4  one = vec4( 1.0 );\", \"vec4 P = vec4((coords),vec2(scale, scale));\", \"vec4 dist = vec4(0.0);\", \"float inorout = -4.0;\", \"dist.x = dot( P, HS0 );\", \"dist.y = dot( P, HS1 );\", \"dist.z = dot( P, HS2 );\", \"dist.w = dot( P, HS3 );\", \"dist = smoothstep( -feather, feather, dist );\", \"inorout += dot( dist, one );\", \"dist.x = dot( P, HS4 );\", \"dist.y = HS5.w - abs( P.z );\", \"dist = smoothstep( -feather, feather, dist );\", \"inorout += dist.x;\", \"return clamp( inorout, 0.0, 1.0 );\", \"}\", \"float bdepth(vec2 coords) {\", \"// Depth buffer blur\", \"float d = 0.0;\", \"float kernel[9];\", \"vec2 offset[9];\", \"vec2 wh = vec2(1.0/textureWidth,1.0/textureHeight) * dbsize;\", \"offset[0] = vec2(-wh.x,-wh.y);\", \"offset[1] = vec2( 0.0, -wh.y);\", \"offset[2] = vec2( wh.x -wh.y);\", \"offset[3] = vec2(-wh.x,  0.0);\", \"offset[4] = vec2( 0.0,   0.0);\", \"offset[5] = vec2( wh.x,  0.0);\", \"offset[6] = vec2(-wh.x, wh.y);\", \"offset[7] = vec2( 0.0,  wh.y);\", \"offset[8] = vec2( wh.x, wh.y);\", \"kernel[0] = 1.0/16.0;   kernel[1] = 2.0/16.0;   kernel[2] = 1.0/16.0;\", \"kernel[3] = 2.0/16.0;   kernel[4] = 4.0/16.0;   kernel[5] = 2.0/16.0;\", \"kernel[6] = 1.0/16.0;   kernel[7] = 2.0/16.0;   kernel[8] = 1.0/16.0;\", \"for( int i=0; i<9; i++ ) {\", \"float tmp = texture2D(tDepth, coords + offset[i]).r;\", \"d += tmp * kernel[i];\", \"}\", \"return d;\", \"}\", \"vec3 color(vec2 coords,float blur) {\", \"//processing the sample\", \"vec3 col = vec3(0.0);\", \"vec2 texel = vec2(1.0/textureWidth,1.0/textureHeight);\", \"col.r = texture2D(tColor,coords + vec2(0.0,1.0)*texel*fringe*blur).r;\", \"col.g = texture2D(tColor,coords + vec2(-0.866,-0.5)*texel*fringe*blur).g;\", \"col.b = texture2D(tColor,coords + vec2(0.866,-0.5)*texel*fringe*blur).b;\", \"vec3 lumcoeff = vec3(0.299,0.587,0.114);\", \"float lum = dot(col.rgb, lumcoeff);\", \"float thresh = max((lum-threshold)*gain, 0.0);\", \"return col+mix(vec3(0.0),col,thresh*blur);\", \"}\", \"vec2 rand(vec2 coord) {\", \"// generating noise / pattern texture for dithering\", \"float noiseX = ((fract(1.0-coord.s*(textureWidth/2.0))*0.25)+(fract(coord.t*(textureHeight/2.0))*0.75))*2.0-1.0;\", \"float noiseY = ((fract(1.0-coord.s*(textureWidth/2.0))*0.75)+(fract(coord.t*(textureHeight/2.0))*0.25))*2.0-1.0;\", \"if (noise) {\", \"noiseX = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\", \"noiseY = clamp(fract(sin(dot(coord ,vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\", \"}\", \"return vec2(noiseX,noiseY);\", \"}\", \"vec3 debugFocus(vec3 col, float blur, float depth) {\", \"float edge = 0.002*depth; //distance based edge smoothing\", \"float m = clamp(smoothstep(0.0,edge,blur),0.0,1.0);\", \"float e = clamp(smoothstep(1.0-edge,1.0,blur),0.0,1.0);\", \"col = mix(col,vec3(1.0,0.5,0.0),(1.0-m)*0.6);\", \"col = mix(col,vec3(0.0,0.5,1.0),((1.0-e)-(1.0-m))*0.2);\", \"return col;\", \"}\", \"float linearize(float depth) {\", \"return -zfar * znear / (depth * (zfar - znear) - zfar);\", \"}\", \"float vignette() {\", \"float dist = distance(vUv.xy, vec2(0.5,0.5));\", \"dist = smoothstep(vignout+(fstop/vignfade), vignin+(fstop/vignfade), dist);\", \"return clamp(dist,0.0,1.0);\", \"}\", \"float gather(float i, float j, int ringsamples, inout vec3 col, float w, float h, float blur) {\", \"float rings2 = float(rings);\", \"float step = PI*2.0 / float(ringsamples);\", \"float pw = cos(j*step)*i;\", \"float ph = sin(j*step)*i;\", \"float p = 1.0;\", \"if (pentagon) {\", \"p = penta(vec2(pw,ph));\", \"}\", \"col += color(vUv.xy + vec2(pw*w,ph*h), blur) * mix(1.0, i/rings2, bias) * p;\", \"return 1.0 * mix(1.0, i /rings2, bias) * p;\", \"}\", \"void main() {\", \"//scene depth calculation\", \"float depth = linearize(texture2D(tDepth,vUv.xy).x);\", \"// Blur depth?\", \"if (depthblur) {\", \"depth = linearize(bdepth(vUv.xy));\", \"}\", \"//focal plane calculation\", \"float fDepth = focalDepth;\", \"if (shaderFocus) {\", \"fDepth = linearize(texture2D(tDepth,focusCoords).x);\", \"}\", \"// dof blur factor calculation\", \"float blur = 0.0;\", \"if (manualdof) {\", \"float a = depth-fDepth; // Focal plane\", \"float b = (a-fdofstart)/fdofdist; // Far DoF\", \"float c = (-a-ndofstart)/ndofdist; // Near Dof\", \"blur = (a>0.0) ? b : c;\", \"} else {\", \"float f = focalLength; // focal length in mm\", \"float d = fDepth*1000.0; // focal plane in mm\", \"float o = depth*1000.0; // depth in mm\", \"float a = (o*f)/(o-f);\", \"float b = (d*f)/(d-f);\", \"float c = (d-f)/(d*fstop*CoC);\", \"blur = abs(a-b)*c;\", \"}\", \"blur = clamp(blur,0.0,1.0);\", \"// calculation of pattern for dithering\", \"vec2 noise = rand(vUv.xy)*dithering*blur;\", \"// getting blur x and y step factor\", \"float w = (1.0/textureWidth)*blur*maxblur+noise.x;\", \"float h = (1.0/textureHeight)*blur*maxblur+noise.y;\", \"// calculation of final color\", \"vec3 col = vec3(0.0);\", \"if(blur < 0.05) {\", \"//some optimization thingy\", \"col = texture2D(tColor, vUv.xy).rgb;\", \"} else {\", \"col = texture2D(tColor, vUv.xy).rgb;\", \"float s = 1.0;\", \"int ringsamples;\", \"for (int i = 1; i <= rings; i++) {\", \"/*unboxstart*/\", \"ringsamples = i * samples;\", \"for (int j = 0 ; j < maxringsamples ; j++) {\", \"if (j >= ringsamples) break;\", \"s += gather(float(i), float(j), ringsamples, col, w, h, blur);\", \"}\", \"/*unboxend*/\", \"}\", \"col /= s; //divide by sample count\", \"}\", \"if (showFocus) {\", \"col = debugFocus(col, blur, depth);\", \"}\", \"if (vignetting) {\", \"col *= vignette();\", \"}\", \"gl_FragColor.rgb = col;\", \"gl_FragColor.a = 1.0;\", \"} \"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author tapio / http://tapio.github.com/\n   *\n   * Brightness and contrast adjustment\n   * https://github.com/evanw/glfx.js\n   * brightness: -1 to 1 (-1 is solid black, 0 is no change, and 1 is solid white)\n   * contrast: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n   */\n  THREE.BrightnessContrastShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"brightness\": {\n        type: \"f\",\n        value: 0\n      },\n      \"contrast\": {\n        type: \"f\",\n        value: 0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float brightness;\", \"uniform float contrast;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_FragColor = texture2D( tDiffuse, vUv );\", \"gl_FragColor.rgb += brightness;\", \"if (contrast > 0.0) {\", \"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\", \"} else {\", \"gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\", \"}\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n  THREE.SpriteCanvasMaterial = function (parameters) {\n    THREE.Material.call(this);\n    this.type = 'SpriteCanvasMaterial';\n    this.color = new THREE.Color(0xffffff);\n\n    this.program = function (context, color) {};\n\n    this.setValues(parameters);\n  };\n\n  THREE.SpriteCanvasMaterial.prototype = Object.create(THREE.Material.prototype);\n  THREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\n\n  THREE.SpriteCanvasMaterial.prototype.clone = function () {\n    var material = new THREE.SpriteCanvasMaterial();\n    material.copy(this);\n    material.color.copy(this.color);\n    material.program = this.program;\n    return material;\n  }; //\n\n\n  THREE.CanvasRenderer = function (parameters) {\n    console.log('THREE.CanvasRenderer', THREE.REVISION);\n    parameters = parameters || {};\n\n    var _this = this,\n        _renderData,\n        _elements,\n        _lights,\n        _projector = new THREE.Projector(),\n        _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement('canvas'),\n        _canvasWidth = _canvas.width,\n        _canvasHeight = _canvas.height,\n        _canvasWidthHalf = Math.floor(_canvasWidth / 2),\n        _canvasHeightHalf = Math.floor(_canvasHeight / 2),\n        _viewportX = 0,\n        _viewportY = 0,\n        _viewportWidth = _canvasWidth,\n        _viewportHeight = _canvasHeight,\n        _pixelRatio = 1,\n        _context = _canvas.getContext('2d', {\n      alpha: parameters.alpha === true\n    }),\n        _clearColor = new THREE.Color(0x000000),\n        _clearAlpha = parameters.alpha === true ? 0 : 1,\n        _contextGlobalAlpha = 1,\n        _contextGlobalCompositeOperation = 0,\n        _contextStrokeStyle = null,\n        _contextFillStyle = null,\n        _contextLineWidth = null,\n        _contextLineCap = null,\n        _contextLineJoin = null,\n        _contextLineDash = [],\n        _camera,\n        _v1,\n        _v2,\n        _v3,\n        _v4,\n        _v5 = new THREE.RenderableVertex(),\n        _v6 = new THREE.RenderableVertex(),\n        _v1x,\n        _v1y,\n        _v2x,\n        _v2y,\n        _v3x,\n        _v3y,\n        _v4x,\n        _v4y,\n        _v5x,\n        _v5y,\n        _v6x,\n        _v6y,\n        _color = new THREE.Color(),\n        _color1 = new THREE.Color(),\n        _color2 = new THREE.Color(),\n        _color3 = new THREE.Color(),\n        _color4 = new THREE.Color(),\n        _diffuseColor = new THREE.Color(),\n        _emissiveColor = new THREE.Color(),\n        _lightColor = new THREE.Color(),\n        _patterns = {},\n        _image,\n        _uvs,\n        _uv1x,\n        _uv1y,\n        _uv2x,\n        _uv2y,\n        _uv3x,\n        _uv3y,\n        _clipBox = new THREE.Box2(),\n        _clearBox = new THREE.Box2(),\n        _elemBox = new THREE.Box2(),\n        _ambientLight = new THREE.Color(),\n        _directionalLights = new THREE.Color(),\n        _pointLights = new THREE.Color(),\n        _vector3 = new THREE.Vector3(),\n        // Needed for PointLight\n    _centroid = new THREE.Vector3(),\n        _normal = new THREE.Vector3(),\n        _normalViewMatrix = new THREE.Matrix3();\n    /* TODO\n    _canvas.mozImageSmoothingEnabled = false;\n    _canvas.webkitImageSmoothingEnabled = false;\n    _canvas.msImageSmoothingEnabled = false;\n    _canvas.imageSmoothingEnabled = false;\n    */\n    // dash+gap fallbacks for Firefox and everything else\n\n\n    if (_context.setLineDash === undefined) {\n      _context.setLineDash = function () {};\n    }\n\n    this.domElement = _canvas;\n    this.autoClear = true;\n    this.sortObjects = true;\n    this.sortElements = true;\n    this.info = {\n      render: {\n        vertices: 0,\n        faces: 0\n      }\n    }; // WebGLRenderer compatibility\n\n    this.supportsVertexTextures = function () {};\n\n    this.setFaceCulling = function () {}; // API\n\n\n    this.getContext = function () {\n      return _context;\n    };\n\n    this.getContextAttributes = function () {\n      return _context.getContextAttributes();\n    };\n\n    this.getPixelRatio = function () {\n      return _pixelRatio;\n    };\n\n    this.setPixelRatio = function (value) {\n      if (value !== undefined) _pixelRatio = value;\n    };\n\n    this.setSize = function (width, height, updateStyle) {\n      _canvasWidth = width * _pixelRatio;\n      _canvasHeight = height * _pixelRatio;\n      _canvas.width = _canvasWidth;\n      _canvas.height = _canvasHeight;\n      _canvasWidthHalf = Math.floor(_canvasWidth / 2);\n      _canvasHeightHalf = Math.floor(_canvasHeight / 2);\n\n      if (updateStyle !== false) {\n        _canvas.style.width = width + 'px';\n        _canvas.style.height = height + 'px';\n      }\n\n      _clipBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clipBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\n      _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n\n      _contextGlobalAlpha = 1;\n      _contextGlobalCompositeOperation = 0;\n      _contextStrokeStyle = null;\n      _contextFillStyle = null;\n      _contextLineWidth = null;\n      _contextLineCap = null;\n      _contextLineJoin = null;\n      this.setViewport(0, 0, width, height);\n    };\n\n    this.setViewport = function (x, y, width, height) {\n      _viewportX = x * _pixelRatio;\n      _viewportY = y * _pixelRatio;\n      _viewportWidth = width * _pixelRatio;\n      _viewportHeight = height * _pixelRatio;\n    };\n\n    this.setScissor = function () {};\n\n    this.setScissorTest = function () {};\n\n    this.setClearColor = function (color, alpha) {\n      _clearColor.set(color);\n\n      _clearAlpha = alpha !== undefined ? alpha : 1;\n\n      _clearBox.min.set(-_canvasWidthHalf, -_canvasHeightHalf);\n\n      _clearBox.max.set(_canvasWidthHalf, _canvasHeightHalf);\n    };\n\n    this.setClearColorHex = function (hex, alpha) {\n      console.warn('THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.');\n      this.setClearColor(hex, alpha);\n    };\n\n    this.getClearColor = function () {\n      return _clearColor;\n    };\n\n    this.getClearAlpha = function () {\n      return _clearAlpha;\n    };\n\n    this.getMaxAnisotropy = function () {\n      return 0;\n    };\n\n    this.clear = function () {\n      if (_clearBox.isEmpty() === false) {\n        _clearBox.intersect(_clipBox);\n\n        _clearBox.expandByScalar(2);\n\n        _clearBox.min.x = _clearBox.min.x + _canvasWidthHalf;\n        _clearBox.min.y = -_clearBox.min.y + _canvasHeightHalf; // higher y value !\n\n        _clearBox.max.x = _clearBox.max.x + _canvasWidthHalf;\n        _clearBox.max.y = -_clearBox.max.y + _canvasHeightHalf; // lower y value !\n\n        if (_clearAlpha < 1) {\n          _context.clearRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n        }\n\n        if (_clearAlpha > 0) {\n          setBlending(THREE.NormalBlending);\n          setOpacity(1);\n          setFillStyle('rgba(' + Math.floor(_clearColor.r * 255) + ',' + Math.floor(_clearColor.g * 255) + ',' + Math.floor(_clearColor.b * 255) + ',' + _clearAlpha + ')');\n\n          _context.fillRect(_clearBox.min.x | 0, _clearBox.max.y | 0, _clearBox.max.x - _clearBox.min.x | 0, _clearBox.min.y - _clearBox.max.y | 0);\n        }\n\n        _clearBox.makeEmpty();\n      }\n    }; // compatibility\n\n\n    this.clearColor = function () {};\n\n    this.clearDepth = function () {};\n\n    this.clearStencil = function () {};\n\n    this.render = function (scene, camera) {\n      if (camera instanceof THREE.Camera === false) {\n        console.error('THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.');\n        return;\n      }\n\n      if (this.autoClear === true) this.clear();\n      _this.info.render.vertices = 0;\n      _this.info.render.faces = 0;\n\n      _context.setTransform(_viewportWidth / _canvasWidth, 0, 0, -_viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY);\n\n      _context.translate(_canvasWidthHalf, _canvasHeightHalf);\n\n      _renderData = _projector.projectScene(scene, camera, this.sortObjects, this.sortElements);\n      _elements = _renderData.elements;\n      _lights = _renderData.lights;\n      _camera = camera;\n\n      _normalViewMatrix.getNormalMatrix(camera.matrixWorldInverse);\n      /* DEBUG\n      setFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n      _context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n      */\n\n\n      calculateLights();\n\n      for (var e = 0, el = _elements.length; e < el; e++) {\n        var element = _elements[e];\n        var material = element.material;\n        if (material === undefined || material.opacity === 0) continue;\n\n        _elemBox.makeEmpty();\n\n        if (element instanceof THREE.RenderableSprite) {\n          _v1 = element;\n          _v1.x *= _canvasWidthHalf;\n          _v1.y *= _canvasHeightHalf;\n          renderSprite(_v1, element, material);\n        } else if (element instanceof THREE.RenderableLine) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v1.positionScreen.x *= _canvasWidthHalf;\n          _v1.positionScreen.y *= _canvasHeightHalf;\n          _v2.positionScreen.x *= _canvasWidthHalf;\n          _v2.positionScreen.y *= _canvasHeightHalf;\n\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen]);\n\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderLine(_v1, _v2, element, material);\n          }\n        } else if (element instanceof THREE.RenderableFace) {\n          _v1 = element.v1;\n          _v2 = element.v2;\n          _v3 = element.v3;\n          if (_v1.positionScreen.z < -1 || _v1.positionScreen.z > 1) continue;\n          if (_v2.positionScreen.z < -1 || _v2.positionScreen.z > 1) continue;\n          if (_v3.positionScreen.z < -1 || _v3.positionScreen.z > 1) continue;\n          _v1.positionScreen.x *= _canvasWidthHalf;\n          _v1.positionScreen.y *= _canvasHeightHalf;\n          _v2.positionScreen.x *= _canvasWidthHalf;\n          _v2.positionScreen.y *= _canvasHeightHalf;\n          _v3.positionScreen.x *= _canvasWidthHalf;\n          _v3.positionScreen.y *= _canvasHeightHalf;\n\n          if (material.overdraw > 0) {\n            expand(_v1.positionScreen, _v2.positionScreen, material.overdraw);\n            expand(_v2.positionScreen, _v3.positionScreen, material.overdraw);\n            expand(_v3.positionScreen, _v1.positionScreen, material.overdraw);\n          }\n\n          _elemBox.setFromPoints([_v1.positionScreen, _v2.positionScreen, _v3.positionScreen]);\n\n          if (_clipBox.intersectsBox(_elemBox) === true) {\n            renderFace3(_v1, _v2, _v3, 0, 1, 2, element, material);\n          }\n        }\n        /* DEBUG\n        setLineWidth( 1 );\n        setStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n        _context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n        */\n\n\n        _clearBox.union(_elemBox);\n      }\n      /* DEBUG\n      setLineWidth( 1 );\n      setStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n      _context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n      */\n\n\n      _context.setTransform(1, 0, 0, 1, 0, 0);\n    }; //\n\n\n    function calculateLights() {\n      _ambientLight.setRGB(0, 0, 0);\n\n      _directionalLights.setRGB(0, 0, 0);\n\n      _pointLights.setRGB(0, 0, 0);\n\n      for (var l = 0, ll = _lights.length; l < ll; l++) {\n        var light = _lights[l];\n        var lightColor = light.color;\n\n        if (light instanceof THREE.AmbientLight) {\n          _ambientLight.add(lightColor);\n        } else if (light instanceof THREE.DirectionalLight) {\n          // for sprites\n          _directionalLights.add(lightColor);\n        } else if (light instanceof THREE.PointLight) {\n          // for sprites\n          _pointLights.add(lightColor);\n        }\n      }\n    }\n\n    function calculateLight(position, normal, color) {\n      for (var l = 0, ll = _lights.length; l < ll; l++) {\n        var light = _lights[l];\n\n        _lightColor.copy(light.color);\n\n        if (light instanceof THREE.DirectionalLight) {\n          var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld).normalize();\n\n          var amount = normal.dot(lightPosition);\n          if (amount <= 0) continue;\n          amount *= light.intensity;\n          color.add(_lightColor.multiplyScalar(amount));\n        } else if (light instanceof THREE.PointLight) {\n          var lightPosition = _vector3.setFromMatrixPosition(light.matrixWorld);\n\n          var amount = normal.dot(_vector3.subVectors(lightPosition, position).normalize());\n          if (amount <= 0) continue;\n          amount *= light.distance == 0 ? 1 : 1 - Math.min(position.distanceTo(lightPosition) / light.distance, 1);\n          if (amount == 0) continue;\n          amount *= light.intensity;\n          color.add(_lightColor.multiplyScalar(amount));\n        }\n      }\n    }\n\n    function renderSprite(v1, element, material) {\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n      var scaleX = element.scale.x * _canvasWidthHalf;\n      var scaleY = element.scale.y * _canvasHeightHalf;\n      var dist = 0.5 * Math.sqrt(scaleX * scaleX + scaleY * scaleY); // allow for rotated sprite\n\n      _elemBox.min.set(v1.x - dist, v1.y - dist);\n\n      _elemBox.max.set(v1.x + dist, v1.y + dist);\n\n      if (material instanceof THREE.SpriteMaterial) {\n        var texture = material.map;\n\n        if (texture !== null) {\n          var pattern = _patterns[texture.id];\n\n          if (pattern === undefined || pattern.version !== texture.version) {\n            pattern = textureToPattern(texture);\n            _patterns[texture.id] = pattern;\n          }\n\n          if (pattern.canvas !== undefined) {\n            setFillStyle(pattern.canvas);\n            var bitmap = texture.image;\n            var ox = bitmap.width * texture.offset.x;\n            var oy = bitmap.height * texture.offset.y;\n            var sx = bitmap.width * texture.repeat.x;\n            var sy = bitmap.height * texture.repeat.y;\n            var cx = scaleX / sx;\n            var cy = scaleY / sy;\n\n            _context.save();\n\n            _context.translate(v1.x, v1.y);\n\n            if (material.rotation !== 0) _context.rotate(material.rotation);\n\n            _context.translate(-scaleX / 2, -scaleY / 2);\n\n            _context.scale(cx, cy);\n\n            _context.translate(-ox, -oy);\n\n            _context.fillRect(ox, oy, sx, sy);\n\n            _context.restore();\n          }\n        } else {\n          // no texture\n          setFillStyle(material.color.getStyle());\n\n          _context.save();\n\n          _context.translate(v1.x, v1.y);\n\n          if (material.rotation !== 0) _context.rotate(material.rotation);\n\n          _context.scale(scaleX, -scaleY);\n\n          _context.fillRect(-0.5, -0.5, 1, 1);\n\n          _context.restore();\n        }\n      } else if (material instanceof THREE.SpriteCanvasMaterial) {\n        setStrokeStyle(material.color.getStyle());\n        setFillStyle(material.color.getStyle());\n\n        _context.save();\n\n        _context.translate(v1.x, v1.y);\n\n        if (material.rotation !== 0) _context.rotate(material.rotation);\n\n        _context.scale(scaleX, scaleY);\n\n        material.program(_context);\n\n        _context.restore();\n      }\n      /* DEBUG\n      setStrokeStyle( 'rgb(255,255,0)' );\n      _context.beginPath();\n      _context.moveTo( v1.x - 10, v1.y );\n      _context.lineTo( v1.x + 10, v1.y );\n      _context.moveTo( v1.x, v1.y - 10 );\n      _context.lineTo( v1.x, v1.y + 10 );\n      _context.stroke();\n      */\n\n    }\n\n    function renderLine(v1, v2, element, material) {\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n\n      _context.beginPath();\n\n      _context.moveTo(v1.positionScreen.x, v1.positionScreen.y);\n\n      _context.lineTo(v2.positionScreen.x, v2.positionScreen.y);\n\n      if (material instanceof THREE.LineBasicMaterial) {\n        setLineWidth(material.linewidth);\n        setLineCap(material.linecap);\n        setLineJoin(material.linejoin);\n\n        if (material.vertexColors !== THREE.VertexColors) {\n          setStrokeStyle(material.color.getStyle());\n        } else {\n          var colorStyle1 = element.vertexColors[0].getStyle();\n          var colorStyle2 = element.vertexColors[1].getStyle();\n\n          if (colorStyle1 === colorStyle2) {\n            setStrokeStyle(colorStyle1);\n          } else {\n            try {\n              var grad = _context.createLinearGradient(v1.positionScreen.x, v1.positionScreen.y, v2.positionScreen.x, v2.positionScreen.y);\n\n              grad.addColorStop(0, colorStyle1);\n              grad.addColorStop(1, colorStyle2);\n            } catch (exception) {\n              grad = colorStyle1;\n            }\n\n            setStrokeStyle(grad);\n          }\n        }\n\n        _context.stroke();\n\n        _elemBox.expandByScalar(material.linewidth * 2);\n      } else if (material instanceof THREE.LineDashedMaterial) {\n        setLineWidth(material.linewidth);\n        setLineCap(material.linecap);\n        setLineJoin(material.linejoin);\n        setStrokeStyle(material.color.getStyle());\n        setLineDash([material.dashSize, material.gapSize]);\n\n        _context.stroke();\n\n        _elemBox.expandByScalar(material.linewidth * 2);\n\n        setLineDash([]);\n      }\n    }\n\n    function renderFace3(v1, v2, v3, uv1, uv2, uv3, element, material) {\n      _this.info.render.vertices += 3;\n      _this.info.render.faces++;\n      setOpacity(material.opacity);\n      setBlending(material.blending);\n      _v1x = v1.positionScreen.x;\n      _v1y = v1.positionScreen.y;\n      _v2x = v2.positionScreen.x;\n      _v2y = v2.positionScreen.y;\n      _v3x = v3.positionScreen.x;\n      _v3y = v3.positionScreen.y;\n      drawTriangle(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y);\n\n      if ((material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) && material.map === null) {\n        _diffuseColor.copy(material.color);\n\n        _emissiveColor.copy(material.emissive);\n\n        if (material.vertexColors === THREE.FaceColors) {\n          _diffuseColor.multiply(element.color);\n        }\n\n        _color.copy(_ambientLight);\n\n        _centroid.copy(v1.positionWorld).add(v2.positionWorld).add(v3.positionWorld).divideScalar(3);\n\n        calculateLight(_centroid, element.normalModel, _color);\n\n        _color.multiply(_diffuseColor).add(_emissiveColor);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      } else if (material instanceof THREE.MeshBasicMaterial || material instanceof THREE.MeshLambertMaterial || material instanceof THREE.MeshPhongMaterial) {\n        if (material.map !== null) {\n          var mapping = material.map.mapping;\n\n          if (mapping === THREE.UVMapping) {\n            _uvs = element.uvs;\n            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[uv1].x, _uvs[uv1].y, _uvs[uv2].x, _uvs[uv2].y, _uvs[uv3].x, _uvs[uv3].y, material.map);\n          }\n        } else if (material.envMap !== null) {\n          if (material.envMap.mapping === THREE.SphericalReflectionMapping) {\n            _normal.copy(element.vertexNormalsModel[uv1]).applyMatrix3(_normalViewMatrix);\n\n            _uv1x = 0.5 * _normal.x + 0.5;\n            _uv1y = 0.5 * _normal.y + 0.5;\n\n            _normal.copy(element.vertexNormalsModel[uv2]).applyMatrix3(_normalViewMatrix);\n\n            _uv2x = 0.5 * _normal.x + 0.5;\n            _uv2y = 0.5 * _normal.y + 0.5;\n\n            _normal.copy(element.vertexNormalsModel[uv3]).applyMatrix3(_normalViewMatrix);\n\n            _uv3x = 0.5 * _normal.x + 0.5;\n            _uv3y = 0.5 * _normal.y + 0.5;\n            patternPath(_v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap);\n          }\n        } else {\n          _color.copy(material.color);\n\n          if (material.vertexColors === THREE.FaceColors) {\n            _color.multiply(element.color);\n          }\n\n          material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n        }\n      } else if (material instanceof THREE.MeshNormalMaterial) {\n        _normal.copy(element.normalModel).applyMatrix3(_normalViewMatrix);\n\n        _color.setRGB(_normal.x, _normal.y, _normal.z).multiplyScalar(0.5).addScalar(0.5);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      } else {\n        _color.setRGB(1, 1, 1);\n\n        material.wireframe === true ? strokePath(_color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin) : fillPath(_color);\n      }\n    } //\n\n\n    function drawTriangle(x0, y0, x1, y1, x2, y2) {\n      _context.beginPath();\n\n      _context.moveTo(x0, y0);\n\n      _context.lineTo(x1, y1);\n\n      _context.lineTo(x2, y2);\n\n      _context.closePath();\n    }\n\n    function strokePath(color, linewidth, linecap, linejoin) {\n      setLineWidth(linewidth);\n      setLineCap(linecap);\n      setLineJoin(linejoin);\n      setStrokeStyle(color.getStyle());\n\n      _context.stroke();\n\n      _elemBox.expandByScalar(linewidth * 2);\n    }\n\n    function fillPath(color) {\n      setFillStyle(color.getStyle());\n\n      _context.fill();\n    }\n\n    function textureToPattern(texture) {\n      if (texture.version === 0 || texture instanceof THREE.CompressedTexture || texture instanceof THREE.DataTexture) {\n        return {\n          canvas: undefined,\n          version: texture.version\n        };\n      }\n\n      var image = texture.image;\n\n      if (image.complete === false) {\n        return {\n          canvas: undefined,\n          version: 0\n        };\n      }\n\n      var canvas = document.createElement('canvas');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      var context = canvas.getContext('2d');\n      context.setTransform(1, 0, 0, -1, 0, image.height);\n      context.drawImage(image, 0, 0);\n      var repeatX = texture.wrapS === THREE.RepeatWrapping;\n      var repeatY = texture.wrapT === THREE.RepeatWrapping;\n      var repeat = 'no-repeat';\n\n      if (repeatX === true && repeatY === true) {\n        repeat = 'repeat';\n      } else if (repeatX === true) {\n        repeat = 'repeat-x';\n      } else if (repeatY === true) {\n        repeat = 'repeat-y';\n      }\n\n      var pattern = _context.createPattern(canvas, repeat);\n\n      if (texture.onUpdate) texture.onUpdate(texture);\n      return {\n        canvas: pattern,\n        version: texture.version\n      };\n    }\n\n    function patternPath(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture) {\n      var pattern = _patterns[texture.id];\n\n      if (pattern === undefined || pattern.version !== texture.version) {\n        pattern = textureToPattern(texture);\n        _patterns[texture.id] = pattern;\n      }\n\n      if (pattern.canvas !== undefined) {\n        setFillStyle(pattern.canvas);\n      } else {\n        setFillStyle('rgba( 0, 0, 0, 1)');\n\n        _context.fill();\n\n        return;\n      } // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          det,\n          idet,\n          offsetX = texture.offset.x / texture.repeat.x,\n          offsetY = texture.offset.y / texture.repeat.y,\n          width = texture.image.width * texture.repeat.x,\n          height = texture.image.height * texture.repeat.y;\n      u0 = (u0 + offsetX) * width;\n      v0 = (v0 + offsetY) * height;\n      u1 = (u1 + offsetX) * width;\n      v1 = (v1 + offsetY) * height;\n      u2 = (u2 + offsetX) * width;\n      v2 = (v2 + offsetY) * height;\n      x1 -= x0;\n      y1 -= y0;\n      x2 -= x0;\n      y2 -= y0;\n      u1 -= u0;\n      v1 -= v0;\n      u2 -= u0;\n      v2 -= v0;\n      det = u1 * v2 - u2 * v1;\n      if (det === 0) return;\n      idet = 1 / det;\n      a = (v2 * x1 - v1 * x2) * idet;\n      b = (v2 * y1 - v1 * y2) * idet;\n      c = (u1 * x2 - u2 * x1) * idet;\n      d = (u1 * y2 - u2 * y1) * idet;\n      e = x0 - a * u0 - c * v0;\n      f = y0 - b * u0 - d * v0;\n\n      _context.save();\n\n      _context.transform(a, b, c, d, e, f);\n\n      _context.fill();\n\n      _context.restore();\n    }\n\n    function clipImage(x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image) {\n      // http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n      var a,\n          b,\n          c,\n          d,\n          e,\n          f,\n          det,\n          idet,\n          width = image.width - 1,\n          height = image.height - 1;\n      u0 *= width;\n      v0 *= height;\n      u1 *= width;\n      v1 *= height;\n      u2 *= width;\n      v2 *= height;\n      x1 -= x0;\n      y1 -= y0;\n      x2 -= x0;\n      y2 -= y0;\n      u1 -= u0;\n      v1 -= v0;\n      u2 -= u0;\n      v2 -= v0;\n      det = u1 * v2 - u2 * v1;\n      idet = 1 / det;\n      a = (v2 * x1 - v1 * x2) * idet;\n      b = (v2 * y1 - v1 * y2) * idet;\n      c = (u1 * x2 - u2 * x1) * idet;\n      d = (u1 * y2 - u2 * y1) * idet;\n      e = x0 - a * u0 - c * v0;\n      f = y0 - b * u0 - d * v0;\n\n      _context.save();\n\n      _context.transform(a, b, c, d, e, f);\n\n      _context.clip();\n\n      _context.drawImage(image, 0, 0);\n\n      _context.restore();\n    } // Hide anti-alias gaps\n\n\n    function expand(v1, v2, pixels) {\n      var x = v2.x - v1.x,\n          y = v2.y - v1.y,\n          det = x * x + y * y,\n          idet;\n      if (det === 0) return;\n      idet = pixels / Math.sqrt(det);\n      x *= idet;\n      y *= idet;\n      v2.x += x;\n      v2.y += y;\n      v1.x -= x;\n      v1.y -= y;\n    } // Context cached methods.\n\n\n    function setOpacity(value) {\n      if (_contextGlobalAlpha !== value) {\n        _context.globalAlpha = value;\n        _contextGlobalAlpha = value;\n      }\n    }\n\n    function setBlending(value) {\n      if (_contextGlobalCompositeOperation !== value) {\n        if (value === THREE.NormalBlending) {\n          _context.globalCompositeOperation = 'source-over';\n        } else if (value === THREE.AdditiveBlending) {\n          _context.globalCompositeOperation = 'lighter';\n        } else if (value === THREE.SubtractiveBlending) {\n          _context.globalCompositeOperation = 'darker';\n        }\n\n        _contextGlobalCompositeOperation = value;\n      }\n    }\n\n    function setLineWidth(value) {\n      if (_contextLineWidth !== value) {\n        _context.lineWidth = value;\n        _contextLineWidth = value;\n      }\n    }\n\n    function setLineCap(value) {\n      // \"butt\", \"round\", \"square\"\n      if (_contextLineCap !== value) {\n        _context.lineCap = value;\n        _contextLineCap = value;\n      }\n    }\n\n    function setLineJoin(value) {\n      // \"round\", \"bevel\", \"miter\"\n      if (_contextLineJoin !== value) {\n        _context.lineJoin = value;\n        _contextLineJoin = value;\n      }\n    }\n\n    function setStrokeStyle(value) {\n      if (_contextStrokeStyle !== value) {\n        _context.strokeStyle = value;\n        _contextStrokeStyle = value;\n      }\n    }\n\n    function setFillStyle(value) {\n      if (_contextFillStyle !== value) {\n        _context.fillStyle = value;\n        _contextFillStyle = value;\n      }\n    }\n\n    function setLineDash(value) {\n      if (_contextLineDash.length !== value.length) {\n        _context.setLineDash(value);\n\n        _contextLineDash = value;\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Color correction\n   */\n  THREE.ColorCorrectionShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"powRGB\": {\n        type: \"v3\",\n        value: new THREE.Vector3(2, 2, 2)\n      },\n      \"mulRGB\": {\n        type: \"v3\",\n        value: new THREE.Vector3(1, 1, 1)\n      },\n      \"addRGB\": {\n        type: \"v3\",\n        value: new THREE.Vector3(0, 0, 0)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform vec3 powRGB;\", \"uniform vec3 mulRGB;\", \"uniform vec3 addRGB;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_FragColor = texture2D( tDiffuse, vUv );\", \"gl_FragColor.rgb = mulRGB * pow( ( gl_FragColor.rgb + addRGB ), powRGB );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Colorify shader\n   */\n  THREE.ColorifyShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"color\": {\n        type: \"c\",\n        value: new THREE.Color(0xffffff)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform vec3 color;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"float v = dot( texel.xyz, luma );\", \"gl_FragColor = vec4( v * color, texel.w );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Convolution shader\n   * ported from o3d sample to WebGL / GLSL\n   * http://o3d.googlecode.com/svn/trunk/samples/convolution.html\n   */\n  THREE.ConvolutionShader = {\n    defines: {\n      \"KERNEL_SIZE_FLOAT\": \"25.0\",\n      \"KERNEL_SIZE_INT\": \"25\"\n    },\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"uImageIncrement\": {\n        type: \"v2\",\n        value: new THREE.Vector2(0.001953125, 0.0)\n      },\n      \"cKernel\": {\n        type: \"fv1\",\n        value: []\n      }\n    },\n    vertexShader: [\"uniform vec2 uImageIncrement;\", \"varying vec2 vUv;\", \"void main() {\", \"vUv = uv - ( ( KERNEL_SIZE_FLOAT - 1.0 ) / 2.0 ) * uImageIncrement;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float cKernel[ KERNEL_SIZE_INT ];\", \"uniform sampler2D tDiffuse;\", \"uniform vec2 uImageIncrement;\", \"varying vec2 vUv;\", \"void main() {\", \"vec2 imageCoord = vUv;\", \"vec4 sum = vec4( 0.0, 0.0, 0.0, 0.0 );\", \"for( int i = 0; i < KERNEL_SIZE_INT; i ++ ) {\", \"sum += texture2D( tDiffuse, imageCoord ) * cKernel[ i ];\", \"imageCoord += uImageIncrement;\", \"}\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\"),\n    buildKernel: function buildKernel(sigma) {\n      // We lop off the sqrt(2 * pi) * sigma term, since we're going to normalize anyway.\n      function gauss(x, sigma) {\n        return Math.exp(-(x * x) / (2.0 * sigma * sigma));\n      }\n\n      var i,\n          values,\n          sum,\n          halfWidth,\n          kMaxKernelSize = 25,\n          kernelSize = 2 * Math.ceil(sigma * 3.0) + 1;\n      if (kernelSize > kMaxKernelSize) kernelSize = kMaxKernelSize;\n      halfWidth = (kernelSize - 1) * 0.5;\n      values = new Array(kernelSize);\n      sum = 0.0;\n\n      for (i = 0; i < kernelSize; ++i) {\n        values[i] = gauss(i - halfWidth, sigma);\n        sum += values[i];\n      } // normalize the kernel\n\n\n      for (i = 0; i < kernelSize; ++i) {\n        values[i] /= sum;\n      }\n\n      return values;\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Full-screen textured quad shader\n   */\n  THREE.CopyShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = opacity * texel;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /*\n   * @author mrdoob / http://mrdoob.com/\n   */\n  THREE.DDSLoader = function () {\n    this._parser = THREE.DDSLoader.parse;\n  };\n\n  THREE.DDSLoader.prototype = Object.create(THREE.CompressedTextureLoader.prototype);\n  THREE.DDSLoader.prototype.constructor = THREE.DDSLoader;\n\n  THREE.DDSLoader.parse = function (buffer, loadMipmaps) {\n    var dds = {\n      mipmaps: [],\n      width: 0,\n      height: 0,\n      format: null,\n      mipmapCount: 1\n    }; // Adapted from @toji's DDS utils\n    // https://github.com/toji/webgl-texture-utils/blob/master/texture-util/dds.js\n    // All values and structures referenced from:\n    // http://msdn.microsoft.com/en-us/library/bb943991.aspx/\n\n    var DDS_MAGIC = 0x20534444;\n    var DDSD_CAPS = 0x1,\n        DDSD_HEIGHT = 0x2,\n        DDSD_WIDTH = 0x4,\n        DDSD_PITCH = 0x8,\n        DDSD_PIXELFORMAT = 0x1000,\n        DDSD_MIPMAPCOUNT = 0x20000,\n        DDSD_LINEARSIZE = 0x80000,\n        DDSD_DEPTH = 0x800000;\n    var DDSCAPS_COMPLEX = 0x8,\n        DDSCAPS_MIPMAP = 0x400000,\n        DDSCAPS_TEXTURE = 0x1000;\n    var DDSCAPS2_CUBEMAP = 0x200,\n        DDSCAPS2_CUBEMAP_POSITIVEX = 0x400,\n        DDSCAPS2_CUBEMAP_NEGATIVEX = 0x800,\n        DDSCAPS2_CUBEMAP_POSITIVEY = 0x1000,\n        DDSCAPS2_CUBEMAP_NEGATIVEY = 0x2000,\n        DDSCAPS2_CUBEMAP_POSITIVEZ = 0x4000,\n        DDSCAPS2_CUBEMAP_NEGATIVEZ = 0x8000,\n        DDSCAPS2_VOLUME = 0x200000;\n    var DDPF_ALPHAPIXELS = 0x1,\n        DDPF_ALPHA = 0x2,\n        DDPF_FOURCC = 0x4,\n        DDPF_RGB = 0x40,\n        DDPF_YUV = 0x200,\n        DDPF_LUMINANCE = 0x20000;\n\n    function fourCCToInt32(value) {\n      return value.charCodeAt(0) + (value.charCodeAt(1) << 8) + (value.charCodeAt(2) << 16) + (value.charCodeAt(3) << 24);\n    }\n\n    function int32ToFourCC(value) {\n      return String.fromCharCode(value & 0xff, value >> 8 & 0xff, value >> 16 & 0xff, value >> 24 & 0xff);\n    }\n\n    function loadARGBMip(buffer, dataOffset, width, height) {\n      var dataLength = width * height * 4;\n      var srcBuffer = new Uint8Array(buffer, dataOffset, dataLength);\n      var byteArray = new Uint8Array(dataLength);\n      var dst = 0;\n      var src = 0;\n\n      for (var y = 0; y < height; y++) {\n        for (var x = 0; x < width; x++) {\n          var b = srcBuffer[src];\n          src++;\n          var g = srcBuffer[src];\n          src++;\n          var r = srcBuffer[src];\n          src++;\n          var a = srcBuffer[src];\n          src++;\n          byteArray[dst] = r;\n          dst++; //r\n\n          byteArray[dst] = g;\n          dst++; //g\n\n          byteArray[dst] = b;\n          dst++; //b\n\n          byteArray[dst] = a;\n          dst++; //a\n        }\n      }\n\n      return byteArray;\n    }\n\n    var FOURCC_DXT1 = fourCCToInt32(\"DXT1\");\n    var FOURCC_DXT3 = fourCCToInt32(\"DXT3\");\n    var FOURCC_DXT5 = fourCCToInt32(\"DXT5\");\n    var FOURCC_ETC1 = fourCCToInt32(\"ETC1\");\n    var headerLengthInt = 31; // The header length in 32 bit ints\n    // Offsets into the header array\n\n    var off_magic = 0;\n    var off_size = 1;\n    var off_flags = 2;\n    var off_height = 3;\n    var off_width = 4;\n    var off_mipmapCount = 7;\n    var off_pfFlags = 20;\n    var off_pfFourCC = 21;\n    var off_RGBBitCount = 22;\n    var off_RBitMask = 23;\n    var off_GBitMask = 24;\n    var off_BBitMask = 25;\n    var off_ABitMask = 26;\n    var off_caps = 27;\n    var off_caps2 = 28;\n    var off_caps3 = 29;\n    var off_caps4 = 30; // Parse header\n\n    var header = new Int32Array(buffer, 0, headerLengthInt);\n\n    if (header[off_magic] !== DDS_MAGIC) {\n      console.error('THREE.DDSLoader.parse: Invalid magic number in DDS header.');\n      return dds;\n    }\n\n    if (!header[off_pfFlags] & DDPF_FOURCC) {\n      console.error('THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.');\n      return dds;\n    }\n\n    var blockBytes;\n    var fourCC = header[off_pfFourCC];\n    var isRGBAUncompressed = false;\n\n    switch (fourCC) {\n      case FOURCC_DXT1:\n        blockBytes = 8;\n        dds.format = THREE.RGB_S3TC_DXT1_Format;\n        break;\n\n      case FOURCC_DXT3:\n        blockBytes = 16;\n        dds.format = THREE.RGBA_S3TC_DXT3_Format;\n        break;\n\n      case FOURCC_DXT5:\n        blockBytes = 16;\n        dds.format = THREE.RGBA_S3TC_DXT5_Format;\n        break;\n\n      case FOURCC_ETC1:\n        blockBytes = 8;\n        dds.format = THREE.RGB_ETC1_Format;\n        break;\n\n      default:\n        if (header[off_RGBBitCount] === 32 && header[off_RBitMask] & 0xff0000 && header[off_GBitMask] & 0xff00 && header[off_BBitMask] & 0xff && header[off_ABitMask] & 0xff000000) {\n          isRGBAUncompressed = true;\n          blockBytes = 64;\n          dds.format = THREE.RGBAFormat;\n        } else {\n          console.error('THREE.DDSLoader.parse: Unsupported FourCC code ', int32ToFourCC(fourCC));\n          return dds;\n        }\n\n    }\n\n    dds.mipmapCount = 1;\n\n    if (header[off_flags] & DDSD_MIPMAPCOUNT && loadMipmaps !== false) {\n      dds.mipmapCount = Math.max(1, header[off_mipmapCount]);\n    }\n\n    var caps2 = header[off_caps2];\n    dds.isCubemap = caps2 & DDSCAPS2_CUBEMAP ? true : false;\n\n    if (dds.isCubemap && (!(caps2 & DDSCAPS2_CUBEMAP_POSITIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEX) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEY) || !(caps2 & DDSCAPS2_CUBEMAP_POSITIVEZ) || !(caps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ))) {\n      console.error('THREE.DDSLoader.parse: Incomplete cubemap faces');\n      return dds;\n    }\n\n    dds.width = header[off_width];\n    dds.height = header[off_height];\n    var dataOffset = header[off_size] + 4; // Extract mipmaps buffers\n\n    var faces = dds.isCubemap ? 6 : 1;\n\n    for (var face = 0; face < faces; face++) {\n      var width = dds.width;\n      var height = dds.height;\n\n      for (var i = 0; i < dds.mipmapCount; i++) {\n        if (isRGBAUncompressed) {\n          var byteArray = loadARGBMip(buffer, dataOffset, width, height);\n          var dataLength = byteArray.length;\n        } else {\n          var dataLength = Math.max(4, width) / 4 * Math.max(4, height) / 4 * blockBytes;\n          var byteArray = new Uint8Array(buffer, dataOffset, dataLength);\n        }\n\n        var mipmap = {\n          \"data\": byteArray,\n          \"width\": width,\n          \"height\": height\n        };\n        dds.mipmaps.push(mipmap);\n        dataOffset += dataLength;\n        width = Math.max(width >> 1, 1);\n        height = Math.max(height >> 1, 1);\n      }\n    }\n\n    return dds;\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Depth-of-field shader using mipmaps\n   * - from Matt Handley @applmak\n   * - requires power-of-2 sized render target with enabled mipmaps\n   */\n  THREE.DOFMipMapShader = {\n    uniforms: {\n      \"tColor\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDepth\": {\n        type: \"t\",\n        value: null\n      },\n      \"focus\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"maxblur\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float focus;\", \"uniform float maxblur;\", \"uniform sampler2D tColor;\", \"uniform sampler2D tDepth;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 depth = texture2D( tDepth, vUv );\", \"float factor = depth.x - focus;\", \"vec4 col = texture2D( tColor, vUv, 2.0 * maxblur * abs( focus - depth.x ) );\", \"gl_FragColor = col;\", \"gl_FragColor.a = 1.0;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author felixturner / http://airtight.cc/\n   *\n   * RGB Shift Shader\n   * Shifts red and blue channels from center in opposite directions\n   * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n   * by Tom Butterworth / http://kriss.cx/tom/\n   *\n   * amount: shift distance (1 is width of input)\n   * angle: shift angle in radians\n   */\n  THREE.DigitalGlitch = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      //diffuse texture\n      \"tDisp\": {\n        type: \"t\",\n        value: null\n      },\n      //displacement texture for digital glitch squares\n      \"byp\": {\n        type: \"i\",\n        value: 0\n      },\n      //apply the glitch ?\n      \"amount\": {\n        type: \"f\",\n        value: 0.08\n      },\n      \"angle\": {\n        type: \"f\",\n        value: 0.02\n      },\n      \"seed\": {\n        type: \"f\",\n        value: 0.02\n      },\n      \"seed_x\": {\n        type: \"f\",\n        value: 0.02\n      },\n      //-1,1\n      \"seed_y\": {\n        type: \"f\",\n        value: 0.02\n      },\n      //-1,1\n      \"distortion_x\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"distortion_y\": {\n        type: \"f\",\n        value: 0.6\n      },\n      \"col_s\": {\n        type: \"f\",\n        value: 0.05\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform int byp;\", //should we apply the glitch ?\n    \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDisp;\", \"uniform float amount;\", \"uniform float angle;\", \"uniform float seed;\", \"uniform float seed_x;\", \"uniform float seed_y;\", \"uniform float distortion_x;\", \"uniform float distortion_y;\", \"uniform float col_s;\", \"varying vec2 vUv;\", \"float rand(vec2 co){\", \"return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\", \"}\", \"void main() {\", \"if(byp<1) {\", \"vec2 p = vUv;\", \"float xs = floor(gl_FragCoord.x / 0.5);\", \"float ys = floor(gl_FragCoord.y / 0.5);\", //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n    \"vec4 normal = texture2D (tDisp, p*seed*seed);\", \"if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\", \"if(seed_x>0.){\", \"p.y = 1. - (p.y + distortion_y);\", \"}\", \"else {\", \"p.y = distortion_y;\", \"}\", \"}\", \"if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\", \"if(seed_y>0.){\", \"p.x=distortion_x;\", \"}\", \"else {\", \"p.x = 1. - (p.x + distortion_x);\", \"}\", \"}\", \"p.x+=normal.x*seed_x*(seed/5.);\", \"p.y+=normal.y*seed_y*(seed/5.);\", //base from RGB shift shader\n    \"vec2 offset = amount * vec2( cos(angle), sin(angle));\", \"vec4 cr = texture2D(tDiffuse, p + offset);\", \"vec4 cga = texture2D(tDiffuse, p);\", \"vec4 cb = texture2D(tDiffuse, p - offset);\", \"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\", //add noise\n    \"vec4 snow = 200.*amount*vec4(rand(vec2(xs * seed,ys * seed*50.))*0.2);\", \"gl_FragColor = gl_FragColor+ snow;\", \"}\", \"else {\", \"gl_FragColor=texture2D (tDiffuse, vUv);\", \"}\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.DotScreenPass = function (center, angle, scale) {\n    if (THREE.DotScreenShader === undefined) console.error(\"THREE.DotScreenPass relies on THREE.DotScreenShader\");\n    var shader = THREE.DotScreenShader;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    if (center !== undefined) this.uniforms[\"center\"].value.copy(center);\n    if (angle !== undefined) this.uniforms[\"angle\"].value = angle;\n    if (scale !== undefined) this.uniforms[\"scale\"].value = scale;\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.enabled = true;\n    this.renderToScreen = false;\n    this.needsSwap = true;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.DotScreenPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      this.uniforms[\"tDiffuse\"].value = readBuffer;\n      this.uniforms[\"tSize\"].value.set(readBuffer.width, readBuffer.height);\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, false);\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Dot screen shader\n   * based on glfx.js sepia shader\n   * https://github.com/evanw/glfx.js\n   */\n  THREE.DotScreenShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"tSize\": {\n        type: \"v2\",\n        value: new THREE.Vector2(256, 256)\n      },\n      \"center\": {\n        type: \"v2\",\n        value: new THREE.Vector2(0.5, 0.5)\n      },\n      \"angle\": {\n        type: \"f\",\n        value: 1.57\n      },\n      \"scale\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform vec2 center;\", \"uniform float angle;\", \"uniform float scale;\", \"uniform vec2 tSize;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"float pattern() {\", \"float s = sin( angle ), c = cos( angle );\", \"vec2 tex = vUv * tSize - center;\", \"vec2 point = vec2( c * tex.x - s * tex.y, s * tex.x + c * tex.y ) * scale;\", \"return ( sin( point.x ) * sin( point.y ) ) * 4.0;\", \"}\", \"void main() {\", \"vec4 color = texture2D( tDiffuse, vUv );\", \"float average = ( color.r + color.g + color.b ) / 3.0;\", \"gl_FragColor = vec4( vec3( average * 10.0 - 5.0 + pattern() ), color.a );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n   *\n   * Edge Detection Shader using Frei-Chen filter\n   * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n   *\n   * aspect: vec2 of (1/width, 1/height)\n   */\n  THREE.EdgeShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"aspect\": {\n        type: \"v2\",\n        value: new THREE.Vector2(512, 512)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"uniform vec2 aspect;\", \"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\", \"mat3 G[9];\", // hard coded matrix values!!!! as suggested in https://github.com/neilmendoza/ofxPostProcessing/blob/master/src/EdgePass.cpp#L45\n    \"const mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\", \"const mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\", \"const mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\", \"const mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\", \"const mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\", \"const mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\", \"const mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\", \"const mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\", \"const mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\", \"void main(void)\", \"{\", \"G[0] = g0,\", \"G[1] = g1,\", \"G[2] = g2,\", \"G[3] = g3,\", \"G[4] = g4,\", \"G[5] = g5,\", \"G[6] = g6,\", \"G[7] = g7,\", \"G[8] = g8;\", \"mat3 I;\", \"float cnv[9];\", \"vec3 sample;\",\n    /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n    \"for (float i=0.0; i<3.0; i++) {\", \"for (float j=0.0; j<3.0; j++) {\", \"sample = texture2D(tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\", \"I[int(i)][int(j)] = length(sample);\", \"}\", \"}\",\n    /* calculate the convolution values for all the masks */\n    \"for (int i=0; i<9; i++) {\", \"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\", \"cnv[i] = dp3 * dp3;\", \"}\", \"float M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\", \"float S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\", \"gl_FragColor = vec4(vec3(sqrt(M/S)), 1.0);\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / https://github.com/zz85 | https://www.lab4games.net/zz85/blog\n   *\n   * Edge Detection Shader using Sobel filter\n   * Based on http://rastergrid.com/blog/2011/01/frei-chen-edge-detector\n   *\n   * aspect: vec2 of (1/width, 1/height)\n   */\n  THREE.EdgeShader2 = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"aspect\": {\n        type: \"v2\",\n        value: new THREE.Vector2(512, 512)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"uniform vec2 aspect;\", \"vec2 texel = vec2(1.0 / aspect.x, 1.0 / aspect.y);\", \"mat3 G[2];\", \"const mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\", \"const mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\", \"void main(void)\", \"{\", \"mat3 I;\", \"float cnv[2];\", \"vec3 sample;\", \"G[0] = g0;\", \"G[1] = g1;\",\n    /* fetch the 3x3 neighbourhood and use the RGB vector's length as intensity value */\n    \"for (float i=0.0; i<3.0; i++)\", \"for (float j=0.0; j<3.0; j++) {\", \"sample = texture2D( tDiffuse, vUv + texel * vec2(i-1.0,j-1.0) ).rgb;\", \"I[int(i)][int(j)] = length(sample);\", \"}\",\n    /* calculate the convolution values for all the masks */\n    \"for (int i=0; i<2; i++) {\", \"float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\", \"cnv[i] = dp3 * dp3; \", \"}\", \"gl_FragColor = vec4(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));\", \"} \"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.EffectComposer = function (renderer, renderTarget) {\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      var pixelRatio = renderer.getPixelRatio();\n      var width = Math.floor(renderer.context.canvas.width / pixelRatio) || 1;\n      var height = Math.floor(renderer.context.canvas.height / pixelRatio) || 1;\n      var parameters = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat,\n        stencilBuffer: false\n      };\n      renderTarget = new THREE.WebGLRenderTarget(width, height, parameters);\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.passes = [];\n    if (THREE.CopyShader === undefined) console.error(\"THREE.EffectComposer relies on THREE.CopyShader\");\n    this.copyPass = new THREE.ShaderPass(THREE.CopyShader);\n  };\n\n  THREE.EffectComposer.prototype = {\n    swapBuffers: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    },\n    addPass: function addPass(pass) {\n      this.passes.push(pass);\n    },\n    insertPass: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n    },\n    render: function render(delta) {\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n      var maskActive = false;\n      var pass,\n          i,\n          il = this.passes.length;\n\n      for (i = 0; i < il; i++) {\n        pass = this.passes[i];\n        if (!pass.enabled) continue;\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, delta, maskActive);\n\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.context;\n            context.stencilFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, delta);\n            context.stencilFunc(context.EQUAL, 1, 0xffffffff);\n          }\n\n          this.swapBuffers();\n        }\n\n        if (pass instanceof THREE.MaskPass) {\n          maskActive = true;\n        } else if (pass instanceof THREE.ClearMaskPass) {\n          maskActive = false;\n        }\n      }\n    },\n    reset: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        renderTarget = this.renderTarget1.clone();\n        var pixelRatio = this.renderer.getPixelRatio();\n        renderTarget.width = Math.floor(this.renderer.context.canvas.width / pixelRatio);\n        renderTarget.height = Math.floor(this.renderer.context.canvas.height / pixelRatio);\n      }\n\n      this.renderTarget1.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2.dispose();\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    },\n    setSize: function setSize(width, height) {\n      this.renderTarget1.setSize(width, height);\n      this.renderTarget2.setSize(width, height);\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mattdsl / https://github.com/mattdesl/three-shader-fxaa\n   */\n  THREE.FXAAShader = {\n    uniforms: {\n      tDiffuse: {\n        type: \"t\",\n        value: new THREE.Texture()\n      },\n      resolution: {\n        type: \"v2\",\n        value: new THREE.Vector2()\n      }\n    },\n    vertexShader: \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\nuniform vec2 resolution;\\n\\nvoid main() {\\n  vUv = uv;\\n  vec2 fragCoord = uv * resolution;\\n  vec2 inverseVP = 1.0 / resolution.xy;\\n  v_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\\n  v_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\\n  v_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\\n  v_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\\n  v_rgbM = vec2(fragCoord * inverseVP);\\n\\n  gl_Position = projectionMatrix *\\n              modelViewMatrix *\\n              vec4(position,1.0);\\n}\\n\",\n    fragmentShader: \"#define GLSLIFY 1\\nvarying vec2 vUv;\\n\\n//texcoords computed in vertex step\\n//to avoid dependent texture reads\\nvarying vec2 v_rgbNW;\\nvarying vec2 v_rgbNE;\\nvarying vec2 v_rgbSW;\\nvarying vec2 v_rgbSE;\\nvarying vec2 v_rgbM;\\n\\n//make sure to have a resolution uniform set to the screen size\\nuniform vec2 resolution;\\nuniform sampler2D tDiffuse;\\n\\n/**\\nBasic FXAA implementation based on the code on geeks3d.com with the\\nmodification that the texture2DLod stuff was removed since it's\\nunsupported by WebGL.\\n\\n--\\n\\nFrom:\\nhttps://github.com/mitsuhiko/webgl-meincraft\\n\\nCopyright (c) 2011 by Armin Ronacher.\\n\\nSome rights reserved.\\n\\nRedistribution and use in source and binary forms, with or without\\nmodification, are permitted provided that the following conditions are\\nmet:\\n\\n    * Redistributions of source code must retain the above copyright\\n      notice, this list of conditions and the following disclaimer.\\n\\n    * Redistributions in binary form must reproduce the above\\n      copyright notice, this list of conditions and the following\\n      disclaimer in the documentation and/or other materials provided\\n      with the distribution.\\n\\n    * The names of the contributors may not be used to endorse or\\n      promote products derived from this software without specific\\n      prior written permission.\\n\\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n*/\\n\\n#ifndef FXAA_REDUCE_MIN\\n    #define FXAA_REDUCE_MIN   (1.0/ 128.0)\\n#endif\\n#ifndef FXAA_REDUCE_MUL\\n    #define FXAA_REDUCE_MUL   (1.0 / 8.0)\\n#endif\\n#ifndef FXAA_SPAN_MAX\\n    #define FXAA_SPAN_MAX     8.0\\n#endif\\n\\n//optimized version for mobile, where dependent \\n//texture reads can be a bottleneck\\nvec4 fxaa_1540259130(sampler2D tex, vec2 fragCoord, vec2 resolution,\\n            vec2 v_rgbNW, vec2 v_rgbNE, \\n            vec2 v_rgbSW, vec2 v_rgbSE, \\n            vec2 v_rgbM) {\\n    vec4 color;\\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\\n    vec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\\n    vec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\\n    vec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\\n    vec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\\n    vec4 texColor = texture2D(tex, v_rgbM);\\n    vec3 rgbM  = texColor.xyz;\\n    vec3 luma = vec3(0.299, 0.587, 0.114);\\n    float lumaNW = dot(rgbNW, luma);\\n    float lumaNE = dot(rgbNE, luma);\\n    float lumaSW = dot(rgbSW, luma);\\n    float lumaSE = dot(rgbSE, luma);\\n    float lumaM  = dot(rgbM,  luma);\\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\\n    \\n    mediump vec2 dir;\\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\\n    \\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\\n    \\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\\n              dir * rcpDirMin)) * inverseVP;\\n    \\n    vec3 rgbA = 0.5 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\\n        texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\\n        texture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\\n\\n    float lumaB = dot(rgbB, luma);\\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\\n        color = vec4(rgbA, texColor.a);\\n    else\\n        color = vec4(rgbB, texColor.a);\\n    return color;\\n}\\n\\nvoid main() {\\n  vec2 fragCoord = vUv * resolution;   \\n  gl_FragColor = fxaa_1540259130(tDiffuse, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\\n}\\n\"\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.FilmPass = function (noiseIntensity, scanlinesIntensity, scanlinesCount, grayscale) {\n    if (THREE.FilmShader === undefined) console.error(\"THREE.FilmPass relies on THREE.FilmShader\");\n    var shader = THREE.FilmShader;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    if (grayscale !== undefined) this.uniforms.grayscale.value = grayscale;\n    if (noiseIntensity !== undefined) this.uniforms.nIntensity.value = noiseIntensity;\n    if (scanlinesIntensity !== undefined) this.uniforms.sIntensity.value = scanlinesIntensity;\n    if (scanlinesCount !== undefined) this.uniforms.sCount.value = scanlinesCount;\n    this.enabled = true;\n    this.renderToScreen = false;\n    this.needsSwap = true;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.FilmPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      this.uniforms[\"tDiffuse\"].value = readBuffer;\n      this.uniforms[\"time\"].value += delta;\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, false);\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Film grain & scanlines shader\n   *\n   * - ported from HLSL to WebGL / GLSL\n   * http://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n   *\n   * Screen Space Static Postprocessor\n   *\n   * Produces an analogue noise overlay similar to a film grain / TV static\n   *\n   * Original implementation and noise algorithm\n   * Pat 'Hawthorne' Shearon\n   *\n   * Optimized scanlines + noise version with intensity scaling\n   * Georg 'Leviathan' Steinrohder\n   *\n   * This version is provided under a Creative Commons Attribution 3.0 License\n   * http://creativecommons.org/licenses/by/3.0/\n   */\n  THREE.FilmShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"time\": {\n        type: \"f\",\n        value: 0.0\n      },\n      \"nIntensity\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"sIntensity\": {\n        type: \"f\",\n        value: 0.05\n      },\n      \"sCount\": {\n        type: \"f\",\n        value: 4096\n      },\n      \"grayscale\": {\n        type: \"i\",\n        value: 1\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [// control parameter\n    \"uniform float time;\", \"uniform bool grayscale;\", // noise effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float nIntensity;\", // scanlines effect intensity value (0 = no effect, 1 = full effect)\n    \"uniform float sIntensity;\", // scanlines effect count value (0 = no effect, 4096 = full effect)\n    \"uniform float sCount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", // sample the source\n    \"vec4 cTextureScreen = texture2D( tDiffuse, vUv );\", // make some noise\n    \"float x = vUv.x * vUv.y * time *  1000.0;\", \"x = mod( x, 13.0 ) * mod( x, 123.0 );\", \"float dx = mod( x, 0.01 );\", // add noise\n    \"vec3 cResult = cTextureScreen.rgb + cTextureScreen.rgb * clamp( 0.1 + dx * 100.0, 0.0, 1.0 );\", // get us a sine and cosine\n    \"vec2 sc = vec2( sin( vUv.y * sCount ), cos( vUv.y * sCount ) );\", // add scanlines\n    \"cResult += cTextureScreen.rgb * vec3( sc.x, sc.y, sc.x ) * sIntensity;\", // interpolate between source and result by intensity\n    \"cResult = cTextureScreen.rgb + clamp( nIntensity, 0.0,1.0 ) * ( cResult - cTextureScreen.rgb );\", // convert to grayscale if desired\n    \"if( grayscale ) {\", \"cResult = vec3( cResult.r * 0.3 + cResult.g * 0.59 + cResult.b * 0.11 );\", \"}\", \"gl_FragColor =  vec4( cResult, cTextureScreen.a );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Focus shader\n   * based on PaintEffect postprocess from ro.me\n   * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n   */\n  THREE.FocusShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"screenWidth\": {\n        type: \"f\",\n        value: 1024\n      },\n      \"screenHeight\": {\n        type: \"f\",\n        value: 1024\n      },\n      \"sampleDistance\": {\n        type: \"f\",\n        value: 0.94\n      },\n      \"waveFactor\": {\n        type: \"f\",\n        value: 0.00125\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float screenWidth;\", \"uniform float screenHeight;\", \"uniform float sampleDistance;\", \"uniform float waveFactor;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 color, org, tmp, add;\", \"float sample_dist, f;\", \"vec2 vin;\", \"vec2 uv = vUv;\", \"add = color = org = texture2D( tDiffuse, uv );\", \"vin = ( uv - vec2( 0.5 ) ) * vec2( 1.4 );\", \"sample_dist = dot( vin, vin ) * 2.0;\", \"f = ( waveFactor * 100.0 + sample_dist ) * sampleDistance * 4.0;\", \"vec2 sampleSize = vec2(  1.0 / screenWidth, 1.0 / screenHeight ) * vec2( f );\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.111964, 0.993712 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.846724, 0.532032 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.943883, -0.330279 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( 0.330279, -0.943883 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.532032, -0.846724 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.993712, -0.111964 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"add += tmp = texture2D( tDiffuse, uv + vec2( -0.707107, 0.707107 ) * sampleSize );\", \"if( tmp.b < color.b ) color = tmp;\", \"color = color * vec4( 2.0 ) - ( add / vec4( 8.0 ) );\", \"color = color + ( add / vec4( 8.0 ) - color ) * ( vec4( 1.0 ) - vec4( sample_dist * 0.5 ) );\", \"gl_FragColor = vec4( color.rgb * color.rgb * vec3( 0.95 ) + color.rgb, 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Based on Nvidia Cg tutorial\n   */\n  THREE.FresnelShader = {\n    uniforms: {\n      \"mRefractionRatio\": {\n        type: \"f\",\n        value: 1.02\n      },\n      \"mFresnelBias\": {\n        type: \"f\",\n        value: 0.1\n      },\n      \"mFresnelPower\": {\n        type: \"f\",\n        value: 2.0\n      },\n      \"mFresnelScale\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"tCube\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    vertexShader: [\"uniform float mRefractionRatio;\", \"uniform float mFresnelBias;\", \"uniform float mFresnelScale;\", \"uniform float mFresnelPower;\", \"varying vec3 vReflect;\", \"varying vec3 vRefract[3];\", \"varying float vReflectionFactor;\", \"void main() {\", \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\", \"vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\", \"vec3 I = worldPosition.xyz - cameraPosition;\", \"vReflect = reflect( I, worldNormal );\", \"vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\", \"vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\", \"vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\", \"vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\", \"gl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform samplerCube tCube;\", \"varying vec3 vReflect;\", \"varying vec3 vRefract[3];\", \"varying float vReflectionFactor;\", \"void main() {\", \"vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\", \"vec4 refractedColor = vec4( 1.0 );\", \"refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) ).r;\", \"refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) ).g;\", \"refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) ).b;\", \"gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author WestLangley / http://github.com/WestLangley\n   *\n   * Gamma Correction Shader\n   * http://en.wikipedia.org/wiki/gamma_correction\n   */\n  THREE.GammaCorrectionShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"#define GAMMA_OUTPUT\", \"#define GAMMA_FACTOR 2\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", THREE.ShaderChunk[\"common\"], \"void main() {\", \"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\", \"gl_FragColor = vec4( linearToOutput( tex.rgb ), tex.a );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   \n   */\n  THREE.GlitchPass = function (dt_size) {\n    if (THREE.DigitalGlitch === undefined) console.error(\"THREE.GlitchPass relies on THREE.DigitalGlitch\");\n    var shader = THREE.DigitalGlitch;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    if (dt_size == undefined) dt_size = 64;\n    this.uniforms[\"tDisp\"].value = this.generateHeightmap(dt_size);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.enabled = true;\n    this.renderToScreen = false;\n    this.needsSwap = true;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n    this.goWild = false;\n    this.curF = 0;\n    this.generateTrigger();\n  };\n\n  THREE.GlitchPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      this.uniforms[\"tDiffuse\"].value = readBuffer;\n      this.uniforms['seed'].value = Math.random(); //default seeding\n\n      this.uniforms['byp'].value = 0;\n\n      if (this.curF % this.randX == 0 || this.goWild == true) {\n        this.uniforms['amount'].value = Math.random() / 30;\n        this.uniforms['angle'].value = THREE.Math.randFloat(-Math.PI, Math.PI);\n        this.uniforms['seed_x'].value = THREE.Math.randFloat(-1, 1);\n        this.uniforms['seed_y'].value = THREE.Math.randFloat(-1, 1);\n        this.uniforms['distortion_x'].value = THREE.Math.randFloat(0, 1);\n        this.uniforms['distortion_y'].value = THREE.Math.randFloat(0, 1);\n        this.curF = 0;\n        this.generateTrigger();\n      } else if (this.curF % this.randX < this.randX / 5) {\n        this.uniforms['amount'].value = Math.random() / 90;\n        this.uniforms['angle'].value = THREE.Math.randFloat(-Math.PI, Math.PI);\n        this.uniforms['distortion_x'].value = THREE.Math.randFloat(0, 1);\n        this.uniforms['distortion_y'].value = THREE.Math.randFloat(0, 1);\n        this.uniforms['seed_x'].value = THREE.Math.randFloat(-0.3, 0.3);\n        this.uniforms['seed_y'].value = THREE.Math.randFloat(-0.3, 0.3);\n      } else if (this.goWild == false) {\n        this.uniforms['byp'].value = 1;\n      }\n\n      this.curF++;\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, false);\n      }\n    },\n    generateTrigger: function generateTrigger() {\n      this.randX = THREE.Math.randInt(120, 240);\n    },\n    generateHeightmap: function generateHeightmap(dt_size) {\n      var data_arr = new Float32Array(dt_size * dt_size * 3);\n      var length = dt_size * dt_size;\n\n      for (var i = 0; i < length; i++) {\n        var val = THREE.Math.randFloat(0, 1);\n        data_arr[i * 3 + 0] = val;\n        data_arr[i * 3 + 1] = val;\n        data_arr[i * 3 + 2] = val;\n      }\n\n      var texture = new THREE.DataTexture(data_arr, dt_size, dt_size, THREE.RGBFormat, THREE.FloatType);\n      texture.needsUpdate = true;\n      return texture;\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n   * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n   *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n   *\n   * - 9 samples per pass\n   * - standard deviation 2.7\n   * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n   */\n  THREE.HorizontalBlurShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"h\": {\n        type: \"f\",\n        value: 1.0 / 512.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float h;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n   *\n   * - 9 samples per pass\n   * - standard deviation 2.7\n   * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n   * - \"r\" parameter control where \"focused\" horizontal line lies\n   */\n  THREE.HorizontalTiltShiftShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"h\": {\n        type: \"f\",\n        value: 1.0 / 512.0\n      },\n      \"r\": {\n        type: \"f\",\n        value: 0.35\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float h;\", \"uniform float r;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"float hh = h * abs( r - vUv.y );\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * hh, vUv.y ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * hh, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * hh, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * hh, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * hh, vUv.y ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * hh, vUv.y ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * hh, vUv.y ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * hh, vUv.y ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author tapio / http://tapio.github.com/\n   *\n   * Hue and saturation adjustment\n   * https://github.com/evanw/glfx.js\n   * hue: -1 to 1 (-1 is 180 degrees in the negative direction, 0 is no change, etc.\n   * saturation: -1 to 1 (-1 is solid gray, 0 is no change, and 1 is maximum contrast)\n   */\n  THREE.HueSaturationShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"hue\": {\n        type: \"f\",\n        value: 0\n      },\n      \"saturation\": {\n        type: \"f\",\n        value: 0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float hue;\", \"uniform float saturation;\", \"varying vec2 vUv;\", \"void main() {\", \"gl_FragColor = texture2D( tDiffuse, vUv );\", // hue\n    \"float angle = hue * 3.14159265;\", \"float s = sin(angle), c = cos(angle);\", \"vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;\", \"float len = length(gl_FragColor.rgb);\", \"gl_FragColor.rgb = vec3(\", \"dot(gl_FragColor.rgb, weights.xyz),\", \"dot(gl_FragColor.rgb, weights.zxy),\", \"dot(gl_FragColor.rgb, weights.yzx)\", \");\", // saturation\n    \"float average = (gl_FragColor.r + gl_FragColor.g + gl_FragColor.b) / 3.0;\", \"if (saturation > 0.0) {\", \"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (1.0 - 1.0 / (1.001 - saturation));\", \"} else {\", \"gl_FragColor.rgb += (average - gl_FragColor.rgb) * (-saturation);\", \"}\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.JSONLoader = function (manager) {\n    if (typeof manager === 'boolean') {\n      console.warn('THREE.JSONLoader: showStatus parameter has been removed from constructor.');\n      manager = undefined;\n    }\n\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.withCredentials = false;\n  };\n\n  THREE.JSONLoader.prototype = {\n    constructor: THREE.JSONLoader,\n\n    // Deprecated\n    get statusDomElement() {\n      if (this._statusDomElement === undefined) {\n        this._statusDomElement = document.createElement('div');\n      }\n\n      console.warn('THREE.JSONLoader: .statusDomElement has been removed.');\n      return this._statusDomElement;\n    },\n\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var texturePath = this.texturePath && typeof this.texturePath === \"string\" ? this.texturePath : THREE.Loader.prototype.extractUrlBase(url);\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setWithCredentials(this.withCredentials);\n      loader.load(url, function (text) {\n        var json = JSON.parse(text);\n        var metadata = json.metadata;\n\n        if (metadata !== undefined) {\n          var type = metadata.type;\n\n          if (type !== undefined) {\n            if (type.toLowerCase() === 'object') {\n              console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.');\n              return;\n            }\n\n            if (type.toLowerCase() === 'scene') {\n              console.error('THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.');\n              return;\n            }\n          }\n        }\n\n        var object = scope.parse(json, texturePath);\n        onLoad(object.geometry, object.materials);\n      }, onProgress, onError);\n    },\n    setTexturePath: function setTexturePath(value) {\n      this.texturePath = value;\n    },\n    parse: function parse(json, texturePath) {\n      var geometry = new THREE.Geometry(),\n          scale = json.scale !== undefined ? 1.0 / json.scale : 1.0;\n      parseModel(scale);\n      parseSkin();\n      parseMorphing(scale);\n      parseAnimations();\n      geometry.computeFaceNormals();\n      geometry.computeBoundingSphere();\n\n      function parseModel(scale) {\n        function isBitSet(value, position) {\n          return value & 1 << position;\n        }\n\n        var i,\n            j,\n            fi,\n            offset,\n            zLength,\n            colorIndex,\n            normalIndex,\n            uvIndex,\n            materialIndex,\n            type,\n            isQuad,\n            hasMaterial,\n            hasFaceVertexUv,\n            hasFaceNormal,\n            hasFaceVertexNormal,\n            hasFaceColor,\n            hasFaceVertexColor,\n            vertex,\n            face,\n            faceA,\n            faceB,\n            hex,\n            normal,\n            uvLayer,\n            uv,\n            u,\n            v,\n            faces = json.faces,\n            vertices = json.vertices,\n            normals = json.normals,\n            colors = json.colors,\n            nUvLayers = 0;\n\n        if (json.uvs !== undefined) {\n          // disregard empty arrays\n          for (i = 0; i < json.uvs.length; i++) {\n            if (json.uvs[i].length) nUvLayers++;\n          }\n\n          for (i = 0; i < nUvLayers; i++) {\n            geometry.faceVertexUvs[i] = [];\n          }\n        }\n\n        offset = 0;\n        zLength = vertices.length;\n\n        while (offset < zLength) {\n          vertex = new THREE.Vector3();\n          vertex.x = vertices[offset++] * scale;\n          vertex.y = vertices[offset++] * scale;\n          vertex.z = vertices[offset++] * scale;\n          geometry.vertices.push(vertex);\n        }\n\n        offset = 0;\n        zLength = faces.length;\n\n        while (offset < zLength) {\n          type = faces[offset++];\n          isQuad = isBitSet(type, 0);\n          hasMaterial = isBitSet(type, 1);\n          hasFaceVertexUv = isBitSet(type, 3);\n          hasFaceNormal = isBitSet(type, 4);\n          hasFaceVertexNormal = isBitSet(type, 5);\n          hasFaceColor = isBitSet(type, 6);\n          hasFaceVertexColor = isBitSet(type, 7); // console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\n\n          if (isQuad) {\n            faceA = new THREE.Face3();\n            faceA.a = faces[offset];\n            faceA.b = faces[offset + 1];\n            faceA.c = faces[offset + 3];\n            faceB = new THREE.Face3();\n            faceB.a = faces[offset + 1];\n            faceB.b = faces[offset + 2];\n            faceB.c = faces[offset + 3];\n            offset += 4;\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              faceA.materialIndex = materialIndex;\n              faceB.materialIndex = materialIndex;\n            } // to get face <=> uv index correspondence\n\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n                geometry.faceVertexUvs[i][fi] = [];\n                geometry.faceVertexUvs[i][fi + 1] = [];\n\n                for (j = 0; j < 4; j++) {\n                  uvIndex = faces[offset++];\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n                  uv = new THREE.Vector2(u, v);\n                  if (j !== 2) geometry.faceVertexUvs[i][fi].push(uv);\n                  if (j !== 0) geometry.faceVertexUvs[i][fi + 1].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n              faceA.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n              faceB.normal.copy(faceA.normal);\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 4; i++) {\n                normalIndex = faces[offset++] * 3;\n                normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                if (i !== 2) faceA.vertexNormals.push(normal);\n                if (i !== 0) faceB.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              hex = colors[colorIndex];\n              faceA.color.setHex(hex);\n              faceB.color.setHex(hex);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 4; i++) {\n                colorIndex = faces[offset++];\n                hex = colors[colorIndex];\n                if (i !== 2) faceA.vertexColors.push(new THREE.Color(hex));\n                if (i !== 0) faceB.vertexColors.push(new THREE.Color(hex));\n              }\n            }\n\n            geometry.faces.push(faceA);\n            geometry.faces.push(faceB);\n          } else {\n            face = new THREE.Face3();\n            face.a = faces[offset++];\n            face.b = faces[offset++];\n            face.c = faces[offset++];\n\n            if (hasMaterial) {\n              materialIndex = faces[offset++];\n              face.materialIndex = materialIndex;\n            } // to get face <=> uv index correspondence\n\n\n            fi = geometry.faces.length;\n\n            if (hasFaceVertexUv) {\n              for (i = 0; i < nUvLayers; i++) {\n                uvLayer = json.uvs[i];\n                geometry.faceVertexUvs[i][fi] = [];\n\n                for (j = 0; j < 3; j++) {\n                  uvIndex = faces[offset++];\n                  u = uvLayer[uvIndex * 2];\n                  v = uvLayer[uvIndex * 2 + 1];\n                  uv = new THREE.Vector2(u, v);\n                  geometry.faceVertexUvs[i][fi].push(uv);\n                }\n              }\n            }\n\n            if (hasFaceNormal) {\n              normalIndex = faces[offset++] * 3;\n              face.normal.set(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n            }\n\n            if (hasFaceVertexNormal) {\n              for (i = 0; i < 3; i++) {\n                normalIndex = faces[offset++] * 3;\n                normal = new THREE.Vector3(normals[normalIndex++], normals[normalIndex++], normals[normalIndex]);\n                face.vertexNormals.push(normal);\n              }\n            }\n\n            if (hasFaceColor) {\n              colorIndex = faces[offset++];\n              face.color.setHex(colors[colorIndex]);\n            }\n\n            if (hasFaceVertexColor) {\n              for (i = 0; i < 3; i++) {\n                colorIndex = faces[offset++];\n                face.vertexColors.push(new THREE.Color(colors[colorIndex]));\n              }\n            }\n\n            geometry.faces.push(face);\n          }\n        }\n      }\n\n      ;\n\n      function parseSkin() {\n        var influencesPerVertex = json.influencesPerVertex !== undefined ? json.influencesPerVertex : 2;\n\n        if (json.skinWeights) {\n          for (var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex) {\n            var x = json.skinWeights[i];\n            var y = influencesPerVertex > 1 ? json.skinWeights[i + 1] : 0;\n            var z = influencesPerVertex > 2 ? json.skinWeights[i + 2] : 0;\n            var w = influencesPerVertex > 3 ? json.skinWeights[i + 3] : 0;\n            geometry.skinWeights.push(new THREE.Vector4(x, y, z, w));\n          }\n        }\n\n        if (json.skinIndices) {\n          for (var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex) {\n            var a = json.skinIndices[i];\n            var b = influencesPerVertex > 1 ? json.skinIndices[i + 1] : 0;\n            var c = influencesPerVertex > 2 ? json.skinIndices[i + 2] : 0;\n            var d = influencesPerVertex > 3 ? json.skinIndices[i + 3] : 0;\n            geometry.skinIndices.push(new THREE.Vector4(a, b, c, d));\n          }\n        }\n\n        geometry.bones = json.bones;\n\n        if (geometry.bones && geometry.bones.length > 0 && (geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length)) {\n          console.warn('When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' + geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.');\n        }\n      }\n\n      ;\n\n      function parseMorphing(scale) {\n        if (json.morphTargets !== undefined) {\n          for (var i = 0, l = json.morphTargets.length; i < l; i++) {\n            geometry.morphTargets[i] = {};\n            geometry.morphTargets[i].name = json.morphTargets[i].name;\n            geometry.morphTargets[i].vertices = [];\n            var dstVertices = geometry.morphTargets[i].vertices;\n            var srcVertices = json.morphTargets[i].vertices;\n\n            for (var v = 0, vl = srcVertices.length; v < vl; v += 3) {\n              var vertex = new THREE.Vector3();\n              vertex.x = srcVertices[v] * scale;\n              vertex.y = srcVertices[v + 1] * scale;\n              vertex.z = srcVertices[v + 2] * scale;\n              dstVertices.push(vertex);\n            }\n          }\n        }\n\n        if (json.morphColors !== undefined && json.morphColors.length > 0) {\n          console.warn('THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.');\n          var faces = geometry.faces;\n          var morphColors = json.morphColors[0].colors;\n\n          for (var i = 0, l = faces.length; i < l; i++) {\n            faces[i].color.fromArray(morphColors, i * 3);\n          }\n        }\n      }\n\n      function parseAnimations() {\n        var outputAnimations = []; // parse old style Bone/Hierarchy animations\n\n        var animations = [];\n\n        if (json.animation !== undefined) {\n          animations.push(json.animation);\n        }\n\n        if (json.animations !== undefined) {\n          if (json.animations.length) {\n            animations = animations.concat(json.animations);\n          } else {\n            animations.push(json.animations);\n          }\n        }\n\n        for (var i = 0; i < animations.length; i++) {\n          var clip = THREE.AnimationClip.parseAnimation(animations[i], geometry.bones);\n          if (clip) outputAnimations.push(clip);\n        } // parse implicit morph animations\n\n\n        if (geometry.morphTargets) {\n          // TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\n          var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences(geometry.morphTargets, 10);\n          outputAnimations = outputAnimations.concat(morphAnimationClips);\n        }\n\n        if (outputAnimations.length > 0) geometry.animations = outputAnimations;\n      }\n\n      ;\n\n      if (json.materials === undefined || json.materials.length === 0) {\n        return {\n          geometry: geometry\n        };\n      } else {\n        var materials = THREE.Loader.prototype.initMaterials(json.materials, texturePath, this.crossOrigin);\n        return {\n          geometry: geometry,\n          materials: materials\n        };\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author felixturner / http://airtight.cc/\n   *\n   * Kaleidoscope Shader\n   * Radial reflection around center point\n   * Ported from: http://pixelshaders.com/editor/\n   * by Toby Schachman / http://tobyschachman.com/\n   *\n   * sides: number of reflections\n   * angle: initial angle in radians\n   */\n  THREE.KaleidoShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"sides\": {\n        type: \"f\",\n        value: 6.0\n      },\n      \"angle\": {\n        type: \"f\",\n        value: 0.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float sides;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"vec2 p = vUv - 0.5;\", \"float r = length(p);\", \"float a = atan(p.y, p.x) + angle;\", \"float tau = 2. * 3.1416 ;\", \"a = mod(a, tau/sides);\", \"a = abs(a - tau/sides/2.) ;\", \"p = r * vec2(cos(a), sin(a));\", \"vec4 color = texture2D(tDiffuse, p + 0.5);\", \"gl_FragColor = color;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Luminosity\n   * http://en.wikipedia.org/wiki/Luminosity\n   */\n  THREE.LuminosityShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"vec3 luma = vec3( 0.299, 0.587, 0.114 );\", \"float v = dot( texel.xyz, luma );\", \"gl_FragColor = vec4( v, v, v, texel.w );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * Loads a Wavefront .mtl file specifying materials\n   *\n   * @author angelxuanchang\n   */\n  THREE.MTLLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  THREE.MTLLoader.prototype = {\n    constructor: THREE.MTLLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.XHRLoader(this.manager);\n      loader.setPath(this.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text));\n      }, onProgress, onError);\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n    },\n    setBaseUrl: function setBaseUrl(value) {\n      // TODO: Merge with setPath()? Or rename to setTexturePath?\n      this.baseUrl = value;\n    },\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n    },\n    setMaterialOptions: function setMaterialOptions(value) {\n      this.materialOptions = value;\n    },\n\n    /**\n     * Parses loaded MTL file\n     * @param text - Content of MTL file\n     * @return {THREE.MTLLoader.MaterialCreator}\n     */\n    parse: function parse(text) {\n      var lines = text.split(\"\\n\");\n      var info = {};\n      var delimiter_pattern = /\\s+/;\n      var materialsInfo = {};\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n\n        if (line.length === 0 || line.charAt(0) === '#') {\n          // Blank line or comment ignore\n          continue;\n        }\n\n        var pos = line.indexOf(' ');\n        var key = pos >= 0 ? line.substring(0, pos) : line;\n        key = key.toLowerCase();\n        var value = pos >= 0 ? line.substring(pos + 1) : \"\";\n        value = value.trim();\n\n        if (key === \"newmtl\") {\n          // New material\n          info = {\n            name: value\n          };\n          materialsInfo[value] = info;\n        } else if (info) {\n          if (key === \"ka\" || key === \"kd\" || key === \"ks\") {\n            var ss = value.split(delimiter_pattern, 3);\n            info[key] = [parseFloat(ss[0]), parseFloat(ss[1]), parseFloat(ss[2])];\n          } else {\n            info[key] = value;\n          }\n        }\n      }\n\n      var materialCreator = new THREE.MTLLoader.MaterialCreator(this.baseUrl, this.materialOptions);\n      materialCreator.setCrossOrigin(this.crossOrigin);\n      materialCreator.setManager(this.manager);\n      materialCreator.setMaterials(materialsInfo);\n      return materialCreator;\n    }\n  };\n  /**\n   * Create a new THREE-MTLLoader.MaterialCreator\n   * @param baseUrl - Url relative to which textures are loaded\n   * @param options - Set of options on how to construct the materials\n   *                  side: Which side to apply the material\n   *                        THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n   *                  wrap: What type of wrapping to apply for textures\n   *                        THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n   *                  normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n   *                                Default: false, assumed to be already normalized\n   *                  ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n   *                                  Default: false\n   * @constructor\n   */\n\n  THREE.MTLLoader.MaterialCreator = function (baseUrl, options) {\n    this.baseUrl = baseUrl;\n    this.options = options;\n    this.materialsInfo = {};\n    this.materials = {};\n    this.materialsArray = [];\n    this.nameLookup = {};\n    this.side = this.options && this.options.side ? this.options.side : THREE.FrontSide;\n    this.wrap = this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping;\n  };\n\n  THREE.MTLLoader.MaterialCreator.prototype = {\n    constructor: THREE.MTLLoader.MaterialCreator,\n    setCrossOrigin: function setCrossOrigin(value) {\n      this.crossOrigin = value;\n    },\n    setManager: function setManager(value) {\n      this.manager = value;\n    },\n    setMaterials: function setMaterials(materialsInfo) {\n      this.materialsInfo = this.convert(materialsInfo);\n      this.materials = {};\n      this.materialsArray = [];\n      this.nameLookup = {};\n    },\n    convert: function convert(materialsInfo) {\n      if (!this.options) return materialsInfo;\n      var converted = {};\n\n      for (var mn in materialsInfo) {\n        // Convert materials info into normalized form based on options\n        var mat = materialsInfo[mn];\n        var covmat = {};\n        converted[mn] = covmat;\n\n        for (var prop in mat) {\n          var save = true;\n          var value = mat[prop];\n          var lprop = prop.toLowerCase();\n\n          switch (lprop) {\n            case 'kd':\n            case 'ka':\n            case 'ks':\n              // Diffuse color (color under white light) using RGB values\n              if (this.options && this.options.normalizeRGB) {\n                value = [value[0] / 255, value[1] / 255, value[2] / 255];\n              }\n\n              if (this.options && this.options.ignoreZeroRGBs) {\n                if (value[0] === 0 && value[1] === 0 && value[1] === 0) {\n                  // ignore\n                  save = false;\n                }\n              }\n\n              break;\n\n            default:\n              break;\n          }\n\n          if (save) {\n            covmat[lprop] = value;\n          }\n        }\n      }\n\n      return converted;\n    },\n    preload: function preload() {\n      for (var mn in this.materialsInfo) {\n        this.create(mn);\n      }\n    },\n    getIndex: function getIndex(materialName) {\n      return this.nameLookup[materialName];\n    },\n    getAsArray: function getAsArray() {\n      var index = 0;\n\n      for (var mn in this.materialsInfo) {\n        this.materialsArray[index] = this.create(mn);\n        this.nameLookup[mn] = index;\n        index++;\n      }\n\n      return this.materialsArray;\n    },\n    create: function create(materialName) {\n      if (this.materials[materialName] === undefined) {\n        this.createMaterial_(materialName);\n      }\n\n      return this.materials[materialName];\n    },\n    createMaterial_: function createMaterial_(materialName) {\n      // Create material\n      var mat = this.materialsInfo[materialName];\n      var params = {\n        name: materialName,\n        side: this.side\n      };\n\n      for (var prop in mat) {\n        var value = mat[prop];\n        if (value === '') continue;\n\n        switch (prop.toLowerCase()) {\n          // Ns is material specular exponent\n          case 'kd':\n            // Diffuse color (color under white light) using RGB values\n            params['color'] = new THREE.Color().fromArray(value);\n            break;\n\n          case 'ks':\n            // Specular color (color when light is reflected from shiny surface) using RGB values\n            params['specular'] = new THREE.Color().fromArray(value);\n            break;\n\n          case 'map_kd':\n            // Diffuse texture map\n            params['map'] = this.loadTexture(this.baseUrl + value);\n            params['map'].wrapS = this.wrap;\n            params['map'].wrapT = this.wrap;\n            break;\n\n          case 'ns':\n            // The specular exponent (defines the focus of the specular highlight)\n            // A high exponent results in a tight, concentrated highlight. Ns values normally range from 0 to 1000.\n            params['shininess'] = parseFloat(value);\n            break;\n\n          case 'd':\n            if (value < 1) {\n              params['opacity'] = value;\n              params['transparent'] = true;\n            }\n\n            break;\n\n          case 'Tr':\n            if (value > 0) {\n              params['opacity'] = 1 - value;\n              params['transparent'] = true;\n            }\n\n            break;\n\n          case 'map_bump':\n          case 'bump':\n            // Bump texture map\n            if (params['bumpMap']) break; // Avoid loading twice.\n\n            params['bumpMap'] = this.loadTexture(this.baseUrl + value);\n            params['bumpMap'].wrapS = this.wrap;\n            params['bumpMap'].wrapT = this.wrap;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      this.materials[materialName] = new THREE.MeshPhongMaterial(params);\n      return this.materials[materialName];\n    },\n    loadTexture: function loadTexture(url, mapping, onLoad, onProgress, onError) {\n      var texture;\n      var loader = THREE.Loader.Handlers.get(url);\n      var manager = this.manager !== undefined ? this.manager : THREE.DefaultLoadingManager;\n\n      if (loader === null) {\n        loader = new THREE.TextureLoader(manager);\n      }\n\n      if (loader.setCrossOrigin) loader.setCrossOrigin(this.crossOrigin);\n      texture = loader.load(url, onLoad, onProgress, onError);\n      if (mapping !== undefined) texture.mapping = mapping;\n      return texture;\n    }\n  };\n  THREE.EventDispatcher.prototype.apply(THREE.MTLLoader.prototype);\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Port of greggman's ThreeD version of marching cubes to Three.js\n   * http://webglsamples.googlecode.com/hg/blob/blob.html\n   */\n  THREE.MarchingCubes = function (resolution, material, enableUvs, enableColors) {\n    THREE.ImmediateRenderObject.call(this, material);\n    this.enableUvs = enableUvs !== undefined ? enableUvs : false;\n    this.enableColors = enableColors !== undefined ? enableColors : false; // functions have to be object properties\n    // prototype functions kill performance\n    // (tested and it was 4x slower !!!)\n\n    this.init = function (resolution) {\n      this.resolution = resolution; // parameters\n\n      this.isolation = 80.0; // size of field, 32 is pushing it in Javascript :)\n\n      this.size = resolution;\n      this.size2 = this.size * this.size;\n      this.size3 = this.size2 * this.size;\n      this.halfsize = this.size / 2.0; // deltas\n\n      this.delta = 2.0 / this.size;\n      this.yd = this.size;\n      this.zd = this.size2;\n      this.field = new Float32Array(this.size3);\n      this.normal_cache = new Float32Array(this.size3 * 3); // temp buffers used in polygonize\n\n      this.vlist = new Float32Array(12 * 3);\n      this.nlist = new Float32Array(12 * 3); // immediate render mode simulator\n\n      this.maxCount = 4096; // TODO: find the fastest size for this buffer\n\n      this.count = 0;\n      this.hasPositions = false;\n      this.hasNormals = false;\n      this.hasColors = false;\n      this.hasUvs = false;\n      this.positionArray = new Float32Array(this.maxCount * 3);\n      this.normalArray = new Float32Array(this.maxCount * 3);\n\n      if (this.enableUvs) {\n        this.uvArray = new Float32Array(this.maxCount * 2);\n      }\n\n      if (this.enableColors) {\n        this.colorArray = new Float32Array(this.maxCount * 3);\n      }\n    }; ///////////////////////\n    // Polygonization\n    ///////////////////////\n\n\n    this.lerp = function (a, b, t) {\n      return a + (b - a) * t;\n    };\n\n    this.VIntX = function (q, pout, nout, offset, isol, x, y, z, valp1, valp2) {\n      var mu = (isol - valp1) / (valp2 - valp1),\n          nc = this.normal_cache;\n      pout[offset] = x + mu * this.delta;\n      pout[offset + 1] = y;\n      pout[offset + 2] = z;\n      nout[offset] = this.lerp(nc[q], nc[q + 3], mu);\n      nout[offset + 1] = this.lerp(nc[q + 1], nc[q + 4], mu);\n      nout[offset + 2] = this.lerp(nc[q + 2], nc[q + 5], mu);\n    };\n\n    this.VIntY = function (q, pout, nout, offset, isol, x, y, z, valp1, valp2) {\n      var mu = (isol - valp1) / (valp2 - valp1),\n          nc = this.normal_cache;\n      pout[offset] = x;\n      pout[offset + 1] = y + mu * this.delta;\n      pout[offset + 2] = z;\n      var q2 = q + this.yd * 3;\n      nout[offset] = this.lerp(nc[q], nc[q2], mu);\n      nout[offset + 1] = this.lerp(nc[q + 1], nc[q2 + 1], mu);\n      nout[offset + 2] = this.lerp(nc[q + 2], nc[q2 + 2], mu);\n    };\n\n    this.VIntZ = function (q, pout, nout, offset, isol, x, y, z, valp1, valp2) {\n      var mu = (isol - valp1) / (valp2 - valp1),\n          nc = this.normal_cache;\n      pout[offset] = x;\n      pout[offset + 1] = y;\n      pout[offset + 2] = z + mu * this.delta;\n      var q2 = q + this.zd * 3;\n      nout[offset] = this.lerp(nc[q], nc[q2], mu);\n      nout[offset + 1] = this.lerp(nc[q + 1], nc[q2 + 1], mu);\n      nout[offset + 2] = this.lerp(nc[q + 2], nc[q2 + 2], mu);\n    };\n\n    this.compNorm = function (q) {\n      var q3 = q * 3;\n\n      if (this.normal_cache[q3] === 0.0) {\n        this.normal_cache[q3] = this.field[q - 1] - this.field[q + 1];\n        this.normal_cache[q3 + 1] = this.field[q - this.yd] - this.field[q + this.yd];\n        this.normal_cache[q3 + 2] = this.field[q - this.zd] - this.field[q + this.zd];\n      }\n    }; // Returns total number of triangles. Fills triangles.\n    // (this is where most of time is spent - it's inner work of O(n3) loop )\n\n\n    this.polygonize = function (fx, fy, fz, q, isol, renderCallback) {\n      // cache indices\n      var q1 = q + 1,\n          qy = q + this.yd,\n          qz = q + this.zd,\n          q1y = q1 + this.yd,\n          q1z = q1 + this.zd,\n          qyz = q + this.yd + this.zd,\n          q1yz = q1 + this.yd + this.zd;\n      var cubeindex = 0,\n          field0 = this.field[q],\n          field1 = this.field[q1],\n          field2 = this.field[qy],\n          field3 = this.field[q1y],\n          field4 = this.field[qz],\n          field5 = this.field[q1z],\n          field6 = this.field[qyz],\n          field7 = this.field[q1yz];\n      if (field0 < isol) cubeindex |= 1;\n      if (field1 < isol) cubeindex |= 2;\n      if (field2 < isol) cubeindex |= 8;\n      if (field3 < isol) cubeindex |= 4;\n      if (field4 < isol) cubeindex |= 16;\n      if (field5 < isol) cubeindex |= 32;\n      if (field6 < isol) cubeindex |= 128;\n      if (field7 < isol) cubeindex |= 64; // if cube is entirely in/out of the surface - bail, nothing to draw\n\n      var bits = THREE.edgeTable[cubeindex];\n      if (bits === 0) return 0;\n      var d = this.delta,\n          fx2 = fx + d,\n          fy2 = fy + d,\n          fz2 = fz + d; // top of the cube\n\n      if (bits & 1) {\n        this.compNorm(q);\n        this.compNorm(q1);\n        this.VIntX(q * 3, this.vlist, this.nlist, 0, isol, fx, fy, fz, field0, field1);\n      }\n\n      if (bits & 2) {\n        this.compNorm(q1);\n        this.compNorm(q1y);\n        this.VIntY(q1 * 3, this.vlist, this.nlist, 3, isol, fx2, fy, fz, field1, field3);\n      }\n\n      if (bits & 4) {\n        this.compNorm(qy);\n        this.compNorm(q1y);\n        this.VIntX(qy * 3, this.vlist, this.nlist, 6, isol, fx, fy2, fz, field2, field3);\n      }\n\n      if (bits & 8) {\n        this.compNorm(q);\n        this.compNorm(qy);\n        this.VIntY(q * 3, this.vlist, this.nlist, 9, isol, fx, fy, fz, field0, field2);\n      } // bottom of the cube\n\n\n      if (bits & 16) {\n        this.compNorm(qz);\n        this.compNorm(q1z);\n        this.VIntX(qz * 3, this.vlist, this.nlist, 12, isol, fx, fy, fz2, field4, field5);\n      }\n\n      if (bits & 32) {\n        this.compNorm(q1z);\n        this.compNorm(q1yz);\n        this.VIntY(q1z * 3, this.vlist, this.nlist, 15, isol, fx2, fy, fz2, field5, field7);\n      }\n\n      if (bits & 64) {\n        this.compNorm(qyz);\n        this.compNorm(q1yz);\n        this.VIntX(qyz * 3, this.vlist, this.nlist, 18, isol, fx, fy2, fz2, field6, field7);\n      }\n\n      if (bits & 128) {\n        this.compNorm(qz);\n        this.compNorm(qyz);\n        this.VIntY(qz * 3, this.vlist, this.nlist, 21, isol, fx, fy, fz2, field4, field6);\n      } // vertical lines of the cube\n\n\n      if (bits & 256) {\n        this.compNorm(q);\n        this.compNorm(qz);\n        this.VIntZ(q * 3, this.vlist, this.nlist, 24, isol, fx, fy, fz, field0, field4);\n      }\n\n      if (bits & 512) {\n        this.compNorm(q1);\n        this.compNorm(q1z);\n        this.VIntZ(q1 * 3, this.vlist, this.nlist, 27, isol, fx2, fy, fz, field1, field5);\n      }\n\n      if (bits & 1024) {\n        this.compNorm(q1y);\n        this.compNorm(q1yz);\n        this.VIntZ(q1y * 3, this.vlist, this.nlist, 30, isol, fx2, fy2, fz, field3, field7);\n      }\n\n      if (bits & 2048) {\n        this.compNorm(qy);\n        this.compNorm(qyz);\n        this.VIntZ(qy * 3, this.vlist, this.nlist, 33, isol, fx, fy2, fz, field2, field6);\n      }\n\n      cubeindex <<= 4; // re-purpose cubeindex into an offset into triTable\n\n      var o1,\n          o2,\n          o3,\n          numtris = 0,\n          i = 0; // here is where triangles are created\n\n      while (THREE.triTable[cubeindex + i] != -1) {\n        o1 = cubeindex + i;\n        o2 = o1 + 1;\n        o3 = o1 + 2;\n        this.posnormtriv(this.vlist, this.nlist, 3 * THREE.triTable[o1], 3 * THREE.triTable[o2], 3 * THREE.triTable[o3], renderCallback);\n        i += 3;\n        numtris++;\n      }\n\n      return numtris;\n    }; /////////////////////////////////////\n    // Immediate render mode simulator\n    /////////////////////////////////////\n\n\n    this.posnormtriv = function (pos, norm, o1, o2, o3, renderCallback) {\n      var c = this.count * 3; // positions\n\n      this.positionArray[c] = pos[o1];\n      this.positionArray[c + 1] = pos[o1 + 1];\n      this.positionArray[c + 2] = pos[o1 + 2];\n      this.positionArray[c + 3] = pos[o2];\n      this.positionArray[c + 4] = pos[o2 + 1];\n      this.positionArray[c + 5] = pos[o2 + 2];\n      this.positionArray[c + 6] = pos[o3];\n      this.positionArray[c + 7] = pos[o3 + 1];\n      this.positionArray[c + 8] = pos[o3 + 2]; // normals\n\n      this.normalArray[c] = norm[o1];\n      this.normalArray[c + 1] = norm[o1 + 1];\n      this.normalArray[c + 2] = norm[o1 + 2];\n      this.normalArray[c + 3] = norm[o2];\n      this.normalArray[c + 4] = norm[o2 + 1];\n      this.normalArray[c + 5] = norm[o2 + 2];\n      this.normalArray[c + 6] = norm[o3];\n      this.normalArray[c + 7] = norm[o3 + 1];\n      this.normalArray[c + 8] = norm[o3 + 2]; // uvs\n\n      if (this.enableUvs) {\n        var d = this.count * 2;\n        this.uvArray[d] = pos[o1];\n        this.uvArray[d + 1] = pos[o1 + 2];\n        this.uvArray[d + 2] = pos[o2];\n        this.uvArray[d + 3] = pos[o2 + 2];\n        this.uvArray[d + 4] = pos[o3];\n        this.uvArray[d + 5] = pos[o3 + 2];\n      } // colors\n\n\n      if (this.enableColors) {\n        this.colorArray[c] = pos[o1];\n        this.colorArray[c + 1] = pos[o1 + 1];\n        this.colorArray[c + 2] = pos[o1 + 2];\n        this.colorArray[c + 3] = pos[o2];\n        this.colorArray[c + 4] = pos[o2 + 1];\n        this.colorArray[c + 5] = pos[o2 + 2];\n        this.colorArray[c + 6] = pos[o3];\n        this.colorArray[c + 7] = pos[o3 + 1];\n        this.colorArray[c + 8] = pos[o3 + 2];\n      }\n\n      this.count += 3;\n\n      if (this.count >= this.maxCount - 3) {\n        this.hasPositions = true;\n        this.hasNormals = true;\n\n        if (this.enableUvs) {\n          this.hasUvs = true;\n        }\n\n        if (this.enableColors) {\n          this.hasColors = true;\n        }\n\n        renderCallback(this);\n      }\n    };\n\n    this.begin = function () {\n      this.count = 0;\n      this.hasPositions = false;\n      this.hasNormals = false;\n      this.hasUvs = false;\n      this.hasColors = false;\n    };\n\n    this.end = function (renderCallback) {\n      if (this.count === 0) return;\n\n      for (var i = this.count * 3; i < this.positionArray.length; i++) {\n        this.positionArray[i] = 0.0;\n      }\n\n      this.hasPositions = true;\n      this.hasNormals = true;\n\n      if (this.enableUvs) {\n        this.hasUvs = true;\n      }\n\n      if (this.enableColors) {\n        this.hasColors = true;\n      }\n\n      renderCallback(this);\n    }; /////////////////////////////////////\n    // Metaballs\n    /////////////////////////////////////\n    // Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n    // a fixed distance, determined by strength and subtract.\n\n\n    this.addBall = function (ballx, bally, ballz, strength, subtract) {\n      // Let's solve the equation to find the radius:\n      // 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n      // strength / (radius^2) = subtract\n      // strength = subtract * radius^2\n      // radius^2 = strength / subtract\n      // radius = sqrt(strength / subtract)\n      var radius = this.size * Math.sqrt(strength / subtract),\n          zs = ballz * this.size,\n          ys = bally * this.size,\n          xs = ballx * this.size;\n      var min_z = Math.floor(zs - radius);\n      if (min_z < 1) min_z = 1;\n      var max_z = Math.floor(zs + radius);\n      if (max_z > this.size - 1) max_z = this.size - 1;\n      var min_y = Math.floor(ys - radius);\n      if (min_y < 1) min_y = 1;\n      var max_y = Math.floor(ys + radius);\n      if (max_y > this.size - 1) max_y = this.size - 1;\n      var min_x = Math.floor(xs - radius);\n      if (min_x < 1) min_x = 1;\n      var max_x = Math.floor(xs + radius);\n      if (max_x > this.size - 1) max_x = this.size - 1; // Don't polygonize in the outer layer because normals aren't\n      // well-defined there.\n\n      var x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n\n      for (z = min_z; z < max_z; z++) {\n        z_offset = this.size2 * z, fz = z / this.size - ballz, fz2 = fz * fz;\n\n        for (y = min_y; y < max_y; y++) {\n          y_offset = z_offset + this.size * y;\n          fy = y / this.size - bally;\n          fy2 = fy * fy;\n\n          for (x = min_x; x < max_x; x++) {\n            fx = x / this.size - ballx;\n            val = strength / (0.000001 + fx * fx + fy2 + fz2) - subtract;\n            if (val > 0.0) this.field[y_offset + x] += val;\n          }\n        }\n      }\n    };\n\n    this.addPlaneX = function (strength, subtract) {\n      var x,\n          y,\n          z,\n          xx,\n          val,\n          xdiv,\n          cxy,\n          // cache attribute lookups\n      size = this.size,\n          yd = this.yd,\n          zd = this.zd,\n          field = this.field,\n          dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n\n      for (x = 0; x < dist; x++) {\n        xdiv = x / size;\n        xx = xdiv * xdiv;\n        val = strength / (0.0001 + xx) - subtract;\n\n        if (val > 0.0) {\n          for (y = 0; y < size; y++) {\n            cxy = x + y * yd;\n\n            for (z = 0; z < size; z++) {\n              field[zd * z + cxy] += val;\n            }\n          }\n        }\n      }\n    };\n\n    this.addPlaneY = function (strength, subtract) {\n      var x,\n          y,\n          z,\n          yy,\n          val,\n          ydiv,\n          cy,\n          cxy,\n          // cache attribute lookups\n      size = this.size,\n          yd = this.yd,\n          zd = this.zd,\n          field = this.field,\n          dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n\n      for (y = 0; y < dist; y++) {\n        ydiv = y / size;\n        yy = ydiv * ydiv;\n        val = strength / (0.0001 + yy) - subtract;\n\n        if (val > 0.0) {\n          cy = y * yd;\n\n          for (x = 0; x < size; x++) {\n            cxy = cy + x;\n\n            for (z = 0; z < size; z++) {\n              field[zd * z + cxy] += val;\n            }\n          }\n        }\n      }\n    };\n\n    this.addPlaneZ = function (strength, subtract) {\n      var x,\n          y,\n          z,\n          zz,\n          val,\n          zdiv,\n          cz,\n          cyz,\n          // cache attribute lookups\n      size = this.size,\n          yd = this.yd,\n          zd = this.zd,\n          field = this.field,\n          dist = size * Math.sqrt(strength / subtract);\n      if (dist > size) dist = size;\n\n      for (z = 0; z < dist; z++) {\n        zdiv = z / size;\n        zz = zdiv * zdiv;\n        val = strength / (0.0001 + zz) - subtract;\n\n        if (val > 0.0) {\n          cz = zd * z;\n\n          for (y = 0; y < size; y++) {\n            cyz = cz + y * yd;\n\n            for (x = 0; x < size; x++) {\n              field[cyz + x] += val;\n            }\n          }\n        }\n      }\n    }; /////////////////////////////////////\n    // Updates\n    /////////////////////////////////////\n\n\n    this.reset = function () {\n      var i; // wipe the normal cache\n\n      for (i = 0; i < this.size3; i++) {\n        this.normal_cache[i * 3] = 0.0;\n        this.field[i] = 0.0;\n      }\n    };\n\n    this.render = function (renderCallback) {\n      this.begin(); // Triangulate. Yeah, this is slow.\n\n      var smin2 = this.size - 2;\n\n      for (var z = 1; z < smin2; z++) {\n        var z_offset = this.size2 * z;\n        var fz = (z - this.halfsize) / this.halfsize; //+ 1\n\n        for (var y = 1; y < smin2; y++) {\n          var y_offset = z_offset + this.size * y;\n          var fy = (y - this.halfsize) / this.halfsize; //+ 1\n\n          for (var x = 1; x < smin2; x++) {\n            var fx = (x - this.halfsize) / this.halfsize; //+ 1\n\n            var q = y_offset + x;\n            this.polygonize(fx, fy, fz, q, this.isolation, renderCallback);\n          }\n        }\n      }\n\n      this.end(renderCallback);\n    };\n\n    this.generateGeometry = function () {\n      var start = 0,\n          geo = new THREE.Geometry();\n      var normals = [];\n\n      var geo_callback = function geo_callback(object) {\n        var i, x, y, z, vertex, normal, face, a, b, c, na, nb, nc, nfaces;\n\n        for (i = 0; i < object.count; i++) {\n          a = i * 3;\n          b = a + 1;\n          c = a + 2;\n          x = object.positionArray[a];\n          y = object.positionArray[b];\n          z = object.positionArray[c];\n          vertex = new THREE.Vector3(x, y, z);\n          x = object.normalArray[a];\n          y = object.normalArray[b];\n          z = object.normalArray[c];\n          normal = new THREE.Vector3(x, y, z);\n          normal.normalize();\n          geo.vertices.push(vertex);\n          normals.push(normal);\n        }\n\n        nfaces = object.count / 3;\n\n        for (i = 0; i < nfaces; i++) {\n          a = (start + i) * 3;\n          b = a + 1;\n          c = a + 2;\n          na = normals[a];\n          nb = normals[b];\n          nc = normals[c];\n          face = new THREE.Face3(a, b, c, [na, nb, nc]);\n          geo.faces.push(face);\n        }\n\n        start += nfaces;\n        object.count = 0;\n      };\n\n      this.render(geo_callback); // console.log( \"generated \" + geo.faces.length + \" triangles\" );\n\n      return geo;\n    };\n\n    this.init(resolution);\n  };\n\n  THREE.MarchingCubes.prototype = Object.create(THREE.ImmediateRenderObject.prototype);\n  THREE.MarchingCubes.prototype.constructor = THREE.MarchingCubes; /////////////////////////////////////\n  // Marching cubes lookup tables\n  /////////////////////////////////////\n  // These tables are straight from Paul Bourke's page:\n  // http://local.wasp.uwa.edu.au/~pbourke/geometry/polygonise/\n  // who in turn got them from Cory Gene Bloyd.\n\n  THREE.edgeTable = new Int32Array([0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, 0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, 0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, 0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, 0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, 0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, 0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, 0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, 0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, 0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, 0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, 0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460, 0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0, 0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230, 0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190, 0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0]);\n  THREE.triTable = new Int32Array([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 9, 8, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 0, 2, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 8, 3, 2, 10, 8, 10, 9, 8, -1, -1, -1, -1, -1, -1, -1, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 8, 11, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 11, 2, 1, 9, 11, 9, 8, 11, -1, -1, -1, -1, -1, -1, -1, 3, 10, 1, 11, 10, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 10, 1, 0, 8, 10, 8, 11, 10, -1, -1, -1, -1, -1, -1, -1, 3, 9, 0, 3, 11, 9, 11, 10, 9, -1, -1, -1, -1, -1, -1, -1, 9, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 7, 3, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 1, 9, 4, 7, 1, 7, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 7, 3, 0, 4, 1, 2, 10, -1, -1, -1, -1, -1, -1, -1, 9, 2, 10, 9, 0, 2, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, -1, -1, -1, -1, 8, 4, 7, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 4, 7, 11, 2, 4, 2, 0, 4, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 8, 4, 7, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, -1, -1, -1, -1, 3, 10, 1, 3, 11, 10, 7, 8, 4, -1, -1, -1, -1, -1, -1, -1, 1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, -1, -1, -1, -1, 4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, -1, -1, -1, -1, 4, 7, 11, 4, 11, 9, 9, 11, 10, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 1, 5, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 5, 4, 8, 3, 5, 3, 1, 5, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 10, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 5, 2, 10, 5, 4, 2, 4, 0, 2, -1, -1, -1, -1, -1, -1, -1, 2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, -1, -1, -1, -1, 9, 5, 4, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 11, 2, 0, 8, 11, 4, 9, 5, -1, -1, -1, -1, -1, -1, -1, 0, 5, 4, 0, 1, 5, 2, 3, 11, -1, -1, -1, -1, -1, -1, -1, 2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, -1, -1, -1, -1, 10, 3, 11, 10, 1, 3, 9, 5, 4, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, -1, -1, -1, -1, 5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, -1, -1, -1, -1, 5, 4, 8, 5, 8, 10, 10, 8, 11, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 5, 7, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 3, 0, 9, 5, 3, 5, 7, 3, -1, -1, -1, -1, -1, -1, -1, 0, 7, 8, 0, 1, 7, 1, 5, 7, -1, -1, -1, -1, -1, -1, -1, 1, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 7, 8, 9, 5, 7, 10, 1, 2, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, -1, -1, -1, -1, 8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, -1, -1, -1, -1, 2, 10, 5, 2, 5, 3, 3, 5, 7, -1, -1, -1, -1, -1, -1, -1, 7, 9, 5, 7, 8, 9, 3, 11, 2, -1, -1, -1, -1, -1, -1, -1, 9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, -1, -1, -1, -1, 2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, -1, -1, -1, -1, 11, 2, 1, 11, 1, 7, 7, 1, 5, -1, -1, -1, -1, -1, -1, -1, 9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, -1, -1, -1, -1, 5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, -1, 11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, -1, 11, 10, 5, 7, 11, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 0, 1, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 8, 3, 1, 9, 8, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 2, 6, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 6, 5, 1, 2, 6, 3, 0, 8, -1, -1, -1, -1, -1, -1, -1, 9, 6, 5, 9, 0, 6, 0, 2, 6, -1, -1, -1, -1, -1, -1, -1, 5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, -1, -1, -1, -1, 2, 3, 11, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 0, 8, 11, 2, 0, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, -1, -1, -1, -1, 6, 3, 11, 6, 5, 3, 5, 1, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, -1, -1, -1, -1, 3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, -1, -1, -1, -1, 6, 5, 9, 6, 9, 11, 11, 9, 8, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 3, 0, 4, 7, 3, 6, 5, 10, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 5, 10, 6, 8, 4, 7, -1, -1, -1, -1, -1, -1, -1, 10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, -1, -1, -1, -1, 6, 1, 2, 6, 5, 1, 4, 7, 8, -1, -1, -1, -1, -1, -1, -1, 1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, -1, -1, -1, -1, 8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, -1, -1, -1, -1, 7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, -1, 3, 11, 2, 7, 8, 4, 10, 6, 5, -1, -1, -1, -1, -1, -1, -1, 5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, -1, -1, -1, -1, 0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, -1, -1, -1, -1, 9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, -1, 8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, -1, -1, -1, -1, 5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, -1, 0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, -1, 6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, -1, -1, -1, -1, 10, 4, 9, 6, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 10, 6, 4, 9, 10, 0, 8, 3, -1, -1, -1, -1, -1, -1, -1, 10, 0, 1, 10, 6, 0, 6, 4, 0, -1, -1, -1, -1, -1, -1, -1, 8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, -1, -1, -1, -1, 1, 4, 9, 1, 2, 4, 2, 6, 4, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, -1, -1, -1, -1, 0, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 3, 2, 8, 2, 4, 4, 2, 6, -1, -1, -1, -1, -1, -1, -1, 10, 4, 9, 10, 6, 4, 11, 2, 3, -1, -1, -1, -1, -1, -1, -1, 0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, -1, -1, -1, -1, 3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, -1, -1, -1, -1, 6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, -1, 9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, -1, -1, -1, -1, 8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, -1, 3, 11, 6, 3, 6, 0, 0, 6, 4, -1, -1, -1, -1, -1, -1, -1, 6, 4, 8, 11, 6, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 10, 6, 7, 8, 10, 8, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, -1, -1, -1, -1, 10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, -1, -1, -1, -1, 10, 6, 7, 10, 7, 1, 1, 7, 3, -1, -1, -1, -1, -1, -1, -1, 1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, -1, 7, 8, 0, 7, 0, 6, 6, 0, 2, -1, -1, -1, -1, -1, -1, -1, 7, 3, 2, 6, 7, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, -1, -1, -1, -1, 2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, -1, 1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, -1, 11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, -1, -1, -1, -1, 8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, -1, 0, 9, 1, 11, 6, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, -1, -1, -1, -1, 7, 11, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 8, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 9, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 1, 9, 8, 3, 1, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 10, 1, 2, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 8, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 2, 9, 0, 2, 10, 9, 6, 11, 7, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, -1, -1, -1, -1, 7, 2, 3, 6, 2, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 0, 8, 7, 6, 0, 6, 2, 0, -1, -1, -1, -1, -1, -1, -1, 2, 7, 6, 2, 3, 7, 0, 1, 9, -1, -1, -1, -1, -1, -1, -1, 1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, -1, -1, -1, -1, 10, 7, 6, 10, 1, 7, 1, 3, 7, -1, -1, -1, -1, -1, -1, -1, 10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, -1, -1, -1, -1, 0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, -1, -1, -1, -1, 7, 6, 10, 7, 10, 8, 8, 10, 9, -1, -1, -1, -1, -1, -1, -1, 6, 8, 4, 11, 8, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 3, 0, 6, 0, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 6, 11, 8, 4, 6, 9, 0, 1, -1, -1, -1, -1, -1, -1, -1, 9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, -1, -1, -1, -1, 6, 8, 4, 6, 11, 8, 2, 10, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, -1, -1, -1, -1, 4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, -1, -1, -1, -1, 10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, -1, 8, 2, 3, 8, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, 0, 4, 2, 4, 6, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, -1, -1, -1, -1, 1, 9, 4, 1, 4, 2, 2, 4, 6, -1, -1, -1, -1, -1, -1, -1, 8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, -1, -1, -1, -1, 10, 1, 0, 10, 0, 6, 6, 0, 4, -1, -1, -1, -1, -1, -1, -1, 4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, -1, 10, 9, 4, 6, 10, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 5, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 5, 11, 7, 6, -1, -1, -1, -1, -1, -1, -1, 5, 0, 1, 5, 4, 0, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, -1, -1, -1, -1, 9, 5, 4, 10, 1, 2, 7, 6, 11, -1, -1, -1, -1, -1, -1, -1, 6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, -1, -1, -1, -1, 7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, -1, -1, -1, -1, 3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, -1, 7, 2, 3, 7, 6, 2, 5, 4, 9, -1, -1, -1, -1, -1, -1, -1, 9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, -1, -1, -1, -1, 3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, -1, -1, -1, -1, 6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, -1, 9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, -1, -1, -1, -1, 1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, -1, 4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, -1, 7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, -1, -1, -1, -1, 6, 9, 5, 6, 11, 9, 11, 8, 9, -1, -1, -1, -1, -1, -1, -1, 3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, -1, -1, -1, -1, 0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, -1, -1, -1, -1, 6, 11, 3, 6, 3, 5, 5, 3, 1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, -1, -1, -1, -1, 0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, -1, 11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, -1, 6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, -1, -1, -1, -1, 5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, -1, -1, -1, -1, 9, 5, 6, 9, 6, 0, 0, 6, 2, -1, -1, -1, -1, -1, -1, -1, 1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, -1, 1, 5, 6, 2, 1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, -1, 10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, -1, -1, -1, -1, 0, 3, 8, 5, 6, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 5, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 7, 5, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 5, 10, 11, 7, 5, 8, 3, 0, -1, -1, -1, -1, -1, -1, -1, 5, 11, 7, 5, 10, 11, 1, 9, 0, -1, -1, -1, -1, -1, -1, -1, 10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, -1, -1, -1, -1, 11, 1, 2, 11, 7, 1, 7, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, -1, -1, -1, -1, 9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, -1, -1, -1, -1, 7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, -1, 2, 5, 10, 2, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, 8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, -1, -1, -1, -1, 9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, -1, -1, -1, -1, 9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, -1, 1, 3, 5, 3, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 8, 7, 0, 7, 1, 1, 7, 5, -1, -1, -1, -1, -1, -1, -1, 9, 0, 3, 9, 3, 5, 5, 3, 7, -1, -1, -1, -1, -1, -1, -1, 9, 8, 7, 5, 9, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 8, 4, 5, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, 5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, -1, -1, -1, -1, 0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, -1, -1, -1, -1, 10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, -1, 2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, -1, -1, -1, -1, 0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, -1, 0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, -1, 9, 4, 5, 2, 11, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, -1, -1, -1, -1, 5, 10, 2, 5, 2, 4, 4, 2, 0, -1, -1, -1, -1, -1, -1, -1, 3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, -1, 5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 3, 5, 1, -1, -1, -1, -1, -1, -1, -1, 0, 4, 5, 1, 0, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, -1, -1, -1, -1, 9, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 11, 7, 4, 9, 11, 9, 10, 11, -1, -1, -1, -1, -1, -1, -1, 0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, -1, -1, -1, -1, 1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, -1, -1, -1, -1, 3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, -1, 4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, -1, -1, -1, -1, 9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, -1, 11, 7, 4, 11, 4, 2, 2, 4, 0, -1, -1, -1, -1, -1, -1, -1, 11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, -1, -1, -1, -1, 2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, -1, -1, -1, -1, 9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, -1, 3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, -1, 1, 10, 2, 8, 7, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 7, 1, 3, -1, -1, -1, -1, -1, -1, -1, 4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, -1, -1, -1, -1, 4, 0, 3, 7, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 10, 8, 10, 11, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 11, 9, 10, -1, -1, -1, -1, -1, -1, -1, 0, 1, 10, 0, 10, 8, 8, 10, 11, -1, -1, -1, -1, -1, -1, -1, 3, 1, 10, 11, 3, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 11, 1, 11, 9, 9, 11, 8, -1, -1, -1, -1, -1, -1, -1, 3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, -1, -1, -1, -1, 0, 2, 11, 8, 0, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 2, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 10, 8, 9, -1, -1, -1, -1, -1, -1, -1, 9, 10, 2, 0, 9, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, -1, -1, -1, -1, 1, 10, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 3, 8, 9, 1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 9, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 3, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]);\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.MaskPass = function (scene, camera) {\n    this.scene = scene;\n    this.camera = camera;\n    this.enabled = true;\n    this.clear = true;\n    this.needsSwap = false;\n    this.inverse = false;\n  };\n\n  THREE.MaskPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      var context = renderer.context; // don't update color or depth\n\n      context.colorMask(false, false, false, false);\n      context.depthMask(false); // set up stencil\n\n      var writeValue, clearValue;\n\n      if (this.inverse) {\n        writeValue = 0;\n        clearValue = 1;\n      } else {\n        writeValue = 1;\n        clearValue = 0;\n      }\n\n      context.enable(context.STENCIL_TEST);\n      context.stencilOp(context.REPLACE, context.REPLACE, context.REPLACE);\n      context.stencilFunc(context.ALWAYS, writeValue, 0xffffffff);\n      context.clearStencil(clearValue); // draw into the stencil buffer\n\n      renderer.render(this.scene, this.camera, readBuffer, this.clear);\n      renderer.render(this.scene, this.camera, writeBuffer, this.clear); // re-enable update of color and depth\n\n      context.colorMask(true, true, true, true);\n      context.depthMask(true); // only render where stencil is set to 1\n\n      context.stencilFunc(context.EQUAL, 1, 0xffffffff); // draw if == 1\n\n      context.stencilOp(context.KEEP, context.KEEP, context.KEEP);\n    }\n  };\n\n  THREE.ClearMaskPass = function () {\n    this.enabled = true;\n  };\n\n  THREE.ClearMaskPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      var context = renderer.context;\n      context.disable(context.STENCIL_TEST);\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author felixturner / http://airtight.cc/\n   *\n   * Mirror Shader\n   * Copies half the input to the other half\n   *\n   * side: side of input to mirror (0 = left, 1 = right, 2 = top, 3 = bottom)\n   */\n  THREE.MirrorShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"side\": {\n        type: \"i\",\n        value: 1\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform int side;\", \"varying vec2 vUv;\", \"void main() {\", \"vec2 p = vUv;\", \"if (side == 0){\", \"if (p.x > 0.5) p.x = 1.0 - p.x;\", \"}else if (side == 1){\", \"if (p.x < 0.5) p.x = 1.0 - p.x;\", \"}else if (side == 2){\", \"if (p.y < 0.5) p.y = 1.0 - p.y;\", \"}else if (side == 3){\", \"if (p.y > 0.5) p.y = 1.0 - p.y;\", \"} \", \"vec4 color = texture2D(tDiffuse, p);\", \"gl_FragColor = color;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Normal map shader\n   * - compute normals from heightmap\n   */\n  THREE.NormalMapShader = {\n    uniforms: {\n      \"heightMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"resolution\": {\n        type: \"v2\",\n        value: new THREE.Vector2(512, 512)\n      },\n      \"scale\": {\n        type: \"v2\",\n        value: new THREE.Vector2(1, 1)\n      },\n      \"height\": {\n        type: \"f\",\n        value: 0.05\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float height;\", \"uniform vec2 resolution;\", \"uniform sampler2D heightMap;\", \"varying vec2 vUv;\", \"void main() {\", \"float val = texture2D( heightMap, vUv ).x;\", \"float valU = texture2D( heightMap, vUv + vec2( 1.0 / resolution.x, 0.0 ) ).x;\", \"float valV = texture2D( heightMap, vUv + vec2( 0.0, 1.0 / resolution.y ) ).x;\", \"gl_FragColor = vec4( ( 0.5 * normalize( vec3( val - valU, val - valV, height  ) ) + 0.5 ), 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   */\n  THREE.OBJLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n    this.materials = null;\n  };\n\n  THREE.OBJLoader.prototype = {\n    constructor: THREE.OBJLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var loader = new THREE.XHRLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.load(url, function (text) {\n        onLoad(scope.parse(text));\n      }, onProgress, onError);\n    },\n    setPath: function setPath(value) {\n      this.path = value;\n    },\n    setMaterials: function setMaterials(materials) {\n      this.materials = materials;\n    },\n    parse: function parse(text) {\n      console.time('OBJLoader');\n      var objects = [];\n      var object;\n      var foundObjects = false;\n      var vertices = [];\n      var normals = [];\n      var uvs = [];\n\n      function addObject(name) {\n        var geometry = {\n          vertices: [],\n          normals: [],\n          uvs: []\n        };\n        var material = {\n          name: '',\n          smooth: true\n        };\n        object = {\n          name: name,\n          geometry: geometry,\n          material: material\n        };\n        objects.push(object);\n      }\n\n      function parseVertexIndex(value) {\n        var index = parseInt(value);\n        return (index >= 0 ? index - 1 : index + vertices.length / 3) * 3;\n      }\n\n      function parseNormalIndex(value) {\n        var index = parseInt(value);\n        return (index >= 0 ? index - 1 : index + normals.length / 3) * 3;\n      }\n\n      function parseUVIndex(value) {\n        var index = parseInt(value);\n        return (index >= 0 ? index - 1 : index + uvs.length / 2) * 2;\n      }\n\n      function addVertex(a, b, c) {\n        object.geometry.vertices.push(vertices[a], vertices[a + 1], vertices[a + 2], vertices[b], vertices[b + 1], vertices[b + 2], vertices[c], vertices[c + 1], vertices[c + 2]);\n      }\n\n      function addNormal(a, b, c) {\n        object.geometry.normals.push(normals[a], normals[a + 1], normals[a + 2], normals[b], normals[b + 1], normals[b + 2], normals[c], normals[c + 1], normals[c + 2]);\n      }\n\n      function addUV(a, b, c) {\n        object.geometry.uvs.push(uvs[a], uvs[a + 1], uvs[b], uvs[b + 1], uvs[c], uvs[c + 1]);\n      }\n\n      function addFace(a, b, c, d, ua, ub, uc, ud, na, nb, nc, nd) {\n        var ia = parseVertexIndex(a);\n        var ib = parseVertexIndex(b);\n        var ic = parseVertexIndex(c);\n        var id;\n\n        if (d === undefined) {\n          addVertex(ia, ib, ic);\n        } else {\n          id = parseVertexIndex(d);\n          addVertex(ia, ib, id);\n          addVertex(ib, ic, id);\n        }\n\n        if (ua !== undefined) {\n          ia = parseUVIndex(ua);\n          ib = parseUVIndex(ub);\n          ic = parseUVIndex(uc);\n\n          if (d === undefined) {\n            addUV(ia, ib, ic);\n          } else {\n            id = parseUVIndex(ud);\n            addUV(ia, ib, id);\n            addUV(ib, ic, id);\n          }\n        }\n\n        if (na !== undefined) {\n          ia = parseNormalIndex(na);\n          ib = parseNormalIndex(nb);\n          ic = parseNormalIndex(nc);\n\n          if (d === undefined) {\n            addNormal(ia, ib, ic);\n          } else {\n            id = parseNormalIndex(nd);\n            addNormal(ia, ib, id);\n            addNormal(ib, ic, id);\n          }\n        }\n      }\n\n      addObject(''); // v float float float\n\n      var vertex_pattern = /^v\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/; // vn float float float\n\n      var normal_pattern = /^vn\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/; // vt float float\n\n      var uv_pattern = /^vt\\s+([\\d|\\.|\\+|\\-|e|E]+)\\s+([\\d|\\.|\\+|\\-|e|E]+)/; // f vertex vertex vertex ...\n\n      var face_pattern1 = /^f\\s+(-?\\d+)\\s+(-?\\d+)\\s+(-?\\d+)(?:\\s+(-?\\d+))?/; // f vertex/uv vertex/uv vertex/uv ...\n\n      var face_pattern2 = /^f\\s+((-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+))(?:\\s+((-?\\d+)\\/(-?\\d+)))?/; // f vertex/uv/normal vertex/uv/normal vertex/uv/normal ...\n\n      var face_pattern3 = /^f\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+))(?:\\s+((-?\\d+)\\/(-?\\d+)\\/(-?\\d+)))?/; // f vertex//normal vertex//normal vertex//normal ...\n\n      var face_pattern4 = /^f\\s+((-?\\d+)\\/\\/(-?\\d+))\\s+((-?\\d+)\\/\\/(-?\\d+))\\s+((-?\\d+)\\/\\/(-?\\d+))(?:\\s+((-?\\d+)\\/\\/(-?\\d+)))?/;\n      var object_pattern = /^[og]\\s+(.+)/;\n      var smoothing_pattern = /^s\\s+(\\d+|on|off)/; //\n\n      var lines = text.split('\\n');\n\n      for (var i = 0; i < lines.length; i++) {\n        var line = lines[i];\n        line = line.trim();\n        var result;\n\n        if (line.length === 0 || line.charAt(0) === '#') {\n          continue;\n        } else if ((result = vertex_pattern.exec(line)) !== null) {\n          // [\"v 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\n          vertices.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n        } else if ((result = normal_pattern.exec(line)) !== null) {\n          // [\"vn 1.0 2.0 3.0\", \"1.0\", \"2.0\", \"3.0\"]\n          normals.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n        } else if ((result = uv_pattern.exec(line)) !== null) {\n          // [\"vt 0.1 0.2\", \"0.1\", \"0.2\"]\n          uvs.push(parseFloat(result[1]), parseFloat(result[2]));\n        } else if ((result = face_pattern1.exec(line)) !== null) {\n          // [\"f 1 2 3\", \"1\", \"2\", \"3\", undefined]\n          addFace(result[1], result[2], result[3], result[4]);\n        } else if ((result = face_pattern2.exec(line)) !== null) {\n          // [\"f 1/1 2/2 3/3\", \" 1/1\", \"1\", \"1\", \" 2/2\", \"2\", \"2\", \" 3/3\", \"3\", \"3\", undefined, undefined, undefined]\n          addFace(result[2], result[5], result[8], result[11], result[3], result[6], result[9], result[12]);\n        } else if ((result = face_pattern3.exec(line)) !== null) {\n          // [\"f 1/1/1 2/2/2 3/3/3\", \" 1/1/1\", \"1\", \"1\", \"1\", \" 2/2/2\", \"2\", \"2\", \"2\", \" 3/3/3\", \"3\", \"3\", \"3\", undefined, undefined, undefined, undefined]\n          addFace(result[2], result[6], result[10], result[14], result[3], result[7], result[11], result[15], result[4], result[8], result[12], result[16]);\n        } else if ((result = face_pattern4.exec(line)) !== null) {\n          // [\"f 1//1 2//2 3//3\", \" 1//1\", \"1\", \"1\", \" 2//2\", \"2\", \"2\", \" 3//3\", \"3\", \"3\", undefined, undefined, undefined]\n          addFace(result[2], result[5], result[8], result[11], undefined, undefined, undefined, undefined, result[3], result[6], result[9], result[12]);\n        } else if ((result = object_pattern.exec(line)) !== null) {\n          // o object_name\n          // or\n          // g group_name\n          var name = result[1].trim();\n\n          if (foundObjects === false) {\n            foundObjects = true;\n            object.name = name;\n          } else {\n            addObject(name);\n          }\n        } else if (/^usemtl /.test(line)) {\n          // material\n          object.material.name = line.substring(7).trim();\n        } else if (/^mtllib /.test(line)) {// mtl file\n        } else if ((result = smoothing_pattern.exec(line)) !== null) {\n          // smooth shading\n          object.material.smooth = result[1] === \"1\" || result[1] === \"on\";\n        } else {\n          throw new Error(\"Unexpected line: \" + line);\n        }\n      }\n\n      var container = new THREE.Group();\n\n      for (var i = 0, l = objects.length; i < l; i++) {\n        object = objects[i];\n        var geometry = object.geometry;\n        var buffergeometry = new THREE.BufferGeometry();\n        buffergeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(geometry.vertices), 3));\n\n        if (geometry.normals.length > 0) {\n          buffergeometry.addAttribute('normal', new THREE.BufferAttribute(new Float32Array(geometry.normals), 3));\n        } else {\n          buffergeometry.computeVertexNormals();\n        }\n\n        if (geometry.uvs.length > 0) {\n          buffergeometry.addAttribute('uv', new THREE.BufferAttribute(new Float32Array(geometry.uvs), 2));\n        }\n\n        var material;\n\n        if (this.materials !== null) {\n          material = this.materials.create(object.material.name);\n        }\n\n        if (!material) {\n          material = new THREE.MeshPhongMaterial();\n          material.name = object.material.name;\n        }\n\n        material.shading = object.material.smooth ? THREE.SmoothShading : THREE.FlatShading;\n        var mesh = new THREE.Mesh(buffergeometry, material);\n        mesh.name = object.name;\n        container.add(mesh);\n      }\n\n      console.timeEnd('OBJLoader');\n      return container;\n    }\n  };\n};","module.exports = function (THREE) {\n  // Author: Aleksandr Albert\n  // Website: www.routter.co.tt\n  // Description: A deep water ocean shader set\n  // based on an implementation of a Tessendorf Waves\n  // originally presented by David Li ( www.david.li/waves )\n  // The general method is to apply shaders to simulation Framebuffers\n  // and then sample these framebuffers when rendering the ocean mesh\n  // The set uses 7 shaders:\n  // -- Simulation shaders\n  // [1] ocean_sim_vertex         -> Vertex shader used to set up a 2x2 simulation plane centered at (0,0)\n  // [2] ocean_subtransform       -> Fragment shader used to subtransform the mesh (generates the displacement map)\n  // [3] ocean_initial_spectrum   -> Fragment shader used to set intitial wave frequency at a texel coordinate\n  // [4] ocean_phase              -> Fragment shader used to set wave phase at a texel coordinate\n  // [5] ocean_spectrum           -> Fragment shader used to set current wave frequency at a texel coordinate\n  // [6] ocean_normal             -> Fragment shader used to set face normals at a texel coordinate\n  // -- Rendering Shader\n  // [7] ocean_main               -> Vertex and Fragment shader used to create the final render\n  THREE.ShaderLib['ocean_sim_vertex'] = {\n    varying: {\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    vertexShader: ['varying vec2 vUV;', 'void main (void) {', 'vUV = position.xy * 0.5 + 0.5;', 'gl_Position = vec4(position, 1.0 );', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_subtransform'] = {\n    uniforms: {\n      \"u_input\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_transformSize\": {\n        type: \"f\",\n        value: 512.0\n      },\n      \"u_subtransformSize\": {\n        type: \"f\",\n        value: 250.0\n      }\n    },\n    varying: {\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    fragmentShader: [//GPU FFT using a Stockham formulation\n    'precision highp float;', 'const float PI = 3.14159265359;', 'uniform sampler2D u_input;', 'uniform float u_transformSize;', 'uniform float u_subtransformSize;', 'varying vec2 vUV;', 'vec2 multiplyComplex (vec2 a, vec2 b) {', 'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);', '}', 'void main (void) {', '#ifdef HORIZONTAL', 'float index = vUV.x * u_transformSize - 0.5;', '#else', 'float index = vUV.y * u_transformSize - 0.5;', '#endif', 'float evenIndex = floor(index / u_subtransformSize) * (u_subtransformSize * 0.5) + mod(index, u_subtransformSize * 0.5);', //transform two complex sequences simultaneously\n    '#ifdef HORIZONTAL', 'vec4 even = texture2D(u_input, vec2(evenIndex + 0.5, gl_FragCoord.y) / u_transformSize).rgba;', 'vec4 odd = texture2D(u_input, vec2(evenIndex + u_transformSize * 0.5 + 0.5, gl_FragCoord.y) / u_transformSize).rgba;', '#else', 'vec4 even = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + 0.5) / u_transformSize).rgba;', 'vec4 odd = texture2D(u_input, vec2(gl_FragCoord.x, evenIndex + u_transformSize * 0.5 + 0.5) / u_transformSize).rgba;', '#endif', 'float twiddleArgument = -2.0 * PI * (index / u_subtransformSize);', 'vec2 twiddle = vec2(cos(twiddleArgument), sin(twiddleArgument));', 'vec2 outputA = even.xy + multiplyComplex(twiddle, odd.xy);', 'vec2 outputB = even.zw + multiplyComplex(twiddle, odd.zw);', 'gl_FragColor = vec4(outputA, outputB);', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_initial_spectrum'] = {\n    uniforms: {\n      \"u_wind\": {\n        type: \"v2\",\n        value: new THREE.Vector2(10.0, 10.0)\n      },\n      \"u_resolution\": {\n        type: \"f\",\n        value: 512.0\n      },\n      \"u_size\": {\n        type: \"f\",\n        value: 250.0\n      }\n    },\n    fragmentShader: ['precision highp float;', 'const float PI = 3.14159265359;', 'const float G = 9.81;', 'const float KM = 370.0;', 'const float CM = 0.23;', 'uniform vec2 u_wind;', 'uniform float u_resolution;', 'uniform float u_size;', 'float square (float x) {', 'return x * x;', '}', 'float omega (float k) {', 'return sqrt(G * k * (1.0 + square(k / KM)));', '}', 'float tanh (float x) {', 'return (1.0 - exp(-2.0 * x)) / (1.0 + exp(-2.0 * x));', '}', 'void main (void) {', 'vec2 coordinates = gl_FragCoord.xy - 0.5;', 'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;', 'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;', 'vec2 K = (2.0 * PI * vec2(n, m)) / u_size;', 'float k = length(K);', 'float l_wind = length(u_wind);', 'float Omega = 0.84;', 'float kp = G * square(Omega / l_wind);', 'float c = omega(k) / k;', 'float cp = omega(kp) / kp;', 'float Lpm = exp(-1.25 * square(kp / k));', 'float gamma = 1.7;', 'float sigma = 0.08 * (1.0 + 4.0 * pow(Omega, -3.0));', 'float Gamma = exp(-square(sqrt(k / kp) - 1.0) / 2.0 * square(sigma));', 'float Jp = pow(gamma, Gamma);', 'float Fp = Lpm * Jp * exp(-Omega / sqrt(10.0) * (sqrt(k / kp) - 1.0));', 'float alphap = 0.006 * sqrt(Omega);', 'float Bl = 0.5 * alphap * cp / c * Fp;', 'float z0 = 0.000037 * square(l_wind) / G * pow(l_wind / cp, 0.9);', 'float uStar = 0.41 * l_wind / log(10.0 / z0);', 'float alpham = 0.01 * ((uStar < CM) ? (1.0 + log(uStar / CM)) : (1.0 + 3.0 * log(uStar / CM)));', 'float Fm = exp(-0.25 * square(k / KM - 1.0));', 'float Bh = 0.5 * alpham * CM / c * Fm * Lpm;', 'float a0 = log(2.0) / 4.0;', 'float am = 0.13 * uStar / CM;', 'float Delta = tanh(a0 + 4.0 * pow(c / cp, 2.5) + am * pow(CM / c, 2.5));', 'float cosPhi = dot(normalize(u_wind), normalize(K));', 'float S = (1.0 / (2.0 * PI)) * pow(k, -4.0) * (Bl + Bh) * (1.0 + Delta * (2.0 * cosPhi * cosPhi - 1.0));', 'float dk = 2.0 * PI / u_size;', 'float h = sqrt(S / 2.0) * dk;', 'if (K.x == 0.0 && K.y == 0.0) {', 'h = 0.0;', //no DC term\n    '}', 'gl_FragColor = vec4(h, 0.0, 0.0, 0.0);', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_phase'] = {\n    uniforms: {\n      \"u_phases\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_deltaTime\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_resolution\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_size\": {\n        type: \"f\",\n        value: null\n      }\n    },\n    varying: {\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    fragmentShader: ['precision highp float;', 'const float PI = 3.14159265359;', 'const float G = 9.81;', 'const float KM = 370.0;', 'varying vec2 vUV;', 'uniform sampler2D u_phases;', 'uniform float u_deltaTime;', 'uniform float u_resolution;', 'uniform float u_size;', 'float omega (float k) {', 'return sqrt(G * k * (1.0 + k * k / KM * KM));', '}', 'void main (void) {', 'float deltaTime = 1.0 / 60.0;', 'vec2 coordinates = gl_FragCoord.xy - 0.5;', 'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;', 'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;', 'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;', 'float phase = texture2D(u_phases, vUV).r;', 'float deltaPhase = omega(length(waveVector)) * u_deltaTime;', 'phase = mod(phase + deltaPhase, 2.0 * PI);', 'gl_FragColor = vec4(phase, 0.0, 0.0, 0.0);', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_spectrum'] = {\n    uniforms: {\n      \"u_size\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_resolution\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_choppiness\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_phases\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_initialSpectrum\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    varying: {\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    fragmentShader: ['precision highp float;', 'const float PI = 3.14159265359;', 'const float G = 9.81;', 'const float KM = 370.0;', 'varying vec2 vUV;', 'uniform float u_size;', 'uniform float u_resolution;', 'uniform float u_choppiness;', 'uniform sampler2D u_phases;', 'uniform sampler2D u_initialSpectrum;', 'vec2 multiplyComplex (vec2 a, vec2 b) {', 'return vec2(a[0] * b[0] - a[1] * b[1], a[1] * b[0] + a[0] * b[1]);', '}', 'vec2 multiplyByI (vec2 z) {', 'return vec2(-z[1], z[0]);', '}', 'float omega (float k) {', 'return sqrt(G * k * (1.0 + k * k / KM * KM));', '}', 'void main (void) {', 'vec2 coordinates = gl_FragCoord.xy - 0.5;', 'float n = (coordinates.x < u_resolution * 0.5) ? coordinates.x : coordinates.x - u_resolution;', 'float m = (coordinates.y < u_resolution * 0.5) ? coordinates.y : coordinates.y - u_resolution;', 'vec2 waveVector = (2.0 * PI * vec2(n, m)) / u_size;', 'float phase = texture2D(u_phases, vUV).r;', 'vec2 phaseVector = vec2(cos(phase), sin(phase));', 'vec2 h0 = texture2D(u_initialSpectrum, vUV).rg;', 'vec2 h0Star = texture2D(u_initialSpectrum, vec2(1.0 - vUV + 1.0 / u_resolution)).rg;', 'h0Star.y *= -1.0;', 'vec2 h = multiplyComplex(h0, phaseVector) + multiplyComplex(h0Star, vec2(phaseVector.x, -phaseVector.y));', 'vec2 hX = -multiplyByI(h * (waveVector.x / length(waveVector))) * u_choppiness;', 'vec2 hZ = -multiplyByI(h * (waveVector.y / length(waveVector))) * u_choppiness;', //no DC term\n    'if (waveVector.x == 0.0 && waveVector.y == 0.0) {', 'h = vec2(0.0);', 'hX = vec2(0.0);', 'hZ = vec2(0.0);', '}', 'gl_FragColor = vec4(hX + multiplyByI(h), hZ);', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_normals'] = {\n    uniforms: {\n      \"u_displacementMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_resolution\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_size\": {\n        type: \"f\",\n        value: null\n      }\n    },\n    varying: {\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    fragmentShader: ['precision highp float;', 'varying vec2 vUV;', 'uniform sampler2D u_displacementMap;', 'uniform float u_resolution;', 'uniform float u_size;', 'void main (void) {', 'float texel = 1.0 / u_resolution;', 'float texelSize = u_size / u_resolution;', 'vec3 center = texture2D(u_displacementMap, vUV).rgb;', 'vec3 right = vec3(texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(texel, 0.0)).rgb - center;', 'vec3 left = vec3(-texelSize, 0.0, 0.0) + texture2D(u_displacementMap, vUV + vec2(-texel, 0.0)).rgb - center;', 'vec3 top = vec3(0.0, 0.0, -texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, -texel)).rgb - center;', 'vec3 bottom = vec3(0.0, 0.0, texelSize) + texture2D(u_displacementMap, vUV + vec2(0.0, texel)).rgb - center;', 'vec3 topRight = cross(right, top);', 'vec3 topLeft = cross(top, left);', 'vec3 bottomLeft = cross(left, bottom);', 'vec3 bottomRight = cross(bottom, right);', 'gl_FragColor = vec4(normalize(topRight + topLeft + bottomLeft + bottomRight), 1.0);', '}'].join('\\n')\n  };\n  THREE.ShaderLib['ocean_main'] = {\n    uniforms: {\n      \"u_displacementMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_normalMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"u_geometrySize\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_size\": {\n        type: \"f\",\n        value: null\n      },\n      \"u_projectionMatrix\": {\n        type: \"m4\",\n        value: null\n      },\n      \"u_viewMatrix\": {\n        type: \"m4\",\n        value: null\n      },\n      \"u_cameraPosition\": {\n        type: \"v3\",\n        value: null\n      },\n      \"u_skyColor\": {\n        type: \"v3\",\n        value: null\n      },\n      \"u_oceanColor\": {\n        type: \"v3\",\n        value: null\n      },\n      \"u_sunDirection\": {\n        type: \"v3\",\n        value: null\n      },\n      \"u_exposure\": {\n        type: \"f\",\n        value: null\n      }\n    },\n    varying: {\n      \"vPos\": {\n        type: \"v3\"\n      },\n      \"vUV\": {\n        type: \"v2\"\n      }\n    },\n    vertexShader: ['precision highp float;', 'varying vec3 vPos;', 'varying vec2 vUV;', 'uniform mat4 u_projectionMatrix;', 'uniform mat4 u_viewMatrix;', 'uniform float u_size;', 'uniform float u_geometrySize;', 'uniform sampler2D u_displacementMap;', 'void main (void) {', 'vec3 newPos = position + texture2D(u_displacementMap, uv).rgb * (u_geometrySize / u_size);', 'vPos = newPos;', 'vUV = uv;', 'gl_Position = u_projectionMatrix * u_viewMatrix * vec4(newPos, 1.0);', '}'].join('\\n'),\n    fragmentShader: ['precision highp float;', 'varying vec3 vPos;', 'varying vec2 vUV;', 'uniform sampler2D u_displacementMap;', 'uniform sampler2D u_normalMap;', 'uniform vec3 u_cameraPosition;', 'uniform vec3 u_oceanColor;', 'uniform vec3 u_skyColor;', 'uniform vec3 u_sunDirection;', 'uniform float u_exposure;', 'vec3 hdr (vec3 color, float exposure) {', 'return 1.0 - exp(-color * exposure);', '}', 'void main (void) {', 'vec3 normal = texture2D(u_normalMap, vUV).rgb;', 'vec3 view = normalize(u_cameraPosition - vPos);', 'float fresnel = 0.02 + 0.98 * pow(1.0 - dot(normal, view), 5.0);', 'vec3 sky = fresnel * u_skyColor;', 'float diffuse = clamp(dot(normal, normalize(u_sunDirection)), 0.0, 1.0);', 'vec3 water = (1.0 - fresnel) * u_oceanColor * u_skyColor * diffuse;', 'vec3 color = sky + water;', 'gl_FragColor = vec4(hdr(color, u_exposure), 1.0);', '}'].join('\\n')\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author qiao / https://github.com/qiao\n   * @author mrdoob / http://mrdoob.com\n   * @author alteredq / http://alteredqualia.com/\n   * @author WestLangley / http://github.com/WestLangley\n   * @author erich666 / http://erichaines.com\n   */\n  // This set of controls performs orbiting, dollying (zooming), and panning.\n  // Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n  //\n  //    Orbit - left mouse / touch: one finger move\n  //    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n  //    Pan - right mouse, or arrow keys / touch: three finter swipe\n  THREE.OrbitControls = function (object, domElement) {\n    this.object = object;\n    this.domElement = domElement !== undefined ? domElement : document; // Set to false to disable this control\n\n    this.enabled = true; // \"target\" sets the location of focus, where the object orbits around\n\n    this.target = new THREE.Vector3(); // How far you can dolly in and out ( PerspectiveCamera only )\n\n    this.minDistance = 0;\n    this.maxDistance = Infinity; // How far you can zoom in and out ( OrthographicCamera only )\n\n    this.minZoom = 0;\n    this.maxZoom = Infinity; // How far you can orbit vertically, upper and lower limits.\n    // Range is 0 to Math.PI radians.\n\n    this.minPolarAngle = 0; // radians\n\n    this.maxPolarAngle = Math.PI; // radians\n    // How far you can orbit horizontally, upper and lower limits.\n    // If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\n    this.minAzimuthAngle = -Infinity; // radians\n\n    this.maxAzimuthAngle = Infinity; // radians\n    // Set to true to enable damping (inertia)\n    // If damping is enabled, you must call controls.update() in your animation loop\n\n    this.enableDamping = false;\n    this.dampingFactor = 0.25; // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n    // Set to false to disable zooming\n\n    this.enableZoom = true;\n    this.zoomSpeed = 1.0; // Set to false to disable rotating\n\n    this.enableRotate = true;\n    this.rotateSpeed = 1.0; // Set to false to disable panning\n\n    this.enablePan = true;\n    this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n    // Set to true to automatically rotate around the target\n    // If auto-rotate is enabled, you must call controls.update() in your animation loop\n\n    this.autoRotate = false;\n    this.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n    // Set to false to disable use of the keys\n\n    this.enableKeys = true; // The four arrow keys\n\n    this.keys = {\n      LEFT: 37,\n      UP: 38,\n      RIGHT: 39,\n      BOTTOM: 40\n    }; // Mouse buttons\n\n    this.mouseButtons = {\n      ORBIT: THREE.MOUSE.LEFT,\n      ZOOM: THREE.MOUSE.MIDDLE,\n      PAN: THREE.MOUSE.RIGHT\n    }; // for reset\n\n    this.target0 = this.target.clone();\n    this.position0 = this.object.position.clone();\n    this.zoom0 = this.object.zoom; //\n    // public methods\n    //\n\n    this.getPolarAngle = function () {\n      return spherical.phi;\n    };\n\n    this.getAzimuthalAngle = function () {\n      return spherical.theta;\n    };\n\n    this.reset = function () {\n      scope.target.copy(scope.target0);\n      scope.object.position.copy(scope.position0);\n      scope.object.zoom = scope.zoom0;\n      scope.object.updateProjectionMatrix();\n      scope.dispatchEvent(changeEvent);\n      scope.update();\n      state = STATE.NONE;\n    }; // this method is exposed, but perhaps it would be better if we can make it private...\n\n\n    this.update = function () {\n      var offset = new THREE.Vector3(); // so camera.up is the orbit axis\n\n      var quat = new THREE.Quaternion().setFromUnitVectors(object.up, new THREE.Vector3(0, 1, 0));\n      var quatInverse = quat.clone().inverse();\n      var lastPosition = new THREE.Vector3();\n      var lastQuaternion = new THREE.Quaternion();\n      return function () {\n        var position = scope.object.position;\n        offset.copy(position).sub(scope.target); // rotate offset to \"y-axis-is-up\" space\n\n        offset.applyQuaternion(quat); // angle from z-axis around y-axis\n\n        spherical.setFromVector3(offset);\n\n        if (scope.autoRotate && state === STATE.NONE) {\n          rotateLeft(getAutoRotationAngle());\n        }\n\n        spherical.theta += sphericalDelta.theta;\n        spherical.phi += sphericalDelta.phi; // restrict theta to be between desired limits\n\n        spherical.theta = Math.max(scope.minAzimuthAngle, Math.min(scope.maxAzimuthAngle, spherical.theta)); // restrict phi to be between desired limits\n\n        spherical.phi = Math.max(scope.minPolarAngle, Math.min(scope.maxPolarAngle, spherical.phi));\n        spherical.makeSafe();\n        spherical.radius *= scale; // restrict radius to be between desired limits\n\n        spherical.radius = Math.max(scope.minDistance, Math.min(scope.maxDistance, spherical.radius)); // move target to panned location\n\n        scope.target.add(panOffset);\n        offset.setFromSpherical(spherical); // rotate offset back to \"camera-up-vector-is-up\" space\n\n        offset.applyQuaternion(quatInverse);\n        position.copy(scope.target).add(offset);\n        scope.object.lookAt(scope.target);\n\n        if (scope.enableDamping === true) {\n          sphericalDelta.theta *= 1 - scope.dampingFactor;\n          sphericalDelta.phi *= 1 - scope.dampingFactor;\n        } else {\n          sphericalDelta.set(0, 0, 0);\n        }\n\n        scale = 1;\n        panOffset.set(0, 0, 0); // update condition is:\n        // min(camera displacement, camera rotation in radians)^2 > EPS\n        // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n        if (zoomChanged || lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n          scope.dispatchEvent(changeEvent);\n          lastPosition.copy(scope.object.position);\n          lastQuaternion.copy(scope.object.quaternion);\n          zoomChanged = false;\n          return true;\n        }\n\n        return false;\n      };\n    }();\n\n    this.dispose = function () {\n      scope.domElement.removeEventListener('contextmenu', onContextMenu, false);\n      scope.domElement.removeEventListener('mousedown', onMouseDown, false);\n      scope.domElement.removeEventListener('mousewheel', onMouseWheel, false);\n      scope.domElement.removeEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox\n\n      scope.domElement.removeEventListener('touchstart', onTouchStart, false);\n      scope.domElement.removeEventListener('touchend', onTouchEnd, false);\n      scope.domElement.removeEventListener('touchmove', onTouchMove, false);\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n      document.removeEventListener('mouseout', onMouseUp, false);\n      window.removeEventListener('keydown', onKeyDown, false); //scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n    }; //\n    // internals\n    //\n\n\n    var scope = this;\n    var changeEvent = {\n      type: 'change'\n    };\n    var startEvent = {\n      type: 'start'\n    };\n    var endEvent = {\n      type: 'end'\n    };\n    var STATE = {\n      NONE: -1,\n      ROTATE: 0,\n      DOLLY: 1,\n      PAN: 2,\n      TOUCH_ROTATE: 3,\n      TOUCH_DOLLY: 4,\n      TOUCH_PAN: 5\n    };\n    var state = STATE.NONE;\n    var EPS = 0.000001; // current position in spherical coordinates\n\n    var spherical = new THREE.Spherical();\n    var sphericalDelta = new THREE.Spherical();\n    var scale = 1;\n    var panOffset = new THREE.Vector3();\n    var zoomChanged = false;\n    var rotateStart = new THREE.Vector2();\n    var rotateEnd = new THREE.Vector2();\n    var rotateDelta = new THREE.Vector2();\n    var panStart = new THREE.Vector2();\n    var panEnd = new THREE.Vector2();\n    var panDelta = new THREE.Vector2();\n    var dollyStart = new THREE.Vector2();\n    var dollyEnd = new THREE.Vector2();\n    var dollyDelta = new THREE.Vector2();\n\n    function getAutoRotationAngle() {\n      return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n    }\n\n    function getZoomScale() {\n      return Math.pow(0.95, scope.zoomSpeed);\n    }\n\n    function rotateLeft(angle) {\n      sphericalDelta.theta -= angle;\n    }\n\n    function rotateUp(angle) {\n      sphericalDelta.phi -= angle;\n    }\n\n    var panLeft = function () {\n      var v = new THREE.Vector3();\n      return function panLeft(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 0); // get X column of objectMatrix\n\n        v.multiplyScalar(-distance);\n        panOffset.add(v);\n      };\n    }();\n\n    var panUp = function () {\n      var v = new THREE.Vector3();\n      return function panUp(distance, objectMatrix) {\n        v.setFromMatrixColumn(objectMatrix, 1); // get Y column of objectMatrix\n\n        v.multiplyScalar(distance);\n        panOffset.add(v);\n      };\n    }(); // deltaX and deltaY are in pixels; right and down are positive\n\n\n    var pan = function () {\n      var offset = new THREE.Vector3();\n      return function (deltaX, deltaY) {\n        var element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n        if (scope.object instanceof THREE.PerspectiveCamera) {\n          // perspective\n          var position = scope.object.position;\n          offset.copy(position).sub(scope.target);\n          var targetDistance = offset.length(); // half of the fov is center to top of screen\n\n          targetDistance *= Math.tan(scope.object.fov / 2 * Math.PI / 180.0); // we actually don't use screenWidth, since perspective camera is fixed to screen height\n\n          panLeft(2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix);\n          panUp(2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix);\n        } else if (scope.object instanceof THREE.OrthographicCamera) {\n          // orthographic\n          panLeft(deltaX * (scope.object.right - scope.object.left) / scope.object.zoom / element.clientWidth, scope.object.matrix);\n          panUp(deltaY * (scope.object.top - scope.object.bottom) / scope.object.zoom / element.clientHeight, scope.object.matrix);\n        } else {\n          // camera neither orthographic nor perspective\n          console.warn('WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.');\n          scope.enablePan = false;\n        }\n      };\n    }();\n\n    function dollyIn(dollyScale) {\n      if (scope.object instanceof THREE.PerspectiveCamera) {\n        scale /= dollyScale;\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\n        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom * dollyScale));\n        scope.object.updateProjectionMatrix();\n        zoomChanged = true;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        scope.enableZoom = false;\n      }\n    }\n\n    function dollyOut(dollyScale) {\n      if (scope.object instanceof THREE.PerspectiveCamera) {\n        scale *= dollyScale;\n      } else if (scope.object instanceof THREE.OrthographicCamera) {\n        scope.object.zoom = Math.max(scope.minZoom, Math.min(scope.maxZoom, scope.object.zoom / dollyScale));\n        scope.object.updateProjectionMatrix();\n        zoomChanged = true;\n      } else {\n        console.warn('WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.');\n        scope.enableZoom = false;\n      }\n    } //\n    // event callbacks - update the object state\n    //\n\n\n    function handleMouseDownRotate(event) {\n      //console.log( 'handleMouseDownRotate' );\n      rotateStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownDolly(event) {\n      //console.log( 'handleMouseDownDolly' );\n      dollyStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseDownPan(event) {\n      //console.log( 'handleMouseDownPan' );\n      panStart.set(event.clientX, event.clientY);\n    }\n\n    function handleMouseMoveRotate(event) {\n      //console.log( 'handleMouseMoveRotate' );\n      rotateEnd.set(event.clientX, event.clientY);\n      rotateDelta.subVectors(rotateEnd, rotateStart);\n      var element = scope.domElement === document ? scope.domElement.body : scope.domElement; // rotating across whole screen goes 360 degrees around\n\n      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n\n    function handleMouseMoveDolly(event) {\n      //console.log( 'handleMouseMoveDolly' );\n      dollyEnd.set(event.clientX, event.clientY);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyIn(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyOut(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n\n    function handleMouseMovePan(event) {\n      //console.log( 'handleMouseMovePan' );\n      panEnd.set(event.clientX, event.clientY);\n      panDelta.subVectors(panEnd, panStart);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n\n    function handleMouseUp(event) {//console.log( 'handleMouseUp' );\n    }\n\n    function handleMouseWheel(event) {\n      //console.log( 'handleMouseWheel' );\n      var delta = 0;\n\n      if (event.wheelDelta !== undefined) {\n        // WebKit / Opera / Explorer 9\n        delta = event.wheelDelta;\n      } else if (event.detail !== undefined) {\n        // Firefox\n        delta = -event.detail;\n      }\n\n      if (delta > 0) {\n        dollyOut(getZoomScale());\n      } else if (delta < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      scope.update();\n    }\n\n    function handleKeyDown(event) {\n      //console.log( 'handleKeyDown' );\n      switch (event.keyCode) {\n        case scope.keys.UP:\n          pan(0, scope.keyPanSpeed);\n          scope.update();\n          break;\n\n        case scope.keys.BOTTOM:\n          pan(0, -scope.keyPanSpeed);\n          scope.update();\n          break;\n\n        case scope.keys.LEFT:\n          pan(scope.keyPanSpeed, 0);\n          scope.update();\n          break;\n\n        case scope.keys.RIGHT:\n          pan(-scope.keyPanSpeed, 0);\n          scope.update();\n          break;\n      }\n    }\n\n    function handleTouchStartRotate(event) {\n      //console.log( 'handleTouchStartRotate' );\n      rotateStart.set(event.touches[0].pageX, event.touches[0].pageY);\n    }\n\n    function handleTouchStartDolly(event) {\n      //console.log( 'handleTouchStartDolly' );\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyStart.set(0, distance);\n    }\n\n    function handleTouchStartPan(event) {\n      //console.log( 'handleTouchStartPan' );\n      panStart.set(event.touches[0].pageX, event.touches[0].pageY);\n    }\n\n    function handleTouchMoveRotate(event) {\n      //console.log( 'handleTouchMoveRotate' );\n      rotateEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      rotateDelta.subVectors(rotateEnd, rotateStart);\n      var element = scope.domElement === document ? scope.domElement.body : scope.domElement; // rotating across whole screen goes 360 degrees around\n\n      rotateLeft(2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed); // rotating up and down along whole screen attempts to go 360, but limited to 180\n\n      rotateUp(2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed);\n      rotateStart.copy(rotateEnd);\n      scope.update();\n    }\n\n    function handleTouchMoveDolly(event) {\n      //console.log( 'handleTouchMoveDolly' );\n      var dx = event.touches[0].pageX - event.touches[1].pageX;\n      var dy = event.touches[0].pageY - event.touches[1].pageY;\n      var distance = Math.sqrt(dx * dx + dy * dy);\n      dollyEnd.set(0, distance);\n      dollyDelta.subVectors(dollyEnd, dollyStart);\n\n      if (dollyDelta.y > 0) {\n        dollyOut(getZoomScale());\n      } else if (dollyDelta.y < 0) {\n        dollyIn(getZoomScale());\n      }\n\n      dollyStart.copy(dollyEnd);\n      scope.update();\n    }\n\n    function handleTouchMovePan(event) {\n      //console.log( 'handleTouchMovePan' );\n      panEnd.set(event.touches[0].pageX, event.touches[0].pageY);\n      panDelta.subVectors(panEnd, panStart);\n      pan(panDelta.x, panDelta.y);\n      panStart.copy(panEnd);\n      scope.update();\n    }\n\n    function handleTouchEnd(event) {} //console.log( 'handleTouchEnd' );\n    //\n    // event handlers - FSM: listen for events and reset state\n    //\n\n\n    function onMouseDown(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n\n      if (event.button === scope.mouseButtons.ORBIT) {\n        if (scope.enableRotate === false) return;\n        handleMouseDownRotate(event);\n        state = STATE.ROTATE;\n      } else if (event.button === scope.mouseButtons.ZOOM) {\n        if (scope.enableZoom === false) return;\n        handleMouseDownDolly(event);\n        state = STATE.DOLLY;\n      } else if (event.button === scope.mouseButtons.PAN) {\n        if (scope.enablePan === false) return;\n        handleMouseDownPan(event);\n        state = STATE.PAN;\n      }\n\n      if (state !== STATE.NONE) {\n        document.addEventListener('mousemove', onMouseMove, false);\n        document.addEventListener('mouseup', onMouseUp, false);\n        document.addEventListener('mouseout', onMouseUp, false);\n        scope.dispatchEvent(startEvent);\n      }\n    }\n\n    function onMouseMove(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n\n      if (state === STATE.ROTATE) {\n        if (scope.enableRotate === false) return;\n        handleMouseMoveRotate(event);\n      } else if (state === STATE.DOLLY) {\n        if (scope.enableZoom === false) return;\n        handleMouseMoveDolly(event);\n      } else if (state === STATE.PAN) {\n        if (scope.enablePan === false) return;\n        handleMouseMovePan(event);\n      }\n    }\n\n    function onMouseUp(event) {\n      if (scope.enabled === false) return;\n      handleMouseUp(event);\n      document.removeEventListener('mousemove', onMouseMove, false);\n      document.removeEventListener('mouseup', onMouseUp, false);\n      document.removeEventListener('mouseout', onMouseUp, false);\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n\n    function onMouseWheel(event) {\n      if (scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE && state !== STATE.ROTATE) return;\n      event.preventDefault();\n      event.stopPropagation();\n      handleMouseWheel(event);\n      scope.dispatchEvent(startEvent); // not sure why these are here...\n\n      scope.dispatchEvent(endEvent);\n    }\n\n    function onKeyDown(event) {\n      if (scope.enabled === false || scope.enableKeys === false || scope.enablePan === false) return;\n      handleKeyDown(event);\n    }\n\n    function onTouchStart(event) {\n      if (scope.enabled === false) return;\n\n      switch (event.touches.length) {\n        case 1:\n          // one-fingered touch: rotate\n          if (scope.enableRotate === false) return;\n          handleTouchStartRotate(event);\n          state = STATE.TOUCH_ROTATE;\n          break;\n\n        case 2:\n          // two-fingered touch: dolly\n          if (scope.enableZoom === false) return;\n          handleTouchStartDolly(event);\n          state = STATE.TOUCH_DOLLY;\n          break;\n\n        case 3:\n          // three-fingered touch: pan\n          if (scope.enablePan === false) return;\n          handleTouchStartPan(event);\n          state = STATE.TOUCH_PAN;\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n\n      if (state !== STATE.NONE) {\n        scope.dispatchEvent(startEvent);\n      }\n    }\n\n    function onTouchMove(event) {\n      if (scope.enabled === false) return;\n      event.preventDefault();\n      event.stopPropagation();\n\n      switch (event.touches.length) {\n        case 1:\n          // one-fingered touch: rotate\n          if (scope.enableRotate === false) return;\n          if (state !== STATE.TOUCH_ROTATE) return; // is this needed?...\n\n          handleTouchMoveRotate(event);\n          break;\n\n        case 2:\n          // two-fingered touch: dolly\n          if (scope.enableZoom === false) return;\n          if (state !== STATE.TOUCH_DOLLY) return; // is this needed?...\n\n          handleTouchMoveDolly(event);\n          break;\n\n        case 3:\n          // three-fingered touch: pan\n          if (scope.enablePan === false) return;\n          if (state !== STATE.TOUCH_PAN) return; // is this needed?...\n\n          handleTouchMovePan(event);\n          break;\n\n        default:\n          state = STATE.NONE;\n      }\n    }\n\n    function onTouchEnd(event) {\n      if (scope.enabled === false) return;\n      handleTouchEnd(event);\n      scope.dispatchEvent(endEvent);\n      state = STATE.NONE;\n    }\n\n    function onContextMenu(event) {\n      event.preventDefault();\n    } //\n\n\n    scope.domElement.addEventListener('contextmenu', onContextMenu, false);\n    scope.domElement.addEventListener('mousedown', onMouseDown, false);\n    scope.domElement.addEventListener('mousewheel', onMouseWheel, false);\n    scope.domElement.addEventListener('MozMousePixelScroll', onMouseWheel, false); // firefox\n\n    scope.domElement.addEventListener('touchstart', onTouchStart, false);\n    scope.domElement.addEventListener('touchend', onTouchEnd, false);\n    scope.domElement.addEventListener('touchmove', onTouchMove, false);\n    window.addEventListener('keydown', onKeyDown, false); // force an update at start\n\n    this.update();\n  };\n\n  THREE.OrbitControls.prototype = Object.create(THREE.EventDispatcher.prototype);\n  THREE.OrbitControls.prototype.constructor = THREE.OrbitControls;\n  Object.defineProperties(THREE.OrbitControls.prototype, {\n    center: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .center has been renamed to .target');\n        return this.target;\n      }\n    },\n    // backward compatibility\n    noZoom: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n        return !this.enableZoom;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.');\n        this.enableZoom = !value;\n      }\n    },\n    noRotate: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n        return !this.enableRotate;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.');\n        this.enableRotate = !value;\n      }\n    },\n    noPan: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n        return !this.enablePan;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.');\n        this.enablePan = !value;\n      }\n    },\n    noKeys: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n        return !this.enableKeys;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.');\n        this.enableKeys = !value;\n      }\n    },\n    staticMoving: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n        return !this.enableDamping;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.');\n        this.enableDamping = !value;\n      }\n    },\n    dynamicDampingFactor: {\n      get: function get() {\n        console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n        return this.dampingFactor;\n      },\n      set: function set(value) {\n        console.warn('THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.');\n        this.dampingFactor = value;\n      }\n    }\n  });\n};","module.exports = function (THREE) {\n  // Parallax Occlusion shaders from\n  //    http://sunandblackcat.com/tipFullView.php?topicid=28\n  // No tangent-space transforms logic based on\n  //   http://mmikkelsen3d.blogspot.sk/2012/02/parallaxpoc-mapping-and-no-tangent.html\n  THREE.ParallaxShader = {\n    // Ordered from fastest to best quality.\n    modes: {\n      none: 'NO_PARALLAX',\n      basic: 'USE_BASIC_PARALLAX',\n      steep: 'USE_STEEP_PARALLAX',\n      occlusion: 'USE_OCLUSION_PARALLAX',\n      // a.k.a. POM\n      relief: 'USE_RELIEF_PARALLAX'\n    },\n    uniforms: {\n      \"bumpMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"map\": {\n        type: \"t\",\n        value: null\n      },\n      \"parallaxScale\": {\n        type: \"f\",\n        value: null\n      },\n      \"parallaxMinLayers\": {\n        type: \"f\",\n        value: null\n      },\n      \"parallaxMaxLayers\": {\n        type: \"f\",\n        value: null\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"void main() {\", \"vUv = uv;\", \"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\", \"vViewPosition = -mvPosition.xyz;\", \"vNormal = normalize( normalMatrix * normal );\", \"gl_Position = projectionMatrix * mvPosition;\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D bumpMap;\", \"uniform sampler2D map;\", \"uniform float parallaxScale;\", \"uniform float parallaxMinLayers;\", \"uniform float parallaxMaxLayers;\", \"varying vec2 vUv;\", \"varying vec3 vViewPosition;\", \"varying vec3 vNormal;\", \"#ifdef USE_BASIC_PARALLAX\", \"vec2 parallaxMap( in vec3 V ) {\", \"float initialHeight = texture2D( bumpMap, vUv ).r;\", // No Offset Limitting: messy, floating output at grazing angles.\n    //\"vec2 texCoordOffset = parallaxScale * V.xy / V.z * initialHeight;\",\n    // Offset Limiting\n    \"vec2 texCoordOffset = parallaxScale * V.xy * initialHeight;\", \"return vUv - texCoordOffset;\", \"}\", \"#else\", \"vec2 parallaxMap( in vec3 V ) {\", // Determine number of layers from angle between V and N\n    \"float numLayers = mix( parallaxMaxLayers, parallaxMinLayers, abs( dot( vec3( 0.0, 0.0, 1.0 ), V ) ) );\", \"float layerHeight = 1.0 / numLayers;\", \"float currentLayerHeight = 0.0;\", // Shift of texture coordinates for each iteration\n    \"vec2 dtex = parallaxScale * V.xy / V.z / numLayers;\", \"vec2 currentTextureCoords = vUv;\", \"float heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\", // while ( heightFromTexture > currentLayerHeight )\n    // Infinite loops are not well supported. Do a \"large\" finite\n    // loop, but not too large, as it slows down some compilers.\n    \"for ( int i = 0; i < 30; i += 1 ) {\", \"if ( heightFromTexture <= currentLayerHeight ) {\", \"break;\", \"}\", \"currentLayerHeight += layerHeight;\", // Shift texture coordinates along vector V\n    \"currentTextureCoords -= dtex;\", \"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\", \"}\", \"#ifdef USE_STEEP_PARALLAX\", \"return currentTextureCoords;\", \"#elif defined( USE_RELIEF_PARALLAX )\", \"vec2 deltaTexCoord = dtex / 2.0;\", \"float deltaHeight = layerHeight / 2.0;\", // Return to the mid point of previous layer\n    \"currentTextureCoords += deltaTexCoord;\", \"currentLayerHeight -= deltaHeight;\", // Binary search to increase precision of Steep Parallax Mapping\n    \"const int numSearches = 5;\", \"for ( int i = 0; i < numSearches; i += 1 ) {\", \"deltaTexCoord /= 2.0;\", \"deltaHeight /= 2.0;\", \"heightFromTexture = texture2D( bumpMap, currentTextureCoords ).r;\", // Shift along or against vector V\n    \"if( heightFromTexture > currentLayerHeight ) {\", // Below the surface\n    \"currentTextureCoords -= deltaTexCoord;\", \"currentLayerHeight += deltaHeight;\", \"} else {\", // above the surface\n    \"currentTextureCoords += deltaTexCoord;\", \"currentLayerHeight -= deltaHeight;\", \"}\", \"}\", \"return currentTextureCoords;\", \"#elif defined( USE_OCLUSION_PARALLAX )\", \"vec2 prevTCoords = currentTextureCoords + dtex;\", // Heights for linear interpolation\n    \"float nextH = heightFromTexture - currentLayerHeight;\", \"float prevH = texture2D( bumpMap, prevTCoords ).r - currentLayerHeight + layerHeight;\", // Proportions for linear interpolation\n    \"float weight = nextH / ( nextH - prevH );\", // Interpolation of texture coordinates\n    \"return prevTCoords * weight + currentTextureCoords * ( 1.0 - weight );\", \"#else\", // NO_PARALLAX\n    \"return vUv;\", \"#endif\", \"}\", \"#endif\", \"vec2 perturbUv( vec3 surfPosition, vec3 surfNormal, vec3 viewPosition ) {\", \"vec2 texDx = dFdx( vUv );\", \"vec2 texDy = dFdy( vUv );\", \"vec3 vSigmaX = dFdx( surfPosition );\", \"vec3 vSigmaY = dFdy( surfPosition );\", \"vec3 vR1 = cross( vSigmaY, surfNormal );\", \"vec3 vR2 = cross( surfNormal, vSigmaX );\", \"float fDet = dot( vSigmaX, vR1 );\", \"vec2 vProjVscr = ( 1.0 / fDet ) * vec2( dot( vR1, viewPosition ), dot( vR2, viewPosition ) );\", \"vec3 vProjVtex;\", \"vProjVtex.xy = texDx * vProjVscr.x + texDy * vProjVscr.y;\", \"vProjVtex.z = dot( surfNormal, viewPosition );\", \"return parallaxMap( vProjVtex );\", \"}\", \"void main() {\", \"vec2 mapUv = perturbUv( -vViewPosition, normalize( vNormal ), normalize( vViewPosition ) );\", \"gl_FragColor = texture2D( map, mapUv );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author supereggbert / http://www.paulbrunt.co.uk/\n   * @author julianwa / https://github.com/julianwa\n   */\n  THREE.RenderableObject = function () {\n    this.id = 0;\n    this.object = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableFace = function () {\n    this.id = 0;\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n    this.v3 = new THREE.RenderableVertex();\n    this.normalModel = new THREE.Vector3();\n    this.vertexNormalsModel = [new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3()];\n    this.vertexNormalsLength = 0;\n    this.color = new THREE.Color();\n    this.material = null;\n    this.uvs = [new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2()];\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableVertex = function () {\n    this.position = new THREE.Vector3();\n    this.positionWorld = new THREE.Vector3();\n    this.positionScreen = new THREE.Vector4();\n    this.visible = true;\n  };\n\n  THREE.RenderableVertex.prototype.copy = function (vertex) {\n    this.positionWorld.copy(vertex.positionWorld);\n    this.positionScreen.copy(vertex.positionScreen);\n  }; //\n\n\n  THREE.RenderableLine = function () {\n    this.id = 0;\n    this.v1 = new THREE.RenderableVertex();\n    this.v2 = new THREE.RenderableVertex();\n    this.vertexColors = [new THREE.Color(), new THREE.Color()];\n    this.material = null;\n    this.z = 0;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.RenderableSprite = function () {\n    this.id = 0;\n    this.object = null;\n    this.x = 0;\n    this.y = 0;\n    this.z = 0;\n    this.rotation = 0;\n    this.scale = new THREE.Vector2();\n    this.material = null;\n    this.renderOrder = 0;\n  }; //\n\n\n  THREE.Projector = function () {\n    var _object,\n        _objectCount,\n        _objectPool = [],\n        _objectPoolLength = 0,\n        _vertex,\n        _vertexCount,\n        _vertexPool = [],\n        _vertexPoolLength = 0,\n        _face,\n        _faceCount,\n        _facePool = [],\n        _facePoolLength = 0,\n        _line,\n        _lineCount,\n        _linePool = [],\n        _linePoolLength = 0,\n        _sprite,\n        _spriteCount,\n        _spritePool = [],\n        _spritePoolLength = 0,\n        _renderData = {\n      objects: [],\n      lights: [],\n      elements: []\n    },\n        _vector3 = new THREE.Vector3(),\n        _vector4 = new THREE.Vector4(),\n        _clipBox = new THREE.Box3(new THREE.Vector3(-1, -1, -1), new THREE.Vector3(1, 1, 1)),\n        _boundingBox = new THREE.Box3(),\n        _points3 = new Array(3),\n        _points4 = new Array(4),\n        _viewMatrix = new THREE.Matrix4(),\n        _viewProjectionMatrix = new THREE.Matrix4(),\n        _modelMatrix,\n        _modelViewProjectionMatrix = new THREE.Matrix4(),\n        _normalMatrix = new THREE.Matrix3(),\n        _frustum = new THREE.Frustum(),\n        _clippedVertex1PositionScreen = new THREE.Vector4(),\n        _clippedVertex2PositionScreen = new THREE.Vector4(); //\n\n\n    this.projectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .projectVector() is now vector.project().');\n      vector.project(camera);\n    };\n\n    this.unprojectVector = function (vector, camera) {\n      console.warn('THREE.Projector: .unprojectVector() is now vector.unproject().');\n      vector.unproject(camera);\n    };\n\n    this.pickingRay = function (vector, camera) {\n      console.error('THREE.Projector: .pickingRay() is now raycaster.setFromCamera().');\n    }; //\n\n\n    var RenderList = function RenderList() {\n      var normals = [];\n      var uvs = [];\n      var object = null;\n      var material = null;\n      var normalMatrix = new THREE.Matrix3();\n\n      function setObject(value) {\n        object = value;\n        material = object.material;\n        normalMatrix.getNormalMatrix(object.matrixWorld);\n        normals.length = 0;\n        uvs.length = 0;\n      }\n\n      function projectVertex(vertex) {\n        var position = vertex.position;\n        var positionWorld = vertex.positionWorld;\n        var positionScreen = vertex.positionScreen;\n        positionWorld.copy(position).applyMatrix4(_modelMatrix);\n        positionScreen.copy(positionWorld).applyMatrix4(_viewProjectionMatrix);\n        var invW = 1 / positionScreen.w;\n        positionScreen.x *= invW;\n        positionScreen.y *= invW;\n        positionScreen.z *= invW;\n        vertex.visible = positionScreen.x >= -1 && positionScreen.x <= 1 && positionScreen.y >= -1 && positionScreen.y <= 1 && positionScreen.z >= -1 && positionScreen.z <= 1;\n      }\n\n      function pushVertex(x, y, z) {\n        _vertex = getNextVertexInPool();\n\n        _vertex.position.set(x, y, z);\n\n        projectVertex(_vertex);\n      }\n\n      function pushNormal(x, y, z) {\n        normals.push(x, y, z);\n      }\n\n      function pushUv(x, y) {\n        uvs.push(x, y);\n      }\n\n      function checkTriangleVisibility(v1, v2, v3) {\n        if (v1.visible === true || v2.visible === true || v3.visible === true) return true;\n        _points3[0] = v1.positionScreen;\n        _points3[1] = v2.positionScreen;\n        _points3[2] = v3.positionScreen;\n        return _clipBox.intersectsBox(_boundingBox.setFromPoints(_points3));\n      }\n\n      function checkBackfaceCulling(v1, v2, v3) {\n        return (v3.positionScreen.x - v1.positionScreen.x) * (v2.positionScreen.y - v1.positionScreen.y) - (v3.positionScreen.y - v1.positionScreen.y) * (v2.positionScreen.x - v1.positionScreen.x) < 0;\n      }\n\n      function pushLine(a, b) {\n        var v1 = _vertexPool[a];\n        var v2 = _vertexPool[b];\n        _line = getNextLineInPool();\n        _line.id = object.id;\n\n        _line.v1.copy(v1);\n\n        _line.v2.copy(v2);\n\n        _line.z = (v1.positionScreen.z + v2.positionScreen.z) / 2;\n        _line.renderOrder = object.renderOrder;\n        _line.material = object.material;\n\n        _renderData.elements.push(_line);\n      }\n\n      function pushTriangle(a, b, c) {\n        var v1 = _vertexPool[a];\n        var v2 = _vertexPool[b];\n        var v3 = _vertexPool[c];\n        if (checkTriangleVisibility(v1, v2, v3) === false) return;\n\n        if (material.side === THREE.DoubleSide || checkBackfaceCulling(v1, v2, v3) === true) {\n          _face = getNextFaceInPool();\n          _face.id = object.id;\n\n          _face.v1.copy(v1);\n\n          _face.v2.copy(v2);\n\n          _face.v3.copy(v3);\n\n          _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n          _face.renderOrder = object.renderOrder; // use first vertex normal as face normal\n\n          _face.normalModel.fromArray(normals, a * 3);\n\n          _face.normalModel.applyMatrix3(normalMatrix).normalize();\n\n          for (var i = 0; i < 3; i++) {\n            var normal = _face.vertexNormalsModel[i];\n            normal.fromArray(normals, arguments[i] * 3);\n            normal.applyMatrix3(normalMatrix).normalize();\n            var uv = _face.uvs[i];\n            uv.fromArray(uvs, arguments[i] * 2);\n          }\n\n          _face.vertexNormalsLength = 3;\n          _face.material = object.material;\n\n          _renderData.elements.push(_face);\n        }\n      }\n\n      return {\n        setObject: setObject,\n        projectVertex: projectVertex,\n        checkTriangleVisibility: checkTriangleVisibility,\n        checkBackfaceCulling: checkBackfaceCulling,\n        pushVertex: pushVertex,\n        pushNormal: pushNormal,\n        pushUv: pushUv,\n        pushLine: pushLine,\n        pushTriangle: pushTriangle\n      };\n    };\n\n    var renderList = new RenderList();\n\n    this.projectScene = function (scene, camera, sortObjects, sortElements) {\n      _faceCount = 0;\n      _lineCount = 0;\n      _spriteCount = 0;\n      _renderData.elements.length = 0;\n      if (scene.autoUpdate === true) scene.updateMatrixWorld();\n      if (camera.parent === null) camera.updateMatrixWorld();\n\n      _viewMatrix.copy(camera.matrixWorldInverse.getInverse(camera.matrixWorld));\n\n      _viewProjectionMatrix.multiplyMatrices(camera.projectionMatrix, _viewMatrix);\n\n      _frustum.setFromMatrix(_viewProjectionMatrix); //\n\n\n      _objectCount = 0;\n      _renderData.objects.length = 0;\n      _renderData.lights.length = 0;\n      scene.traverseVisible(function (object) {\n        if (object instanceof THREE.Light) {\n          _renderData.lights.push(object);\n        } else if (object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Sprite) {\n          var material = object.material;\n          if (material.visible === false) return;\n\n          if (object.frustumCulled === false || _frustum.intersectsObject(object) === true) {\n            _object = getNextObjectInPool();\n            _object.id = object.id;\n            _object.object = object;\n\n            _vector3.setFromMatrixPosition(object.matrixWorld);\n\n            _vector3.applyProjection(_viewProjectionMatrix);\n\n            _object.z = _vector3.z;\n            _object.renderOrder = object.renderOrder;\n\n            _renderData.objects.push(_object);\n          }\n        }\n      });\n\n      if (sortObjects === true) {\n        _renderData.objects.sort(painterSort);\n      } //\n\n\n      for (var o = 0, ol = _renderData.objects.length; o < ol; o++) {\n        var object = _renderData.objects[o].object;\n        var geometry = object.geometry;\n        renderList.setObject(object);\n        _modelMatrix = object.matrixWorld;\n        _vertexCount = 0;\n\n        if (object instanceof THREE.Mesh) {\n          if (geometry instanceof THREE.BufferGeometry) {\n            var attributes = geometry.attributes;\n            var groups = geometry.groups;\n            if (attributes.position === undefined) continue;\n            var positions = attributes.position.array;\n\n            for (var i = 0, l = positions.length; i < l; i += 3) {\n              renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n            }\n\n            if (attributes.normal !== undefined) {\n              var normals = attributes.normal.array;\n\n              for (var i = 0, l = normals.length; i < l; i += 3) {\n                renderList.pushNormal(normals[i], normals[i + 1], normals[i + 2]);\n              }\n            }\n\n            if (attributes.uv !== undefined) {\n              var uvs = attributes.uv.array;\n\n              for (var i = 0, l = uvs.length; i < l; i += 2) {\n                renderList.pushUv(uvs[i], uvs[i + 1]);\n              }\n            }\n\n            if (geometry.index !== null) {\n              var indices = geometry.index.array;\n\n              if (groups.length > 0) {\n                for (var o = 0; o < groups.length; o++) {\n                  var group = groups[o];\n\n                  for (var i = group.start, l = group.start + group.count; i < l; i += 3) {\n                    renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                  }\n                }\n              } else {\n                for (var i = 0, l = indices.length; i < l; i += 3) {\n                  renderList.pushTriangle(indices[i], indices[i + 1], indices[i + 2]);\n                }\n              }\n            } else {\n              for (var i = 0, l = positions.length / 3; i < l; i += 3) {\n                renderList.pushTriangle(i, i + 1, i + 2);\n              }\n            }\n          } else if (geometry instanceof THREE.Geometry) {\n            var vertices = geometry.vertices;\n            var faces = geometry.faces;\n            var faceVertexUvs = geometry.faceVertexUvs[0];\n\n            _normalMatrix.getNormalMatrix(_modelMatrix);\n\n            var material = object.material;\n            var isFaceMaterial = material instanceof THREE.MultiMaterial;\n            var objectMaterials = isFaceMaterial === true ? object.material : null;\n\n            for (var v = 0, vl = vertices.length; v < vl; v++) {\n              var vertex = vertices[v];\n\n              _vector3.copy(vertex);\n\n              if (material.morphTargets === true) {\n                var morphTargets = geometry.morphTargets;\n                var morphInfluences = object.morphTargetInfluences;\n\n                for (var t = 0, tl = morphTargets.length; t < tl; t++) {\n                  var influence = morphInfluences[t];\n                  if (influence === 0) continue;\n                  var target = morphTargets[t];\n                  var targetVertex = target.vertices[v];\n                  _vector3.x += (targetVertex.x - vertex.x) * influence;\n                  _vector3.y += (targetVertex.y - vertex.y) * influence;\n                  _vector3.z += (targetVertex.z - vertex.z) * influence;\n                }\n              }\n\n              renderList.pushVertex(_vector3.x, _vector3.y, _vector3.z);\n            }\n\n            for (var f = 0, fl = faces.length; f < fl; f++) {\n              var face = faces[f];\n              material = isFaceMaterial === true ? objectMaterials.materials[face.materialIndex] : object.material;\n              if (material === undefined) continue;\n              var side = material.side;\n              var v1 = _vertexPool[face.a];\n              var v2 = _vertexPool[face.b];\n              var v3 = _vertexPool[face.c];\n              if (renderList.checkTriangleVisibility(v1, v2, v3) === false) continue;\n              var visible = renderList.checkBackfaceCulling(v1, v2, v3);\n\n              if (side !== THREE.DoubleSide) {\n                if (side === THREE.FrontSide && visible === false) continue;\n                if (side === THREE.BackSide && visible === true) continue;\n              }\n\n              _face = getNextFaceInPool();\n              _face.id = object.id;\n\n              _face.v1.copy(v1);\n\n              _face.v2.copy(v2);\n\n              _face.v3.copy(v3);\n\n              _face.normalModel.copy(face.normal);\n\n              if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                _face.normalModel.negate();\n              }\n\n              _face.normalModel.applyMatrix3(_normalMatrix).normalize();\n\n              var faceVertexNormals = face.vertexNormals;\n\n              for (var n = 0, nl = Math.min(faceVertexNormals.length, 3); n < nl; n++) {\n                var normalModel = _face.vertexNormalsModel[n];\n                normalModel.copy(faceVertexNormals[n]);\n\n                if (visible === false && (side === THREE.BackSide || side === THREE.DoubleSide)) {\n                  normalModel.negate();\n                }\n\n                normalModel.applyMatrix3(_normalMatrix).normalize();\n              }\n\n              _face.vertexNormalsLength = faceVertexNormals.length;\n              var vertexUvs = faceVertexUvs[f];\n\n              if (vertexUvs !== undefined) {\n                for (var u = 0; u < 3; u++) {\n                  _face.uvs[u].copy(vertexUvs[u]);\n                }\n              }\n\n              _face.color = face.color;\n              _face.material = material;\n              _face.z = (v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z) / 3;\n              _face.renderOrder = object.renderOrder;\n\n              _renderData.elements.push(_face);\n            }\n          }\n        } else if (object instanceof THREE.Line) {\n          if (geometry instanceof THREE.BufferGeometry) {\n            var attributes = geometry.attributes;\n\n            if (attributes.position !== undefined) {\n              var positions = attributes.position.array;\n\n              for (var i = 0, l = positions.length; i < l; i += 3) {\n                renderList.pushVertex(positions[i], positions[i + 1], positions[i + 2]);\n              }\n\n              if (geometry.index !== null) {\n                var indices = geometry.index.array;\n\n                for (var i = 0, l = indices.length; i < l; i += 2) {\n                  renderList.pushLine(indices[i], indices[i + 1]);\n                }\n              } else {\n                var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n                for (var i = 0, l = positions.length / 3 - 1; i < l; i += step) {\n                  renderList.pushLine(i, i + 1);\n                }\n              }\n            }\n          } else if (geometry instanceof THREE.Geometry) {\n            _modelViewProjectionMatrix.multiplyMatrices(_viewProjectionMatrix, _modelMatrix);\n\n            var vertices = object.geometry.vertices;\n            if (vertices.length === 0) continue;\n            v1 = getNextVertexInPool();\n            v1.positionScreen.copy(vertices[0]).applyMatrix4(_modelViewProjectionMatrix);\n            var step = object instanceof THREE.LineSegments ? 2 : 1;\n\n            for (var v = 1, vl = vertices.length; v < vl; v++) {\n              v1 = getNextVertexInPool();\n              v1.positionScreen.copy(vertices[v]).applyMatrix4(_modelViewProjectionMatrix);\n              if ((v + 1) % step > 0) continue;\n              v2 = _vertexPool[_vertexCount - 2];\n\n              _clippedVertex1PositionScreen.copy(v1.positionScreen);\n\n              _clippedVertex2PositionScreen.copy(v2.positionScreen);\n\n              if (clipLine(_clippedVertex1PositionScreen, _clippedVertex2PositionScreen) === true) {\n                // Perform the perspective divide\n                _clippedVertex1PositionScreen.multiplyScalar(1 / _clippedVertex1PositionScreen.w);\n\n                _clippedVertex2PositionScreen.multiplyScalar(1 / _clippedVertex2PositionScreen.w);\n\n                _line = getNextLineInPool();\n                _line.id = object.id;\n\n                _line.v1.positionScreen.copy(_clippedVertex1PositionScreen);\n\n                _line.v2.positionScreen.copy(_clippedVertex2PositionScreen);\n\n                _line.z = Math.max(_clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z);\n                _line.renderOrder = object.renderOrder;\n                _line.material = object.material;\n\n                if (object.material.vertexColors === THREE.VertexColors) {\n                  _line.vertexColors[0].copy(object.geometry.colors[v]);\n\n                  _line.vertexColors[1].copy(object.geometry.colors[v - 1]);\n                }\n\n                _renderData.elements.push(_line);\n              }\n            }\n          }\n        } else if (object instanceof THREE.Sprite) {\n          _vector4.set(_modelMatrix.elements[12], _modelMatrix.elements[13], _modelMatrix.elements[14], 1);\n\n          _vector4.applyMatrix4(_viewProjectionMatrix);\n\n          var invW = 1 / _vector4.w;\n          _vector4.z *= invW;\n\n          if (_vector4.z >= -1 && _vector4.z <= 1) {\n            _sprite = getNextSpriteInPool();\n            _sprite.id = object.id;\n            _sprite.x = _vector4.x * invW;\n            _sprite.y = _vector4.y * invW;\n            _sprite.z = _vector4.z;\n            _sprite.renderOrder = object.renderOrder;\n            _sprite.object = object;\n            _sprite.rotation = object.rotation;\n            _sprite.scale.x = object.scale.x * Math.abs(_sprite.x - (_vector4.x + camera.projectionMatrix.elements[0]) / (_vector4.w + camera.projectionMatrix.elements[12]));\n            _sprite.scale.y = object.scale.y * Math.abs(_sprite.y - (_vector4.y + camera.projectionMatrix.elements[5]) / (_vector4.w + camera.projectionMatrix.elements[13]));\n            _sprite.material = object.material;\n\n            _renderData.elements.push(_sprite);\n          }\n        }\n      }\n\n      if (sortElements === true) {\n        _renderData.elements.sort(painterSort);\n      }\n\n      return _renderData;\n    }; // Pools\n\n\n    function getNextObjectInPool() {\n      if (_objectCount === _objectPoolLength) {\n        var object = new THREE.RenderableObject();\n\n        _objectPool.push(object);\n\n        _objectPoolLength++;\n        _objectCount++;\n        return object;\n      }\n\n      return _objectPool[_objectCount++];\n    }\n\n    function getNextVertexInPool() {\n      if (_vertexCount === _vertexPoolLength) {\n        var vertex = new THREE.RenderableVertex();\n\n        _vertexPool.push(vertex);\n\n        _vertexPoolLength++;\n        _vertexCount++;\n        return vertex;\n      }\n\n      return _vertexPool[_vertexCount++];\n    }\n\n    function getNextFaceInPool() {\n      if (_faceCount === _facePoolLength) {\n        var face = new THREE.RenderableFace();\n\n        _facePool.push(face);\n\n        _facePoolLength++;\n        _faceCount++;\n        return face;\n      }\n\n      return _facePool[_faceCount++];\n    }\n\n    function getNextLineInPool() {\n      if (_lineCount === _linePoolLength) {\n        var line = new THREE.RenderableLine();\n\n        _linePool.push(line);\n\n        _linePoolLength++;\n        _lineCount++;\n        return line;\n      }\n\n      return _linePool[_lineCount++];\n    }\n\n    function getNextSpriteInPool() {\n      if (_spriteCount === _spritePoolLength) {\n        var sprite = new THREE.RenderableSprite();\n\n        _spritePool.push(sprite);\n\n        _spritePoolLength++;\n        _spriteCount++;\n        return sprite;\n      }\n\n      return _spritePool[_spriteCount++];\n    } //\n\n\n    function painterSort(a, b) {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder;\n      } else if (a.z !== b.z) {\n        return b.z - a.z;\n      } else if (a.id !== b.id) {\n        return a.id - b.id;\n      } else {\n        return 0;\n      }\n    }\n\n    function clipLine(s1, s2) {\n      var alpha1 = 0,\n          alpha2 = 1,\n          // Calculate the boundary coordinate of each vertex for the near and far clip planes,\n      // Z = -1 and Z = +1, respectively.\n      bc1near = s1.z + s1.w,\n          bc2near = s2.z + s2.w,\n          bc1far = -s1.z + s1.w,\n          bc2far = -s2.z + s2.w;\n\n      if (bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0) {\n        // Both vertices lie entirely within all clip planes.\n        return true;\n      } else if (bc1near < 0 && bc2near < 0 || bc1far < 0 && bc2far < 0) {\n        // Both vertices lie entirely outside one of the clip planes.\n        return false;\n      } else {\n        // The line segment spans at least one clip plane.\n        if (bc1near < 0) {\n          // v1 lies outside the near plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1near / (bc1near - bc2near));\n        } else if (bc2near < 0) {\n          // v2 lies outside the near plane, v1 inside\n          alpha2 = Math.min(alpha2, bc1near / (bc1near - bc2near));\n        }\n\n        if (bc1far < 0) {\n          // v1 lies outside the far plane, v2 inside\n          alpha1 = Math.max(alpha1, bc1far / (bc1far - bc2far));\n        } else if (bc2far < 0) {\n          // v2 lies outside the far plane, v2 inside\n          alpha2 = Math.min(alpha2, bc1far / (bc1far - bc2far));\n        }\n\n        if (alpha2 < alpha1) {\n          // The line segment spans two boundaries, but is outside both of them.\n          // (This can't happen when we're only clipping against just near/far but good\n          //  to leave the check here for future usage if other clip planes are added.)\n          return false;\n        } else {\n          // Update the s1 and s2 vertices to match the clipped line segment.\n          s1.lerp(s2, alpha1);\n          s2.lerp(s1, 1 - alpha2);\n          return true;\n        }\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author felixturner / http://airtight.cc/\n   *\n   * RGB Shift Shader\n   * Shifts red and blue channels from center in opposite directions\n   * Ported from http://kriss.cx/tom/2009/05/rgb-shift/\n   * by Tom Butterworth / http://kriss.cx/tom/\n   *\n   * amount: shift distance (1 is width of input)\n   * angle: shift angle in radians\n   */\n  THREE.RGBShiftShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"amount\": {\n        type: \"f\",\n        value: 0.005\n      },\n      \"angle\": {\n        type: \"f\",\n        value: 0.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float amount;\", \"uniform float angle;\", \"varying vec2 vUv;\", \"void main() {\", \"vec2 offset = amount * vec2( cos(angle), sin(angle));\", \"vec4 cr = texture2D(tDiffuse, vUv + offset);\", \"vec4 cga = texture2D(tDiffuse, vUv);\", \"vec4 cb = texture2D(tDiffuse, vUv - offset);\", \"gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.RenderPass = function (scene, camera, overrideMaterial, clearColor, clearAlpha) {\n    this.scene = scene;\n    this.camera = camera;\n    this.overrideMaterial = overrideMaterial;\n    this.clearColor = clearColor;\n    this.clearAlpha = clearAlpha !== undefined ? clearAlpha : 1;\n    this.oldClearColor = new THREE.Color();\n    this.oldClearAlpha = 1;\n    this.enabled = true;\n    this.clear = true;\n    this.needsSwap = false;\n  };\n\n  THREE.RenderPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      this.scene.overrideMaterial = this.overrideMaterial;\n\n      if (this.clearColor) {\n        this.oldClearColor.copy(renderer.getClearColor());\n        this.oldClearAlpha = renderer.getClearAlpha();\n        renderer.setClearColor(this.clearColor, this.clearAlpha);\n      }\n\n      renderer.render(this.scene, this.camera, readBuffer, this.clear);\n\n      if (this.clearColor) {\n        renderer.setClearColor(this.oldClearColor, this.oldClearAlpha);\n      }\n\n      this.scene.overrideMaterial = null;\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Screen-space ambient occlusion shader\n   * - ported from\n   *   SSAO GLSL shader v1.2\n   *   assembled by Martins Upitis (martinsh) (http://devlog-martinsh.blogspot.com)\n   *   original technique is made by ArKano22 (http://www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)\n   * - modifications\n   * - modified to use RGBA packed depth texture (use clear color 1,1,1,1 for depth pass)\n   * - refactoring and optimizations\n   */\n  THREE.SSAOShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"tDepth\": {\n        type: \"t\",\n        value: null\n      },\n      \"size\": {\n        type: \"v2\",\n        value: new THREE.Vector2(512, 512)\n      },\n      \"cameraNear\": {\n        type: \"f\",\n        value: 1\n      },\n      \"cameraFar\": {\n        type: \"f\",\n        value: 100\n      },\n      \"onlyAO\": {\n        type: \"i\",\n        value: 0\n      },\n      \"aoClamp\": {\n        type: \"f\",\n        value: 0.5\n      },\n      \"lumInfluence\": {\n        type: \"f\",\n        value: 0.5\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float cameraNear;\", \"uniform float cameraFar;\", \"uniform bool onlyAO;\", // use only ambient occlusion pass?\n    \"uniform vec2 size;\", // texture width, height\n    \"uniform float aoClamp;\", // depth clamp - reduces haloing at screen edges\n    \"uniform float lumInfluence;\", // how much luminance affects occlusion\n    \"uniform sampler2D tDiffuse;\", \"uniform sampler2D tDepth;\", \"varying vec2 vUv;\", // \"#define PI 3.14159265\",\n    \"#define DL 2.399963229728653\", // PI * ( 3.0 - sqrt( 5.0 ) )\n    \"#define EULER 2.718281828459045\", // user variables\n    \"const int samples = 8;\", // ao sample count\n    \"const float radius = 5.0;\", // ao radius\n    \"const bool useNoise = false;\", // use noise instead of pattern for sample dithering\n    \"const float noiseAmount = 0.0003;\", // dithering amount\n    \"const float diffArea = 0.4;\", // self-shadowing reduction\n    \"const float gDisplace = 0.4;\", // gauss bell center\n    // RGBA depth\n    \"float unpackDepth( const in vec4 rgba_depth ) {\", \"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\", \"float depth = dot( rgba_depth, bit_shift );\", \"return depth;\", \"}\", // generating noise / pattern texture for dithering\n    \"vec2 rand( const vec2 coord ) {\", \"vec2 noise;\", \"if ( useNoise ) {\", \"float nx = dot ( coord, vec2( 12.9898, 78.233 ) );\", \"float ny = dot ( coord, vec2( 12.9898, 78.233 ) * 2.0 );\", \"noise = clamp( fract ( 43758.5453 * sin( vec2( nx, ny ) ) ), 0.0, 1.0 );\", \"} else {\", \"float ff = fract( 1.0 - coord.s * ( size.x / 2.0 ) );\", \"float gg = fract( coord.t * ( size.y / 2.0 ) );\", \"noise = vec2( 0.25, 0.75 ) * vec2( ff ) + vec2( 0.75, 0.25 ) * gg;\", \"}\", \"return ( noise * 2.0  - 1.0 ) * noiseAmount;\", \"}\", \"float readDepth( const in vec2 coord ) {\", \"float cameraFarPlusNear = cameraFar + cameraNear;\", \"float cameraFarMinusNear = cameraFar - cameraNear;\", \"float cameraCoef = 2.0 * cameraNear;\", // \"return ( 2.0 * cameraNear ) / ( cameraFar + cameraNear - unpackDepth( texture2D( tDepth, coord ) ) * ( cameraFar - cameraNear ) );\",\n    \"return cameraCoef / ( cameraFarPlusNear - unpackDepth( texture2D( tDepth, coord ) ) * cameraFarMinusNear );\", \"}\", \"float compareDepths( const in float depth1, const in float depth2, inout int far ) {\", \"float garea = 2.0;\", // gauss bell width\n    \"float diff = ( depth1 - depth2 ) * 100.0;\", // depth difference (0-100)\n    // reduce left bell width to avoid self-shadowing\n    \"if ( diff < gDisplace ) {\", \"garea = diffArea;\", \"} else {\", \"far = 1;\", \"}\", \"float dd = diff - gDisplace;\", \"float gauss = pow( EULER, -2.0 * dd * dd / ( garea * garea ) );\", \"return gauss;\", \"}\", \"float calcAO( float depth, float dw, float dh ) {\", \"float dd = radius - depth * radius;\", \"vec2 vv = vec2( dw, dh );\", \"vec2 coord1 = vUv + dd * vv;\", \"vec2 coord2 = vUv - dd * vv;\", \"float temp1 = 0.0;\", \"float temp2 = 0.0;\", \"int far = 0;\", \"temp1 = compareDepths( depth, readDepth( coord1 ), far );\", // DEPTH EXTRAPOLATION\n    \"if ( far > 0 ) {\", \"temp2 = compareDepths( readDepth( coord2 ), depth, far );\", \"temp1 += ( 1.0 - temp1 ) * temp2;\", \"}\", \"return temp1;\", \"}\", \"void main() {\", \"vec2 noise = rand( vUv );\", \"float depth = readDepth( vUv );\", \"float tt = clamp( depth, aoClamp, 1.0 );\", \"float w = ( 1.0 / size.x )  / tt + ( noise.x * ( 1.0 - noise.x ) );\", \"float h = ( 1.0 / size.y ) / tt + ( noise.y * ( 1.0 - noise.y ) );\", \"float ao = 0.0;\", \"float dz = 1.0 / float( samples );\", \"float z = 1.0 - dz / 2.0;\", \"float l = 0.0;\", \"for ( int i = 0; i <= samples; i ++ ) {\", \"float r = sqrt( 1.0 - z );\", \"float pw = cos( l ) * r;\", \"float ph = sin( l ) * r;\", \"ao += calcAO( depth, pw * w, ph * h );\", \"z = z - dz;\", \"l = l + DL;\", \"}\", \"ao /= float( samples );\", \"ao = 1.0 - ao;\", \"vec3 color = texture2D( tDiffuse, vUv ).rgb;\", \"vec3 lumcoeff = vec3( 0.299, 0.587, 0.114 );\", \"float lum = dot( color.rgb, lumcoeff );\", \"vec3 luminance = vec3( lum );\", \"vec3 final = vec3( color * mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\", // mix( color * ao, white, luminance )\n    \"if ( onlyAO ) {\", \"final = vec3( mix( vec3( ao ), vec3( 1.0 ), luminance * lumInfluence ) );\", // ambient occlusion only\n    \"}\", \"gl_FragColor = vec4( final, 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author mrdoob / http://mrdoob.com/\n   * @author zz85 / http://joshuakoo.com/\n   */\n  THREE.SVGLoader = function (manager) {\n    this.manager = manager !== undefined ? manager : THREE.DefaultLoadingManager;\n  };\n\n  THREE.SVGLoader.prototype = {\n    constructor: THREE.SVGLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var parser = new DOMParser();\n      var loader = new THREE.XHRLoader(scope.manager);\n      loader.load(url, function (svgString) {\n        var doc = parser.parseFromString(svgString, 'image/svg+xml'); // application/xml\n\n        onLoad(doc.documentElement);\n      }, onProgress, onError);\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.SavePass = function (renderTarget) {\n    if (THREE.CopyShader === undefined) console.error(\"THREE.SavePass relies on THREE.CopyShader\");\n    var shader = THREE.CopyShader;\n    this.textureID = \"tDiffuse\";\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderTarget = renderTarget;\n\n    if (this.renderTarget === undefined) {\n      this.renderTargetParameters = {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBFormat,\n        stencilBuffer: false\n      };\n      this.renderTarget = new THREE.WebGLRenderTarget(window.innerWidth, window.innerHeight, this.renderTargetParameters);\n    }\n\n    this.enabled = true;\n    this.needsSwap = false;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.SavePass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer;\n      }\n\n      this.quad.material = this.material;\n      renderer.render(this.scene, this.camera, this.renderTarget, this.clear);\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Sepia tone shader\n   * based on glfx.js sepia shader\n   * https://github.com/evanw/glfx.js\n   */\n  THREE.SepiaShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"amount\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float amount;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 color = texture2D( tDiffuse, vUv );\", \"vec3 c = color.rgb;\", \"color.r = dot( c, vec3( 1.0 - 0.607 * amount, 0.769 * amount, 0.189 * amount ) );\", \"color.g = dot( c, vec3( 0.349 * amount, 1.0 - 0.314 * amount, 0.168 * amount ) );\", \"color.b = dot( c, vec3( 0.272 * amount, 0.534 * amount, 1.0 - 0.869 * amount ) );\", \"gl_FragColor = vec4( min( vec3( 1.0 ), color.rgb ), color.a );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.ShaderPass = function (shader, textureID) {\n    this.textureID = textureID !== undefined ? textureID : \"tDiffuse\";\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.material = new THREE.ShaderMaterial({\n      defines: shader.defines || {},\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.renderToScreen = false;\n    this.enabled = true;\n    this.needsSwap = true;\n    this.clear = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.ShaderPass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      if (this.uniforms[this.textureID]) {\n        this.uniforms[this.textureID].value = readBuffer;\n      }\n\n      this.quad.material = this.material;\n\n      if (this.renderToScreen) {\n        renderer.render(this.scene, this.camera);\n      } else {\n        renderer.render(this.scene, this.camera, writeBuffer, this.clear);\n      }\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author flimshaw / http://charliehoey.com\n   *\n   * Technicolor Shader\n   * Simulates the look of the two-strip technicolor process popular in early 20th century films.\n   * More historical info here: http://www.widescreenmuseum.com/oldcolor/technicolor1.htm\n   * Demo here: http://charliehoey.com/technicolor_shader/shader_test.html\n   */\n  THREE.TechnicolorShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 tex = texture2D( tDiffuse, vec2( vUv.x, vUv.y ) );\", \"vec4 newTex = vec4(tex.r, (tex.g + tex.b) * .5, (tex.g + tex.b) * .5, 1.0);\", \"gl_FragColor = newTex;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   */\n  THREE.TexturePass = function (texture, opacity) {\n    if (THREE.CopyShader === undefined) console.error(\"THREE.TexturePass relies on THREE.CopyShader\");\n    var shader = THREE.CopyShader;\n    this.uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n    this.uniforms[\"opacity\"].value = opacity !== undefined ? opacity : 1.0;\n    this.uniforms[\"tDiffuse\"].value = texture;\n    this.material = new THREE.ShaderMaterial({\n      uniforms: this.uniforms,\n      vertexShader: shader.vertexShader,\n      fragmentShader: shader.fragmentShader\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this.camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    this.scene = new THREE.Scene();\n    this.quad = new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2), null);\n    this.scene.add(this.quad);\n  };\n\n  THREE.TexturePass.prototype = {\n    render: function render(renderer, writeBuffer, readBuffer, delta) {\n      this.quad.material = this.material;\n      renderer.render(this.scene, this.camera, readBuffer);\n    }\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author miibond\n   *\n   * Full-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf\n   */\n  THREE.ToneMapShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"averageLuminance\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"luminanceMap\": {\n        type: \"t\",\n        value: null\n      },\n      \"maxLuminance\": {\n        type: \"f\",\n        value: 16.0\n      },\n      \"middleGrey\": {\n        type: \"f\",\n        value: 0.6\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"uniform float middleGrey;\", \"uniform float maxLuminance;\", \"#ifdef ADAPTED_LUMINANCE\", \"uniform sampler2D luminanceMap;\", \"#else\", \"uniform float averageLuminance;\", \"#endif\", \"const vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);\", \"vec3 ToneMap( vec3 vColor ) {\", \"#ifdef ADAPTED_LUMINANCE\", // Get the calculated average luminance \n    \"float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\", \"#else\", \"float fLumAvg = averageLuminance;\", \"#endif\", // Calculate the luminance of the current pixel\n    \"float fLumPixel = dot(vColor, LUM_CONVERT);\", // Apply the modified operator (Eq. 4)\n    \"float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;\", \"float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\", \"return fLumCompressed * vColor;\", \"}\", \"void main() {\", \"vec4 texel = texture2D( tDiffuse, vUv );\", \"gl_FragColor = vec4( ToneMap( texel.xyz ), texel.w );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Triangle blur shader\n   * based on glfx.js triangle blur shader\n   * https://github.com/evanw/glfx.js\n   *\n   * A basic blur filter, which convolves the image with a\n   * pyramid filter. The pyramid filter is separable and is applied as two\n   * perpendicular triangle filters.\n   */\n  THREE.TriangleBlurShader = {\n    uniforms: {\n      \"texture\": {\n        type: \"t\",\n        value: null\n      },\n      \"delta\": {\n        type: \"v2\",\n        value: new THREE.Vector2(1, 1)\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"#define ITERATIONS 10.0\", \"uniform sampler2D texture;\", \"uniform vec2 delta;\", \"varying vec2 vUv;\", \"float random( vec3 scale, float seed ) {\", // use the fragment position for a different seed per-pixel\n    \"return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed );\", \"}\", \"void main() {\", \"vec4 color = vec4( 0.0 );\", \"float total = 0.0;\", // randomize the lookup values to hide the fixed number of samples\n    \"float offset = random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\", \"for ( float t = -ITERATIONS; t <= ITERATIONS; t ++ ) {\", \"float percent = ( t + offset - 0.5 ) / ITERATIONS;\", \"float weight = 1.0 - abs( percent );\", \"color += texture2D( texture, vUv + delta * percent ) * weight;\", \"total += weight;\", \"}\", \"gl_FragColor = color / total;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Unpack RGBA depth shader\n   * - show RGBA encoded depth as monochrome color\n   */\n  THREE.UnpackDepthRGBAShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"opacity\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float opacity;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", // RGBA depth\n    \"float unpackDepth( const in vec4 rgba_depth ) {\", \"const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\", \"float depth = dot( rgba_depth, bit_shift );\", \"return depth;\", \"}\", \"void main() {\", \"float depth = 1.0 - unpackDepth( texture2D( tDiffuse, vUv ) );\", \"gl_FragColor = opacity * vec4( vec3( depth ), 1.0 );\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author zz85 / http://www.lab4games.net/zz85/blog\n   *\n   * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n   * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n   *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n   *\n   * - 9 samples per pass\n   * - standard deviation 2.7\n   * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n   */\n  THREE.VerticalBlurShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"v\": {\n        type: \"f\",\n        value: 1.0 / 512.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float v;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Simple fake tilt-shift effect, modulating two pass Gaussian blur (see above) by vertical position\n   *\n   * - 9 samples per pass\n   * - standard deviation 2.7\n   * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n   * - \"r\" parameter control where \"focused\" horizontal line lies\n   */\n  THREE.VerticalTiltShiftShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"v\": {\n        type: \"f\",\n        value: 1.0 / 512.0\n      },\n      \"r\": {\n        type: \"f\",\n        value: 0.35\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform sampler2D tDiffuse;\", \"uniform float v;\", \"uniform float r;\", \"varying vec2 vUv;\", \"void main() {\", \"vec4 sum = vec4( 0.0 );\", \"float vv = v * abs( r - vUv.y );\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * vv ) ) * 0.051;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * vv ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * vv ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * vv ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * vv ) ) * 0.1531;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * vv ) ) * 0.12245;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * vv ) ) * 0.0918;\", \"sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * vv ) ) * 0.051;\", \"gl_FragColor = sum;\", \"}\"].join(\"\\n\")\n  };\n};","module.exports = function (THREE) {\n  /**\n   * @author alteredq / http://alteredqualia.com/\n   *\n   * Vignette shader\n   * based on PaintEffect postprocess from ro.me\n   * http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js\n   */\n  THREE.VignetteShader = {\n    uniforms: {\n      \"tDiffuse\": {\n        type: \"t\",\n        value: null\n      },\n      \"offset\": {\n        type: \"f\",\n        value: 1.0\n      },\n      \"darkness\": {\n        type: \"f\",\n        value: 1.0\n      }\n    },\n    vertexShader: [\"varying vec2 vUv;\", \"void main() {\", \"vUv = uv;\", \"gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\", \"}\"].join(\"\\n\"),\n    fragmentShader: [\"uniform float offset;\", \"uniform float darkness;\", \"uniform sampler2D tDiffuse;\", \"varying vec2 vUv;\", \"void main() {\", // Eskil's vignette\n    \"vec4 texel = texture2D( tDiffuse, vUv );\", \"vec2 uv = ( vUv - vec2( 0.5 ) ) * vec2( offset );\", \"gl_FragColor = vec4( mix( texel.rgb, vec3( 1.0 - darkness ), dot( uv, uv ) ), texel.a );\",\n    /*\n    // alternative version from glfx.js\n    // this one makes more \"dusty\" look (as opposed to \"burned\")\n    \t\"vec4 color = texture2D( tDiffuse, vUv );\",\n    \"float dist = distance( vUv, vec2( 0.5 ) );\",\n    \"color.rgb *= smoothstep( 0.8, offset * 0.799, dist *( darkness + offset ) );\",\n    \"gl_FragColor = color;\",\n    */\n    \"}\"].join(\"\\n\")\n  };\n};"],"sourceRoot":""}